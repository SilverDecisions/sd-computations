{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/build/idb.js","src/computations-engine.js","src/computations-manager.js","src/computations-utils.js","src/expressions-evaluator.js","src/index.js","src/jobs/configurations/league-table/league-table-job-parameters.js","src/jobs/configurations/league-table/league-table-job.js","src/jobs/configurations/league-table/steps/calculate-step.js","src/jobs/configurations/recompute/recompute-job-parameters.js","src/jobs/configurations/recompute/recompute-job.js","src/jobs/configurations/sensitivity-analysis/n-way/sensitivity-analysis-job-parameters.js","src/jobs/configurations/sensitivity-analysis/n-way/sensitivity-analysis-job.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/init-policies-step.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/prepare-variables-step.js","src/jobs/configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job-parameters.js","src/jobs/configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job.js","src/jobs/configurations/sensitivity-analysis/probabilistic/steps/compute-policy-stats-step.js","src/jobs/configurations/sensitivity-analysis/probabilistic/steps/prob-calculate-step.js","src/jobs/configurations/sensitivity-analysis/spider-plot/spider-plot-job-parameters.js","src/jobs/configurations/sensitivity-analysis/spider-plot/spider-plot-job.js","src/jobs/configurations/sensitivity-analysis/spider-plot/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/steps/prepare-variables-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job-parameters.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job.js","src/jobs/engine/batch/batch-step.js","src/jobs/engine/exceptions/extendable-error.js","src/jobs/engine/exceptions/index.js","src/jobs/engine/exceptions/job-computation-exception.js","src/jobs/engine/exceptions/job-data-invalid-exception.js","src/jobs/engine/exceptions/job-execution-already-running-exception.js","src/jobs/engine/exceptions/job-instance-already-complete-exception.js","src/jobs/engine/exceptions/job-interrupted-exception.js","src/jobs/engine/exceptions/job-parameters-invalid-exception.js","src/jobs/engine/exceptions/job-restart-exception.js","src/jobs/engine/execution-context.js","src/jobs/engine/index.js","src/jobs/engine/job-execution-flag.js","src/jobs/engine/job-execution-listener.js","src/jobs/engine/job-execution.js","src/jobs/engine/job-instance.js","src/jobs/engine/job-key-generator.js","src/jobs/engine/job-launcher.js","src/jobs/engine/job-parameter-definition.js","src/jobs/engine/job-parameters.js","src/jobs/engine/job-repository/idb-job-repository.js","src/jobs/engine/job-repository/job-repository.js","src/jobs/engine/job-repository/simple-job-repository.js","src/jobs/engine/job-repository/timeout-job-repository.js","src/jobs/engine/job-result.js","src/jobs/engine/job-status.js","src/jobs/engine/job.js","src/jobs/engine/simple-job.js","src/jobs/engine/step-execution-listener.js","src/jobs/engine/step-execution.js","src/jobs/engine/step.js","src/jobs/index.js","src/jobs/job-instance-manager.js","src/jobs/job-worker.js","src/jobs/jobs-manager.js","src/objective/objective-rules-manager.js","src/objective/rules/expected-value-maximization-rule.js","src/objective/rules/expected-value-minimization-rule.js","src/objective/rules/index.js","src/objective/rules/max-max-rule.js","src/objective/rules/max-min-rule.js","src/objective/rules/maxi-max-rule.js","src/objective/rules/maxi-min-rule.js","src/objective/rules/min-max-rule.js","src/objective/rules/min-min-rule.js","src/objective/rules/mini-max-rule.js","src/objective/rules/mini-min-rule.js","src/objective/rules/multi-criteria-rule.js","src/objective/rules/objective-rule.js","src/operations/flip-subtree.js","src/operations/operation.js","src/operations/operations-manager.js","src/policies/decision.js","src/policies/policies-collector.js","src/policies/policy.js","src/validation/mcdm-weight-value-validator.js","src/validation/payoff-value-validator.js","src/validation/probability-value-validator.js","src/validation/tree-validator.js","index.js"],"names":["require","r","e","n","t","o","i","f","c","u","a","Error","code","p","exports","call","length","1","module","global","factory","this","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","apply","then","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","replace","arr","Array","slice","callback","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","openDb","name","version","upgradeCallback","indexedDB","onupgradeneeded","event","deleteDb","define","amd","self","idb","_sdUtils","_sdModel","_computationsManager","ComputationsEngineConfig","custom","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","logLevel","Utils","deepExtend","_assertThisInitialized","ComputationsManagerConfig","ComputationsEngine","config","data","_this2","getGlobalObject","isWorker","jobsManger","registerJobExecutionListener","beforeJob","jobExecution","reply","getDTO","afterJob","queryableFunctions","runJob","jobName","jobParametersValues","dataDTO","DataModel","executeJob","jobExecutionId","execute","getErrorDTO","recompute","ruleName","evalCode","evalNumeric","objectiveRulesManager","setCurrentRuleByName","allRules","_checkValidityAndRecomputeObjective","onmessage","oEvent","hasOwnProperty","queryMethod","queryArguments","defaultReply","ComputationsManager","_get","setLogLevel","level","log","setLevel","message","TypeError","postMessage","queryMethodListener","queryMethodArguments","_sdExpressionEngine","_objectiveRulesManager","_treeValidator","_operationsManager","_jobsManager","_expressionsEvaluator","_jobInstanceManager","_policy","_mcdmWeightValueValidator","worker","delegateRecomputation","url","jobRepositoryType","clearRepository","setConfig","expressionEngine","ExpressionEngine","expressionsEvaluator","ExpressionsEvaluator","ObjectiveRulesManager","operationsManager","OperationsManager","JobsManager","workerUrl","repositoryType","treeValidator","TreeValidator","mcdmWeightValueValidator","McdmWeightValueValidator","setData","checkValidityAndRecomputeObjective","params","getCurrentRule","d","getData","updateFrom","updateDisplayValues","updateDefaultCriterion1Weight","defaultCriterion1Weight","validationResults","evalExpressions","weightValid","validate","multiCriteria","getRoots","root","vr","getAllNodesInSubtree","isValid","recomputeTree","currentRule","getJobByName","object","operationsForObject","every","jobParamsValues","resolvePromiseAfterJobIsLaunched","run","jobInstanceManagerConfig","_this3","je","JobInstanceManager","rules","getObjectiveRuleByName","isRuleName","reversePayoffs","tmp","weightLowerBound","flip","weightUpperBound","flipRule","Infinity","serialize","divide","_this4","policyToDisplay","displayPolicy","nodes","updateNodeDisplayValues","edges","updateEdgeDisplayValues","node","_this5","$DISPLAY_VALUE_NAMES","displayValue","getNodeDisplayValue","_this6","getEdgeDisplayValue","_this7","clearDisplayValues","displayPolicyForNode","policy","_this8","domain","DecisionNode","decision","Policy","getDecision","childEdge","childEdges","decisionValue","childNode","ChanceNode","TerminalNode","ComputationsUtils","min","max","extent","subtract","step","curr","add","toFloat","clearComputedValues","initScopes","debug","evalGlobalCode","clearTree","evalExpressionsForNode","clearExpressionScope","$codeDirty","$codeError","eval","expressionScope","edge","hasAssignmentExpression","payoff","parentNode","initScope","initScopeForNode","scope","probabilitySum","toNumber","hashEdges","invalidProb","rawPayoff","payoffIndex","path","isFieldValid","computedValue","evalPayoff","err","isHash","probability","warn","prob","compare","hash","parent","$parent","parentScope","cloneDeep","_computationsEngine","keys","key","enumerable","_jobParameters","_jobParameterDefinition","LeagueTableJobParameters","JobParameters","definitions","JobParameterDefinition","PARAMETER_TYPE","STRING","BOOLEAN","NUMBER_EXPRESSION","v","allVals","computeNumberExpression","values","id","guid","nameOfCriterion1","nameOfCriterion2","extendedPolicyDescription","defaultWeight","_simpleJob","_calculateStep","_leagueTableJobParameters","LeagueTableJob","jobRepository","initSteps","SimpleJob","calculateStep","CalculateStep","addStep","jobResult","jobParameters","withHeaders","headers","payoffNames","rows","row","policies","rowCells","toPolicyString","payoffs","dominatedBy","extendedDominatedBy","incratio","optimal","optimalForDefaultWeight","_step","_jobStatus","_policiesCollector","Step","stepExecution","getJobParameters","rule","treeRoot","PoliciesCollector","payoffCoeffs","b","map","sort","reduce","previousValue","currentValue","array","_prev$policies","prev","concat","_toConsumableArray","bestCost","bestCostRow","cmp","prev2NotDominated","filter","computeICER","lastLELower","lastLELowerDef","sub","exitStatus","JOB_STATUS","COMPLETED","Math","abs","RecomputeJobParameters","_recomputeJobParameters","_job","RecomputeJob","isRestartable","Job","execution","SensitivityAnalysisJobParameters","NUMBER","INTEGER","isUnique","failOnInvalidTree","_sensitivityAnalysisJobParameters","_prepareVariablesStep","_initPoliciesStep","SensitivityAnalysisJob","batchSize","PrepareVariablesStep","InitPoliciesStep","chunkSize","variableNames","roundVariables","policyIndex","variables","_variables","uniqueValues","Set","uniqueValuesNo","s","size","precision","notReadyVariablesIndexes","variableIndex","notReadyIndex","round","newReadyIndexes","uniqueVals","reverse","splice","stepExecutions","total","current","steps","getProgress","_batchStep","_jobComputationException","BatchStep","getJobExecutionContext","variableValues","executionContext","put","startIndex","item","clear","variableName","valid","errorData","JobComputationException","isString","_computationsUtils","sequence","cartesianProductOf","ProbabilisticSensitivityAnalysisJobParameters","_probabilisticSensitivityAnalysisJobParameters","_sensitivityAnalysisJob","_probCalculateStep","_computePolicyStatsStep","ProbabilisticSensitivityAnalysisJob","ProbCalculateStep","ComputePolicyStatsStep","numberOfRuns","ruleByName","payoffsPerPolicy","maximization","medians","median","standardDeviations","std","policyIsBestProbabilities","policyToHighestPayoffCount","policyToLowestPayoffCount","expectedValues","fill","runIndex","singleRunVariableValues","errors","evaluated","formula","variable","currentItemCount","updatePolicyStats","highestPayoff","lowestPayoff","bestPolicyIndexes","worstPolicyIndexes","zeroNum","equals","SpiderPlotJobParameters","_spiderPlotJobParameters","SpiderPlotJob","percentageRangeValues","percentageChangeRange","policiesCollector","defaultValues","getGlobalVariableNames","defVal","multiply","defaultPayoff","itemIndex","variableValue","_jobResult$data$rows","jobExecutionContext","variableExtents","extents","extentVariableValues","TornadoDiagramJobParameters","_tornadoDiagramJobParameters","TornadoDiagramJob","_jobInterruptedException","TOTAL_ITEM_COUNT_PROP","CURRENT_ITEM_COUNT_PROP","init","totalItemCount","setCurrentItemCount","getCurrentItemCount","setTotalItemCount","handleNextChunk","JobInterruptedException","postProcess","getTotalItemCount","checkJobExecutionFlags","terminateOnly","readNextChunk","chunk","processChunk","processedChunk","writeChunk","res","updateJobProgress","processItem","progress","jobInstance","updateJobExecutionProgress","checkExecutionFlags","ExtendableError","constructor","_extendableError","_jobDataInvalidException","_jobExecutionAlreadyRunningException","_jobInstanceAlreadyCompleteException","_jobParametersInvalidException","_jobRestartException","JobDataInvalidException","JobExecutionAlreadyRunningException","JobInstanceAlreadyCompleteException","JobParametersInvalidException","JobRestartException","ExecutionContext","context","dirty","clone","prevValue","filteredProperties","deepClone","cloneMethod","cloneDeepWith","cloneWith","assign","stack","indexOf","$ObjectWithIdAndEditableFields","findById","exceptions","_interopRequireWildcard","_executionContext","_exportNames","_jobExecution","_jobExecutionFlag","_jobExecutionListener","_jobInstance","_jobKeyGenerator","_jobLauncher","_stepExecution","_stepExecutionListener","STOP","JobExecutionListener","JobExecution","status","STARTING","UNKNOWN","startTime","createTime","Date","endTime","lastUpdated","failureExceptions","stepName","StepExecution","STOPPING","se","JobInstance","JobKeyGenerator","identifying","JobLauncher","jobWorker","dataModelSerializer","jobOrName","job","createJobParameters","createJobExecution","executionPromise","_execute","getLastJobExecution","lastExecution","jobParametersValidator","jobDataValidator","jobExecutionOrId","getJobExecutionById","info","DATE","COMPOSITE","typeOrNestedParametersDefinitions","minOccurs","maxOccurs","singleValueValidator","validator","nestedParameters","required","isArray","type","parsed","parseFloat","allValues","validateSingleValue","isDate","isInt","isNumber","isBoolean","isObject","nestedDef","_value","initDefinitions","initDefaultValues","def","defs","split","find","getDefinition","_jobRepository","_idb","_jobResult","IdbJobRepository","expressionsReviver","dbName","deleteDB","initDB","JobRepository","dbPromise","upgradeDB","jobExecutionsOS","unique","jobInstanceDao","ObjectStoreDao","jobExecutionDao","jobExecutionProgressDao","jobExecutionFlagDao","stepExecutionDao","jobResultDao","_","generateJobInstanceKey","remove","findJobExecutions","jobExecutions","removeJobExecution","getJobResultByInstance","removeJobResult","findStepExecutions","removeStepExecution","jobResultId","revive","dto","reviveJobResult","getByIndex","reviveJobInstance","_this9","stepExecutionsDTOs","saveStepExecutionsDTOS","flag","_this10","savedExecutions","stepExecutionDTO","_this11","fetchJobExecutionRelations","jobExecutionDTO","_this12","reviveJobExecution","jobExecutionDtoList","_this13","fetched","fetchJobExecutionsRelations","_this14","getAllByIndex","dtos","reviveStepExecution","_this15","fetchRelationsAndRevive","sorted","getTime","_this16","executions","latest","dataModel","loadFromDTO","reviveFromDTO","target","mergeWith","dtoValue","_this17","reviveExecutionContext","objValue","srcValue","source","stepDTO","_this18","getLastJobExecutionByInstance","jobExecutionDto","reviveResultData","JobResult","_this19","indexName","_this20","_this21","_this22","tx","_this23","_this24","_this25","iterateKeyCursor","jobByName","saveJobInstance","getJobInstance","generateKey","isRunning","ABANDONED","createJobInstance","_setNewState","createStateSnapshot","all","instanceAndExecutionContext","saveJobExecution","saveStepExecution","SimpleJobRepository","jobInstancesByKey","executionProgress","executionFlags","jobResults","forOwn","ji","ex","_simpleJobRepository","TimeoutJobRepository","valueToResolve","delay","setTimeout","createTimeoutPromise","STARTED","STOPPED","FAILED","EXECUTING","executionListeners","getJobParametersValidator","getJobDataValidator","updateStatus","getResult","updateProgress","listener","doExecute","saveJobResult","update","getJobExecutionFlag","JOB_EXECUTION_FLAG","stop","getJobResultByExecution","handleNextStep","lastExecutedStepExecution","_execution$failureExc","prevStep","prevStepExecution","stepIndex","handleStep","isStopping","getLastStepExecution","lastStepExecution","stepExecutionPartOfExistingJobExecution","currentStepExecution","shouldStart","createStepExecution","isCompleted","isRestart","skipExecution","skipOnRestartIfCompleted","containsKey","addStepExecution","_currentStepExecution","stepStatus","completedSteps","StepExecutionListener","beforeStep","open","determineJobStatus","afterStep","close","engine","_jobWorker","JobInstanceManagerConfig","onJobStarted","onJobCompleted","onJobFailed","onJobStopped","onJobTerminated","onProgress","updateInterval","jobInstanceOrExecution","checkProgress","lastJobExecution","terminated","getProgressPercents","lastUpdateTime","callbacksThisArg","deregisterJobExecutionListener","getProgressFromExecution","forceUpdate","terminate","JobWorker","defaultListener","onError","listeners","Worker","deserializer","fn","thisArg","sendQuery","ruleNames","_idbJobRepository","_recomputeJob","_probabilisticSensitivityAnalysisJob","_timeoutJobRepository","_tornadoDiagramJob","_leagueTableJob","_spiderPlotJob","JobsManagerConfig","jobExecutionListeners","afterJobExecutionPromiseResolves","jobInstancesToTerminate","useWorker","initWorker","initRepository","registerJobs","jobLauncher","serializeData","getJsonReviver","getJsonReplacer","getJobExecutionProgress","saveJobExecutionFlag","removeJobInstance","_arguments","argsDeserializer","addListener","onJobFatalError","sensitivityAnalysisJob","probabilisticSensitivityAnalysisJob","setBatchSize","registerJob","registerExecutionListener","l","promiseResolve","_rules","model","_minMaxRule","_maxMinRule","_minMinRule","_maxMaxRule","currentRuleName","flipPair","addRule","ExpectedValueMaximizationRule","ExpectedValueMinimizationRule","MaxiMinRule","MaxiMaxRule","MiniMinRule","MiniMaxRule","minMax","MinMaxRule","maxMin","MaxMinRule","addFlipPair","minMin","MinMinRule","maxMax","MaxMaxRule","flipped","setDefaultCriterion1Weight","decisionPolicy","trace","time","setPayoffIndex","setDecisionPolicy","computePayoff","computeOptimal","clearDecisionPolicy","computedBaseProbability","rule1","rule2","_objectiveRule","NAME","ObjectiveRule","probabilityToEnter","cValue","computedPayoff","basePayoff","_expectedValueMaximizationRule","_expectedValueMinimizationRule","_maxiMaxRule","_maxiMinRule","_miniMaxRule","_miniMinRule","_multiCriteriaRule","MultiCriteriaRule","bestChildPayoff","bestCount","worstChildPayoff","worstCount","optimalEdge","maxBy","minBy","criterion1Weight","aggregatedPayoff","childrenPayoff","selectedIndexes","bestChild","basePayoffs","childCombinedPayoff","baseProbability","sumweight","ep","div","computeCombinedPayoff","combinedPayoff","decisionNode","childrenPayoffs","best","makeDecision","_makeDecision","worstChild","childPayoff","modifyChanceProbability","fieldPath","computedBasePayoff","_operation","FlipSubtree","$NAME","Operation","isApplicable","grandchildrenNumber","grandchildrenEdgeLabels","childrenEdgeLabelsSet","child","has","trim","ge","rootClone","cloneSubtree","oldChildrenNumber","oldGrandChildrenNumber","childrenNumber","grandChildrenNumber","callbacksDisabled","childX","location","x","topY","y","stepY","removeNode","Point","addNode","j","grandChild","grandChildEdge","attachSubtree","divideGrandChildEdgeProbability","_normalizeProbabilitiesAfterFlip","_fireNodeAddedCallback","newProbabilitySum","parseInt","rest","_flipSubtree","operations","operationByName","registerOperation","operation","op","Decision","children","keyProperty","extended","indent","childrenRes","toDecisionString","_decision","optimalForRuleName","collect","decisions","nodeQueue","decisionNodes","shift","cd","prependId","ignoreId","additionalValidator","maxSafeInteger","Number","MAX_SAFE_INTEGER","PayoffValueValidator","ProbabilityValueValidator","_probabilityValueValidator","_payoffValueValidator","probabilityValueValidator","payoffValueValidator","validationResult","ValidationResult","validateNode","addError","setValueValidity","number","isNaN"],"mappings":"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","file":"sd-computations.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.idb = {}));\n}(this, function (exports) { 'use strict';\n\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  function openDb(name, version, upgradeCallback) {\n    var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n    var request = p.request;\n\n    if (request) {\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n    }\n\n    return p.then(function(db) {\n      return new DB(db);\n    });\n  }\n\n  function deleteDb(name) {\n    return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n  }\n\n  exports.openDb = openDb;\n  exports.deleteDb = deleteDb;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","import {Utils, log} from \"sd-utils\";\nimport {DataModel} from \"sd-model\";\nimport {ComputationsManager} from \"./computations-manager\";\nimport {ComputationsManagerConfig} from \"./computations-manager\";\n\n\n\nexport class ComputationsEngineConfig extends ComputationsManagerConfig{\n    logLevel = 'warn';\n    constructor(custom) {\n        super();\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/**\n * Entry point class for standalone computation workers\n */\nexport class ComputationsEngine extends ComputationsManager{\n\n    global = Utils.getGlobalObject();\n    isWorker = Utils.isWorker();\n\n    constructor(config, data){\n        super(config, data);\n\n        if(this.isWorker) {\n            this.jobsManger.registerJobExecutionListener({\n                beforeJob: (jobExecution)=>{\n                    this.reply('beforeJob', jobExecution.getDTO());\n                },\n\n                afterJob: (jobExecution)=>{\n                    this.reply('afterJob', jobExecution.getDTO());\n                }\n            });\n\n            var instance = this;\n            this.queryableFunctions = {\n                runJob: function(jobName, jobParametersValues, dataDTO){\n                    // console.log(jobName, jobParameters, serializedData);\n                    var data = new DataModel(dataDTO);\n                    instance.runJob(jobName, jobParametersValues, data);\n                },\n                executeJob: function(jobExecutionId){\n                    instance.jobsManger.execute(jobExecutionId).catch(e=>{\n                        instance.reply('jobFatalError', jobExecutionId, Utils.getErrorDTO(e));\n                    })\n                },\n                recompute: function(dataDTO, ruleName, evalCode, evalNumeric){\n                    if(ruleName){\n                        instance.objectiveRulesManager.setCurrentRuleByName(ruleName);\n                    }\n                    var allRules = !ruleName;\n                    var data = new DataModel(dataDTO);\n                    instance._checkValidityAndRecomputeObjective(data, allRules, evalCode, evalNumeric)\n                    this.reply('recomputed', data.getDTO());\n                }\n            };\n\n            global.onmessage = function(oEvent) {\n                if (oEvent.data instanceof Object && oEvent.data.hasOwnProperty('queryMethod') && oEvent.data.hasOwnProperty('queryArguments')) {\n                    instance.queryableFunctions[oEvent.data.queryMethod].apply(self, oEvent.data.queryArguments);\n                } else {\n                    instance.defaultReply(oEvent.data);\n                }\n            };\n        }\n    }\n\n\n\n    setConfig(config) {\n        super.setConfig(config);\n        if(this.config.logLevel){\n            this.setLogLevel(this.config.logLevel);\n        }\n\n        return this;\n    }\n\n    setLogLevel(level){\n        log.setLevel(level)\n    }\n\n    defaultReply(message) {\n        this.reply('test', message);\n    }\n\n    reply() {\n        if (arguments.length < 1) {\n            throw new TypeError('reply - not enough arguments');\n        }\n        this.global.postMessage({\n            'queryMethodListener': arguments[0],\n            'queryMethodArguments': Array.prototype.slice.call(arguments, 1)\n        });\n    }\n}\n\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {Utils} from \"sd-utils\";\nimport {ObjectiveRulesManager} from \"./objective/objective-rules-manager\";\nimport {TreeValidator} from \"./validation/tree-validator\";\nimport {OperationsManager} from \"./operations/operations-manager\";\nimport {JobsManager} from \"./jobs/jobs-manager\";\nimport {ExpressionsEvaluator} from \"./expressions-evaluator\";\nimport {JobInstanceManager} from \"./jobs/job-instance-manager\";\nimport {domain as model} from \"sd-model\";\nimport {Policy} from \"./policies/policy\";\nimport {McdmWeightValueValidator} from \"./validation/mcdm-weight-value-validator\";\n\n/** Computation manager configuration object\n * @param custom configuration object to extend\n */\nexport class ComputationsManagerConfig {\n\n    /**\n     * logging level\n     * */\n    logLevel = null;\n\n    /**\n     * default objective rule name\n     * */\n    ruleName = null;\n\n    /**\n     * worker configuration object\n     * */\n    worker = {\n        /**\n         * delegate tree recomputation to worker\n         * */\n        delegateRecomputation: false,\n\n        /**\n         * worker url\n         * */\n        url: null\n    };\n\n    /**\n     * job repository to use, available types: idb, timeout, simple\n    * */\n    jobRepositoryType = 'idb';\n\n    /**\n     * clear repository after init\n     * */\n    clearRepository = false;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/** Computation manager\n* @param {object} config\n* @param {DataModel} data model object\n* */\nexport class ComputationsManager {\n\n    data;\n    expressionEngine;\n    expressionsEvaluator;\n    objectiveRulesManager;\n    operationsManager;\n    jobsManger;\n\n    treeValidator;\n\n    constructor(config, data = null) {\n        this.data = data;\n        this.setConfig(config);\n        this.expressionEngine = new ExpressionEngine();\n        this.expressionsEvaluator = new ExpressionsEvaluator(this.expressionEngine);\n        this.objectiveRulesManager = new ObjectiveRulesManager(this.expressionEngine, this.config.ruleName);\n        this.operationsManager = new OperationsManager(this.data, this.expressionEngine);\n        this.jobsManger = new JobsManager(this.expressionsEvaluator, this.objectiveRulesManager, {\n            workerUrl: this.config.worker.url,\n            repositoryType: this.config.jobRepositoryType,\n            clearRepository: this.config.clearRepository\n        });\n        this.treeValidator = new TreeValidator(this.expressionEngine);\n        this.mcdmWeightValueValidator = new McdmWeightValueValidator();\n    }\n\n    setConfig(config) {\n        this.config = new ComputationsManagerConfig(config);\n        return this;\n    }\n\n    setData(data){\n        this.data = data;\n        this.operationsManager.setData(data);\n    }\n\n\n    /** Alias function for checkValidityAndRecomputeObjective*/\n    recompute(){\n        return this.checkValidityAndRecomputeObjective(...arguments);\n    }\n\n    /**\n     * Checks validity of data model and recomputes objective rules\n     * @returns promise\n     * @param {boolean} allRules - recompute all objective rules\n     * @param {boolean} evalCode - evaluate code\n     * @param {boolean} evalNumeric - evaluate numeric expressions\n     */\n    checkValidityAndRecomputeObjective(allRules, evalCode = false, evalNumeric = true) {\n        return Promise.resolve().then(()=> {\n            if (this.config.worker.delegateRecomputation) {\n                var params = {\n                    evalCode: evalCode,\n                    evalNumeric: evalNumeric\n                };\n                if (!allRules) {\n                    params.ruleName = this.getCurrentRule().name;\n                }\n                return this.runJob(\"recompute\", params, this.data, false).then((jobExecution)=> {\n                    var d = jobExecution.getData();\n                    this.data.updateFrom(d)\n                })\n            }\n            return this._checkValidityAndRecomputeObjective(this.data, allRules, evalCode, evalNumeric);\n        }).then(()=> {\n            this.updateDisplayValues(this.data);\n        })\n\n    }\n\n    _checkValidityAndRecomputeObjective(data, allRules, evalCode = false, evalNumeric = true) {\n\n        this.objectiveRulesManager.updateDefaultCriterion1Weight(data.defaultCriterion1Weight);\n        data.validationResults = [];\n\n        if (evalCode || evalNumeric) {\n            this.expressionsEvaluator.evalExpressions(data, evalCode, evalNumeric);\n        }\n\n        var weightValid = this.mcdmWeightValueValidator.validate(data.defaultCriterion1Weight);\n        var multiCriteria = this.getCurrentRule().multiCriteria;\n\n\n        data.getRoots().forEach(root=> {\n            var vr = this.treeValidator.validate(data.getAllNodesInSubtree(root));\n            data.validationResults.push(vr);\n            if (vr.isValid() && (!multiCriteria || weightValid)) {\n                this.objectiveRulesManager.recomputeTree(root, allRules);\n            }\n        });\n    }\n\n    /**\n     * @returns {ObjectiveRule} current objective rule\n     * */\n    getCurrentRule() {\n        return this.objectiveRulesManager.currentRule;\n    }\n\n    /**\n     * Sets current objective rule\n     * @param {string} ruleName - name of objective rule\n     * */\n    setCurrentRuleByName(ruleName) {\n        this.config.ruleName = ruleName;\n        return this.objectiveRulesManager.setCurrentRuleByName(ruleName)\n    }\n\n    /**\n     *\n     *  @param {string} jobName\n     *  @returns {Job}\n     * */\n    getJobByName(jobName) {\n        return this.jobsManger.getJobByName(jobName);\n    }\n\n    /**\n     * @returns array of operations applicable to the given object (node or edge)\n     * @param object\n     */\n    operationsForObject(object) {\n        return this.operationsManager.operationsForObject(object);\n    }\n\n\n    /**\n     * Checks validity of data model without recomputation and revalidation\n     * @param {DataModel} data to check\n     */\n\n    isValid(data) {\n        var data = data || this.data;\n        return data.validationResults.every(vr=>vr.isValid());\n    }\n    /**\n     * Run job\n     * @param {string} name - job name\n     * @param {object} jobParamsValues - job parameter values object\n     * @param {DataModel} data model\n     * @param {boolean} resolvePromiseAfterJobIsLaunched - immediately resolve promise with still running JobExecution\n     * @returns {Promise} resolving to JobExecution\n     */\n    runJob(name, jobParamsValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        return this.jobsManger.run(name, jobParamsValues, data || this.data, resolvePromiseAfterJobIsLaunched)\n    }\n\n    /**\n     * Run job using JobInstanceManager\n     * @param {string} name - job name\n     * @param {object} jobParamsValues - job parameter values object\n     * @param {JobInstanceManagerConfig} jobInstanceManagerConfig - JobInstanceManager configuration\n     * @returns {Promise} resolving to JobInstanceManager\n     */\n    runJobWithInstanceManager(name, jobParamsValues, jobInstanceManagerConfig) {\n        return this.runJob(name, jobParamsValues).then(je=> {\n            return new JobInstanceManager(this.jobsManger, je, jobInstanceManagerConfig);\n        })\n    }\n\n    getObjectiveRules() {\n        return this.objectiveRulesManager.rules;\n    }\n\n    getObjectiveRuleByName(ruleName){\n        return this.objectiveRulesManager.getObjectiveRuleByName(ruleName)\n    }\n\n    isRuleName(ruleName) {\n        return this.objectiveRulesManager.isRuleName(ruleName)\n    }\n\n\n    flipCriteria(data){\n        data = data || this.data;\n        data.reversePayoffs();\n        let tmp = data.weightLowerBound;\n        data.weightLowerBound = this.flip(data.weightUpperBound);\n        data.weightUpperBound = this.flip(tmp);\n        data.defaultCriterion1Weight = this.flip(data.defaultCriterion1Weight);\n        this.objectiveRulesManager.flipRule();\n        return this.checkValidityAndRecomputeObjective(false);\n    }\n\n    flip(a){\n        if(a == Infinity){\n            return 0;\n        }\n\n        if(a == 0){\n            return Infinity;\n        }\n\n        return this.expressionEngine.serialize(ExpressionEngine.divide(1, a))\n    }\n\n    updateDisplayValues(data, policyToDisplay = null) {\n        data = data || this.data;\n        if (policyToDisplay) {\n            return this.displayPolicy(data, policyToDisplay);\n        }\n\n        data.nodes.forEach(n=> {\n            this.updateNodeDisplayValues(n);\n        });\n        data.edges.forEach(e=> {\n            this.updateEdgeDisplayValues(e);\n        })\n    }\n\n    updateNodeDisplayValues(node) {\n        node.$DISPLAY_VALUE_NAMES.forEach(n=>node.displayValue(n, this.objectiveRulesManager.getNodeDisplayValue(node, n)));\n    }\n\n    updateEdgeDisplayValues(e) {\n        e.$DISPLAY_VALUE_NAMES.forEach(n=>e.displayValue(n, this.objectiveRulesManager.getEdgeDisplayValue(e, n)));\n    }\n\n    displayPolicy(policyToDisplay, data) {\n\n\n        data = data || this.data;\n        data.nodes.forEach(n=> {\n            n.clearDisplayValues();\n        });\n        data.edges.forEach(e=> {\n            e.clearDisplayValues();\n        });\n        data.getRoots().forEach((root)=>this.displayPolicyForNode(root, policyToDisplay));\n    }\n\n    displayPolicyForNode(node, policy) {\n        if (node instanceof model.DecisionNode) {\n            var decision = Policy.getDecision(policy, node);\n            //console.log(decision, node, policy);\n            if (decision) {\n                node.displayValue('optimal', true)\n                var childEdge = node.childEdges[decision.decisionValue];\n                childEdge.displayValue('optimal', true)\n                return this.displayPolicyForNode(childEdge.childNode, policy)\n            }\n            return;\n        } else if(node instanceof model.ChanceNode){\n            node.displayValue('optimal', true);\n            node.childEdges.forEach(e=>{\n                e.displayValue('optimal', true);\n                this.displayPolicyForNode(e.childNode, policy)\n            })\n        }else if(node instanceof model.TerminalNode){\n            node.displayValue('optimal', true);\n        }\n\n\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nexport class ComputationsUtils{\n\n    static sequence(min, max, length) {\n        var extent = ExpressionEngine.subtract(max, min);\n        var result = [min];\n        var steps = length - 1;\n        if(!steps){\n            return result;\n        }\n        var step = ExpressionEngine.divide(extent,length - 1);\n        var curr = min;\n        for (var i = 0; i < length - 2; i++) {\n            curr = ExpressionEngine.add(curr, step);\n            result.push(ExpressionEngine.toFloat(curr));\n        }\n        result.push(max);\n        return result;\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {domain as model} from 'sd-model'\nimport {Utils, log} from 'sd-utils'\n\n/*Evaluates code and expressions in trees*/\nexport class ExpressionsEvaluator {\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine = expressionEngine;\n    }\n\n    clear(data){\n        data.nodes.forEach(n=>{\n            n.clearComputedValues();\n        });\n        data.edges.forEach(e=>{\n            e.clearComputedValues();\n        });\n    }\n\n    clearTree(data, root){\n        data.getAllNodesInSubtree(root).forEach(n=>{\n            n.clearComputedValues();\n            n.childEdges.forEach(e=>{\n                e.clearComputedValues();\n            })\n        })\n    }\n\n    evalExpressions(data, evalCode=true, evalNumeric=true, initScopes=false){\n        log.debug('evalExpressions evalCode:'+evalCode+' evalNumeric:'+evalNumeric);\n        if(evalCode){\n            this.evalGlobalCode(data);\n        }\n\n        data.getRoots().forEach(n=>{\n            this.clearTree(data, n);\n            this.evalExpressionsForNode(data, n, evalCode, evalNumeric,initScopes);\n        });\n\n    }\n\n    evalGlobalCode(data){\n        data.clearExpressionScope();\n        data.$codeDirty = false;\n        try{\n            data.$codeError = null;\n            this.expressionEngine.eval(data.code, false, data.expressionScope);\n        }catch (e){\n            data.$codeError = e;\n        }\n    }\n\n    evalPayoff(edge, index = 0) {\n        if (ExpressionEngine.hasAssignmentExpression(edge.payoff[index])) {\n            return null;\n        }\n        return this.expressionEngine.eval(edge.payoff[index], true, edge.parentNode.expressionScope);\n    }\n\n    evalExpressionsForNode(data, node, evalCode=true, evalNumeric=true, initScope=false) {\n        if(!node.expressionScope || initScope || evalCode){\n            this.initScopeForNode(data, node);\n        }\n        if(evalCode){\n            node.$codeDirty = false;\n            if(node.code){\n                try{\n                    node.$codeError = null;\n                    this.expressionEngine.eval(node.code, false, node.expressionScope);\n                }catch (e){\n                    node.$codeError = e;\n                    log.debug(e);\n                }\n            }\n        }\n\n        if(evalNumeric){\n            var scope = node.expressionScope;\n            var probabilitySum=ExpressionEngine.toNumber(0);\n            var hashEdges= [];\n            var invalidProb = false;\n\n            node.childEdges.forEach(e=>{\n                e.payoff.forEach((rawPayoff, payoffIndex)=> {\n                    let path = 'payoff[' + payoffIndex + ']';\n                    if(e.isFieldValid(path, true, false)){\n                        try{\n                            e.computedValue(null, path, this.evalPayoff(e, payoffIndex))\n                        }catch (err){\n                            //   Left empty intentionally\n                        }\n                    }\n                });\n\n\n\n                if(node instanceof model.ChanceNode){\n                    if(ExpressionEngine.isHash(e.probability)){\n                        hashEdges.push(e);\n                        return;\n                    }\n\n                    if(ExpressionEngine.hasAssignmentExpression(e.probability)){ //It should not occur here!\n                        log.warn(\"evalExpressionsForNode hasAssignmentExpression!\", e);\n                        return null;\n                    }\n\n                    if(e.isFieldValid('probability', true, false)){\n                        try{\n                            var prob = this.expressionEngine.eval(e.probability, true, scope);\n                            e.computedValue(null, 'probability', prob);\n                            probabilitySum = ExpressionEngine.add(probabilitySum, prob);\n                        }catch (err){\n                            invalidProb = true;\n                        }\n                    }else{\n                        invalidProb = true;\n                    }\n                }\n\n            });\n\n\n            if(node instanceof model.ChanceNode){\n                var computeHash = hashEdges.length && !invalidProb && (probabilitySum.compare(0) >= 0 && probabilitySum.compare(1) <= 0);\n\n                if(computeHash) {\n                    var hash = ExpressionEngine.divide(ExpressionEngine.subtract(1, probabilitySum), hashEdges.length);\n                    hashEdges.forEach(e=> {\n                        e.computedValue(null, 'probability', hash);\n                    });\n                }\n            }\n\n            node.childEdges.forEach(e=>{\n                this.evalExpressionsForNode(data, e.childNode, evalCode, evalNumeric, initScope);\n            });\n        }\n    }\n\n    initScopeForNode(data, node){\n        var parent = node.$parent;\n        var parentScope = parent?parent.expressionScope : data.expressionScope;\n        node.expressionScope = Utils.cloneDeep(parentScope);\n    }\n}\n","export * from './computations-engine'\nexport * from './computations-manager'\nexport * from './expressions-evaluator'\nexport * from './jobs/index'\n\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\n\nexport class LeagueTableJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"weightLowerBound\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v <= JobParameterDefinition.computeNumberExpression(allVals['weightUpperBound'])\n        }));\n        this.definitions.push(new JobParameterDefinition(\"defaultWeight\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v >= JobParameterDefinition.computeNumberExpression(allVals['weightLowerBound']) && v <= JobParameterDefinition.computeNumberExpression(allVals['weightUpperBound'])\n        }));\n        this.definitions.push(new JobParameterDefinition(\"weightUpperBound\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v >= JobParameterDefinition.computeNumberExpression(allVals['weightLowerBound'])\n        }));\n\n    }\n\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            nameOfCriterion1: 'Cost',\n            nameOfCriterion2: 'Effect',\n            extendedPolicyDescription: true,\n            weightLowerBound: 0,\n            defaultWeight: 0,\n            weightUpperBound: Infinity,\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Policy} from \"../../../policies/policy\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {LeagueTableJobParameters} from \"./league-table-job-parameters\";\n\n\nexport class LeagueTableJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"league-table\", jobRepository, expressionsEvaluator, objectiveRulesManager);\n        this.initSteps();\n    }\n\n    initSteps() {\n        this.calculateStep = new CalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        this.addStep(this.calculateStep);\n    }\n\n    createJobParameters(values) {\n        return new LeagueTableJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders = true) {\n        var result = [];\n        if (withHeaders) {\n            var headers = ['policy_id', 'policy', jobResult.payoffNames[0], jobResult.payoffNames[1], 'dominated_by', 'extended-dominated_by', 'incratio', 'optimal', 'optimal_for_default_weight'];\n            result.push(headers);\n        }\n\n        jobResult.rows.forEach(row => {\n            row.policies.forEach(policy=> {\n                var rowCells = [\n                    row.id,\n                    Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription),\n                    row.payoffs[1],\n                    row.payoffs[0],\n                    row.dominatedBy,\n                    row.extendedDominatedBy === null ? null : row.extendedDominatedBy[0] + ', ' + row.extendedDominatedBy[1],\n                    row.incratio,\n                    row.optimal,\n                    row.optimalForDefaultWeight\n                ];\n                result.push(rowCells);\n            })\n        });\n\n        return result;\n    }\n}\n","import {Step} from \"../../../engine/step\";\nimport {JOB_STATUS} from \"../../../engine/job-status\";\nimport {PoliciesCollector} from \"../../../../policies/policies-collector\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {TreeValidator} from \"../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../policies/policy\";\n\nexport class CalculateStep extends Step {\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var data = stepExecution.getData();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let rule = this.objectiveRulesManager.currentRule;\n        var treeRoot = data.getRoots()[0];\n        var policiesCollector = new PoliciesCollector(treeRoot);\n\n        var policies = policiesCollector.policies;\n\n\n        var payoffCoeffs = this.payoffCoeffs = rule.payoffCoeffs;\n\n        this.expressionsEvaluator.evalExpressions(data);\n        var vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n\n        if (!vr.isValid()) {\n            return stepExecution;\n        }\n\n        var compare = (a, b)=>(-payoffCoeffs[0] *  (b.payoffs[0] - a.payoffs[0])) || (-payoffCoeffs[1] *  (a.payoffs[1] - b.payoffs[1]));\n\n        var rows = policies.map(policy => {\n            this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n            return {\n                policies: [policy],\n                payoffs: treeRoot.computedValue(ruleName, 'payoff').slice(),\n                dominatedBy: null,\n                extendedDominatedBy: null,\n                incratio: null,\n                optimal: false,\n                optimalForDefaultWeight: false\n            }\n        }).sort(compare);\n\n        rows = rows.reduce((previousValue, currentValue, index, array)=>{\n            if(!previousValue.length){\n                return [currentValue]\n            }\n\n            let prev = previousValue[previousValue.length-1];\n            if(compare(prev, currentValue) == 0){\n                prev.policies.push(...currentValue.policies);\n                return previousValue\n            }\n            return previousValue.concat(currentValue)\n        }, []);\n\n        rows.sort((a, b)=>(payoffCoeffs[0] *  (a.payoffs[0] - b.payoffs[0])) || (-payoffCoeffs[1] *   (a.payoffs[1] - b.payoffs[1])));\n        rows.forEach((r, i)=> {\n            r.id = i+1;\n        });\n        // rows.sort(compare);\n        rows.sort((a, b)=>(-payoffCoeffs[0] *  (a.payoffs[0] - b.payoffs[0])) || (-payoffCoeffs[1] *   (a.payoffs[1] - b.payoffs[1])));\n\n        let bestCost = -payoffCoeffs[1] * Infinity,\n            bestCostRow = null;\n\n        let cmp= (a, b) => a > b;\n        if(payoffCoeffs[1]<0){\n            cmp= (a, b) => a < b;\n        }\n\n        rows.forEach((r, i)=> {\n            if (cmp(r.payoffs[1], bestCost)) {\n                bestCost = r.payoffs[1];\n                bestCostRow = r;\n            } else if(bestCostRow) {\n                r.dominatedBy = bestCostRow.id;\n            }\n        });\n\n        cmp= (a, b) => a < b;\n        if(payoffCoeffs[0] > 0 && payoffCoeffs[1] < 0){\n            cmp= (a, b) => a < b;\n        }else if(payoffCoeffs[0] < 0 && payoffCoeffs[1] > 0){\n            cmp= (a, b) => a < b;\n        }else if(payoffCoeffs[1]<0){\n            cmp= (a, b) => a > b;\n        }\n\n        let prev2NotDominated = null;\n\n\n        rows.filter(r=>!r.dominatedBy).sort((a, b)=>(  payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0]))).forEach((r, i, arr)=> {\n            if (!i) {\n                r.incratio = 0;\n                return;\n            }\n\n            let prev = arr[i - 1];\n\n            r.incratio = this.computeICER(r, prev);\n            if (i < 2) {\n                return;\n            }\n\n            if(!prev2NotDominated){\n                prev2NotDominated = arr[i - 2];\n            }\n\n            if(cmp(r.incratio,prev.incratio)){\n                prev.incratio = null;\n                prev.extendedDominatedBy = [prev2NotDominated.id, r.id] ;\n                r.incratio = this.computeICER(r, prev2NotDominated);\n            }else{\n                prev2NotDominated = prev;\n            }\n        });\n\n        let weightLowerBound = params.value(\"weightLowerBound\");\n        let defaultWeight = params.value(\"defaultWeight\");\n        let weightUpperBound = params.value(\"weightUpperBound\");\n\n        //mark optimal for weight in [weightLowerBound, weightUpperBound] and optimal for default Weight\n        let lastLELower = null;\n        let lastLELowerDef = null;\n        rows.slice().filter(r=>!r.dominatedBy && !r.extendedDominatedBy).sort((a, b) => {\n            let sub = a.incratio - b.incratio;\n            return sub ? sub : payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0])\n        }).forEach((row, i, arr)=>{\n\n            if(row.incratio < weightLowerBound){\n                lastLELower  = row;\n            }\n            if(row.incratio < defaultWeight){\n                lastLELowerDef  = row;\n            }\n\n            row.optimal = row.incratio >= weightLowerBound && row.incratio <= weightUpperBound;\n            row.optimalForDefaultWeight = row.incratio == defaultWeight;\n\n        });\n        if(lastLELower){\n            lastLELower.optimal = true;\n        }\n\n        if(lastLELowerDef){\n            lastLELowerDef.optimalForDefaultWeight = true;\n        }\n\n        rows.forEach(row=>{\n            row.payoffs[0] =  ExpressionEngine.toFloat(row.payoffs[0]);\n            row.payoffs[1] =  ExpressionEngine.toFloat(row.payoffs[1]);\n            row.incratio = row.incratio === null ? null : ExpressionEngine.toFloat(row.incratio);\n        });\n\n        jobResult.data = {\n            payoffNames: data.payoffNames.slice(),\n            payoffCoeffs : payoffCoeffs,\n            rows: rows.sort((a, b)=>(a.id - b.id)),\n            weightLowerBound: ExpressionEngine.toFloat(weightLowerBound),\n            defaultWeight: ExpressionEngine.toFloat(defaultWeight),\n            weightUpperBound: ExpressionEngine.toFloat(weightUpperBound)\n        };\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n\n    computeICER(r, prev){\n        let d = ExpressionEngine.subtract(r.payoffs[0], prev.payoffs[0]);\n        let n = ExpressionEngine.subtract(r.payoffs[1], prev.payoffs[1]);\n        if (d == 0){\n            if(n<0){\n                return - Infinity;\n            }\n            return Infinity;\n        }\n        return Math.abs(ExpressionEngine.divide(n, d));\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\nexport class RecomputeJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING).set('required', false));\n        this.definitions.push(new JobParameterDefinition(\"evalCode\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"evalNumeric\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            ruleName: null, //recompute all rules\n            evalCode: true,\n            evalNumeric: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Step} from \"../../engine/step\";\nimport {JOB_STATUS} from \"../../engine/job-status\";\nimport {TreeValidator} from \"../../../validation/tree-validator\";\nimport {BatchStep} from \"../../engine/batch/batch-step\";\nimport {RecomputeJobParameters} from \"./recompute-job-parameters\";\nimport {Job} from \"../../engine/job\";\n\nexport class RecomputeJob extends Job {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"recompute\", jobRepository);\n        this.isRestartable = false;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(execution) {\n        var data = execution.getData();\n        var params = execution.jobParameters;\n        var ruleName = params.value(\"ruleName\");\n        var allRules = !ruleName;\n        if(ruleName){\n            this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        }\n        this.checkValidityAndRecomputeObjective(data, allRules, params.value(\"evalCode\"), params.value(\"evalNumeric\"))\n        return execution;\n    }\n\n    checkValidityAndRecomputeObjective(data, allRules, evalCode, evalNumeric) {\n        data.validationResults = [];\n\n        if(evalCode||evalNumeric){\n            this.expressionsEvaluator.evalExpressions(data, evalCode, evalNumeric);\n        }\n\n        data.getRoots().forEach(root=> {\n            var vr = this.treeValidator.validate(data.getAllNodesInSubtree(root));\n            data.validationResults.push(vr);\n            if (vr.isValid()) {\n                this.objectiveRulesManager.recomputeTree(root, allRules);\n            }\n        });\n    }\n\n    createJobParameters(values) {\n        return new RecomputeJobParameters(values);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class SensitivityAnalysisJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"min\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"max\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 2),\n            ], 1, Infinity, false,\n            v => v[\"min\"] < v[\"max\"],\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ))\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            extendedPolicyDescription: true,\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {SensitivityAnalysisJobParameters} from \"./sensitivity-analysis-job-parameters\";\nimport {PrepareVariablesStep} from \"./steps/prepare-variables-step\";\nimport {InitPoliciesStep} from \"./steps/init-policies-step\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {Policy} from \"../../../../policies/policy\";\nimport {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\n\nexport class SensitivityAnalysisJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize=5) {\n        super(\"sensitivity-analysis\", jobRepository, expressionsEvaluator, objectiveRulesManager);\n        this.batchSize = 5;\n        this.initSteps();\n    }\n\n    initSteps(){\n        this.addStep(new PrepareVariablesStep(this.jobRepository, this.expressionsEvaluator.expressionEngine));\n        this.addStep(new InitPoliciesStep(this.jobRepository));\n        this.calculateStep = new CalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager, this.batchSize);\n        this.addStep(this.calculateStep);\n    }\n\n    createJobParameters(values) {\n        return new SensitivityAnalysisJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n    setBatchSize(batchSize){\n        this.batchSize = batchSize;\n        this.calculateStep.chunkSize = batchSize;\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n        var result = [];\n        if(withHeaders){\n            var headers = ['policy_number', 'policy'];\n            jobResult.variableNames.forEach(n=>headers.push(n));\n            headers.push('payoff');\n            result.push(headers);\n        }\n\n        var roundVariables = !!jobParameters.values.roundVariables;\n        if(roundVariables){\n            this.roundVariables(jobResult);\n        }\n\n        jobResult.rows.forEach(row => {\n            var policy = jobResult.policies[row.policyIndex];\n            var rowCells = [row.policyIndex+1, Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription)];\n            row.variables.forEach(v=> rowCells.push(v));\n            rowCells.push(row.payoff);\n            result.push(rowCells);\n\n            if(row._variables){ //revert original variables\n                row.variables = row._variables;\n                delete row._variables;\n            }\n        });\n\n        return result;\n    }\n\n    roundVariables(jobResult){\n        var uniqueValues = jobResult.variableNames.map(()=>new Set());\n\n        jobResult.rows.forEach(row => {\n            row._variables = row.variables.slice(); // save original row variables\n            row.variables.forEach((v,i)=> {\n                uniqueValues[i].add(v)\n            });\n        });\n\n        var uniqueValuesNo = uniqueValues.map((s)=>s.size);\n        var maxPrecision = 14;\n        var precision = 2;\n        var notReadyVariablesIndexes = jobResult.variableNames.map((v,i)=>i);\n        while(precision<=maxPrecision && notReadyVariablesIndexes.length){\n            uniqueValues = notReadyVariablesIndexes.map(()=>new Set());\n            jobResult.rows.forEach(row => {\n                notReadyVariablesIndexes.forEach((variableIndex, notReadyIndex)=>{\n\n                    var val = row._variables[variableIndex];\n                    val = Utils.round(val, precision);\n                    uniqueValues[notReadyIndex].add(val);\n\n                    row.variables[variableIndex] = val;\n                })\n            });\n\n            var newReadyIndexes = [];\n            uniqueValues.forEach((uniqueVals, notReadyIndex)=>{\n                var origUniqueCount = uniqueValuesNo[notReadyVariablesIndexes[notReadyIndex]] ;\n                if(origUniqueCount==uniqueVals.size){ //ready in previous iteration\n                    newReadyIndexes.push(notReadyIndex);\n                }\n            });\n            if(newReadyIndexes.length) { //revert values to prev iteration\n                newReadyIndexes.reverse();\n                newReadyIndexes.forEach(notReadyIndex=>{\n                    notReadyVariablesIndexes.splice(notReadyIndex, 1);\n                })\n            }\n            precision++;\n        }\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n\n        if (execution.stepExecutions.length <= 2) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[2].getProgress(execution.stepExecutions[2]);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize) {\n        super(\"calculate_step\", jobRepository, batchSize);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        var jobExecutionContext = stepExecution.getJobExecutionContext();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        var variableValues = jobResult.data.variableValues;\n        var variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n\n\n        if (!jobResult.data.rows) {\n            jobResult.data.rows = [];\n            jobResult.data.variableNames = variableNames;\n        }\n\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        var variableValues = jobResult.data.variableValues;\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n\n    processItem(stepExecution, item) {\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n        var failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        var data = stepExecution.getData();\n        var treeRoot = data.getRoots()[0];\n        var variableNames = stepExecution.executionContext.get(\"variableNames\");\n        var policies = stepExecution.getJobExecutionContext().get(\"policies\");\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n        variableNames.forEach((variableName, i)=> {\n            data.expressionScope[variableName] = item[i];\n        });\n\n        this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n        var vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n\n        var valid = vr.isValid();\n\n        if(!valid && failOnInvalidTree){\n            let errorData = {\n                variables: {}\n            };\n            variableNames.forEach((variableName, i)=> {\n                errorData.variables[variableName] = item[i];\n            });\n            throw new JobComputationException(\"computations\", errorData)\n        }\n\n        var payoffs = [];\n\n        policies.forEach(policy=> {\n            var payoff = 'n/a';\n            if (valid) {\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n            }\n            payoffs.push(payoff);\n        });\n\n        return {\n            policies: policies,\n            variables: item,\n            payoffs: payoffs\n        };\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var extendedPolicyDescription = params.value(\"extendedPolicyDescription\");\n\n        items.forEach(item=> {\n            if (!item) {\n                return;\n            }\n            item.policies.forEach((policy, i)=> {\n                var variables = item.variables.map(v => this.toFloat(v));\n\n                var payoff = item.payoffs[i];\n                var row = {\n                    policyIndex: i,\n                    variables: variables,\n                    payoff: Utils.isString(payoff) ? payoff : this.toFloat(payoff)\n                };\n                jobResult.data.rows.push(row);\n            })\n        })\n    }\n\n    postProcess(stepExecution, jobResult) {\n        delete jobResult.data.variableValues;\n    }\n\n\n    toFloat(v) {\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\n\nexport class InitPoliciesStep extends Step {\n    constructor(jobRepository) {\n        super(\"init_policies\", jobRepository);\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var data = stepExecution.getData();\n        var treeRoot = data.getRoots()[0];\n        var policiesCollector = new PoliciesCollector(treeRoot);\n\n        var policies = policiesCollector.policies;\n        stepExecution.getJobExecutionContext().put(\"policies\", policies);\n\n        if(!jobResult.data){\n            jobResult.data={}\n        }\n\n        jobResult.data.policies = policies;\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class PrepareVariablesStep extends Step {\n    constructor(jobRepository, expressionEngine) {\n        super(\"prepare_variables\", jobRepository);\n        this.expressionEngine = expressionEngine;\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n\n        var variableValues = [];\n        variables.forEach(v=> {\n            variableValues.push(ComputationsUtils.sequence(v.min, v.max, v.length));\n        });\n        variableValues = Utils.cartesianProductOf(variableValues);\n        jobResult.data={\n            variableValues: variableValues\n        };\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class ProbabilisticSensitivityAnalysisJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"numberOfRuns\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v > 0));\n\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"formula\", PARAMETER_TYPE.NUMBER_EXPRESSION)\n            ], 1, Infinity, false,\n            null,\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ))\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            extendedPolicyDescription: true,\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {ProbabilisticSensitivityAnalysisJobParameters} from \"./probabilistic-sensitivity-analysis-job-parameters\";\nimport {InitPoliciesStep} from \"../n-way/steps/init-policies-step\";\nimport {SensitivityAnalysisJob} from \"../n-way/sensitivity-analysis-job\";\nimport {ProbCalculateStep} from \"./steps/prob-calculate-step\";\nimport {ComputePolicyStatsStep} from \"./steps/compute-policy-stats-step\";\n\nexport class ProbabilisticSensitivityAnalysisJob extends SensitivityAnalysisJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize=5) {\n        super(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize);\n        this.name = \"probabilistic-sensitivity-analysis\";\n    }\n\n    initSteps() {\n        this.addStep(new InitPoliciesStep(this.jobRepository));\n        this.calculateStep = new ProbCalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager, this.batchSize);\n        this.addStep(this.calculateStep);\n        this.addStep(new ComputePolicyStatsStep(this.expressionsEvaluator.expressionEngine, this.objectiveRulesManager, this.jobRepository));\n    }\n\n    createJobParameters(values) {\n        return new ProbabilisticSensitivityAnalysisJobParameters(values);\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution) {\n\n        if (execution.stepExecutions.length <= 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[1].getProgress(execution.stepExecutions[1]);\n    }\n}\n","import {log, Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport class ComputePolicyStatsStep extends Step {\n    constructor(expressionEngine, objectiveRulesManager, jobRepository) {\n        super(\"compute_policy_stats\", jobRepository);\n        this.expressionEngine = expressionEngine;\n        this.objectiveRulesManager = objectiveRulesManager;\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var numberOfRuns = params.value(\"numberOfRuns\");\n        var ruleName = params.value(\"ruleName\");\n\n        let rule = this.objectiveRulesManager.ruleByName[ruleName];\n\n\n        var payoffsPerPolicy = jobResult.data.policies.map(()=>[]);\n\n        jobResult.data.rows.forEach(row=> {\n            payoffsPerPolicy[row.policyIndex].push(Utils.isString(row.payoff) ? 0 : row.payoff)\n        });\n\n        log.debug('payoffsPerPolicy', payoffsPerPolicy, jobResult.data.rows.length, rule.maximization);\n\n        jobResult.data.medians = payoffsPerPolicy.map(payoffs=>ExpressionEngine.median(payoffs));\n        jobResult.data.standardDeviations = payoffsPerPolicy.map(payoffs=>ExpressionEngine.std(payoffs));\n\n        if (rule.maximization) {\n            jobResult.data.policyIsBestProbabilities = jobResult.data.policyToHighestPayoffCount.map(v=>ExpressionEngine.toFloat(ExpressionEngine.divide(v, numberOfRuns)));\n        } else {\n            jobResult.data.policyIsBestProbabilities = jobResult.data.policyToLowestPayoffCount.map(v=>ExpressionEngine.toFloat(ExpressionEngine.divide(v, numberOfRuns)));\n        }\n\n        jobResult.data.policyToHighestPayoffCount = jobResult.data.policyToHighestPayoffCount.map(v=>ExpressionEngine.toFloat(v));\n        jobResult.data.policyToLowestPayoffCount = jobResult.data.policyToLowestPayoffCount.map(v=>ExpressionEngine.toFloat(v));\n\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {CalculateStep} from \"../../n-way/steps/calculate-step\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\n\nexport class ProbCalculateStep extends CalculateStep {\n\n    init(stepExecution, jobResult) {\n        var jobExecutionContext = stepExecution.getJobExecutionContext();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        var variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n\n        if(!jobResult.data.rows){\n            jobResult.data.rows = [];\n            jobResult.data.variableNames = variableNames;\n            jobResult.data.expectedValues = Utils.fill(new Array(jobResult.data.policies.length), 0);\n            jobResult.data.policyToHighestPayoffCount = Utils.fill(new Array(jobResult.data.policies.length), 0);\n            jobResult.data.policyToLowestPayoffCount = Utils.fill(new Array(jobResult.data.policies.length), 0);\n        }\n\n        return params.value(\"numberOfRuns\");\n    }\n\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n        var data = stepExecution.getData();\n        var variableValues = [];\n        for(var runIndex=0; runIndex<chunkSize; runIndex++){\n            var singleRunVariableValues = [];\n            var errors = [];\n            variables.forEach(v=> {\n                try{\n                    var evaluated = this.expressionsEvaluator.expressionEngine.eval(v.formula, true, Utils.cloneDeep(data.expressionScope));\n                    singleRunVariableValues.push(ExpressionEngine.toFloat(evaluated));\n                }catch(e){\n                    errors.push({\n                        variable: v,\n                        error: e\n                    });\n                }\n\n            });\n            if(errors.length) {\n                var errorData = {variables: []};\n                errors.forEach(e=>{\n                    errorData.variables[e.variable.name] = e.error.message;\n                });\n                throw new JobComputationException(\"param-computation\", errorData)\n            }\n            variableValues.push(singleRunVariableValues)\n        }\n\n        return variableValues;\n    }\n\n    processItem(stepExecution, item, currentItemCount, jobResult) {\n        var r = super.processItem(stepExecution, item, jobResult);\n\n        var params = stepExecution.getJobParameters();\n        var numberOfRuns = params.value(\"numberOfRuns\");\n        var policies = stepExecution.getJobExecutionContext().get(\"policies\");\n\n        this.updatePolicyStats(r, policies, numberOfRuns, jobResult);\n\n        return r;\n    }\n\n    updatePolicyStats(r, policies, numberOfRuns, jobResult){\n        var highestPayoff = -Infinity;\n        var lowestPayoff = Infinity;\n        var bestPolicyIndexes = [];\n        var worstPolicyIndexes = [];\n\n        var zeroNum = ExpressionEngine.toNumber(0);\n\n        policies.forEach((policy,i)=>{\n            let payoff = r.payoffs[i];\n            if(Utils.isString(payoff)){\n                payoff = zeroNum;\n            }\n            if(payoff < lowestPayoff){\n                lowestPayoff = payoff;\n                worstPolicyIndexes = [i];\n            }else if(payoff.equals(lowestPayoff)){\n                worstPolicyIndexes.push(i)\n            }\n            if(payoff > highestPayoff){\n                highestPayoff = payoff;\n                bestPolicyIndexes = [i]\n            }else if(payoff.equals(highestPayoff)){\n                bestPolicyIndexes.push(i)\n            }\n\n            jobResult.data.expectedValues[i] = ExpressionEngine.add(jobResult.data.expectedValues[i], ExpressionEngine.divide(payoff, numberOfRuns));\n        });\n\n        bestPolicyIndexes.forEach(policyIndex=>{\n            jobResult.data.policyToHighestPayoffCount[policyIndex] = ExpressionEngine.add(jobResult.data.policyToHighestPayoffCount[policyIndex], ExpressionEngine.divide(1, bestPolicyIndexes.length))\n        });\n\n        worstPolicyIndexes.forEach(policyIndex=>{\n            jobResult.data.policyToLowestPayoffCount[policyIndex] = ExpressionEngine.add(jobResult.data.policyToLowestPayoffCount[policyIndex], ExpressionEngine.divide(1, worstPolicyIndexes.length))\n        });\n    }\n\n\n    postProcess(stepExecution, jobResult) {\n        jobResult.data.expectedValues = jobResult.data.expectedValues.map(v=>this.toFloat(v));\n    }\n\n\n    toFloat(v) {\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class SpiderPlotJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"percentageChangeRange\", PARAMETER_TYPE.NUMBER).set(\"singleValueValidator\", v => v > 0 && v <=100));\n        this.definitions.push(new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 0));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n            ], 1, Infinity, false,\n            null,\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {SpiderPlotJobParameters} from \"./spider-plot-job-parameters\";\n\nexport class SpiderPlotJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"spider-plot\", jobRepository);\n        this.addStep(new CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager));\n    }\n\n    createJobParameters(values) {\n        return new SpiderPlotJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n        if (execution.stepExecutions.length < 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[0].getProgress(execution.stepExecutions[0]);\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n\n        let result = [];\n        if(withHeaders){\n            result.push(['variable_name', 'policy_no'].concat(jobResult.percentageRangeValues));\n        }\n\n        jobResult.rows.forEach((row, index) => {\n\n            result.push(...row.payoffs.map((payoffs, policyIndex)=>[\n                row.variableName,\n                policyIndex+1,\n                ...payoffs\n            ]));\n\n        });\n\n        return result;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository, 1);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        let jobExecutionContext = stepExecution.getJobExecutionContext();\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let percentageChangeRange = params.value(\"percentageChangeRange\");\n        let length = params.value(\"length\");\n        let variables = params.value(\"variables\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n        let data = stepExecution.getData();\n\n        let treeRoot = data.getRoots()[0];\n        let payoff = treeRoot.computedValue(ruleName, 'payoff');\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalExpressions(data);\n\n        this.objectiveRulesManager.recomputeTree(treeRoot, false);\n\n        let policiesCollector = new PoliciesCollector(treeRoot, ruleName);\n\n        let defaultValues = {};\n        data.getGlobalVariableNames().forEach(name => {\n            let v = data.expressionScope[name];\n            try {\n                defaultValues[name] = this.toFloat(v);\n            } catch (e) {\n                throw new JobComputationException(\"error computing float value of a variable\", {\n                    name: name,\n                    value: v,\n                })\n            }\n        });\n\n\n        let percentageRangeValues = ComputationsUtils.sequence(-percentageChangeRange, percentageChangeRange, 2*length+1);\n\n        let variableValues = [];\n\n        variables.forEach(v=> {\n            let defVal = defaultValues[v.name];\n            variableValues.push(percentageRangeValues.map(p=> this.toFloat(ExpressionEngine.add(defVal, ExpressionEngine.multiply(ExpressionEngine.divide(p,100), defVal)))));\n        });\n\n\n        if(!jobResult.data){\n            jobResult.data = {\n                variableNames: variableNames,\n                defaultValues: defaultValues,\n                percentageRangeValues: percentageRangeValues,\n                defaultPayoff: this.toFloat(payoff)[0],\n                policies: policiesCollector.policies,\n                rows: []\n            };\n        }\n\n        stepExecution.getJobExecutionContext().put(\"variableValues\", variableValues);\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize) {\n        let variableValues = stepExecution.getJobExecutionContext().get(\"variableValues\");\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n    processItem(stepExecution, item, itemIndex, jobResult) {\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        let data = stepExecution.getData();\n        let treeRoot = data.getRoots()[0];\n        let variableNames = stepExecution.executionContext.get(\"variableNames\");\n        let variableName = variableNames[itemIndex];\n\n\n        let payoffs = jobResult.data.policies.map(policy=>[]);\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n\n\n        item.forEach(variableValue=>{\n\n            data.expressionScope[variableName] = variableValue;\n\n            this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n            let vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n            let valid = vr.isValid();\n\n            if(!valid && failOnInvalidTree){\n                let errorData = {\n                    variables: {}\n                };\n                errorData.variables[variableName] = variableValue;\n\n                throw new JobComputationException(\"computations\", errorData)\n            }\n\n            jobResult.data.policies.forEach((policy, policyIndex)=>{\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                let payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n                payoffs[policyIndex].push(this.toFloat(payoff));\n            });\n\n        });\n\n        return {\n            variableName: variableName,\n            variableIndex: itemIndex,\n            variableValues: item,\n            payoffs: payoffs\n        };\n\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        jobResult.data.rows.push(...items);\n    }\n\n\n    toFloat(v){\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository, 1);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        let jobExecutionContext = stepExecution.getJobExecutionContext();\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let variableValues = jobExecutionContext.get(\"variableValues\");\n        let variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n        let data = stepExecution.getData();\n\n        let treeRoot = data.getRoots()[0];\n        let payoff = treeRoot.computedValue(ruleName, 'payoff');\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalExpressions(data);\n\n        this.objectiveRulesManager.recomputeTree(treeRoot, false);\n\n\n\n        let policiesCollector = new PoliciesCollector(treeRoot, ruleName);\n\n        let defaultValues = {};\n        data.getGlobalVariableNames().forEach(name => {\n            let v = data.expressionScope[name];\n            try {\n                defaultValues[name] = this.toFloat(v);\n            } catch (e) {\n                throw new JobComputationException(\"error computing float value of a variable\", {\n                    name: name,\n                    value: v,\n                })\n            }\n        });\n\n        if(!jobResult.data){\n            jobResult.data = {\n                variableNames: variableNames,\n                defaultValues: defaultValues,\n                variableExtents: variableValues.map(v=>[v[0], v[v.length-1]]),\n                defaultPayoff: this.toFloat(payoff)[0],\n                policies: policiesCollector.policies,\n                rows: []\n            };\n        }\n\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize) {\n        let variableValues = stepExecution.getJobExecutionContext().get(\"variableValues\");\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n    processItem(stepExecution, item, itemIndex, jobResult) {\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        let data = stepExecution.getData();\n        let treeRoot = data.getRoots()[0];\n        let variableNames = stepExecution.executionContext.get(\"variableNames\");\n        let variableName = variableNames[itemIndex];\n\n        let extents = jobResult.data.policies.map(policy=>{\n            return {\n                min: Infinity,\n                max: -Infinity\n            }\n        });\n\n        let values = jobResult.data.policies.map(policy=>{\n            return {\n                min: null,\n                max: null\n            }\n        });\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n\n\n        item.forEach(variableValue=>{\n\n            data.expressionScope[variableName] = variableValue;\n\n            this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n            let vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n            let valid = vr.isValid();\n\n            if(!valid && failOnInvalidTree){\n                let errorData = {\n                    variables: {}\n                };\n                errorData.variables[variableName] = variableValue;\n\n                throw new JobComputationException(\"computations\", errorData)\n            }\n\n            jobResult.data.policies.forEach((policy, policyIndex)=>{\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                let payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n\n                if(payoff < extents[policyIndex].min){\n                    extents[policyIndex].min = payoff;\n                    values[policyIndex].min = variableValue\n                }\n\n                if(payoff > extents[policyIndex].max){\n                    extents[policyIndex].max = payoff;\n                    values[policyIndex].max = variableValue\n                }\n            });\n\n        });\n\n        return {\n            variableName: variableName,\n            variableIndex: itemIndex,\n            extents: extents.map(e=>[this.toFloat(e.min), this.toFloat(e.max)]),\n            extentVariableValues: values.map(v=>[this.toFloat(v.min), this.toFloat(v.max)])\n        };\n\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        jobResult.data.rows.push(...items);\n    }\n\n    postProcess(stepExecution, jobResult) {\n        jobResult.data.rows.sort((a, b)=>(b.extents[0][1]-b.extents[0][0])-(a.extents[0][1]-a.extents[0][0]))\n\n    }\n\n\n    toFloat(v){\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class PrepareVariablesStep extends Step {\n    constructor(jobRepository) {\n        super(\"prepare_variables\", jobRepository);\n    }\n\n    doExecute(stepExecution) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n\n        var variableValues = [];\n        variables.forEach(v=> {\n            variableValues.push(ComputationsUtils.sequence(v.min, v.max, v.length));\n        });\n        stepExecution.getJobExecutionContext().put(\"variableValues\", variableValues);\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class TornadoDiagramJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"min\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"max\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 0),\n            ], 1, Infinity, false,\n            v => v[\"min\"] <= v[\"max\"],\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {PrepareVariablesStep} from \"./steps/prepare-variables-step\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {TornadoDiagramJobParameters} from \"./tornado-diagram-job-parameters\";\n\nexport class TornadoDiagramJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"tornado-diagram\", jobRepository);\n        this.addStep(new PrepareVariablesStep(jobRepository));\n        this.addStep(new CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager));\n    }\n\n    createJobParameters(values) {\n        return new TornadoDiagramJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n\n        if (execution.stepExecutions.length <= 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[1].getProgress(execution.stepExecutions[1]);\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n        let result = [];\n        if(withHeaders){\n            result.push(['variable_name', 'default_var_value', \"min_var_value\", \"max_var_value\", 'default_payoff', \"min_payoff\", \"max_payoff\", \"policy_no\"]);\n        }\n\n\n        jobResult.rows.forEach((row, index) => {\n\n            result.push(...row.extents.map((extent, policyIndex)=>[\n                row.variableName,\n                jobResult.defaultValues[row.variableName],\n                row.extentVariableValues[policyIndex][0],\n                row.extentVariableValues[policyIndex][1],\n                jobResult.defaultPayoff,\n                extent[0],\n                extent[1],\n                policyIndex+1\n            ]));\n\n        });\n\n\n        return result;\n    }\n}\n","import {JOB_STATUS} from \"../job-status\";\nimport {log} from 'sd-utils'\nimport {Step} from \"../step\";\nimport {JobInterruptedException} from \"../exceptions/job-interrupted-exception\";\n\n/*job step that process batch of items*/\nexport class BatchStep extends Step {\n\n    chunkSize;\n    static CURRENT_ITEM_COUNT_PROP = 'batch_step_current_item_count';\n    static TOTAL_ITEM_COUNT_PROP = 'batch_step_total_item_count';\n\n    constructor(name, jobRepository, chunkSize) {\n        super(name, jobRepository);\n        this.chunkSize = chunkSize;\n    }\n\n    /**\n     * Extension point for subclasses to perform step initialization. Should return total item count\n     */\n    init(stepExecution, jobResult) {\n        throw \"BatchStep.init function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to read and return chunk of items to process\n     */\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        throw \"BatchStep.readNextChunk function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to process single item\n     * Must return processed item which will be passed in a chunk to writeChunk function\n     */\n    processItem(stepExecution, item, currentItemCount, jobResult) {\n        throw \"BatchStep.processItem function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to write chunk of items. Not required\n     */\n    writeChunk(stepExecution, items, jobResult) {\n    }\n\n    /**\n     * Extension point for subclasses to perform postprocessing after all items have been processed. Not required\n     */\n    postProcess(stepExecution, jobResult) {\n    }\n\n\n    setTotalItemCount(stepExecution, count) {\n        stepExecution.executionContext.put(BatchStep.TOTAL_ITEM_COUNT_PROP, count);\n    }\n\n    getTotalItemCount(stepExecution) {\n        return stepExecution.executionContext.get(BatchStep.TOTAL_ITEM_COUNT_PROP);\n    }\n\n    setCurrentItemCount(stepExecution, count) {\n        stepExecution.executionContext.put(BatchStep.CURRENT_ITEM_COUNT_PROP, count);\n    }\n\n    getCurrentItemCount(stepExecution) {\n        return stepExecution.executionContext.get(BatchStep.CURRENT_ITEM_COUNT_PROP) || 0;\n    }\n\n\n    doExecute(stepExecution, jobResult) {\n        return Promise.resolve().then(()=> {\n            return this.init(stepExecution, jobResult)\n        }).catch(e=> {\n            log.error(\"Failed to initialize batch step: \" + this.name, e);\n            throw e;\n        }).then(totalItemCount=> {\n            return Promise.resolve().then(()=>{\n                this.setCurrentItemCount(stepExecution, this.getCurrentItemCount(stepExecution));\n                this.setTotalItemCount(stepExecution, totalItemCount);\n                return this.handleNextChunk(stepExecution, jobResult)\n            }).catch(e=> {\n                if(!(e instanceof JobInterruptedException)){\n                    log.error(\"Failed to handle batch step: \" + this.name, e);\n                }\n                throw e;\n            })\n        }).then(()=> {\n            return Promise.resolve().then(()=>{\n                return this.postProcess(stepExecution, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to postProcess batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then(()=> {\n            stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n            return stepExecution;\n        })\n\n    }\n\n    handleNextChunk(stepExecution, jobResult) {\n        var currentItemCount = this.getCurrentItemCount(stepExecution);\n        var totalItemCount = this.getTotalItemCount(stepExecution);\n        var chunkSize = Math.min(this.chunkSize, totalItemCount - currentItemCount);\n        if (currentItemCount >= totalItemCount) {\n            return stepExecution;\n        }\n        return this.checkJobExecutionFlags(stepExecution).then(()=> {\n            // Check if someone is trying to stop us\n            if (stepExecution.terminateOnly) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            return stepExecution\n        }).then(()=> {\n            return Promise.resolve().then(()=>{\n                return this.readNextChunk(stepExecution, currentItemCount, chunkSize, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to read chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            });\n        }).then(chunk=> {\n            return Promise.resolve().then(()=>{\n                return this.processChunk(stepExecution, chunk, currentItemCount, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to process chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then(processedChunk=> {\n            return Promise.resolve().then(()=>{\n                return this.writeChunk(stepExecution, processedChunk, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to write chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then((res)=> {\n            currentItemCount += chunkSize;\n            this.setCurrentItemCount(stepExecution, currentItemCount);\n            return this.updateJobProgress(stepExecution).then(()=> {\n                return this.handleNextChunk(stepExecution, jobResult);\n            });\n        })\n    }\n\n    processChunk(stepExecution, chunk, currentItemCount, jobResult) { //TODO promisify\n        return chunk.map((item, i)=>this.processItem(stepExecution, item, currentItemCount+i, jobResult));\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(stepExecution){\n        return {\n            total: this.getTotalItemCount(stepExecution),\n            current: this.getCurrentItemCount(stepExecution)\n        }\n    }\n\n    updateJobProgress(stepExecution) {\n        var progress = this.jobRepository.getJobByName(stepExecution.jobExecution.jobInstance.jobName).getProgress(stepExecution.jobExecution);\n        return this.jobRepository.updateJobExecutionProgress(stepExecution.jobExecution.id, progress);\n    }\n\n    checkJobExecutionFlags(stepExecution){\n        return this.jobRepository.getJobByName(stepExecution.jobExecution.jobInstance.jobName).checkExecutionFlags(stepExecution.jobExecution);\n    }\n}\n","export class ExtendableError {\n    data;\n    constructor(message, data) {\n        this.message = message;\n        this.data = data;\n        this.name = this.constructor.name;\n    }\n}\n","export * from './extendable-error'\nexport * from './job-data-invalid-exception'\nexport * from './job-execution-already-running-exception'\nexport * from './job-instance-already-complete-exception'\nexport * from './job-interrupted-exception'\nexport * from './job-parameters-invalid-exception'\nexport * from './job-restart-exception'\n\n\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobComputationException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobDataInvalidException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobExecutionAlreadyRunningException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobInstanceAlreadyCompleteException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobInterruptedException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobParametersInvalidException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobRestartException extends ExtendableError {\n}\n","import {Utils} from \"sd-utils\";\nimport {DataModel} from \"sd-model\";\nimport {StepExecution} from \"./step-execution\";\n\nexport class ExecutionContext {\n\n    dirty = false;\n    context = {};\n\n    constructor(context) {\n        if (context) {\n            this.context = Utils.clone(context)\n        }\n    }\n\n    put(key, value) {\n        var prevValue = this.context[key];\n        if (value != null) {\n            var result = this.context[key] = value;\n            this.dirty = prevValue == null || prevValue != null && prevValue != value;\n        }\n        else {\n            delete this.context[key];\n            this.dirty = prevValue != null;\n        }\n    }\n\n    get(key) {\n        return this.context[key];\n    }\n\n    containsKey(key) {\n        return this.context.hasOwnProperty(key);\n    }\n\n    remove(key) {\n        delete this.context[key];\n    }\n\n    setData(data) { //set data model\n        return this.put(\"data\", data);\n    }\n\n    getData() { // get data model\n        return this.get(\"data\");\n    }\n\n\n    getDTO(filteredProperties = [], deepClone = true) {\n        var cloneMethod = Utils.cloneDeepWith;\n        if (!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n\n        let dto = Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if (filteredProperties.indexOf(key) > -1) {\n                return null;\n            }\n\n            if (value instanceof DataModel) {\n                return value.getDTO()\n            }\n\n            if(value && value.$ObjectWithIdAndEditableFields && value.id && this.getData().findById(value.id)){\n                return {\n                    '$ObjectWithIdAndEditableFields': true,\n                    id: value.id\n                }\n            }\n\n            if (value instanceof Error) {\n                return Utils.getErrorDTO(value);\n            }\n\n        }));\n\n        return dto\n    }\n\n}\n","import * as exceptions from './exceptions'\n\nexport {exceptions}\nexport * from './execution-context'\nexport * from './job'\nexport * from './job-execution'\nexport * from './job-execution-flag'\nexport * from './job-execution-listener'\nexport * from './job-instance'\nexport * from './job-key-generator'\nexport * from './job-launcher'\nexport * from './job-parameter-definition'\nexport * from './job-parameters'\nexport * from './job-status'\nexport * from './simple-job'\nexport * from './step'\nexport * from './step-execution'\nexport * from './step-execution-listener'\n\n\n\n\n","export const JOB_EXECUTION_FLAG = {\n    STOP: 'STOP'\n};\n","export class JobExecutionListener {\n    /*Called before a job executes*/\n    beforeJob(jobExecution) {\n\n    }\n\n    /*Called after completion of a job. Called after both successful and failed executions*/\n    afterJob(jobExecution) {\n\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {StepExecution} from \"./step-execution\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\n\n/*domain object representing the execution of a job.*/\nexport class JobExecution {\n    id;\n    jobInstance;\n    jobParameters;\n    stepExecutions = [];\n    status = JOB_STATUS.STARTING;\n    exitStatus = JOB_STATUS.UNKNOWN;\n    executionContext = new ExecutionContext();\n\n    startTime = null;\n    createTime = new Date();\n    endTime = null;\n    lastUpdated = null;\n\n    failureExceptions = [];\n\n    constructor(jobInstance, jobParameters, id) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.jobInstance = jobInstance;\n        this.jobParameters = jobParameters;\n    }\n\n    /**\n     * Register a step execution with the current job execution.\n     * @param stepName the name of the step the new execution is associated with\n     */\n    createStepExecution(stepName) {\n        var stepExecution = new StepExecution(stepName, this);\n        this.stepExecutions.push(stepExecution);\n        return stepExecution;\n    }\n\n    isRunning() {\n        return !this.endTime;\n    }\n\n    /**\n     * Test if this JobExecution has been signalled to\n     * stop.\n     */\n    isStopping() {\n        return this.status === JOB_STATUS.STOPPING;\n    }\n\n    /**\n     * Signal the JobExecution to stop.\n     */\n    stop() {\n        this.stepExecutions.forEach(se=> {\n            se.terminateOnly = true;\n        });\n        this.status = JOB_STATUS.STOPPING;\n    }\n\n    getData() {\n        return this.executionContext.getData();\n    }\n\n    getDTO(filteredProperties = [], deepClone = true) {\n        var cloneMethod = Utils.cloneDeepWith;\n        if (!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        return Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if (filteredProperties.indexOf(key) > -1) {\n                return null;\n            }\n\n            if ([\"jobParameters\", \"executionContext\"].indexOf(key) > -1) {\n                return value.getDTO()\n            }\n            if (value instanceof Error) {\n                return Utils.getErrorDTO(value);\n            }\n\n            if (value instanceof StepExecution) {\n                return value.getDTO([\"jobExecution\"], deepClone)\n            }\n        }))\n    }\n}\n","/* object representing a uniquely identifiable job run. JobInstance can be restarted multiple times in case of execution failure and it's lifecycle ends with first successful execution*/\nexport class JobInstance{\n\n    id;\n    jobName;\n    constructor(id, jobName){\n        this.id = id;\n        this.jobName = jobName;\n    }\n\n}\n","\nexport class JobKeyGenerator {\n    /*Method to generate the unique key used to identify a job instance.*/\n    static generateKey(jobParameters) {\n        var result = \"\";\n        jobParameters.definitions.forEach((d, i)=> {\n            if(d.identifying){\n                result += d.name + \"=\" + jobParameters.values[d.name] + \";\";\n            }\n        });\n        return result;\n    }\n}\n","import {JobRestartException} from \"./exceptions/job-restart-exception\";\nimport {JOB_STATUS} from \"./job-status\";\nimport {Utils, log} from \"sd-utils\";\nimport {JobParametersInvalidException} from \"./exceptions/job-parameters-invalid-exception\";\nimport {JobDataInvalidException} from \"./exceptions/job-data-invalid-exception\";\n\nexport class JobLauncher {\n\n    jobRepository;\n    jobWorker;\n\n    constructor(jobRepository, jobWorker, dataModelSerializer) {\n        this.jobRepository = jobRepository;\n        this.jobWorker = jobWorker;\n        this.dataModelSerializer = dataModelSerializer;\n    }\n\n\n    run(jobOrName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        var job;\n        var jobParameters;\n\n        return Promise.resolve().then(()=> {\n            if (Utils.isString(jobOrName)) {\n                job = this.jobRepository.getJobByName(jobOrName)\n            } else {\n                job = jobOrName;\n            }\n            if (!job) {\n                throw new JobRestartException(\"No such job: \" + jobOrName);\n            }\n\n            jobParameters = job.createJobParameters(jobParametersValues);\n\n            return this.validate(job, jobParameters, data);\n        }).then(valid=>{\n            return this.jobRepository.createJobExecution(job.name, jobParameters, data).then(jobExecution=>{\n\n\n                if(this.jobWorker){\n                    log.debug(\"Job: [\" + job.name + \"] execution [\"+jobExecution.id+\"] delegated to worker\");\n                    this.jobWorker.executeJob(jobExecution.id);\n                    return jobExecution;\n                }\n\n                var executionPromise = this._execute(job, jobExecution);\n                if(resolvePromiseAfterJobIsLaunched){\n                    return jobExecution;\n                }\n                return executionPromise;\n            })\n        })\n    }\n\n    validate(job, jobParameters, data){\n        return this.jobRepository.getLastJobExecution(job.name, jobParameters).then(lastExecution=>{\n            if (lastExecution != null) {\n                if (!job.isRestartable) {\n                    throw new JobRestartException(\"JobInstance already exists and is not restartable\");\n                }\n\n                lastExecution.stepExecutions.forEach(execution=> {\n                    if (execution.status == JOB_STATUS.UNKNOWN) {\n                        throw new JobRestartException(\"Step [\" + execution.stepName + \"] is of status UNKNOWN\");\n                    }\n                });\n            }\n            if (job.jobParametersValidator && !job.jobParametersValidator.validate(jobParameters)) {\n                throw new JobParametersInvalidException(\"Invalid job parameters in jobLauncher.run for job: \"+job.name)\n            }\n\n            if(job.jobDataValidator && !job.jobDataValidator.validate(data)){\n                throw new JobDataInvalidException(\"Invalid job data in jobLauncher.run for job: \"+job.name)\n            }\n\n            return true;\n        })\n    }\n\n    /**Execute previously created job execution*/\n    execute(jobExecutionOrId){\n\n        return Promise.resolve().then(()=>{\n            if(Utils.isString(jobExecutionOrId)){\n                return this.jobRepository.getJobExecutionById(jobExecutionOrId);\n            }\n            return jobExecutionOrId;\n        }).then(jobExecution=>{\n            if(!jobExecution){\n                throw new JobRestartException(\"JobExecution [\" + jobExecutionOrId + \"] is not found\");\n            }\n\n            if (jobExecution.status !== JOB_STATUS.STARTING) {\n                throw new JobRestartException(\"JobExecution [\" + jobExecution.id + \"] already started\");\n            }\n\n            var jobName = jobExecution.jobInstance.jobName;\n            var job = this.jobRepository.getJobByName(jobName);\n            if(!job){\n                throw new JobRestartException(\"No such job: \" + jobName);\n            }\n\n            return  this._execute(job, jobExecution);\n        })\n    }\n\n    _execute(job, jobExecution){\n        var jobName = job.name;\n        log.info(\"Job: [\" + jobName + \"] launched with the following parameters: [\" + jobExecution.jobParameters + \"]\", jobExecution.getData());\n        return job.execute(jobExecution).then(jobExecution=>{\n            log.info(\"Job: [\" + jobName + \"] completed with the following parameters: [\" + jobExecution.jobParameters + \"] and the following status: [\" + jobExecution.status + \"]\");\n            return jobExecution;\n        }).catch(e =>{\n            log.error(\"Job: [\" + jobName + \"] failed unexpectedly and fatally with the following parameters: [\" + jobExecution.jobParameters + \"]\", e);\n            throw e;\n        })\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport const PARAMETER_TYPE = {\n    STRING: 'STRING',\n    DATE: 'DATE',\n    INTEGER: 'INTEGER',\n    NUMBER: 'FLOAT',\n    BOOLEAN: 'BOOLEAN',\n    NUMBER_EXPRESSION: 'NUMBER_EXPRESSION',\n    COMPOSITE: 'COMPOSITE' //composite parameter with nested subparameters\n};\n\nexport class JobParameterDefinition {\n    name;\n    type;\n    nestedParameters = [];\n    minOccurs;\n    maxOccurs;\n    required = true;\n\n    identifying;\n    validator;\n    singleValueValidator;\n\n    constructor(name, typeOrNestedParametersDefinitions, minOccurs = 1, maxOccurs = 1, identifying = false, singleValueValidator = null, validator = null) {\n        this.name = name;\n        if (Utils.isArray(typeOrNestedParametersDefinitions)) {\n            this.type = PARAMETER_TYPE.COMPOSITE;\n            this.nestedParameters = typeOrNestedParametersDefinitions;\n        } else {\n            this.type = typeOrNestedParametersDefinitions;\n        }\n        this.validator = validator;\n        this.singleValueValidator = singleValueValidator;\n        this.identifying = identifying;\n        this.minOccurs = minOccurs;\n        this.maxOccurs = maxOccurs;\n    }\n\n    set(key, val) {\n        this[key] = val;\n        return this;\n    }\n\n    validate(value, allValues) {\n        var isArray = Utils.isArray(value);\n\n        if (this.maxOccurs > 1 && !isArray) {\n            return false;\n        }\n\n        if (!isArray) {\n            return this.validateSingleValue(value, allValues)\n        }\n\n        if (value.length < this.minOccurs || value.length > this.maxOccurs) {\n            return false;\n        }\n\n        if (!value.every(v=>this.validateSingleValue(v, value))) {\n            return false;\n        }\n\n        if (this.validator) {\n            return this.validator(value, allValues);\n        }\n\n        return true;\n    }\n\n    static computeNumberExpression(val){\n        let parsed = parseFloat(val);\n        if(parsed === Infinity || parsed === -Infinity) {\n            return parsed;\n        }\n\n        if(!ExpressionEngine.validate(val, {}, false)){\n            return null\n        }\n\n        return ExpressionEngine.eval(val, true)\n    }\n\n    // allValues - all values on the same level\n    validateSingleValue(value, allValues) {\n\n        if ((!value && value !== 0 && value !== false) && this.minOccurs > 0) {\n            return !this.required\n        }\n\n        if (PARAMETER_TYPE.STRING === this.type && !Utils.isString(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.DATE === this.type && !Utils.isDate(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.INTEGER === this.type && !Utils.isInt(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.NUMBER === this.type && !Utils.isNumber(value)) {\n            return false;\n        }\n\n        if (PARAMETER_TYPE.BOOLEAN === this.type && !Utils.isBoolean(value)) {\n            return false;\n        }\n\n\n        if (PARAMETER_TYPE.NUMBER_EXPRESSION === this.type) {\n            value = JobParameterDefinition.computeNumberExpression(value);\n            if(value === null){\n                return false\n            }\n        }\n\n        if (PARAMETER_TYPE.COMPOSITE === this.type) {\n            if (!Utils.isObject(value)) {\n                return false;\n            }\n            if (!this.nestedParameters.every((nestedDef, i)=>nestedDef.validate(value[nestedDef.name]))) {\n                return false;\n            }\n        }\n\n        if (this.singleValueValidator) {\n            return this.singleValueValidator(value, allValues);\n        }\n\n        return true;\n    }\n\n    value(value){\n        if(PARAMETER_TYPE.NUMBER_EXPRESSION === this.type) {\n            return JobParameterDefinition.computeNumberExpression(value);\n        }\n\n        return value;\n    }\n}\n","import {PARAMETER_TYPE} from \"./job-parameter-definition\";\nimport {Utils} from \"sd-utils\";\n\nexport class JobParameters{\n    definitions = [];\n    values={};\n\n    constructor(values){\n        this.initDefinitions();\n        this.initDefaultValues();\n        if (values) {\n            Utils.deepExtend(this.values, values);\n        }\n    }\n\n    initDefinitions(){\n\n    }\n\n    initDefaultValues(){\n\n    }\n\n    validate(){\n        return this.definitions.every((def, i)=>def.validate(this.values[def.name], this.values));\n    }\n\n    getDefinition(path){\n        var defs =this.definitions;\n        let def = null;\n        if(!path.split().every(name=>{\n                def = Utils.find(defs, d=>d.name == name);\n                if(!def){\n                    return false\n                }\n                defs = def.nestedParameters;\n                return true;\n        })){\n            return null;\n        }\n        return def;\n    }\n\n    /*get or set value by path*/\n    value(path, value){\n        if (arguments.length === 1) {\n            let def = this.getDefinition(path);\n            let val = Utils.get(this.values, path, null);\n            if(def){\n                return def.value(val);\n            }\n            return  val;\n        }\n        Utils.set(this.values, path, value);\n        return value;\n    }\n\n    toString(){\n        var result = \"JobParameters[\";\n\n        this.definitions.forEach((d, i)=> {\n\n            var val = this.values[d.name];\n            // if(Utils.isArray(val)){\n            //     var values = val;\n            //\n            //\n            // }\n            // if(PARAMETER_TYPE.COMPOSITE == d.type){\n            //\n            // }\n\n            result += d.name + \"=\"+val + \";\";\n        });\n        result+=\"]\";\n        return result;\n    }\n\n    getDTO(){\n        return {\n            values: this.values\n        }\n    }\n}\n","import {JobRepository} from \"./job-repository\";\nimport { openDb, deleteDb } from 'idb';\nimport {Utils} from \"sd-utils\";\nimport {JobExecution} from \"../job-execution\";\nimport {JobInstance} from \"../job-instance\";\nimport {StepExecution} from \"../step-execution\";\nimport {ExecutionContext} from \"../execution-context\";\nimport {DataModel} from \"sd-model\";\nimport {log} from \"sd-utils\";\nimport {JobResult} from \"../job-result\";\n\n/* IndexedDB job repository*/\nexport class IdbJobRepository extends JobRepository {\n\n    dbPromise;\n    jobInstanceDao;\n    jobExecutionDao;\n    stepExecutionDao;\n    jobResultDao;\n    jobExecutionProgressDao;\n    jobExecutionFlagDao;\n\n    constructor(expressionsReviver, dbName = 'sd-job-repository', deleteDB = false) {\n        super();\n        this.dbName = dbName;\n        this.expressionsReviver = expressionsReviver;\n        if (deleteDB) {\n            this.deleteDB().then(()=> {\n                this.initDB()\n            }).catch(e=> {\n                log.error(e);\n                this.initDB();\n            })\n        } else {\n            this.initDB()\n        }\n    }\n\n    initDB() {\n        this.dbPromise = openDb(this.dbName, 2, upgradeDB => {\n            // Note: we don't use 'break' in this switch statement,\n            // the fall-through behaviour is what we want.\n            switch (upgradeDB.oldVersion) {\n                case 0:\n                    upgradeDB.createObjectStore('job-instances');\n                    var jobExecutionsOS = upgradeDB.createObjectStore('job-executions');\n                    jobExecutionsOS.createIndex(\"jobInstanceId\", \"jobInstance.id\", {unique: false});\n                    jobExecutionsOS.createIndex(\"createTime\", \"createTime\", {unique: false});\n                    jobExecutionsOS.createIndex(\"status\", \"status\", {unique: false});\n                    upgradeDB.createObjectStore('job-execution-progress');\n                    upgradeDB.createObjectStore('job-execution-flags');\n                    var stepExecutionsOS = upgradeDB.createObjectStore('step-executions');\n                    stepExecutionsOS.createIndex(\"jobExecutionId\", \"jobExecutionId\", {unique: false});\n\n                    var jobResultOS = upgradeDB.createObjectStore('job-results');\n                    jobResultOS.createIndex(\"jobInstanceId\", \"jobInstance.id\", {unique: true});\n                case 1:\n                    upgradeDB.transaction.objectStore('job-instances').createIndex(\"id\", \"id\", {unique: true});\n            }\n\n        });\n\n        this.jobInstanceDao = new ObjectStoreDao('job-instances', this.dbPromise);\n        this.jobExecutionDao = new ObjectStoreDao('job-executions', this.dbPromise);\n        this.jobExecutionProgressDao = new ObjectStoreDao('job-execution-progress', this.dbPromise);\n        this.jobExecutionFlagDao = new ObjectStoreDao('job-execution-flags', this.dbPromise);\n        this.stepExecutionDao = new ObjectStoreDao('step-executions', this.dbPromise);\n        this.jobResultDao = new ObjectStoreDao('job-results', this.dbPromise);\n    }\n\n    deleteDB() {\n        return Promise.resolve().then(_=>deleteDb(this.dbName));\n    }\n\n\n    removeJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        return this.jobInstanceDao.remove(key).then(()=>{\n            this.findJobExecutions(jobInstance, false).then(jobExecutions=>{  //  Not waiting for promise resolves\n                jobExecutions.forEach(this.removeJobExecution, this);\n            });\n\n            this.getJobResultByInstance(jobInstance).then(jobResult=>{\n                return this.removeJobResult(jobResult)\n            })\n        });\n    }\n\n    removeJobExecution(jobExecution){\n        return this.jobExecutionDao.remove(jobExecution.id).then(()=>{\n            return this.findStepExecutions(jobExecution.id, false).then(stepExecutions=>{  // Not waiting for promise resolves\n                stepExecutions.forEach(this.removeStepExecution, this);\n            });\n        });\n    }\n\n    removeStepExecution(stepExecution){\n        return this.stepExecutionDao.remove(stepExecution.id)\n    }\n\n    removeJobResult(jobResult){\n        return this.jobResultDao.remove(jobResult.id);\n    }\n\n\n\n\n    getJobResult(jobResultId, revive = true) {\n        return this.jobResultDao.get(jobResultId).then(dto => dto && revive ? this.reviveJobResult(dto) : dto);\n    }\n\n    getJobResultByInstance(jobInstance, revive = true) {\n        return this.jobResultDao.getByIndex(\"jobInstanceId\", jobInstance.id).then(dto => dto && revive ? this.reviveJobResult(dto) : dto);\n    }\n\n    getJobResultByExecution(jobExecution, revive = true) {\n        return this.getJobResultByInstance(jobExecution.jobInstance, false).then(dto => dto && revive ? this.reviveJobResult(dto, jobExecution) : dto);\n    }\n\n    saveJobResult(jobResult) {\n        let dto = jobResult.getDTO();\n        return this.jobResultDao.set(jobResult.id, dto).then(r=>jobResult);\n    }\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return this.jobInstanceDao.get(key).then(dto=>dto ? this.reviveJobInstance(dto) : dto);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters) {\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        return this.jobInstanceDao.set(key, jobInstance).then(r=>jobInstance);\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution) {\n        var dto = jobExecution.getDTO();\n        var stepExecutionsDTOs = dto.stepExecutions;\n        dto.stepExecutions = null;\n        return this.jobExecutionDao.set(jobExecution.id, dto).then(r=>this.saveStepExecutionsDTOS(stepExecutionsDTOs)).then(r=>jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress) {\n        return this.jobExecutionProgressDao.set(jobExecutionId, progress)\n    }\n\n    getJobExecutionProgress(jobExecutionId) {\n        return this.jobExecutionProgressDao.get(jobExecutionId)\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag) {\n        return this.jobExecutionFlagDao.set(jobExecutionId, flag)\n    }\n\n    getJobExecutionFlag(jobExecutionId) {\n        return this.jobExecutionFlagDao.get(jobExecutionId)\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution) {\n        var dto = stepExecution.getDTO([\"jobExecution\"]);\n        return this.stepExecutionDao.set(stepExecution.id, dto).then(r=>stepExecution);\n    }\n\n    saveStepExecutionsDTOS(stepExecutions, savedExecutions = []) {\n        if (stepExecutions.length <= savedExecutions.length) {\n            return Promise.resolve(savedExecutions);\n        }\n        var stepExecutionDTO = stepExecutions[savedExecutions.length];\n        return this.stepExecutionDao.set(stepExecutionDTO.id, stepExecutionDTO).then(()=> {\n            savedExecutions.push(stepExecutionDTO);\n            return this.saveStepExecutionsDTOS(stepExecutions, savedExecutions);\n        });\n    }\n\n    getJobExecutionById(id) {\n        return this.jobExecutionDao.get(id).then(dto=> {\n            return this.fetchJobExecutionRelations(dto);\n        });\n    }\n\n    fetchJobExecutionRelations(jobExecutionDTO, revive = true) {\n        if (!jobExecutionDTO) {\n            return Promise.resolve(null)\n        }\n        return this.findStepExecutions(jobExecutionDTO.id, false).then(steps=> {\n            jobExecutionDTO.stepExecutions = steps;\n            if (!revive) {\n                return jobExecutionDTO;\n            }\n            return this.reviveJobExecution(jobExecutionDTO);\n        })\n    }\n\n    fetchJobExecutionsRelations(jobExecutionDtoList, revive = true, fetched = []) {\n        if (jobExecutionDtoList.length <= fetched.length) {\n            return Promise.resolve(fetched);\n        }\n        return this.fetchJobExecutionRelations(jobExecutionDtoList[fetched.length], revive).then((jobExecution)=> {\n            fetched.push(jobExecution);\n\n            return this.fetchJobExecutionsRelations(jobExecutionDtoList, revive, fetched);\n        });\n    }\n\n    findStepExecutions(jobExecutionId, revive = true) {\n        return this.stepExecutionDao.getAllByIndex(\"jobExecutionId\", jobExecutionId).then(dtos=> {\n            if (!revive) {\n                return dtos;\n            }\n            return dtos.map(dto=>this.reviveStepExecution(dto));\n        })\n    }\n\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance, fetchRelationsAndRevive = true) {\n        return this.jobExecutionDao.getAllByIndex(\"jobInstanceId\", jobInstance.id).then(values=> {\n            var sorted = values.sort(function (a, b) {\n                return a.createTime.getTime() - b.createTime.getTime()\n            });\n\n            if (!fetchRelationsAndRevive) {\n                return sorted;\n            }\n\n            return this.fetchJobExecutionsRelations(sorted, true)\n        });\n    }\n\n    getLastJobExecutionByInstance(jobInstance, fetchRelationsAndRevive = true) {\n        return this.findJobExecutions(jobInstance, false).then(executions=>{\n            let execution = executions[executions.length - 1];\n            if (!fetchRelationsAndRevive) {\n                return execution;\n            }\n            this.fetchJobExecutionRelations(execution);\n        });\n    }\n\n    getLastStepExecution(jobInstance, stepName) {\n        return this.findJobExecutions(jobInstance).then(jobExecutions=> {\n            var stepExecutions = [];\n            jobExecutions.forEach(jobExecution=>jobExecution.stepExecutions.filter(s=>s.stepName === stepName).forEach((s)=>stepExecutions.push(s)));\n            var latest = null;\n            stepExecutions.forEach(s=> {\n                if (latest == null || latest.startTime.getTime() < s.startTime.getTime()) {\n                    latest = s;\n                }\n            });\n            return latest;\n        })\n    }\n\n    reviveJobInstance(dto) {\n        return new JobInstance(dto.id, dto.jobName);\n    }\n\n    reviveExecutionContext(dto) {\n        let executionContext = new ExecutionContext();\n        executionContext.context = dto.context;\n        let data = executionContext.getData();\n        if (data) {\n            let dataModel = new DataModel();\n            dataModel.loadFromDTO(data, this.expressionsReviver);\n\n            executionContext.setData(null);\n            this.reviveFromDTO(executionContext.context, dto.context, dataModel);\n\n            executionContext.setData(dataModel);\n\n        }\n        return executionContext\n    }\n\n    reviveFromDTO(target, dto, dataModel) {\n        return Utils.mergeWith(target, dto, (value, dtoValue, key)=> {\n            if(dtoValue && dtoValue.$ObjectWithIdAndEditableFields && dtoValue.id){\n                return dataModel.findById(dtoValue.id) || value;\n            }\n        })\n    }\n\n    reviveJobExecution(dto) {\n\n        var job = this.getJobByName(dto.jobInstance.jobName);\n        var jobInstance = this.reviveJobInstance(dto.jobInstance);\n        var jobParameters = job.createJobParameters(dto.jobParameters.values);\n        var jobExecution = new JobExecution(jobInstance, jobParameters, dto.id);\n        var executionContext = this.reviveExecutionContext(dto.executionContext);\n        return Utils.mergeWith(jobExecution, dto, (objValue, srcValue, key, object, source, stack)=> {\n            if (key === \"jobInstance\") {\n                return jobInstance;\n            }\n            if (key === \"executionContext\") {\n                return executionContext;\n            }\n            if (key === \"jobParameters\") {\n                return jobParameters;\n            }\n            if (key === \"jobExecution\") {\n                return jobExecution;\n            }\n\n            if (key === \"stepExecutions\") {\n                return srcValue.map(stepDTO => this.reviveStepExecution(stepDTO, jobExecution));\n            }\n        })\n    }\n\n    reviveStepExecution(dto, jobExecution) {\n        var stepExecution = new StepExecution(dto.stepName, jobExecution, dto.id);\n        var executionContext = this.reviveExecutionContext(dto.executionContext);\n        return Utils.mergeWith(stepExecution, dto, (objValue, srcValue, key, object, source, stack)=> {\n            if (key === \"jobExecution\") {\n                return jobExecution;\n            }\n            if (key === \"executionContext\") {\n                return executionContext;\n            }\n        })\n    }\n\n    reviveJobResult(dto, jobExecution = null) {\n        let job = this.getJobByName(dto.jobInstance.jobName);\n        let jobInstance = this.reviveJobInstance(dto.jobInstance);\n\n        let contextPromise;\n        if (jobExecution != null) {\n            contextPromise = Promise.resolve(jobExecution.executionContext);\n        }else{\n            contextPromise = this.getLastJobExecutionByInstance(jobInstance, false).then(jobExecutionDto => this.reviveExecutionContext(jobExecutionDto.executionContext));\n        }\n\n        return contextPromise.then(executionContext => job.reviveResultData( this.reviveFromDTO({}, dto.data, executionContext.getData()), executionContext)).then(d=>new JobResult(jobInstance, dto.id, d));\n    }\n}\n\n\nclass ObjectStoreDao {\n\n    name;\n    dbPromise;\n\n    constructor(name, dbPromise) {\n        this.name = name;\n        this.dbPromise = dbPromise;\n    }\n\n    get(key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).get(key);\n        });\n    }\n\n    getAllByIndex(indexName, key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).index(indexName).getAll(key)\n        });\n    }\n\n    getByIndex(indexName, key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).index(indexName).get(key)\n        });\n    }\n\n    set(key, val) {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).put(val, key);\n            return tx.complete;\n        });\n    }\n\n    remove(key) {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).delete(key);\n            return tx.complete;\n        });\n    }\n\n    clear() {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).clear();\n            return tx.complete;\n        });\n    }\n\n    keys() {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name);\n            const keys = [];\n            const store = tx.objectStore(this.name);\n\n            // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n            // openKeyCursor isn't supported by Safari, so we fall back\n            (store.iterateKeyCursor || store.iterateCursor).call(store, cursor => {\n                if (!cursor) return;\n                keys.push(cursor.key);\n                cursor.continue();\n            });\n\n            return tx.complete.then(() => keys);\n        });\n    }\n}\n","import {JobKeyGenerator} from \"../job-key-generator\";\nimport {JobInstance} from \"../job-instance\";\nimport {Utils} from \"sd-utils\";\nimport {JobExecution} from \"../job-execution\";\nimport {JobExecutionAlreadyRunningException} from \"../exceptions/job-execution-already-running-exception\";\nimport {JOB_STATUS} from \"../job-status\";\nimport {JobInstanceAlreadyCompleteException} from \"../exceptions/job-instance-already-complete-exception\";\nimport {ExecutionContext} from \"../execution-context\";\nimport {StepExecution} from \"../step-execution\";\nimport {DataModel} from \"sd-model\";\nimport {JobResult} from \"../job-result\";\n\nexport class JobRepository {\n\n    jobByName = {};\n\n    registerJob(job) {\n        this.jobByName[job.name] = job;\n    }\n\n    getJobByName(name) {\n        return this.jobByName[name];\n    }\n\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n       throw \"JobRepository getJobInstance function not implemented!\"\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(key, jobInstance){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    getJobExecutionById(id){\n        throw \"JobRepository.getJobExecutionById function not implemented!\"\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        throw \"JobRepository.getJobExecutionProgress function not implemented!\"\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        throw \"JobRepository.saveJobExecutionFlag function not implemented!\"\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        throw \"JobRepository.getJobExecutionFlag function not implemented!\"\n    }\n\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        throw \"JobRepository.saveStepExecution function not implemented!\"\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        throw \"JobRepository.findJobExecutions function not implemented!\"\n    }\n\n    getJobResult(jobResultId){\n        throw \"JobRepository.getJobResult function not implemented!\"\n    }\n\n    getJobResultByInstance(jobInstance){\n        throw \"JobRepository.getJobResultByInstance function not implemented!\"\n    }\n\n    getJobResultByExecution(jobInstance){\n        throw \"JobRepository.getJobResultByExecution function not implemented!\"\n    }\n\n    saveJobResult(jobResult) {\n        throw \"JobRepository.setJobResult function not implemented!\"\n    }\n\n\n    removeJobInstance(jobInstance, jobParameters){\n        throw \"JobRepository.removeJobInstance function not implemented!\"\n    }\n\n    removeJobExecution(jobExecution){\n        throw \"JobRepository.removeJobExecution function not implemented!\"\n    }\n\n    removeStepExecution(stepExecution){\n        throw \"JobRepository.removeStepExecution function not implemented!\"\n    }\n\n    removeJobResult(jobResult){\n        throw \"JobRepository.removeJobResult function not implemented!\"\n    }\n\n    /*Create a new JobInstance with the name and job parameters provided. return promise*/\n    createJobInstance(jobName, jobParameters) {\n        var jobInstance = new JobInstance(Utils.guid(), jobName);\n        return this.saveJobInstance(jobInstance, jobParameters);\n    }\n\n    /*Check if an instance of this job already exists with the parameters provided.*/\n    isJobInstanceExists(jobName, jobParameters) {\n        return this.getJobInstance(jobName, jobParameters).then(result => !!result).catch(error=>false);\n    }\n\n    generateJobInstanceKey(jobName, jobParameters) {\n        return jobName + \"|\" + JobKeyGenerator.generateKey(jobParameters);\n    }\n\n    /*Create a JobExecution for a given  Job and JobParameters. If matching JobInstance already exists,\n     * the job must be restartable and it's last JobExecution must *not* be\n     * completed. If matching JobInstance does not exist yet it will be  created.*/\n\n    createJobExecution(jobName, jobParameters, data) {\n        return this.getJobInstance(jobName, jobParameters).then(jobInstance=>{\n            if (jobInstance != null) {\n                return this.findJobExecutions(jobInstance).then(executions=>{\n                    executions.forEach(execution=> {\n                        if (execution.isRunning()) {\n                            throw new JobExecutionAlreadyRunningException(\"A job execution for this job is already running: \" + jobInstance.jobName);\n                        }\n                        if (execution.status == JOB_STATUS.COMPLETED || execution.status == JOB_STATUS.ABANDONED) {\n                            throw new JobInstanceAlreadyCompleteException(\n                                \"A job instance already exists and is complete for parameters=\" + jobParameters\n                                + \".  If you want to run this job again, change the parameters.\");\n                        }\n                    });\n\n                    var executionContext = executions[executions.length - 1].executionContext;\n\n                    return [jobInstance, executionContext];\n                })\n            }\n\n            // no job found, create one\n            jobInstance = this.createJobInstance(jobName, jobParameters);\n            var executionContext = new ExecutionContext();\n            var dataModel = new DataModel();\n            dataModel._setNewState(data.createStateSnapshot());\n            executionContext.setData(dataModel);\n            return Promise.all([jobInstance, executionContext]);\n        }).then(instanceAndExecutionContext=>{\n            var jobExecution = new JobExecution(instanceAndExecutionContext[0], jobParameters);\n            jobExecution.executionContext = instanceAndExecutionContext[1];\n            jobExecution.lastUpdated = new Date();\n            return this.saveJobExecution(jobExecution);\n        }).catch(e=>{\n            throw e;\n        })\n    }\n\n    getLastJobExecution(jobName, jobParameters) {\n        return this.getJobInstance(jobName, jobParameters).then((jobInstance)=>{\n            if(!jobInstance){\n                return null;\n            }\n            return this.getLastJobExecutionByInstance(jobInstance);\n        })\n    }\n\n    getLastJobExecutionByInstance(jobInstance){\n        return this.findJobExecutions(jobInstance).then(executions=>executions[executions.length -1]);\n    }\n\n    getLastStepExecution(jobInstance, stepName) {\n        return this.findJobExecutions(jobInstance).then(jobExecutions=>{\n            var stepExecutions=[];\n            jobExecutions.forEach(jobExecution=>jobExecution.stepExecutions.filter(s=>s.stepName === stepName).forEach((s)=>stepExecutions.push(s)));\n            var latest = null;\n            stepExecutions.forEach(s=>{\n                if (latest == null || latest.startTime.getTime() < s.startTime.getTime()) {\n                    latest = s;\n                }\n            });\n            return latest;\n        })\n    }\n\n    addStepExecution(stepExecution) {\n        stepExecution.lastUpdated = new Date();\n        return this.saveStepExecution(stepExecution);\n    }\n\n    update(o){\n        o.lastUpdated = new Date();\n\n        if(o instanceof JobExecution){\n            return this.saveJobExecution(o);\n        }\n\n        if(o instanceof StepExecution){\n            return this.saveStepExecution(o);\n        }\n\n        throw \"Object not updatable: \"+o\n    }\n\n    remove(o){\n\n        if(o instanceof JobExecution){\n            return this.removeJobExecution(o);\n        }\n\n        if(o instanceof StepExecution){\n            return this.removeStepExecution(o);\n        }\n\n        if(o instanceof JobResult){\n            return this.removeJobResult();\n        }\n\n        return Promise.reject(\"Object not removable: \"+o);\n    }\n\n\n    reviveJobInstance(dto) {\n        return dto;\n    }\n\n    reviveExecutionContext(dto) {\n        return dto;\n    }\n\n    reviveJobExecution(dto) {\n        return dto;\n    }\n\n    reviveStepExecution(dto, jobExecution) {\n        return dto;\n    }\n}\n","import {JobRepository} from \"./job-repository\";\nimport {Utils} from \"sd-utils\";\n\nexport class SimpleJobRepository extends JobRepository{\n    jobInstancesByKey = {};\n    jobExecutions = [];\n    stepExecutions = [];\n    executionProgress = {};\n    executionFlags = {};\n    jobResults = [];\n\n    removeJobInstance(jobInstance){\n        Utils.forOwn(this.jobInstancesByKey,  (ji, key)=>{\n            if(ji===jobInstance){\n                delete this.jobInstancesByKey[key]\n            }\n        });\n\n        this.jobExecutions.filter(jobExecution=>jobExecution.jobInstance.id == jobInstance.id).reverse().forEach(this.removeJobExecution, this);\n        this.jobResults.filter(jobResult=>jobResult.jobInstance.id == jobInstance.id).reverse().forEach(this.removeJobResult, this);\n\n        return Promise.resolve();\n    }\n\n    removeJobExecution(jobExecution){\n        let index = this.jobExecutions.indexOf(jobExecution);\n        if(index>-1) {\n            this.jobExecutions.splice(index, 1)\n        }\n\n        this.stepExecutions.filter(stepExecution=>stepExecution.jobExecution.id === jobExecution.id).reverse().forEach(this.removeStepExecution, this);\n        return Promise.resolve();\n    }\n\n    removeStepExecution(stepExecution){\n        let index = this.stepExecutions.indexOf(stepExecution);\n        if(index>-1) {\n            this.stepExecutions.splice(index, 1)\n        }\n        return Promise.resolve();\n    }\n\n    removeJobResult(jobResult){\n        let index = this.jobResults.indexOf(jobResult);\n        if(index>-1) {\n            this.jobResults.splice(index, 1)\n        }\n        return Promise.resolve();\n    }\n\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return Promise.resolve(this.jobInstancesByKey[key]);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        this.jobInstancesByKey[key] = jobInstance;\n        return Promise.resolve(jobInstance)\n    }\n\n    getJobResult(jobResultId){\n        return Promise.resolve(Utils.find(this.jobResults, r=>r.id===jobResultId))\n    }\n\n    getJobResultByInstance(jobInstance){\n        return Promise.resolve(Utils.find(this.jobResults, r=>r.jobInstance.id===jobInstance.id))\n    }\n\n    getJobResultByExecution(jobExecution){\n        return this.getJobResultByInstance(jobExecution.jobInstance);\n    }\n\n    saveJobResult(jobResult) {\n        this.jobResults.push(jobResult);\n        return Promise.resolve(jobResult);\n    }\n\n    getJobExecutionById(id){\n        return Promise.resolve(Utils.find(this.jobExecutions, ex=>ex.id===id))\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        this.jobExecutions.push(jobExecution);\n        return Promise.resolve(jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        this.executionProgress[jobExecutionId] = progress;\n        return Promise.resolve(progress)\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        return Promise.resolve(this.executionProgress[jobExecutionId])\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        this.executionFlags[jobExecutionId] = flag;\n        return Promise.resolve(flag)\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        return Promise.resolve(this.executionFlags[jobExecutionId])\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        this.stepExecutions.push(stepExecution);\n        return Promise.resolve(stepExecution);\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        return Promise.resolve(this.jobExecutions.filter(e=>e.jobInstance.id == jobInstance.id).sort(function (a, b) {\n            return a.createTime.getTime() - b.createTime.getTime()\n        }));\n    }\n\n\n}\n","import {JobRepository} from \"./job-repository\";\nimport {Utils} from \"sd-utils\";\nimport {SimpleJobRepository} from \"./simple-job-repository\";\n\n\n\nexport class TimeoutJobRepository extends SimpleJobRepository{\n\n    createTimeoutPromise(valueToResolve, delay=1){\n        return new Promise(resolve=>{\n            setTimeout(function(){\n                resolve(valueToResolve);\n            }, delay)\n        });\n    }\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return this.createTimeoutPromise(this.jobInstancesByKey[key]);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        this.jobInstancesByKey[key] = jobInstance;\n        return this.createTimeoutPromise(jobInstance);\n    }\n\n    getJobResult(jobResultId){\n        return this.createTimeoutPromise(Utils.find(this.jobResults, r=>r.id===jobResultId));\n    }\n\n    getJobResultByInstance(jobInstance){\n        return this.createTimeoutPromise(Utils.find(this.jobResults, r=>r.jobInstance.id===jobInstance.id));\n    }\n\n    getJobResultByExecution(jobExecution){\n        return this.getJobResultByInstance(jobExecution.jobInstance);\n    }\n\n    saveJobResult(jobResult) {\n        this.jobResults.push(jobResult);\n        return this.createTimeoutPromise(jobResult);\n    }\n\n    getJobExecutionById(id){\n        return this.createTimeoutPromise(Utils.find(this.jobExecutions, ex=>ex.id===id));\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        this.jobExecutions.push(jobExecution);\n        return this.createTimeoutPromise(jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        this.executionProgress[jobExecutionId] = progress;\n        return this.createTimeoutPromise(progress);\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        return this.createTimeoutPromise(this.executionProgress[jobExecutionId]);\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        this.executionFlags[jobExecutionId] = flag;\n        return this.createTimeoutPromise(flag);\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        return this.createTimeoutPromise(this.executionFlags[jobExecutionId]);\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        this.stepExecutions.push(stepExecution);\n        return this.createTimeoutPromise(stepExecution);\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        return this.createTimeoutPromise(this.jobExecutions.filter(e=>e.jobInstance.id == jobInstance.id).sort(function (a, b) {\n            return a.createTime.getTime() - b.createTime.getTime()\n        }));\n    }\n\n    remove(object){ //TODO\n\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {StepExecution} from \"./step-execution\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {JobExecution} from \"./job-execution\";\n\n/*domain object representing the result of a job instance.*/\nexport class JobResult {\n    id;\n    jobInstance;\n    lastUpdated = null;\n\n    data; // job result data - this is not a data model!\n\n    constructor(jobInstance, id, data) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.jobInstance = jobInstance;\n        this.data = data;\n    }\n\n    getDTO(filteredProperties=[], deepClone = true){\n\n        var cloneMethod = Utils.cloneDeepWith;\n        if(!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        let dto = Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if(filteredProperties.indexOf(key)>-1){\n                return null;\n            }\n\n            if(value && value.$ObjectWithIdAndEditableFields && value.id){\n                return {\n                    '$ObjectWithIdAndEditableFields': true,\n                    id: value.id\n                }\n            }\n\n            if(value instanceof Error){\n                return Utils.getErrorDTO(value);\n            }\n        }));\n\n        return dto\n    }\n}\n","export const JOB_STATUS = {\n    COMPLETED: 'COMPLETED',\n    STARTING: 'STARTING',\n    STARTED: 'STARTED',\n    STOPPING: 'STOPPING',\n    STOPPED: 'STOPPED',\n    FAILED: 'FAILED',\n    UNKNOWN: 'UNKNOWN',\n    ABANDONED: 'ABANDONED',\n    EXECUTING: 'EXECUTING' //for exit status only\n};\n","import {log} from 'sd-utils'\nimport {JOB_STATUS} from \"./job-status\";\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\nimport {JobParametersInvalidException} from \"./exceptions/job-parameters-invalid-exception\";\nimport {JobDataInvalidException} from \"./exceptions/job-data-invalid-exception\";\nimport {JOB_EXECUTION_FLAG} from \"./job-execution-flag\";\nimport {JobResult} from \"./job-result\";\n\n/**\n * Base class for jobs\n * A Job is an entity that encapsulates an entire job process ( an abstraction representing the configuration of a job)\n * */\n\nexport class Job {\n\n    id;\n    name;\n    steps = [];\n\n    isRestartable=true;\n    executionListeners = [];\n    jobParametersValidator;\n\n    jobRepository;\n\n    constructor(name, jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        this.name = name;\n        this.jobParametersValidator = this.getJobParametersValidator();\n        this.jobDataValidator = this.getJobDataValidator();\n        this.jobRepository = jobRepository;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n    }\n\n    setJobRepository(jobRepository) {\n        this.jobRepository = jobRepository;\n    }\n\n    execute(execution) {\n        log.debug(\"Job execution starting: \", execution);\n        var jobResult;\n        return this.checkExecutionFlags(execution).then(execution=>{\n\n            if (execution.status === JOB_STATUS.STOPPING) {\n                // The job was already stopped\n                execution.status = JOB_STATUS.STOPPED;\n                execution.exitStatus = JOB_STATUS.COMPLETED;\n                log.debug(\"Job execution was stopped: \" + execution);\n                return execution;\n            }\n\n            if (this.jobParametersValidator && !this.jobParametersValidator.validate(execution.jobParameters)) {\n                throw new JobParametersInvalidException(\"Invalid job parameters in job execute\")\n            }\n\n            if(this.jobDataValidator && !this.jobDataValidator.validate(execution.getData())){\n                throw new JobDataInvalidException(\"Invalid job data in job execute\")\n            }\n\n\n            execution.startTime = new Date();\n            return Promise.all([this.updateStatus(execution, JOB_STATUS.STARTED), this.getResult(execution), this.updateProgress(execution)]).then(res=>{\n                execution=res[0];\n                jobResult = res[1];\n                if(!jobResult) {\n                    jobResult = new JobResult(execution.jobInstance)\n                }\n                this.executionListeners.forEach(listener=>listener.beforeJob(execution));\n\n                return this.doExecute(execution, jobResult);\n            });\n\n        }).then(execution=>{\n            log.debug(\"Job execution complete: \",execution);\n            return execution\n        }).catch(e=>{\n            if (e instanceof JobInterruptedException) {\n                log.info(\"Encountered interruption executing job\", e);\n                execution.status = JOB_STATUS.STOPPED;\n                execution.exitStatus = JOB_STATUS.STOPPED;\n            } else {\n                log.error(\"Encountered fatal error executing job\", e);\n                execution.status = JOB_STATUS.FAILED;\n                execution.exitStatus = JOB_STATUS.FAILED;\n            }\n            execution.failureExceptions.push(e);\n            return execution;\n        }).then(execution=>{\n            if(jobResult){\n                return this.jobRepository.saveJobResult(jobResult).then(()=>execution)\n            }\n            return execution\n        }).catch(e=>{\n            log.error(\"Encountered fatal error saving job results\", e);\n            if(e){\n                execution.failureExceptions.push(e);\n            }\n            execution.status = JOB_STATUS.FAILED;\n            execution.exitStatus = JOB_STATUS.FAILED;\n            return execution;\n        }).then(execution=>{\n            execution.endTime = new Date();\n            return Promise.all([this.jobRepository.update(execution), this.updateProgress(execution)]).then(res=>res[0])\n        }).then(execution=>{\n            try {\n                this.executionListeners.forEach(listener=>listener.afterJob(execution));\n            } catch (e) {\n                log.error(\"Exception encountered in afterStep callback\", e);\n            }\n            return execution;\n        })\n    }\n\n\n    updateStatus(jobExecution, status) {\n        jobExecution.status=status;\n        return this.jobRepository.update(jobExecution)\n    }\n\n    updateProgress(jobExecution){\n        return this.jobRepository.updateJobExecutionProgress(jobExecution.id, this.getProgress(jobExecution));\n    }\n\n    /* Extension point for subclasses allowing them to concentrate on processing logic and ignore listeners, returns promise*/\n    doExecute(execution, jobResult) {\n        throw 'doExecute function not implemented for job: ' + this.name\n    }\n\n    getJobParametersValidator() {\n        return {\n            validate: (params) => params.validate()\n        }\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => true\n        }\n    }\n\n    addStep(step){\n        this.steps.push(step);\n    }\n\n\n    createJobParameters(values){\n        throw 'createJobParameters function not implemented for job: ' + this.name\n    }\n\n    /*Should return progress object with fields:\n    * current\n    * total */\n    getProgress(execution){\n        return {\n            total: 1,\n            current: execution.status === JOB_STATUS.COMPLETED ? 1 : 0\n        }\n    }\n\n    registerExecutionListener(listener){\n        this.executionListeners.push(listener);\n    }\n\n    checkExecutionFlags(execution){\n        return this.jobRepository.getJobExecutionFlag(execution.id).then(flag=>{\n            if(JOB_EXECUTION_FLAG.STOP === flag){\n                execution.stop();\n            }\n            return execution\n        })\n    }\n\n    getResult(execution) {\n        return this.jobRepository.getJobResultByExecution(execution);\n    }\n\n    /* revive job result data (after conversion to dto) if needed*/\n    reviveResultData(data, executionContext) {\n        return data;\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters){\n        throw 'jobResultToCsvRows function not implemented for job: ' + this.name\n    }\n}\n","import {log} from 'sd-utils'\nimport {JOB_STATUS} from \"./job-status\";\nimport {Job} from \"./job\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {Step} from \"./step\";\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\nimport {JobRestartException} from \"./exceptions/job-restart-exception\";\nimport {JOB_EXECUTION_FLAG} from \"./job-execution-flag\";\n\n/* Simple Job that sequentially executes a job by iterating through its list of steps.  Any Step that fails will fail the job.  The job is\n considered complete when all steps have been executed.*/\n\nexport class SimpleJob extends Job {\n\n    constructor(name, jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(name, jobRepository, expressionsEvaluator, objectiveRulesManager)\n    }\n\n    getStep(stepName) {\n        return Utils.find(this.steps, s=>s.name == stepName);\n    }\n\n    doExecute(execution, jobResult) {\n\n        return this.handleNextStep(execution, jobResult).then(lastExecutedStepExecution=>{\n            if (lastExecutedStepExecution != null) {\n                log.debug(\"Updating JobExecution status: \", lastExecutedStepExecution);\n                execution.status = lastExecutedStepExecution.status;\n                execution.exitStatus = lastExecutedStepExecution.exitStatus;\n                execution.failureExceptions.push(...lastExecutedStepExecution.failureExceptions)\n            }\n            return execution;\n        });\n    }\n\n    handleNextStep(jobExecution, jobResult, prevStep=null, prevStepExecution=null){\n        var stepIndex = 0;\n        if(prevStep){\n            stepIndex = this.steps.indexOf(prevStep)+1;\n        }\n        if(stepIndex>=this.steps.length){\n            return Promise.resolve(prevStepExecution)\n        }\n        var step = this.steps[stepIndex];\n        return this.handleStep(step, jobExecution, jobResult).then(stepExecution=>{\n            if(stepExecution.status !== JOB_STATUS.COMPLETED){ // Terminate the job if a step fails\n                return stepExecution;\n            }\n            return this.handleNextStep(jobExecution, jobResult, step, stepExecution);\n        })\n    }\n\n    handleStep(step, jobExecution, jobResult) {\n        var jobInstance = jobExecution.jobInstance;\n        return this.checkExecutionFlags(jobExecution).then(jobExecution=>{\n            if (jobExecution.isStopping()) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            return this.jobRepository.getLastStepExecution(jobInstance, step.name)\n\n        }).then(lastStepExecution=>{\n            if (this.stepExecutionPartOfExistingJobExecution(jobExecution, lastStepExecution)) {\n                // If the last execution of this step was in the same job, it's probably intentional so we want to run it again.\n                log.info(\"Duplicate step detected in execution of job. step: \" + step.name + \" jobName: \", jobInstance.jobName);\n                lastStepExecution = null;\n            }\n\n            var currentStepExecution = lastStepExecution;\n\n            if (!this.shouldStart(currentStepExecution, jobExecution, step)) {\n                return currentStepExecution;\n            }\n\n            currentStepExecution = jobExecution.createStepExecution(step.name);\n\n            var isCompleted = lastStepExecution != null && lastStepExecution.status === JOB_STATUS.COMPLETED;\n            var isRestart = lastStepExecution != null && !isCompleted;\n            var skipExecution = isCompleted && step.skipOnRestartIfCompleted;\n\n            if (isRestart) {\n                currentStepExecution.executionContext = lastStepExecution.executionContext;\n                if (lastStepExecution.executionContext.containsKey(\"executed\")) {\n                    currentStepExecution.executionContext.remove(\"executed\");\n                }\n            }\n            else {\n\n                currentStepExecution.executionContext = new ExecutionContext();\n            }\n            if(skipExecution){\n                currentStepExecution.exitStatus = JOB_STATUS.COMPLETED;\n                currentStepExecution.status = JOB_STATUS.COMPLETED;\n                currentStepExecution.executionContext.put(\"skipped\", true);\n            }\n\n            return this.jobRepository.addStepExecution(currentStepExecution).then((_currentStepExecution)=>{\n                currentStepExecution=_currentStepExecution;\n                if(skipExecution){\n                    log.info(\"Skipping completed step execution: [\" + step.name + \"]\");\n                    return currentStepExecution;\n                }\n                log.info(\"Executing step: [\" + step.name + \"]\");\n                return step.execute(currentStepExecution, jobResult)\n            }).then(()=>{\n                currentStepExecution.executionContext.put(\"executed\", true);\n                return currentStepExecution;\n            }).catch (e => {\n                jobExecution.status = JOB_STATUS.FAILED;\n                return this.jobRepository.update(jobExecution).then(jobExecution=>{throw e})\n            });\n\n        }).then((currentStepExecution)=>{\n            if (currentStepExecution.status == JOB_STATUS.STOPPING\n                || currentStepExecution.status == JOB_STATUS.STOPPED) {\n                // Ensure that the job gets the message that it is stopping\n                jobExecution.status = JOB_STATUS.STOPPING;\n                // throw new Error(\"Job interrupted by step execution\");\n            }\n            return this.updateProgress(jobExecution).then(()=>currentStepExecution);\n        })\n\n    }\n\n    stepExecutionPartOfExistingJobExecution(jobExecution, stepExecution) {\n        return stepExecution != null && stepExecution.jobExecution.id == jobExecution.id\n    }\n\n    shouldStart(lastStepExecution, execution, step) {\n        var stepStatus;\n        if (lastStepExecution == null) {\n            stepStatus = JOB_STATUS.STARTING;\n        }\n        else {\n            stepStatus = lastStepExecution.status;\n        }\n\n        if (stepStatus == JOB_STATUS.UNKNOWN) {\n            throw new JobRestartException(\"Cannot restart step from UNKNOWN status\")\n        }\n\n        return stepStatus != JOB_STATUS.COMPLETED || step.isRestartable;\n    }\n\n    getProgress(execution){\n        var completedSteps = execution.stepExecutions.length;\n        let progress = {\n            total: this.steps.length,\n            current: completedSteps\n        };\n        if(!completedSteps){\n            return progress\n        }\n        if(JOB_STATUS.COMPLETED !== execution.stepExecutions[execution.stepExecutions.length-1].status){\n            progress.current--;\n        }\n\n        return progress;\n    }\n\n    addStep(){\n        if(arguments.length===1){\n            return super.addStep(arguments[0])\n        }\n        var step = new Step(arguments[0], this.jobRepository);\n        step.doExecute = arguments[1];\n        return super.addStep(step);\n    }\n\n}\n","export class StepExecutionListener {\n    /*Called before a step executes*/\n    beforeStep(jobExecution) {\n\n    }\n\n    /*Called after completion of a step. Called after both successful and failed executions*/\n    afterStep(jobExecution) {\n\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {JOB_STATUS} from \"./job-status\";\nimport {JobExecution} from \"./job-execution\";\n\n/*\n representation of the execution of a step\n */\nexport class StepExecution {\n    id;\n    stepName;\n    jobExecution;\n\n    status = JOB_STATUS.STARTING;\n    exitStatus = JOB_STATUS.EXECUTING;\n    executionContext = new ExecutionContext(); //execution context for single step level,\n\n    startTime = new Date();\n    endTime = null;\n    lastUpdated = null;\n\n    terminateOnly = false; //flag to indicate that an execution should halt\n    failureExceptions = [];\n\n    constructor(stepName, jobExecution, id) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.stepName = stepName;\n        this.jobExecution = jobExecution;\n        this.jobExecutionId = jobExecution.id;\n    }\n\n    getJobParameters(){\n        return this.jobExecution.jobParameters;\n    }\n\n    getJobExecutionContext(){\n        return this.jobExecution.executionContext;\n    }\n\n    getData(){\n        return this.jobExecution.getData();\n    }\n\n    getDTO(filteredProperties=[], deepClone = true){\n\n        var cloneMethod = Utils.cloneDeepWith;\n        if(!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        return Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if(filteredProperties.indexOf(key)>-1){\n                return null;\n            }\n            if([\"executionContext\"].indexOf(key)>-1){\n                return value.getDTO()\n            }\n            if(value instanceof Error){\n                return Utils.getErrorDTO(value);\n            }\n\n            if (value instanceof JobExecution) {\n                return value.getDTO([\"stepExecutions\"], deepClone)\n            }\n        }))\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {log} from 'sd-utils'\n\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\n/*domain object representing the configuration of a job step*/\nexport class Step {\n\n    id;\n    name;\n    isRestartable = true;\n    skipOnRestartIfCompleted=true;\n    steps = [];\n    executionListeners = [];\n\n    jobRepository;\n\n    constructor(name, jobRepository) {\n        this.name = name;\n        this.jobRepository = jobRepository;\n    }\n\n    setJobRepository(jobRepository) {\n        this.jobRepository = jobRepository;\n    }\n\n    /*Process the step and assign progress and status meta information to the StepExecution provided*/\n    execute(stepExecution, jobResult) {\n        log.debug(\"Executing step: name=\" + this.name);\n        stepExecution.startTime = new Date();\n        stepExecution.status = JOB_STATUS.STARTED;\n        var exitStatus;\n        return this.jobRepository.update(stepExecution).then(stepExecution=>{\n            exitStatus = JOB_STATUS.EXECUTING;\n\n            this.executionListeners.forEach(listener=>listener.beforeStep(stepExecution));\n            this.open(stepExecution.executionContext);\n\n            return this.doExecute(stepExecution, jobResult)\n        }).then(_stepExecution=>{\n            stepExecution = _stepExecution;\n            exitStatus = stepExecution.exitStatus;\n\n            // Check if someone is trying to stop us\n            if (stepExecution.terminateOnly) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            // Need to upgrade here not set, in case the execution was stopped\n            stepExecution.status = JOB_STATUS.COMPLETED;\n            log.debug(\"Step execution success: name=\" + this.name);\n            return stepExecution\n        }).catch(e=>{\n            stepExecution.status = this.determineJobStatus(e);\n            exitStatus = stepExecution.status;\n            stepExecution.failureExceptions.push(e);\n\n            if (stepExecution.status == JOB_STATUS.STOPPED) {\n                log.info(\"Encountered interruption executing step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n            else {\n                log.error(\"Encountered an error executing step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n            return stepExecution;\n        }).then(stepExecution=>{\n            try {\n                stepExecution.exitStatus = exitStatus;\n                this.executionListeners.forEach(listener=>listener.afterStep(stepExecution));\n            }\n            catch (e) {\n                log.error(\"Exception in afterStep callback in step \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n\n            stepExecution.endTime = new Date();\n            stepExecution.exitStatus = exitStatus;\n\n\n            return this.jobRepository.update(stepExecution)\n        }).then(stepExecution=>{\n            try {\n                this.close(stepExecution.executionContext);\n            }\n            catch (e) {\n                log.error(\"Exception while closing step execution resources in step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n                stepExecution.failureExceptions.push(e);\n            }\n\n            try {\n                this.close(stepExecution.executionContext);\n            }\n            catch (e) {\n                log.error(\"Exception while closing step execution resources in step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n                stepExecution.failureExceptions.push(e);\n            }\n\n            // doExecutionRelease();\n\n            log.debug(\"Step execution complete: \" + stepExecution.id);\n            return stepExecution;\n        });\n\n    }\n\n    determineJobStatus(e) {\n        if (e instanceof JobInterruptedException) {\n            return JOB_STATUS.STOPPED;\n        }\n        else {\n            return JOB_STATUS.FAILED;\n        }\n    }\n\n    /**\n     * Extension point for subclasses to execute business logic. Subclasses should set the exitStatus on the\n     * StepExecution before returning. Must return stepExecution\n     */\n    doExecute(stepExecution, jobResult) {\n    }\n\n    /**\n     * Extension point for subclasses to provide callbacks to their collaborators at the beginning of a step, to open or\n     * acquire resources. Does nothing by default.\n     */\n    open(executionContext) {\n    }\n\n    /**\n     * Extension point for subclasses to provide callbacks to their collaborators at the end of a step (right at the end\n     * of the finally block), to close or release resources. Does nothing by default.\n     */\n    close(executionContext) {\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(stepExecution){\n        return {\n            total: 1,\n            current: stepExecution.status === JOB_STATUS.COMPLETED ? 1 : 0\n        }\n    }\n}\n","import * as engine from './engine/index'\n\nexport {engine}\nexport * from './jobs-manager'\nexport * from './job-worker'\n\n\n\n","import {JobExecutionListener} from \"./engine/job-execution-listener\";\nimport {JOB_STATUS} from \"./engine/job-status\";\nimport {JobInstance} from \"./engine/job-instance\";\nimport {Utils, log} from \"sd-utils\";\n\n\nexport class JobInstanceManagerConfig {\n    onJobStarted = () => {};\n    onJobCompleted = result => {};\n    onJobFailed = errors => {};\n    onJobStopped = () => {};\n    onJobTerminated = () => {};\n    onProgress = (progress) => {};\n    callbacksThisArg;\n    updateInterval = 100;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/*convenience class for managing and tracking job instance progress*/\nexport class JobInstanceManager extends JobExecutionListener {\n\n    jobsManger;\n    jobInstance;\n    config;\n\n    lastJobExecution;\n    lastUpdateTime;\n    progress = null;\n\n    constructor(jobsManger, jobInstanceOrExecution, config) {\n        super();\n        this.config = new JobInstanceManagerConfig(config);\n        this.jobsManger = jobsManger;\n        if (jobInstanceOrExecution instanceof JobInstance) {\n            this.jobInstance = jobInstanceOrExecution;\n            this.getLastJobExecution().then(je=> {\n                this.checkProgress();\n            })\n        } else {\n            this.lastJobExecution = jobInstanceOrExecution;\n            this.jobInstance = this.lastJobExecution.jobInstance;\n            this.checkProgress();\n        }\n        if (this.lastJobExecution && !this.lastJobExecution.isRunning()) {\n            this.afterJob(this.lastJobExecution);\n            return;\n        }\n        jobsManger.registerJobExecutionListener(this);\n    }\n\n    checkProgress() {\n\n        var self = this;\n        if (this.terminated || !this.lastJobExecution.isRunning() || this.getProgressPercents(this.progress) === 100) {\n            return;\n        }\n        this.jobsManger.getProgress(this.lastJobExecution).then(progress=> {\n            this.lastUpdateTime = new Date();\n            if (progress) {\n                this.progress = progress;\n                this.config.onProgress.call(this.config.callbacksThisArg || this, progress);\n            }\n\n            setTimeout(function () {\n                self.checkProgress();\n            }, this.config.updateInterval)\n        })\n    }\n\n    beforeJob(jobExecution) {\n        if (jobExecution.jobInstance.id !== this.jobInstance.id) {\n            return;\n        }\n\n        this.lastJobExecution = jobExecution;\n        this.config.onJobStarted.call(this.config.callbacksThisArg || this);\n    }\n\n    getProgressPercents(progress) {\n        if (!progress) {\n            return 0;\n        }\n        return progress.current * 100 / progress.total;\n    }\n\n    getProgressFromExecution(jobExecution) {\n        var job = this.jobsManger.getJobByName(jobExecution.jobInstance.jobName);\n        return job.getProgress(jobExecution);\n    }\n\n    afterJob(jobExecution) {\n        if (jobExecution.jobInstance.id !== this.jobInstance.id) {\n            return;\n        }\n        this.lastJobExecution = jobExecution;\n        if (JOB_STATUS.COMPLETED === jobExecution.status) {\n            this.jobsManger.deregisterJobExecutionListener(this);\n            this.progress = this.getProgressFromExecution(jobExecution);\n            this.config.onProgress.call(this.config.callbacksThisArg || this, this.progress);\n            this.jobsManger.getResult(jobExecution).then(result=> {\n                this.config.onJobCompleted.call(this.config.callbacksThisArg || this, result.data);\n            }).catch(e=> {\n                log.error(e);\n            })\n\n\n        } else if (JOB_STATUS.FAILED === jobExecution.status) {\n            this.config.onJobFailed.call(this.config.callbacksThisArg || this, jobExecution.failureExceptions);\n\n        } else if (JOB_STATUS.STOPPED === jobExecution.status) {\n            this.config.onJobStopped.call(this.config.callbacksThisArg || this);\n        }\n    }\n\n    getLastJobExecution(forceUpdate = false) {\n        if (!this.lastJobExecution || forceUpdate) {\n            return this.jobsManger.jobRepository.getLastJobExecutionByInstance(this.jobInstance).then(je=> {\n                this.lastJobExecution = je;\n                return je;\n            });\n        }\n        return Promise.resolve(this.lastJobExecution);\n    }\n\n    stop() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.stop(this.lastJobExecution)\n        })\n    }\n\n    resume() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.run(this.jobInstance.jobName, this.lastJobExecution.jobParameters.values, this.lastJobExecution.getData()).then(je=> {\n                this.lastJobExecution = je;\n                this.checkProgress();\n                return true;\n            }).catch(e=> {\n                log.error(e);\n                return false;\n            })\n        })\n    }\n\n    terminate() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.terminate(this.jobInstance).then(()=> {\n                this.terminated = true;\n                this.config.onJobTerminated.call(this.config.callbacksThisArg || this, this.lastJobExecution);\n                this.jobsManger.deregisterJobExecutionListener(this);\n\n                return this.lastJobExecution;\n            })\n        }).catch(e=> {\n            log.error(e);\n            return false;\n        })\n    }\n\n}\n","export class JobWorker{\n\n    worker;\n    listeners = {};\n    defaultListener;\n\n    constructor(url, defaultListener, onError){\n        var instance = this;\n        this.worker = new Worker(url);\n        this.defaultListener = defaultListener || function() {};\n        if (onError) {this.worker.onerror = onError;}\n\n        this.worker.onmessage = function(event) {\n            if (event.data instanceof Object &&\n                event.data.hasOwnProperty('queryMethodListener') && event.data.hasOwnProperty('queryMethodArguments')) {\n                var listener = instance.listeners[event.data.queryMethodListener];\n                var args = event.data.queryMethodArguments;\n                if(listener.deserializer){\n                    args = listener.deserializer(args);\n                }\n                listener.fn.apply(listener.thisArg, args);\n            } else {\n                this.defaultListener.call(instance, event.data);\n            }\n        }\n\n    }\n\n    sendQuery() {\n        if (arguments.length < 1) {\n            throw new TypeError('JobWorker.sendQuery takes at least one argument');\n        }\n        this.worker.postMessage({\n            'queryMethod': arguments[0],\n            'queryArguments': Array.prototype.slice.call(arguments, 1)\n        });\n    }\n\n    runJob(jobName, jobParametersValues, dataDTO){\n        this.sendQuery('runJob', jobName, jobParametersValues, dataDTO)\n    }\n\n    executeJob(jobExecutionId){\n        this.sendQuery('executeJob', jobExecutionId)\n    }\n\n    recompute(dataDTO, ruleNames, evalCode, evalNumeric){\n        this.sendQuery('recompute', dataDTO, ruleNames, evalCode, evalNumeric)\n    }\n\n    postMessage(message) {\n        this.worker.postMessage(message);\n    }\n\n    terminate() {\n        this.worker.terminate();\n    }\n\n    addListener(name, listener, thisArg, deserializer) {\n        this.listeners[name] = {\n            fn: listener,\n            thisArg: thisArg || this,\n            deserializer: deserializer\n        };\n    }\n\n    removeListener(name) {\n        delete this.listeners[name];\n    }\n}\n","import {Utils, log} from \"sd-utils\";\nimport {SensitivityAnalysisJob} from \"./configurations/sensitivity-analysis/n-way/sensitivity-analysis-job\";\nimport {JobLauncher} from \"./engine/job-launcher\";\nimport {JobWorker} from \"./job-worker\";\nimport {JobExecutionListener} from \"./engine/job-execution-listener\";\nimport {JobParameters} from \"./engine/job-parameters\";\nimport {IdbJobRepository} from \"./engine/job-repository/idb-job-repository\";\nimport {JOB_EXECUTION_FLAG} from \"./engine/job-execution-flag\";\nimport {RecomputeJob} from \"./configurations/recompute/recompute-job\";\nimport {ProbabilisticSensitivityAnalysisJob} from \"./configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job\";\nimport {TimeoutJobRepository} from \"./engine/job-repository/timeout-job-repository\";\nimport {TornadoDiagramJob} from \"./configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job\";\nimport {JOB_STATUS} from \"./engine/job-status\";\nimport {SimpleJobRepository} from \"./engine/job-repository/simple-job-repository\";\nimport {LeagueTableJob} from \"./configurations/league-table/league-table-job\";\nimport {SpiderPlotJob} from \"./configurations/sensitivity-analysis/spider-plot/spider-plot-job\";\n\n\nexport class JobsManagerConfig {\n\n    workerUrl = null;\n    repositoryType = 'idb';\n    clearRepository = false;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\nexport class JobsManager extends JobExecutionListener {\n\n\n    useWorker;\n    expressionsEvaluator;\n    objectiveRulesManager;\n    jobWorker;\n\n    jobRepository;\n    jobLauncher;\n\n    jobExecutionListeners = [];\n\n    afterJobExecutionPromiseResolves = {};\n    jobInstancesToTerminate = {};\n\n    constructor(expressionsEvaluator, objectiveRulesManager, config) {\n        super();\n        this.setConfig(config);\n        this.expressionEngine = expressionsEvaluator.expressionEngine;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n\n\n        this.useWorker = !!this.config.workerUrl;\n        if (this.useWorker) {\n            this.initWorker(this.config.workerUrl);\n        }\n\n        this.initRepository();\n\n        this.registerJobs();\n\n\n\n        this.jobLauncher = new JobLauncher(this.jobRepository, this.jobWorker, (data)=>this.serializeData(data));\n    }\n\n    setConfig(config) {\n        this.config = new JobsManagerConfig(config);\n        return this;\n    }\n\n    initRepository() {\n        switch (this.config.repositoryType){\n            case 'idb':\n                this.jobRepository = new IdbJobRepository(this.expressionEngine.getJsonReviver(), 'sd-job-repository', this.config.clearRepository);\n                break;\n            case 'timeout':\n                this.jobRepository = new TimeoutJobRepository(this.expressionEngine.getJsonReviver());\n                break;\n            case 'simple':\n                this.jobRepository = new SimpleJobRepository(this.expressionEngine.getJsonReviver());\n                break;\n            default:\n                log.error('JobsManager configuration error! Unknown repository type: '+this.config.repositoryType+'. Using default: idb');\n                this.config.repositoryType = 'idb';\n                this.initRepository()\n        }\n    }\n\n    serializeData(data) {\n        return data.serialize(true, false, false, this.expressionEngine.getJsonReplacer());\n    }\n\n    getProgress(jobExecutionOrId) {\n        var id = jobExecutionOrId;\n        if (!Utils.isString(jobExecutionOrId)) {\n            id = jobExecutionOrId.id\n        }\n        return this.jobRepository.getJobExecutionProgress(id);\n    }\n\n    getResult(jobInstanceOrExecution) {\n        let jobInstance = jobInstanceOrExecution;\n        let jobExecution = null;\n        if(jobInstanceOrExecution.jobInstance){\n            jobExecution = jobInstanceOrExecution;\n            jobInstance = jobExecution.jobInstance;\n        }\n\n        return this.jobRepository.getJobResultByInstance(jobInstance);\n    }\n\n    run(jobName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        return this.jobLauncher.run(jobName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched).then(jobExecution=> {\n            if (resolvePromiseAfterJobIsLaunched || !jobExecution.isRunning()) {\n                return jobExecution;\n            }\n            //job was delegated to worker and is still running\n\n            return new Promise((resolve, reject)=> {\n                this.afterJobExecutionPromiseResolves[jobExecution.id] = resolve;\n            });\n        });\n    }\n\n    execute(jobExecutionOrId) {\n        return this.jobLauncher.execute(jobExecutionOrId);\n    }\n\n    stop(jobExecutionOrId) {\n        var id = jobExecutionOrId;\n        if (!Utils.isString(jobExecutionOrId)) {\n            id = jobExecutionOrId.id\n        }\n\n        return this.jobRepository.getJobExecutionById(id).then(jobExecution=> {\n            if (!jobExecution) {\n                log.error(\"Job Execution not found: \" + jobExecutionOrId);\n                return null;\n            }\n            if (!jobExecution.isRunning()) {\n                log.warn(\"Job Execution not running, status: \" + jobExecution.status + \", endTime: \" + jobExecution.endTime);\n                return jobExecution;\n            }\n\n            return this.jobRepository.saveJobExecutionFlag(jobExecution.id, JOB_EXECUTION_FLAG.STOP).then(()=>jobExecution);\n        });\n    }\n\n    /*stop job execution if running and delete job instance from repository*/\n    terminate(jobInstance) {\n        return this.jobRepository.getLastJobExecutionByInstance(jobInstance).then(jobExecution=> {\n            if (jobExecution) {\n                if(jobExecution.isRunning()){\n                    return this.jobRepository.saveJobExecutionFlag(jobExecution.id, JOB_EXECUTION_FLAG.STOP).then(()=>jobExecution);\n                }else{\n                    return this.jobRepository.removeJobInstance(jobInstance, jobExecution.jobParameters);\n                }\n            }\n        }).then(()=>{\n            this.jobInstancesToTerminate[jobInstance.id]=jobInstance;\n        })\n    }\n\n    getJobByName(jobName) {\n        return this.jobRepository.getJobByName(jobName);\n    }\n\n\n    createJobParameters(jobName, jobParametersValues) {\n        var job = this.jobRepository.getJobByName(jobName);\n        return job.createJobParameters(jobParametersValues);\n    }\n\n\n    /*Returns a promise*/\n    getLastJobExecution(jobName, jobParameters) {\n        if (this.useWorker) {\n            return this.jobWorker;\n        }\n        if (!(jobParameters instanceof JobParameters)) {\n            jobParameters = this.createJobParameters(jobParameters)\n        }\n        return this.jobRepository.getLastJobExecution(jobName, jobParameters);\n    }\n\n    initWorker(workerUrl) {\n        this.jobWorker = new JobWorker(workerUrl, ()=>{\n            log.error('error in worker', arguments);\n        });\n        var argsDeserializer = (args)=> {\n            return [this.jobRepository.reviveJobExecution(args[0])]\n        };\n\n        this.jobWorker.addListener(\"beforeJob\", this.beforeJob, this, argsDeserializer);\n        this.jobWorker.addListener(\"afterJob\", this.afterJob, this, argsDeserializer);\n        this.jobWorker.addListener(\"jobFatalError\", this.onJobFatalError, this);\n    }\n\n    registerJobs() {\n\n        let sensitivityAnalysisJob = new SensitivityAnalysisJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        let probabilisticSensitivityAnalysisJob = new ProbabilisticSensitivityAnalysisJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        if(!Utils.isWorker()){\n            sensitivityAnalysisJob.setBatchSize(1);\n            probabilisticSensitivityAnalysisJob.setBatchSize(1);\n        }\n\n        this.registerJob(sensitivityAnalysisJob);\n        this.registerJob(new TornadoDiagramJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(probabilisticSensitivityAnalysisJob);\n        this.registerJob(new RecomputeJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new LeagueTableJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new SpiderPlotJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n    }\n\n    registerJob(job) {\n        this.jobRepository.registerJob(job);\n        job.registerExecutionListener(this)\n    }\n\n    registerJobExecutionListener(listener) {\n        this.jobExecutionListeners.push(listener);\n    }\n\n    deregisterJobExecutionListener(listener) {\n        var index = this.jobExecutionListeners.indexOf(listener);\n        if (index > -1) {\n            this.jobExecutionListeners.splice(index, 1)\n        }\n    }\n\n    beforeJob(jobExecution) {\n        log.debug(\"beforeJob\", this.useWorker, jobExecution);\n        this.jobExecutionListeners.forEach(l=>l.beforeJob(jobExecution));\n    }\n\n    afterJob(jobExecution) {\n        log.debug(\"afterJob\", this.useWorker, jobExecution);\n        this.jobExecutionListeners.forEach(l=>l.afterJob(jobExecution));\n        var promiseResolve = this.afterJobExecutionPromiseResolves[jobExecution.id];\n        if (promiseResolve) {\n            promiseResolve(jobExecution)\n        }\n\n        if(this.jobInstancesToTerminate[jobExecution.jobInstance.id]){\n            this.jobRepository.removeJobInstance(jobExecution.jobInstance, jobExecution.jobParameters);\n        }\n    }\n\n    onJobFatalError(jobExecutionId, error){\n        var promiseResolve = this.afterJobExecutionPromiseResolves[jobExecutionId];\n        if (promiseResolve) {\n            this.jobRepository.getJobExecutionById(jobExecutionId).then(jobExecution=>{\n                jobExecution.status = JOB_STATUS.FAILED;\n                if(error){\n                    jobExecution.failureExceptions.push(error);\n                }\n\n                return this.jobRepository.saveJobExecution(jobExecution).then(()=>{\n                    promiseResolve(jobExecution);\n                })\n            }).catch(e=>{\n                log.error(e);\n            })\n\n        }\n        log.debug('onJobFatalError', jobExecutionId, error);\n    }\n\n\n}\n","import {\n    ExpectedValueMaximizationRule,\n    ExpectedValueMinimizationRule,\n    MaxiMinRule,\n    MaxiMaxRule,\n    MiniMinRule,\n    MiniMaxRule\n} from \"./rules\";\nimport {log} from \"sd-utils\";\nimport * as model from \"sd-model\";\nimport {MinMaxRule} from \"./rules/min-max-rule\";\nimport {MaxMinRule} from \"./rules/max-min-rule\";\nimport {MinMinRule} from \"./rules/min-min-rule\";\nimport {MaxMaxRule} from \"./rules/max-max-rule\";\n\nexport class ObjectiveRulesManager{\n\n    expressionEngine;\n    currentRule;\n    ruleByName = {};\n    rules = [];\n\n\n    flipPair = {};\n    payoffIndex = 0;\n\n    constructor(expressionEngine, currentRuleName) {\n        this.expressionEngine = expressionEngine;\n        this.addRule(new ExpectedValueMaximizationRule(expressionEngine));\n        this.addRule(new ExpectedValueMinimizationRule(expressionEngine));\n        this.addRule(new MaxiMinRule(expressionEngine));\n        this.addRule(new MaxiMaxRule(expressionEngine));\n        this.addRule(new MiniMinRule(expressionEngine));\n        this.addRule(new MiniMaxRule(expressionEngine));\n\n        let minMax = new MinMaxRule(expressionEngine);\n        this.addRule(minMax);\n        let maxMin = new MaxMinRule(expressionEngine);\n        this.addRule(maxMin);\n        this.addFlipPair(minMax, maxMin);\n\n        let minMin = new MinMinRule(expressionEngine);\n        this.addRule(minMin);\n        let maxMax = new MaxMaxRule(expressionEngine);\n        this.addRule(maxMax);\n\n\n        if (currentRuleName) {\n            this.currentRule = this.ruleByName[currentRuleName];\n        } else {\n            this.currentRule = this.rules[0];\n        }\n\n    }\n\n\n    setPayoffIndex(payoffIndex){\n        this.payoffIndex = payoffIndex || 0;\n    }\n\n    addRule(rule){\n        this.ruleByName[rule.name]=rule;\n        this.rules.push(rule);\n    }\n\n    isRuleName(ruleName){\n         return !!this.ruleByName[ruleName]\n    }\n\n    setCurrentRuleByName(ruleName){\n        this.currentRule = this.ruleByName[ruleName];\n    }\n\n    getObjectiveRuleByName(ruleName){\n        return this.ruleByName[ruleName];\n    }\n\n    flipRule(){\n        var flipped = this.flipPair[this.currentRule.name];\n        if(flipped){\n            this.currentRule = flipped;\n        }\n    }\n\n    updateDefaultCriterion1Weight(defaultCriterion1Weight){\n        this.rules.filter(r=>r.multiCriteria).forEach(r=>r.setDefaultCriterion1Weight(defaultCriterion1Weight));\n    }\n\n    recompute(dataModel, allRules, decisionPolicy=null){\n\n        var startTime = new Date().getTime();\n        log.trace('recomputing rules, all: '+allRules);\n\n        dataModel.getRoots().forEach(n=>{\n            this.recomputeTree(n, allRules, decisionPolicy);\n        });\n\n        var time  = (new Date().getTime() - startTime/1000);\n        log.trace('recomputation took '+time+'s');\n\n        return this;\n    }\n\n    recomputeTree(root, allRules, decisionPolicy=null){\n        log.trace('recomputing rules for tree ...', root);\n\n        var startTime = new Date().getTime();\n\n        var rules  = [this.currentRule];\n        if(allRules){\n            rules = this.rules;\n        }\n\n        rules.forEach(rule=> {\n            rule.setPayoffIndex(this.payoffIndex);\n            rule.setDecisionPolicy(decisionPolicy);\n            rule.computePayoff(root);\n            rule.computeOptimal(root);\n            rule.clearDecisionPolicy();\n        });\n\n        var time  = (new Date().getTime() - startTime)/1000;\n        log.trace('recomputation took '+time+'s');\n\n        return this;\n    }\n\n\n    getNodeDisplayValue(node, name) {\n        return node.computedValue(this.currentRule.name, name)\n\n    }\n\n    getEdgeDisplayValue(e, name){\n        if(name==='probability'){\n            if(e.parentNode instanceof model.domain.DecisionNode){\n                return e.computedValue(this.currentRule.name, 'probability');\n            }\n            if(e.parentNode instanceof model.domain.ChanceNode){\n                return e.computedBaseProbability();\n            }\n            return null;\n        }\n        if(name==='payoff'){\n            if(this.currentRule.multiCriteria){\n                return e.computedValue(null, 'payoff');\n            }else{\n                return e.computedValue(null, 'payoff[' +this.payoffIndex + ']');\n            }\n\n        }\n        if(name==='optimal'){\n            return e.computedValue(this.currentRule.name, 'optimal')\n        }\n    }\n\n    addFlipPair(rule1, rule2) {\n        this.flipPair[rule1.name] = rule2;\n        this.flipPair[rule2.name] = rule1;\n    }\n\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from 'sd-utils'\n\n/*expected value maximization rule*/\nexport class ExpectedValueMaximizationRule extends ObjectiveRule{\n\n    static NAME = 'expected-value-maximization';\n\n    constructor(expressionEngine){\n        super(ExpectedValueMaximizationRule.NAME, true, expressionEngine);\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff=0, probabilityToEnter=1){\n        this.cValue(node, 'optimal', true);\n        if(node instanceof model.TerminalNode){\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=>{\n            if ( this.subtract(this.computedPayoff(node),payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode) ) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e,'probability')));\n            }else{\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*expected value minimization rule*/\nexport class ExpectedValueMinimizationRule extends ObjectiveRule{\n\n    static NAME = 'expected-value-minimization';\n\n    constructor(expressionEngine){\n        super(ExpectedValueMinimizationRule.NAME, false, expressionEngine);\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff=0, probabilityToEnter=1){\n        this.cValue(node, 'optimal', true);\n        if(node instanceof model.TerminalNode){\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=>{\n            if ( this.subtract(this.computedPayoff(node),payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode) ) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e,'probability')));\n            }else{\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","export * from './objective-rule'\nexport * from './expected-value-maximization-rule'\nexport * from './expected-value-minimization-rule'\nexport * from './maxi-max-rule'\nexport * from './maxi-min-rule'\nexport * from './mini-max-rule'\nexport * from './mini-min-rule'\n\n\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MaxMaxRule extends MultiCriteriaRule{\n\n    static NAME = 'max-max';\n\n    constructor(expressionEngine){\n        super(MaxMaxRule.NAME, [1, 1], expressionEngine);\n    }\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MaxMinRule extends MultiCriteriaRule{\n\n    static NAME = 'max-min';\n\n    constructor(expressionEngine){\n        super(MaxMinRule.NAME, [1, -1], expressionEngine);\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*maxi-max rule*/\nexport class MaxiMaxRule extends ObjectiveRule{\n\n    static NAME = 'maxi-max';\n\n    constructor(expressionEngine){\n        super(MaxiMaxRule.NAME, true, expressionEngine);\n    }\n\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)<bestChildPayoff ? 0.0 : (1.0/bestCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.maxBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*maxi-min rule*/\nexport class MaxiMinRule extends ObjectiveRule{\n\n    static NAME = 'maxi-min';\n\n    constructor(expressionEngine){\n        super(MaxiMinRule.NAME, true, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)>worstChildPayoff ? 0.0 : (1.0/worstCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.minBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MinMaxRule extends MultiCriteriaRule{\n\n    static NAME = 'min-max';\n\n    constructor(expressionEngine){\n        super(MinMaxRule.NAME, [-1, 1], expressionEngine);\n    }\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MinMinRule extends MultiCriteriaRule{\n\n    static NAME = 'min-min';\n\n    constructor(expressionEngine){\n        super(MinMinRule.NAME, [-1, -1], expressionEngine);\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*mini-max rule*/\nexport class MiniMaxRule extends ObjectiveRule{\n\n    static NAME = 'mini-max';\n\n    constructor(expressionEngine){\n        super(MiniMaxRule.NAME, false, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)<bestChildPayoff ? 0.0 : (1.0/bestCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.maxBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*mini-min rule*/\nexport class MiniMinRule extends ObjectiveRule{\n\n    static NAME = 'mini-min';\n\n    constructor(expressionEngine){\n        super(MiniMinRule.NAME, false, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)>worstChildPayoff ? 0.0 : (1.0/worstCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.minBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from \"sd-model\";\nimport {ObjectiveRule} from \"./objective-rule\";\nimport {Policy} from \"../../policies/policy\";\n\n\nexport class MultiCriteriaRule extends ObjectiveRule {\n\n    criterion1Weight = 1;\n    payoffCoeffs = [1, -1];\n\n    constructor(name, payoffCoeffs, expressionEngine) {\n        super(name, true, expressionEngine, true);\n        this.payoffCoeffs = payoffCoeffs;\n\n    }\n\n    setDefaultCriterion1Weight(criterion1Weight) {\n        this.criterion1Weight = criterion1Weight;\n    }\n\n    // payoff - parent edge payoff, aggregatedPayoff - aggregated payoff along path\n    computePayoff(node, payoff = [0, 0], aggregatedPayoff = [0, 0]) {\n        var childrenPayoff = [0, 0];\n        if (node.childEdges.length) {\n            if (node instanceof model.DecisionNode) {\n\n                var selectedIndexes = [];\n                var bestChild = -Infinity;\n\n                node.childEdges.forEach((e, i)=> {\n                    let basePayoffs = [this.basePayoff(e, 0), this.basePayoff(e, 1)];\n                    var childPayoff = this.computePayoff(e.childNode, basePayoffs, [this.add(basePayoffs[0], aggregatedPayoff[0]), this.add(basePayoffs[1], aggregatedPayoff[1])]);\n                    var childCombinedPayoff = this.cValue(e.childNode, 'combinedPayoff');\n                    if (childCombinedPayoff > bestChild) {\n                        bestChild = childCombinedPayoff;\n                        selectedIndexes = [i];\n                    } else if (bestChild.equals(childCombinedPayoff)) {\n                        selectedIndexes.push(i);\n                    }\n                });\n\n                if (this.decisionPolicy) {\n                    selectedIndexes = [];\n                    var decision = Policy.getDecision(this.decisionPolicy, node);\n                    if (decision) {\n                        selectedIndexes = [decision.decisionValue];\n                    }\n\n                }\n\n                node.childEdges.forEach((e, i)=> {\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', selectedIndexes.indexOf(i) < 0 ? 0.0 : 1.0);\n                });\n            } else {\n                node.childEdges.forEach(e=> {\n                    let basePayoffs = [this.basePayoff(e, 0), this.basePayoff(e, 1)];\n                    this.computePayoff(e.childNode, basePayoffs, [this.add(basePayoffs[0], aggregatedPayoff[0]), this.add(basePayoffs[1], aggregatedPayoff[1])]);\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', this.baseProbability(e));\n                });\n            }\n\n            var sumweight = 0;\n            node.childEdges.forEach(e=> {\n                sumweight = this.add(sumweight, this.cValue(e, 'probability'));\n            });\n\n            if (sumweight > 0) {\n                node.childEdges.forEach(e=> {\n                    childrenPayoff.forEach((p, i)=> {\n                        let ep = this.cValue(e.childNode, 'payoff[' + i + ']');\n                        childrenPayoff[i] = this.add(p, this.multiply(this.cValue(e, 'probability'), ep).div(sumweight))\n                    });\n                });\n            }\n\n\n        }\n        payoff.forEach((p, i)=> {\n            payoff[i] = this.add(p, childrenPayoff[i]);\n        });\n\n        this.clearComputedValues(node);\n\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'aggregatedPayoff', aggregatedPayoff);\n            this.cValue(node, 'probabilityToEnter', 0); //initial value\n        } else {\n            this.cValue(node, 'childrenPayoff', childrenPayoff);\n        }\n\n        this.cValue(node, 'combinedPayoff', this.computeCombinedPayoff(payoff));\n\n        return this.cValue(node, 'payoff', payoff);\n    }\n\n    computeCombinedPayoff(payoff){\n        // [criterion 1 coeff]*[criterion 1]*[weight]+[criterion 2 coeff]*[criterion 2]\n        if (this.criterion1Weight === Infinity) {\n            return this.multiply(this.payoffCoeffs[0], payoff[0]);\n        }\n        return this.add(this.multiply(this.payoffCoeffs[0], this.multiply(this.criterion1Weight, payoff[0])), this.multiply(this.payoffCoeffs[1], payoff[1]));\n    }\n\n    //  combinedPayoff - parent edge combinedPayoff\n    computeOptimal(node, combinedPayoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=> {\n            if (this.subtract(this.cValue(node, 'combinedPayoff'), combinedPayoff).equals(this.cValue(e.childNode, 'combinedPayoff')) || !(node instanceof model.DecisionNode)) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.computeCombinedPayoff([this.basePayoff(e, 0), this.basePayoff(e, 1)]), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {domain as model} from \"sd-model\";\nimport {Policy} from \"../../policies/policy\";\n\n/*Base class for objective rules*/\nexport class ObjectiveRule {\n    name;\n    expressionEngine;\n\n    decisionPolicy;\n    maximization;\n\n    payoffIndex = 0;\n    multiCriteria = false;\n\n    constructor(name, maximization, expressionEngine, multiCriteria=false) {\n        this.name = name;\n        this.maximization = maximization;\n        this.expressionEngine = expressionEngine;\n        this.multiCriteria = multiCriteria;\n    }\n\n    setDecisionPolicy(decisionPolicy) {\n        this.decisionPolicy = decisionPolicy;\n    }\n\n    setPayoffIndex(payoffIndex) {\n        this.payoffIndex = payoffIndex;\n    }\n\n    clearDecisionPolicy() {\n        this.decisionPolicy = null;\n    }\n\n    // should return array of selected children indexes\n    makeDecision(decisionNode, childrenPayoffs) {\n        var best;\n        if (this.maximization) {\n            best = this.max(...childrenPayoffs);\n        } else {\n            best = this.min(...childrenPayoffs);\n        }\n        var selectedIndexes = [];\n        childrenPayoffs.forEach((p, i)=> {\n            if (ExpressionEngine.compare(best, p) == 0) {\n                selectedIndexes.push(i);\n            }\n        });\n        return selectedIndexes;\n    }\n\n    _makeDecision(decisionNode, childrenPayoffs) {\n        if (this.decisionPolicy) {\n            var decision = Policy.getDecision(this.decisionPolicy, decisionNode);\n            if (decision) {\n                return [decision.decisionValue];\n            }\n            return [];\n        }\n        return this.makeDecision(decisionNode, childrenPayoffs);\n    }\n\n    // extension point for changing computed probability of edges in a chance node\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount) {\n\n    }\n\n    // payoff - parent edge payoff, aggregatedPayoff - aggregated payoff along path\n    computePayoff(node, payoff = 0, aggregatedPayoff = 0) {\n        var childrenPayoff = 0;\n        if (node.childEdges.length) {\n            if (node instanceof model.DecisionNode) {\n\n                var selectedIndexes = this._makeDecision(node, node.childEdges.map(e=>this.computePayoff(e.childNode, this.basePayoff(e), this.add(this.basePayoff(e), aggregatedPayoff))));\n                node.childEdges.forEach((e, i)=> {\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', selectedIndexes.indexOf(i) < 0 ? 0.0 : 1.0);\n                });\n\n            } else {\n                var bestChild = -Infinity;\n                var bestCount = 1;\n                var worstChild = Infinity;\n                var worstCount = 1;\n\n                node.childEdges.forEach(e=> {\n                    var childPayoff = this.computePayoff(e.childNode, this.basePayoff(e), this.add(this.basePayoff(e), aggregatedPayoff));\n                    if (childPayoff < worstChild) {\n                        worstChild = childPayoff;\n                        worstCount = 1;\n                    } else if (childPayoff.equals(worstChild)) {\n                        worstCount++\n                    }\n                    if (childPayoff > bestChild) {\n                        bestChild = childPayoff;\n                        bestCount = 1;\n                    } else if (childPayoff.equals(bestChild)) {\n                        bestCount++\n                    }\n\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', this.baseProbability(e));\n                });\n                this.modifyChanceProbability(node.childEdges, bestChild, bestCount, worstChild, worstCount);\n            }\n\n            var sumweight = 0;\n            node.childEdges.forEach(e=> {\n                sumweight = this.add(sumweight, this.cValue(e, 'probability'));\n            });\n\n            // console.log(payoff,node.childEdges,'sumweight',sumweight);\n            if (sumweight > 0) {\n                node.childEdges.forEach(e=> {\n                    childrenPayoff = this.add(childrenPayoff, this.multiply(this.cValue(e, 'probability'), this.computedPayoff(e.childNode)).div(sumweight));\n                });\n            }\n\n\n        }\n\n        payoff = this.add(payoff, childrenPayoff);\n        this.clearComputedValues(node);\n\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'aggregatedPayoff'+ '[' + this.payoffIndex + ']', aggregatedPayoff);\n            this.cValue(node, 'probabilityToEnter', 0); //initial value\n        } else {\n            this.cValue(node, 'childrenPayoff' + '[' + this.payoffIndex + ']', childrenPayoff);\n        }\n\n        return this.computedPayoff(node, payoff);\n    }\n\n    // koloruje optymalne ścieżki\n    computeOptimal(node) {\n        throw 'computeOptimal function not implemented for rule: ' + this.name\n    }\n\n    /* get or set computed payoff*/\n    computedPayoff(node, value){\n        return this.cValue(node, 'payoff[' + this.payoffIndex + ']', value)\n    }\n\n    /*Get or set object's computed value for current rule*/\n    cValue(object, fieldPath, value) {\n        // if(fieldPath.trim() === 'payoff'){\n        //     fieldPath += '[' + this.payoffIndex + ']';\n        // }\n\n        return object.computedValue(this.name, fieldPath, value);\n    }\n\n    baseProbability(edge) {\n        return edge.computedBaseProbability();\n    }\n\n    basePayoff(edge, payoffIndex) {\n        return edge.computedBasePayoff(undefined, payoffIndex || this.payoffIndex);\n    }\n\n    clearComputedValues(object) {\n        object.clearComputedValues(this.name);\n    }\n\n    add(a, b) {\n        return ExpressionEngine.add(a, b)\n    }\n\n    subtract(a, b) {\n        return ExpressionEngine.subtract(a, b)\n    }\n\n    divide(a, b) {\n        return ExpressionEngine.divide(a, b)\n    }\n\n    multiply(a, b) {\n        return ExpressionEngine.multiply(a, b)\n    }\n\n    max() {\n        return ExpressionEngine.max(...arguments)\n    }\n\n    min() {\n        return ExpressionEngine.min(...arguments)\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ExpressionEngine} from 'sd-expression-engine'\nimport {log} from 'sd-utils'\nimport {Operation} from \"./operation\";\nimport {TreeValidator} from \"../validation/tree-validator\";\n\n/*Subtree flipping operation*/\nexport class FlipSubtree extends Operation{\n\n    static $NAME = 'flipSubtree';\n    data;\n    expressionEngine;\n\n    constructor(data, expressionEngine) {\n        super(FlipSubtree.$NAME);\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.treeValidator = new TreeValidator(expressionEngine);\n    }\n\n    isApplicable(object){\n        return object instanceof model.ChanceNode\n    }\n\n    canPerform(node) {\n        if (!this.isApplicable(node)) {\n            return false;\n        }\n\n        if (!this.treeValidator.validate(this.data.getAllNodesInSubtree(node)).isValid()) { //check if the whole subtree is proper\n            return false;\n        }\n\n        if (node.childEdges.length < 1) {\n            return false;\n        }\n\n\n        var grandchildrenNumber = null;\n        var grandchildrenEdgeLabels = [];\n        var childrenEdgeLabelsSet = new Set();\n        var grandchildrenEdgeLabelsSet;\n        if (!node.childEdges.every(e=> {\n\n                var child = e.childNode;\n                if (!(child instanceof model.ChanceNode)) {\n                    return false;\n                }\n\n                if (childrenEdgeLabelsSet.has(e.name.trim())) { // edge labels should be unique\n                    return false;\n                }\n                childrenEdgeLabelsSet.add(e.name.trim());\n\n                if (grandchildrenNumber === null) {\n                    grandchildrenNumber = child.childEdges.length;\n                    if (grandchildrenNumber < 1) {\n                        return false;\n                    }\n                    child.childEdges.forEach(ge=> {\n                        grandchildrenEdgeLabels.push(ge.name.trim());\n                    });\n\n                    grandchildrenEdgeLabelsSet = new Set(grandchildrenEdgeLabels);\n\n                    if (grandchildrenEdgeLabelsSet.size !== grandchildrenEdgeLabels.length) { //grandchildren edge labels should be unique\n                        return false;\n                    }\n\n                    return true;\n                }\n\n                if (child.childEdges.length != grandchildrenNumber) {\n                    return false;\n                }\n\n                if (!child.childEdges.every((ge, i)=>grandchildrenEdgeLabels[i] === ge.name.trim())) {\n                    return false;\n                }\n\n                return true;\n\n            })) {\n\n            return false;\n        }\n\n        return true;\n    }\n\n    perform(root) {\n\n        var rootClone = this.data.cloneSubtree(root, true);\n        var oldChildrenNumber = root.childEdges.length;\n        var oldGrandChildrenNumber = root.childEdges[0].childNode.childEdges.length;\n\n        var childrenNumber = oldGrandChildrenNumber;\n        var grandChildrenNumber = oldChildrenNumber;\n\n        var callbacksDisabled = this.data.callbacksDisabled;\n        this.data.callbacksDisabled = true;\n\n\n        var childX = root.childEdges[0].childNode.location.x;\n        var topY = root.childEdges[0].childNode.childEdges[0].childNode.location.y;\n        var bottomY = root.childEdges[oldChildrenNumber - 1].childNode.childEdges[oldGrandChildrenNumber - 1].childNode.location.y;\n\n        var extentY = bottomY - topY;\n        var stepY = extentY / (childrenNumber + 1);\n\n        root.childEdges.slice().forEach(e=> this.data.removeNode(e.childNode));\n\n\n        for (var i = 0; i < childrenNumber; i++) {\n            var child = new model.ChanceNode(new model.Point(childX, topY + (i + 1) * stepY));\n            var edge = this.data.addNode(child, root);\n            edge.name = rootClone.childEdges[0].childNode.childEdges[i].name;\n\n            edge.probability = 0;\n\n            for (var j = 0; j < grandChildrenNumber; j++) {\n                var grandChild = rootClone.childEdges[j].childNode.childEdges[i].childNode;\n\n\n                var grandChildEdge = this.data.attachSubtree(grandChild, child);\n                grandChildEdge.name = rootClone.childEdges[j].name;\n                grandChildEdge.payoff = [\n                    ExpressionEngine.add(rootClone.childEdges[j].computedBasePayoff(undefined, 0), rootClone.childEdges[j].childNode.childEdges[i].computedBasePayoff(undefined, 0)),\n                    ExpressionEngine.add(rootClone.childEdges[j].computedBasePayoff(undefined, 1), rootClone.childEdges[j].childNode.childEdges[i].computedBasePayoff(undefined, 1)),\n                ];\n\n                grandChildEdge.probability = ExpressionEngine.multiply(rootClone.childEdges[j].computedBaseProbability(), rootClone.childEdges[j].childNode.childEdges[i].computedBaseProbability());\n                edge.probability = ExpressionEngine.add(edge.probability, grandChildEdge.probability);\n            }\n\n            var divideGrandChildEdgeProbability = p => ExpressionEngine.divide(p, edge.probability);\n            if (edge.probability.equals(0)) {\n                var prob = ExpressionEngine.divide(1, grandChildrenNumber);\n                divideGrandChildEdgeProbability = p => prob;\n            }\n\n            var probabilitySum = 0.0;\n            child.childEdges.forEach(grandChildEdge=> {\n                grandChildEdge.probability = divideGrandChildEdgeProbability(grandChildEdge.probability);\n                probabilitySum = ExpressionEngine.add(probabilitySum, grandChildEdge.probability);\n                grandChildEdge.probability = this.expressionEngine.serialize(grandChildEdge.probability)\n            });\n\n            this._normalizeProbabilitiesAfterFlip(child.childEdges, probabilitySum);\n            edge.probability = this.expressionEngine.serialize(edge.probability)\n        }\n        this._normalizeProbabilitiesAfterFlip(root.childEdges);\n\n\n        this.data.callbacksDisabled = callbacksDisabled;\n        this.data._fireNodeAddedCallback();\n    }\n\n    _normalizeProbabilitiesAfterFlip(childEdges, probabilitySum){\n        if(!probabilitySum){\n            probabilitySum = 0.0;\n            childEdges.forEach(e=> {\n                probabilitySum = ExpressionEngine.add(probabilitySum, e.probability);\n            });\n        }\n        if (!probabilitySum.equals(1)) {\n            log.info('Sum of the probabilities in child nodes is not equal to 1 : ', probabilitySum);\n            var newProbabilitySum = 0.0;\n            var cf = 1000000000000; //10^12\n            var prec = 12;\n            childEdges.forEach(e=> {\n                e.probability = parseInt(ExpressionEngine.round(e.probability, prec) * cf);\n                newProbabilitySum = newProbabilitySum + e.probability;\n            });\n            var rest = cf - newProbabilitySum;\n            log.info('Normalizing with rounding to precision: ' + prec, rest);\n            childEdges[0].probability = ExpressionEngine.add(rest, childEdges[0].probability);\n            newProbabilitySum = 0.0;\n            childEdges.forEach(e=> {\n                e.probability = this.expressionEngine.serialize(ExpressionEngine.divide(parseInt(e.probability), cf))\n            })\n        }\n    }\n}\n","\n/*Base class for complex operations on tree structure*/\nexport class Operation{\n\n    name;\n\n    constructor(name){\n        this.name = name;\n    }\n\n    //check if operation is potentially applicable for object\n    isApplicable(){\n        throw 'isApplicable function not implemented for operation: '+this.name\n    }\n\n    //check if can perform operation for applicable object\n    canPerform(object){\n        throw 'canPerform function not implemented for operation: '+this.name\n    }\n\n    perform(object){\n        throw 'perform function not implemented for operation: '+this.name\n    }\n\n\n}\n","import {FlipSubtree} from \"./flip-subtree\";\n\n\nexport class OperationsManager {\n\n    operations = [];\n    operationByName = {};\n\n    constructor(data, expressionEngine){\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.registerOperation(new FlipSubtree(data, expressionEngine));\n    }\n\n    registerOperation(operation){\n        this.operations.push(operation);\n        this.operationByName[operation.name] = operation;\n    }\n\n\n    getOperationByName(name){\n        return this.operationByName[name];\n    }\n\n    operationsForObject(object){\n        return this.operations.filter(op=>op.isApplicable(object))\n    }\n\n    setData(data){\n        this.data = data;\n        this.operations.forEach(o => o.data = data)\n    }\n}\n","\nexport class Decision{\n    node;\n    decisionValue; //index of  selected edge\n    children = [];\n    key;\n\n    constructor(node, decisionValue) {\n        this.node = node;\n        this.decisionValue = decisionValue;\n        this.key = Decision.generateKey(this);\n    }\n\n    static generateKey(decision, keyProperty='id'){\n        var e = decision.node.childEdges[decision.decisionValue];\n        var key = decision.node[keyProperty]+\":\"+(e[keyProperty]? e[keyProperty] : decision.decisionValue+1);\n        return key.replace(/\\n/g, ' ');\n    }\n\n    addDecision(node, decisionValue){\n        var decision = new Decision(node, decisionValue);\n        this.children.push(decision);\n        this.key = Decision.generateKey(this);\n        return decision;\n    }\n\n    getDecision(decisionNode){\n        return Decision.getDecision(this, decisionNode)\n    }\n\n    static getDecision(decision, decisionNode){\n        if(decision.node===decisionNode || decision.node.id === decisionNode.id){\n            return decision;\n        }\n        for(var i=0; i<decision.children.length; i++){\n            var d = Decision.getDecision(decision.children[i], decisionNode);\n            if(d){\n                return d;\n            }\n        }\n    }\n\n    static toDecisionString(decision, extended=false, keyProperty='name', indent = ''){\n\n        var res = Decision.generateKey(decision, keyProperty);\n        var childrenRes = \"\";\n\n        decision.children.forEach(d=>{\n            if(childrenRes){\n                if(extended){\n                    childrenRes += '\\n'+indent;\n                }else{\n                    childrenRes += \", \"\n                }\n\n            }\n            childrenRes += Decision.toDecisionString(d,extended,keyProperty, indent+'\\t')\n        });\n        if(decision.children.length){\n            if(extended){\n                childrenRes =  '\\n'+indent +childrenRes;\n            }else{\n                childrenRes = \" - (\" + childrenRes + \")\";\n            }\n\n\n\n        }\n\n        return res+childrenRes;\n    }\n\n    toDecisionString(indent=false){\n        return Decision.toDecisionString(this, indent)\n    }\n}\n","import {Policy} from \"./policy\";\nimport {domain as model} from 'sd-model'\nimport {Utils} from 'sd-utils'\nimport {Decision} from \"./decision\";\n\nexport class PoliciesCollector{\n    policies = [];\n    ruleName=false;\n\n    constructor(root, optimalForRuleName){\n        this.ruleName = optimalForRuleName;\n        this.collect(root).forEach((decisions,i)=>{\n            this.policies.push(new Policy(\"#\"+(i+1), decisions));\n        });\n        if(this.policies.length===1){\n            this.policies[0].id = \"default\"\n        }\n    }\n\n    collect(root){\n        var nodeQueue = [root];\n        var node;\n        var decisionNodes = [];\n        while(nodeQueue.length){\n            node = nodeQueue.shift();\n\n            if(this.ruleName && !node.computedValue(this.ruleName, 'optimal')){\n                continue;\n            }\n\n            if(node instanceof model.DecisionNode){\n                decisionNodes.push(node);\n                continue;\n            }\n\n            node.childEdges.forEach((edge, i)=>{\n                nodeQueue.push(edge.childNode)\n            })\n        }\n\n        return Utils.cartesianProductOf(decisionNodes.map((decisionNode)=>{\n            var decisions= [];\n            decisionNode.childEdges.forEach((edge, i)=>{\n\n                if(this.ruleName && !edge.computedValue(this.ruleName, 'optimal')){\n                    return;\n                }\n\n                var childDecisions = this.collect(edge.childNode); //all possible child decisions (cartesian)\n                childDecisions.forEach(cd=>{\n                    var decision = new Decision(decisionNode, i);\n                    decisions.push(decision);\n                    decision.children = cd;\n                })\n\n            });\n            return decisions;\n        }));\n    }\n\n}\n","import {Decision} from \"./decision\";\n\nexport class Policy{\n    id;\n    decisions = [];\n\n    constructor(id, decisions){\n        this.id = id;\n        this.decisions = decisions || [];\n        this.key = Policy.generateKey(this);\n    }\n\n    addDecision(node, decisionValue){\n        var decision = new Decision(node, decisionValue);\n        this.decisions .push(decision);\n        this.key = Policy.generateKey(this);\n        return decision;\n    }\n\n    static generateKey(policy){\n        var key = \"\";\n        policy.decisions.forEach(d=>key+=(key? \"&\": \"\")+d.key);\n        return key;\n    }\n\n    equals(policy, ignoreId=true){\n        if(this.key != policy.key){\n            return false;\n        }\n\n        return ignoreId || this.id === policy.id;\n    }\n\n    getDecision(decisionNode){\n        return Policy.getDecision(this, decisionNode);\n    }\n\n    static getDecision(policy, decisionNode){\n        for(var i=0; i<policy.decisions.length; i++){\n            var decision = Decision.getDecision(policy.decisions[i], decisionNode);\n            if(decision){\n                return decision;\n            }\n        }\n        return null;\n    }\n\n    static toPolicyString(policy, extended=false, prependId=false){\n\n        var res = \"\";\n        policy.decisions.forEach(d=>{\n            if(res){\n                if(extended){\n                    res += \"\\n\"\n                }else{\n                    res += \", \"\n                }\n\n\n            }\n            res += Decision.toDecisionString(d, extended, 'name', '\\t');\n        });\n        if(prependId && policy.id!==undefined){\n            return policy.id+\" \"+res;\n        }\n        return res;\n    }\n\n\n    toPolicyString(indent=false){\n        return Policy.toPolicyString(this, indent)\n    }\n\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n\nexport class McdmWeightValueValidator{\n\n    additionalValidator = null;\n\n    constructor(additionalValidator){\n        this.additionalValidator = additionalValidator;\n    }\n\n    validate(value){\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        let parsed = parseFloat(value);\n        if(parsed !== Infinity && !ExpressionEngine.validate(value, {}, false)){\n            return false\n        }\n\n        value = ExpressionEngine.toNumber(value);\n        var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991; // Number.MAX_SAFE_INTEGER is undefined in IE\n        if(ExpressionEngine.compare(value, 0) < 0 || (value !== Infinity && ExpressionEngine.compare(value, maxSafeInteger)> 0)){\n            return false;\n        }\n\n        if(this.additionalValidator) {\n            return this.additionalValidator(ExpressionEngine.toNumber(value))\n        }\n\n        return true;\n    }\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n/*Computed base value validator*/\nexport class PayoffValueValidator{\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine=expressionEngine;\n    }\n\n    validate(value){\n\n\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        value = ExpressionEngine.toNumber(value);\n        var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991; // Number.MAX_SAFE_INTEGER in undefined in IE\n        return ExpressionEngine.compare(value, -maxSafeInteger) >= 0 && ExpressionEngine.compare(value, maxSafeInteger) <= 0;\n    }\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n/*Computed base value validator*/\nexport class ProbabilityValueValidator{\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine=expressionEngine;\n    }\n\n    validate(value, edge){\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        var value = ExpressionEngine.toNumber(value);\n        return value.compare(0) >= 0 && value.compare(1) <= 0;\n    }\n\n}\n","import {domain as model, ValidationResult} from \"sd-model\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {ProbabilityValueValidator} from \"./probability-value-validator\";\nimport {PayoffValueValidator} from \"./payoff-value-validator\";\n\nexport class TreeValidator {\n\n    expressionEngine;\n\n    constructor(expressionEngine) {\n        this.expressionEngine = expressionEngine;\n        this.probabilityValueValidator = new ProbabilityValueValidator(expressionEngine);\n        this.payoffValueValidator = new PayoffValueValidator(expressionEngine);\n    }\n\n    validate(nodes) {\n\n        var validationResult = new ValidationResult();\n\n        nodes.forEach(n=> {\n            this.validateNode(n, validationResult);\n        });\n\n        return validationResult;\n    }\n\n    validateNode(node, validationResult = new ValidationResult()) {\n\n        if (node instanceof model.TerminalNode) {\n            return;\n        }\n        if (!node.childEdges.length) {\n            validationResult.addError('incompletePath', node)\n        }\n\n        var probabilitySum = ExpressionEngine.toNumber(0);\n        var withHash = false;\n        node.childEdges.forEach((e, i)=> {\n            e.setValueValidity('probability', true);\n\n            if (node instanceof model.ChanceNode) {\n                var probability = e.computedBaseProbability();\n                if (!this.probabilityValueValidator.validate(probability)) {\n                    if (!ExpressionEngine.isHash(e.probability)) {\n                        validationResult.addError({name: 'invalidProbability', data: {'number': i + 1}}, node);\n                        e.setValueValidity('probability', false);\n                    }\n\n                } else {\n                    probabilitySum = ExpressionEngine.add(probabilitySum, probability);\n                }\n            }\n\n            e.payoff.forEach((rawPayoff, payoffIndex)=> {\n                var path = 'payoff[' + payoffIndex + ']';\n                e.setValueValidity(path, true);\n                var payoff = e.computedBasePayoff(undefined, payoffIndex);\n                if (!this.payoffValueValidator.validate(payoff)) {\n                    validationResult.addError({name: 'invalidPayoff', data: {'number': i + 1}}, node);\n                    e.setValueValidity(path, false);\n                }\n            })\n\n\n        });\n        if (node instanceof model.ChanceNode) {\n            if (isNaN(probabilitySum) || !probabilitySum.equals(1)) {\n                validationResult.addError('probabilityDoNotSumUpTo1', node);\n            }\n        }\n\n\n        return validationResult;\n    }\n}\n","export * from './src/index'\n"]}