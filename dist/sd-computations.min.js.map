{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","src/computations-engine.js","src/computations-manager.js","src/computations-utils.js","src/expressions-evaluator.js","src/index.js","src/jobs/configurations/league-table/league-table-job-parameters.js","src/jobs/configurations/league-table/league-table-job.js","src/jobs/configurations/league-table/steps/calculate-step.js","src/jobs/configurations/recompute/recompute-job-parameters.js","src/jobs/configurations/recompute/recompute-job.js","src/jobs/configurations/sensitivity-analysis/n-way/sensitivity-analysis-job-parameters.js","src/jobs/configurations/sensitivity-analysis/n-way/sensitivity-analysis-job.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/init-policies-step.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/prepare-variables-step.js","src/jobs/configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job-parameters.js","src/jobs/configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job.js","src/jobs/configurations/sensitivity-analysis/probabilistic/steps/compute-policy-stats-step.js","src/jobs/configurations/sensitivity-analysis/probabilistic/steps/prob-calculate-step.js","src/jobs/configurations/sensitivity-analysis/spider-plot/spider-plot-job-parameters.js","src/jobs/configurations/sensitivity-analysis/spider-plot/spider-plot-job.js","src/jobs/configurations/sensitivity-analysis/spider-plot/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/steps/prepare-variables-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job-parameters.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job.js","src/jobs/engine/batch/batch-step.js","src/jobs/engine/exceptions/extendable-error.js","src/jobs/engine/exceptions/index.js","src/jobs/engine/exceptions/job-computation-exception.js","src/jobs/engine/exceptions/job-data-invalid-exception.js","src/jobs/engine/exceptions/job-execution-already-running-exception.js","src/jobs/engine/exceptions/job-instance-already-complete-exception.js","src/jobs/engine/exceptions/job-interrupted-exception.js","src/jobs/engine/exceptions/job-parameters-invalid-exception.js","src/jobs/engine/exceptions/job-restart-exception.js","src/jobs/engine/execution-context.js","src/jobs/engine/index.js","src/jobs/engine/job-execution-flag.js","src/jobs/engine/job-execution-listener.js","src/jobs/engine/job-execution.js","src/jobs/engine/job-instance.js","src/jobs/engine/job-key-generator.js","src/jobs/engine/job-launcher.js","src/jobs/engine/job-parameter-definition.js","src/jobs/engine/job-parameters.js","src/jobs/engine/job-repository/idb-job-repository.js","src/jobs/engine/job-repository/job-repository.js","src/jobs/engine/job-repository/simple-job-repository.js","src/jobs/engine/job-repository/timeout-job-repository.js","src/jobs/engine/job-result.js","src/jobs/engine/job-status.js","src/jobs/engine/job.js","src/jobs/engine/simple-job.js","src/jobs/engine/step-execution-listener.js","src/jobs/engine/step-execution.js","src/jobs/engine/step.js","src/jobs/index.js","src/jobs/job-instance-manager.js","src/jobs/job-worker.js","src/jobs/jobs-manager.js","src/objective/objective-rules-manager.js","src/objective/rules/expected-value-maximization-rule.js","src/objective/rules/expected-value-minimization-rule.js","src/objective/rules/index.js","src/objective/rules/max-max-rule.js","src/objective/rules/max-min-rule.js","src/objective/rules/maxi-max-rule.js","src/objective/rules/maxi-min-rule.js","src/objective/rules/min-max-rule.js","src/objective/rules/min-min-rule.js","src/objective/rules/mini-max-rule.js","src/objective/rules/mini-min-rule.js","src/objective/rules/multi-criteria-rule.js","src/objective/rules/objective-rule.js","src/operations/flip-subtree.js","src/operations/operation.js","src/operations/operations-manager.js","src/policies/decision.js","src/policies/policies-collector.js","src/policies/policy.js","src/validation/mcdm-weight-value-validator.js","src/validation/payoff-value-validator.js","src/validation/probability-value-validator.js","src/validation/tree-validator.js","index.js"],"names":["require","r","e","n","t","o","i","f","c","u","a","Error","code","p","exports","call","length","1","module","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","apply","then","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","replace","arr","Array","slice","callback","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","exp","open","name","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","default","self","idb","_sdUtils","_sdModel","_computationsManager","ComputationsEngineConfig","custom","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","logLevel","Utils","deepExtend","_assertThisInitialized","ComputationsManagerConfig","ComputationsEngine","config","data","_this2","global","getGlobalObject","isWorker","jobsManger","registerJobExecutionListener","beforeJob","jobExecution","reply","getDTO","afterJob","queryableFunctions","runJob","jobName","jobParametersValues","dataDTO","DataModel","executeJob","jobExecutionId","execute","catch","getErrorDTO","recompute","ruleName","evalCode","evalNumeric","objectiveRulesManager","setCurrentRuleByName","allRules","_checkValidityAndRecomputeObjective","onmessage","oEvent","hasOwnProperty","queryMethod","queryArguments","defaultReply","ComputationsManager","_get","setLogLevel","level","log","setLevel","message","TypeError","postMessage","queryMethodListener","queryMethodArguments","_sdExpressionEngine","_objectiveRulesManager","_treeValidator","_operationsManager","_jobsManager","_expressionsEvaluator","_jobInstanceManager","_policy","_mcdmWeightValueValidator","worker","delegateRecomputation","url","jobRepositoryType","clearRepository","setConfig","expressionEngine","ExpressionEngine","expressionsEvaluator","ExpressionsEvaluator","ObjectiveRulesManager","operationsManager","OperationsManager","JobsManager","workerUrl","repositoryType","treeValidator","TreeValidator","mcdmWeightValueValidator","McdmWeightValueValidator","setData","checkValidityAndRecomputeObjective","params","getCurrentRule","d","getData","updateFrom","updateDisplayValues","updateDefaultCriterion1Weight","defaultCriterion1Weight","validationResults","evalExpressions","weightValid","validate","multiCriteria","getRoots","root","vr","getAllNodesInSubtree","isValid","recomputeTree","currentRule","getJobByName","object","operationsForObject","every","jobParamsValues","resolvePromiseAfterJobIsLaunched","run","jobInstanceManagerConfig","_this3","je","JobInstanceManager","rules","getObjectiveRuleByName","isRuleName","reversePayoffs","tmp","weightLowerBound","flip","weightUpperBound","flipRule","Infinity","serialize","divide","_this4","policyToDisplay","displayPolicy","nodes","updateNodeDisplayValues","edges","updateEdgeDisplayValues","node","_this5","$DISPLAY_VALUE_NAMES","displayValue","getNodeDisplayValue","_this6","getEdgeDisplayValue","_this7","clearDisplayValues","displayPolicyForNode","policy","_this8","domain","DecisionNode","decision","Policy","getDecision","childEdge","childEdges","decisionValue","childNode","ChanceNode","TerminalNode","ComputationsUtils","min","max","extent","subtract","step","curr","add","toFloat","clearComputedValues","initScopes","debug","evalGlobalCode","clearTree","evalExpressionsForNode","clearExpressionScope","$codeDirty","$codeError","eval","expressionScope","edge","hasAssignmentExpression","payoff","parentNode","initScope","initScopeForNode","scope","probabilitySum","toNumber","hashEdges","invalidProb","rawPayoff","payoffIndex","path","isFieldValid","computedValue","evalPayoff","err","isHash","probability","warn","prob","compare","hash","parent","$parent","parentScope","cloneDeep","_computationsEngine","keys","key","enumerable","_jobParameters","_jobParameterDefinition","LeagueTableJobParameters","JobParameters","definitions","JobParameterDefinition","PARAMETER_TYPE","STRING","BOOLEAN","NUMBER_EXPRESSION","v","allVals","computeNumberExpression","values","id","guid","nameOfCriterion1","nameOfCriterion2","extendedPolicyDescription","defaultWeight","_simpleJob","_calculateStep","_leagueTableJobParameters","LeagueTableJob","jobRepository","initSteps","SimpleJob","calculateStep","CalculateStep","addStep","jobResult","jobParameters","withHeaders","headers","payoffNames","rows","row","policies","rowCells","toPolicyString","payoffs","dominatedBy","extendedDominatedBy","incratio","optimal","optimalForDefaultWeight","_step","_jobStatus","_policiesCollector","Step","stepExecution","getJobParameters","rule","treeRoot","PoliciesCollector","payoffCoeffs","b","map","sort","reduce","previousValue","currentValue","array","_prev$policies","prev","concat","_toConsumableArray","bestCost","bestCostRow","cmp","prev2NotDominated","filter","computeICER","lastLELower","lastLELowerDef","sub","exitStatus","JOB_STATUS","COMPLETED","Math","abs","RecomputeJobParameters","_recomputeJobParameters","_job","RecomputeJob","isRestartable","Job","execution","SensitivityAnalysisJobParameters","NUMBER","INTEGER","isUnique","failOnInvalidTree","_sensitivityAnalysisJobParameters","_prepareVariablesStep","_initPoliciesStep","SensitivityAnalysisJob","batchSize","PrepareVariablesStep","InitPoliciesStep","chunkSize","variableNames","roundVariables","policyIndex","variables","_variables","uniqueValues","Set","uniqueValuesNo","s","size","precision","notReadyVariablesIndexes","variableIndex","notReadyIndex","round","newReadyIndexes","uniqueVals","reverse","splice","stepExecutions","total","current","steps","getProgress","_batchStep","_jobComputationException","BatchStep","getJobExecutionContext","variableValues","executionContext","put","startIndex","item","clear","variableName","valid","errorData","JobComputationException","isString","_computationsUtils","sequence","cartesianProductOf","ProbabilisticSensitivityAnalysisJobParameters","_probabilisticSensitivityAnalysisJobParameters","_sensitivityAnalysisJob","_probCalculateStep","_computePolicyStatsStep","ProbabilisticSensitivityAnalysisJob","ProbCalculateStep","ComputePolicyStatsStep","numberOfRuns","ruleByName","payoffsPerPolicy","maximization","medians","median","standardDeviations","std","policyIsBestProbabilities","policyToHighestPayoffCount","policyToLowestPayoffCount","expectedValues","fill","runIndex","singleRunVariableValues","errors","evaluated","formula","variable","currentItemCount","updatePolicyStats","highestPayoff","lowestPayoff","bestPolicyIndexes","worstPolicyIndexes","zeroNum","equals","SpiderPlotJobParameters","_spiderPlotJobParameters","SpiderPlotJob","percentageRangeValues","percentageChangeRange","policiesCollector","defaultValues","forOwn","k","defVal","multiply","defaultPayoff","itemIndex","variableValue","_jobResult$data$rows","jobExecutionContext","variableExtents","extents","extentVariableValues","TornadoDiagramJobParameters","_tornadoDiagramJobParameters","TornadoDiagramJob","_jobInterruptedException","TOTAL_ITEM_COUNT_PROP","CURRENT_ITEM_COUNT_PROP","init","totalItemCount","setCurrentItemCount","getCurrentItemCount","setTotalItemCount","handleNextChunk","JobInterruptedException","postProcess","getTotalItemCount","checkJobExecutionFlags","terminateOnly","readNextChunk","chunk","processChunk","processedChunk","writeChunk","res","updateJobProgress","processItem","progress","jobInstance","updateJobExecutionProgress","checkExecutionFlags","ExtendableError","constructor","_extendableError","_jobDataInvalidException","_jobExecutionAlreadyRunningException","_jobInstanceAlreadyCompleteException","_jobParametersInvalidException","_jobRestartException","JobDataInvalidException","JobExecutionAlreadyRunningException","JobInstanceAlreadyCompleteException","JobParametersInvalidException","JobRestartException","ExecutionContext","context","dirty","clone","prevValue","dto","exceptions","_interopRequireWildcard","_executionContext","_exportNames","_jobExecution","_jobExecutionFlag","_jobExecutionListener","_jobInstance","_jobKeyGenerator","_jobLauncher","_stepExecution","_stepExecutionListener","STOP","JobExecutionListener","JobExecution","status","STARTING","UNKNOWN","startTime","createTime","Date","endTime","lastUpdated","failureExceptions","stepName","StepExecution","STOPPING","se","filteredProperties","deepClone","cloneMethod","cloneDeepWith","cloneWith","assign","stack","indexOf","JobInstance","JobKeyGenerator","identifying","JobLauncher","jobWorker","dataModelSerializer","jobOrName","job","createJobParameters","createJobExecution","executionPromise","_execute","getLastJobExecution","lastExecution","jobParametersValidator","jobDataValidator","jobExecutionOrId","getJobExecutionById","info","DATE","COMPOSITE","typeOrNestedParametersDefinitions","minOccurs","maxOccurs","singleValueValidator","validator","nestedParameters","required","isArray","type","parsed","parseFloat","allValues","validateSingleValue","isDate","isInt","isNumber","isBoolean","isObject","nestedDef","_value","initDefinitions","initDefaultValues","def","defs","split","find","getDefinition","_jobRepository","_idb","IdbJobRepository","expressionsReviver","dbName","deleteDB","initDB","JobRepository","dbPromise","upgradeDB","jobExecutionsOS","unique","jobInstanceDao","ObjectStoreDao","jobExecutionDao","jobExecutionProgressDao","jobExecutionFlagDao","stepExecutionDao","jobResultDao","_","generateJobInstanceKey","remove","findJobExecutions","jobExecutions","removeJobExecution","getJobResultByInstance","removeJobResult","findStepExecutions","removeStepExecution","jobResultId","getByIndex","reviveJobInstance","stepExecutionsDTOs","saveStepExecutionsDTOS","flag","savedExecutions","stepExecutionDTO","fetchJobExecutionRelations","jobExecutionDTO","_this9","revive","reviveJobExecution","jobExecutionDtoList","_this10","fetched","fetchJobExecutionsRelations","_this11","getAllByIndex","dtos","reviveStepExecution","_this12","fetchRelationsAndRevive","sorted","getTime","_this13","executions","latest","dataModel","loadFromDTO","_this14","reviveExecutionContext","mergeWith","objValue","srcValue","source","stepDTO","_this15","indexName","_this16","_this17","_this18","tx","_this19","_this20","_this21","iterateKeyCursor","_jobResult","jobByName","saveJobInstance","getJobInstance","generateKey","isRunning","ABANDONED","createJobInstance","_setNewState","createStateSnapshot","all","instanceAndExecutionContext","saveJobExecution","getLastJobExecutionByInstance","saveStepExecution","JobResult","SimpleJobRepository","jobInstancesByKey","executionProgress","executionFlags","jobResults","ji","ex","_simpleJobRepository","TimeoutJobRepository","valueToResolve","delay","setTimeout","createTimeoutPromise","STARTED","STOPPED","FAILED","EXECUTING","executionListeners","getJobParametersValidator","getJobDataValidator","updateStatus","getResult","updateProgress","listener","doExecute","saveJobResult","update","getJobExecutionFlag","JOB_EXECUTION_FLAG","stop","handleNextStep","lastExecutedStepExecution","_execution$failureExc","prevStep","prevStepExecution","stepIndex","handleStep","isStopping","getLastStepExecution","lastStepExecution","stepExecutionPartOfExistingJobExecution","currentStepExecution","shouldStart","createStepExecution","isCompleted","isRestart","skipExecution","skipOnRestartIfCompleted","containsKey","addStepExecution","_currentStepExecution","stepStatus","completedSteps","StepExecutionListener","beforeStep","determineJobStatus","afterStep","close","engine","_jobWorker","JobInstanceManagerConfig","onJobStarted","onJobCompleted","onJobFailed","onJobStopped","onJobTerminated","onProgress","updateInterval","jobInstanceOrExecution","checkProgress","lastJobExecution","terminated","getProgressPercents","lastUpdateTime","callbacksThisArg","deregisterJobExecutionListener","getProgressFromExecution","forceUpdate","terminate","JobWorker","defaultListener","onError","listeners","Worker","deserializer","fn","thisArg","sendQuery","ruleNames","_idbJobRepository","_recomputeJob","_probabilisticSensitivityAnalysisJob","_timeoutJobRepository","_tornadoDiagramJob","_leagueTableJob","_spiderPlotJob","JobsManagerConfig","jobExecutionListeners","afterJobExecutionPromiseResolves","jobInstancesToTerminate","useWorker","initWorker","initRepository","registerJobs","jobLauncher","serializeData","getJsonReviver","getJsonReplacer","getJobExecutionProgress","saveJobExecutionFlag","removeJobInstance","_arguments","argsDeserializer","addListener","onJobFatalError","sensitivityAnalysisJob","probabilisticSensitivityAnalysisJob","setBatchSize","registerJob","registerExecutionListener","l","promiseResolve","_rules","model","_minMaxRule","_maxMinRule","_minMinRule","_maxMaxRule","currentRuleName","flipPair","addRule","ExpectedValueMaximizationRule","ExpectedValueMinimizationRule","MaxiMinRule","MaxiMaxRule","MiniMinRule","MiniMaxRule","minMax","MinMaxRule","maxMin","MaxMinRule","addFlipPair","minMin","MinMinRule","maxMax","MaxMaxRule","flipped","setDefaultCriterion1Weight","decisionPolicy","trace","time","setPayoffIndex","setDecisionPolicy","computePayoff","computeOptimal","clearDecisionPolicy","computedBaseProbability","rule1","rule2","_objectiveRule","NAME","ObjectiveRule","probabilityToEnter","cValue","computedPayoff","basePayoff","_expectedValueMaximizationRule","_expectedValueMinimizationRule","_maxiMaxRule","_maxiMinRule","_miniMaxRule","_miniMinRule","_multiCriteriaRule","MultiCriteriaRule","bestChildPayoff","bestCount","worstChildPayoff","worstCount","optimalEdge","maxBy","minBy","criterion1Weight","aggregatedPayoff","childrenPayoff","selectedIndexes","bestChild","basePayoffs","childCombinedPayoff","baseProbability","sumweight","ep","div","computeCombinedPayoff","combinedPayoff","decisionNode","childrenPayoffs","best","makeDecision","_makeDecision","worstChild","childPayoff","modifyChanceProbability","fieldPath","computedBasePayoff","_operation","FlipSubtree","$NAME","Operation","isApplicable","grandchildrenNumber","grandchildrenEdgeLabels","childrenEdgeLabelsSet","child","has","trim","ge","rootClone","cloneSubtree","oldChildrenNumber","oldGrandChildrenNumber","childrenNumber","grandChildrenNumber","callbacksDisabled","childX","location","x","topY","y","stepY","removeNode","Point","addNode","j","grandChild","grandChildEdge","attachSubtree","divideGrandChildEdgeProbability","_normalizeProbabilitiesAfterFlip","_fireNodeAddedCallback","newProbabilitySum","parseInt","rest","_flipSubtree","operations","operationByName","registerOperation","operation","op","Decision","children","keyProperty","$id","extended","indent","childrenRes","toDecisionString","_decision","optimalForRuleName","collect","decisions","nodeQueue","decisionNodes","shift","cd","prependId","ignoreId","additionalValidator","maxSafeInteger","Number","MAX_SAFE_INTEGER","PayoffValueValidator","ProbabilityValueValidator","_probabilityValueValidator","_payoffValueValidator","probabilityValueValidator","payoffValueValidator","validationResult","ValidationResult","validateNode","addError","setValueValidity","number","isNaN"],"mappings":"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","file":"sd-computations.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","import {Utils, log} from \"sd-utils\";\nimport {DataModel} from \"sd-model\";\nimport {ComputationsManager} from \"./computations-manager\";\nimport {ComputationsManagerConfig} from \"./computations-manager\";\n\n\n\nexport class ComputationsEngineConfig extends ComputationsManagerConfig{\n    logLevel = 'warn';\n    constructor(custom) {\n        super();\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/**\n * Entry point class for standalone computation workers\n */\nexport class ComputationsEngine extends ComputationsManager{\n\n    global = Utils.getGlobalObject();\n    isWorker = Utils.isWorker();\n\n    constructor(config, data){\n        super(config, data);\n\n        if(this.isWorker) {\n            this.jobsManger.registerJobExecutionListener({\n                beforeJob: (jobExecution)=>{\n                    this.reply('beforeJob', jobExecution.getDTO());\n                },\n\n                afterJob: (jobExecution)=>{\n                    this.reply('afterJob', jobExecution.getDTO());\n                }\n            });\n\n            var instance = this;\n            this.queryableFunctions = {\n                runJob: function(jobName, jobParametersValues, dataDTO){\n                    // console.log(jobName, jobParameters, serializedData);\n                    var data = new DataModel(dataDTO);\n                    instance.runJob(jobName, jobParametersValues, data);\n                },\n                executeJob: function(jobExecutionId){\n                    instance.jobsManger.execute(jobExecutionId).catch(e=>{\n                        instance.reply('jobFatalError', jobExecutionId, Utils.getErrorDTO(e));\n                    })\n                },\n                recompute: function(dataDTO, ruleName, evalCode, evalNumeric){\n                    if(ruleName){\n                        instance.objectiveRulesManager.setCurrentRuleByName(ruleName);\n                    }\n                    var allRules = !ruleName;\n                    var data = new DataModel(dataDTO);\n                    instance._checkValidityAndRecomputeObjective(data, allRules, evalCode, evalNumeric)\n                    this.reply('recomputed', data.getDTO());\n                }\n            };\n\n            global.onmessage = function(oEvent) {\n                if (oEvent.data instanceof Object && oEvent.data.hasOwnProperty('queryMethod') && oEvent.data.hasOwnProperty('queryArguments')) {\n                    instance.queryableFunctions[oEvent.data.queryMethod].apply(self, oEvent.data.queryArguments);\n                } else {\n                    instance.defaultReply(oEvent.data);\n                }\n            };\n        }\n    }\n\n\n\n    setConfig(config) {\n        super.setConfig(config);\n        if(this.config.logLevel){\n            this.setLogLevel(this.config.logLevel);\n        }\n\n        return this;\n    }\n\n    setLogLevel(level){\n        log.setLevel(level)\n    }\n\n    defaultReply(message) {\n        this.reply('test', message);\n    }\n\n    reply() {\n        if (arguments.length < 1) {\n            throw new TypeError('reply - not enough arguments');\n        }\n        this.global.postMessage({\n            'queryMethodListener': arguments[0],\n            'queryMethodArguments': Array.prototype.slice.call(arguments, 1)\n        });\n    }\n}\n\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {Utils} from \"sd-utils\";\nimport {ObjectiveRulesManager} from \"./objective/objective-rules-manager\";\nimport {TreeValidator} from \"./validation/tree-validator\";\nimport {OperationsManager} from \"./operations/operations-manager\";\nimport {JobsManager} from \"./jobs/jobs-manager\";\nimport {ExpressionsEvaluator} from \"./expressions-evaluator\";\nimport {JobInstanceManager} from \"./jobs/job-instance-manager\";\nimport {domain as model} from \"sd-model\";\nimport {Policy} from \"./policies/policy\";\nimport {McdmWeightValueValidator} from \"./validation/mcdm-weight-value-validator\";\n\n/** Computation manager configuration object\n * @param custom configuration object to extend\n */\nexport class ComputationsManagerConfig {\n\n    /**\n     * logging level\n     * */\n    logLevel = null;\n\n    /**\n     * default objective rule name\n     * */\n    ruleName = null;\n\n    /**\n     * worker configuration object\n     * */\n    worker = {\n        /**\n         * delegate tree recomputation to worker\n         * */\n        delegateRecomputation: false,\n\n        /**\n         * worker url\n         * */\n        url: null\n    };\n\n    /**\n     * job repository to use, available types: idb, timeout, simple\n    * */\n    jobRepositoryType = 'idb';\n\n    /**\n     * clear repository after init\n     * */\n    clearRepository = false;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/** Computation manager\n* @param {object} config\n* @param {DataModel} data model object\n* */\nexport class ComputationsManager {\n\n    data;\n    expressionEngine;\n    expressionsEvaluator;\n    objectiveRulesManager;\n    operationsManager;\n    jobsManger;\n\n    treeValidator;\n\n    constructor(config, data = null) {\n        this.data = data;\n        this.setConfig(config);\n        this.expressionEngine = new ExpressionEngine();\n        this.expressionsEvaluator = new ExpressionsEvaluator(this.expressionEngine);\n        this.objectiveRulesManager = new ObjectiveRulesManager(this.expressionEngine, this.config.ruleName);\n        this.operationsManager = new OperationsManager(this.data, this.expressionEngine);\n        this.jobsManger = new JobsManager(this.expressionsEvaluator, this.objectiveRulesManager, {\n            workerUrl: this.config.worker.url,\n            repositoryType: this.config.jobRepositoryType,\n            clearRepository: this.config.clearRepository\n        });\n        this.treeValidator = new TreeValidator(this.expressionEngine);\n        this.mcdmWeightValueValidator = new McdmWeightValueValidator();\n    }\n\n    setConfig(config) {\n        this.config = new ComputationsManagerConfig(config);\n        return this;\n    }\n\n    setData(data){\n        this.data = data;\n        this.operationsManager.setData(data);\n    }\n\n\n    /** Alias function for checkValidityAndRecomputeObjective*/\n    recompute(){\n        return this.checkValidityAndRecomputeObjective(...arguments);\n    }\n\n    /**\n     * Checks validity of data model and recomputes objective rules\n     * @returns promise\n     * @param {boolean} allRules - recompute all objective rules\n     * @param {boolean} evalCode - evaluate code\n     * @param {boolean} evalNumeric - evaluate numeric expressions\n     */\n    checkValidityAndRecomputeObjective(allRules, evalCode = false, evalNumeric = true) {\n        return Promise.resolve().then(()=> {\n            if (this.config.worker.delegateRecomputation) {\n                var params = {\n                    evalCode: evalCode,\n                    evalNumeric: evalNumeric\n                };\n                if (!allRules) {\n                    params.ruleName = this.getCurrentRule().name;\n                }\n                return this.runJob(\"recompute\", params, this.data, false).then((jobExecution)=> {\n                    var d = jobExecution.getData();\n                    this.data.updateFrom(d)\n                })\n            }\n            return this._checkValidityAndRecomputeObjective(this.data, allRules, evalCode, evalNumeric);\n        }).then(()=> {\n            this.updateDisplayValues(this.data);\n        })\n\n    }\n\n    _checkValidityAndRecomputeObjective(data, allRules, evalCode = false, evalNumeric = true) {\n\n        this.objectiveRulesManager.updateDefaultCriterion1Weight(data.defaultCriterion1Weight);\n        data.validationResults = [];\n\n        if (evalCode || evalNumeric) {\n            this.expressionsEvaluator.evalExpressions(data, evalCode, evalNumeric);\n        }\n\n        var weightValid = this.mcdmWeightValueValidator.validate(data.defaultCriterion1Weight);\n        var multiCriteria = this.getCurrentRule().multiCriteria;\n\n\n        data.getRoots().forEach(root=> {\n            var vr = this.treeValidator.validate(data.getAllNodesInSubtree(root));\n            data.validationResults.push(vr);\n            if (vr.isValid() && (!multiCriteria || weightValid)) {\n                this.objectiveRulesManager.recomputeTree(root, allRules);\n            }\n        });\n    }\n\n    /**\n     * @returns {ObjectiveRule} current objective rule\n     * */\n    getCurrentRule() {\n        return this.objectiveRulesManager.currentRule;\n    }\n\n    /**\n     * Sets current objective rule\n     * @param {string} ruleName - name of objective rule\n     * */\n    setCurrentRuleByName(ruleName) {\n        this.config.ruleName = ruleName;\n        return this.objectiveRulesManager.setCurrentRuleByName(ruleName)\n    }\n\n    /**\n     *\n     *  @param {string} jobName\n     *  @returns {Job}\n     * */\n    getJobByName(jobName) {\n        return this.jobsManger.getJobByName(jobName);\n    }\n\n    /**\n     * @returns array of operations applicable to the given object (node or edge)\n     * @param object\n     */\n    operationsForObject(object) {\n        return this.operationsManager.operationsForObject(object);\n    }\n\n\n    /**\n     * Checks validity of data model without recomputation and revalidation\n     * @param {DataModel} data to check\n     */\n\n    isValid(data) {\n        var data = data || this.data;\n        return data.validationResults.every(vr=>vr.isValid());\n    }\n    /**\n     * Run job\n     * @param {string} name - job name\n     * @param {object} jobParamsValues - job parameter values object\n     * @param {DataModel} data model\n     * @param {boolean} resolvePromiseAfterJobIsLaunched - immediately resolve promise with still running JobExecution\n     * @returns {Promise} resolving to JobExecution\n     */\n    runJob(name, jobParamsValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        return this.jobsManger.run(name, jobParamsValues, data || this.data, resolvePromiseAfterJobIsLaunched)\n    }\n\n    /**\n     * Run job using JobInstanceManager\n     * @param {string} name - job name\n     * @param {object} jobParamsValues - job parameter values object\n     * @param {JobInstanceManagerConfig} jobInstanceManagerConfig - JobInstanceManager configuration\n     * @returns {Promise} resolving to JobInstanceManager\n     */\n    runJobWithInstanceManager(name, jobParamsValues, jobInstanceManagerConfig) {\n        return this.runJob(name, jobParamsValues).then(je=> {\n            return new JobInstanceManager(this.jobsManger, je, jobInstanceManagerConfig);\n        })\n    }\n\n    getObjectiveRules() {\n        return this.objectiveRulesManager.rules;\n    }\n\n    getObjectiveRuleByName(ruleName){\n        return this.objectiveRulesManager.getObjectiveRuleByName(ruleName)\n    }\n\n    isRuleName(ruleName) {\n        return this.objectiveRulesManager.isRuleName(ruleName)\n    }\n\n\n    flipCriteria(data){\n        data = data || this.data;\n        data.reversePayoffs();\n        let tmp = data.weightLowerBound;\n        data.weightLowerBound = this.flip(data.weightUpperBound);\n        data.weightUpperBound = this.flip(tmp);\n        data.defaultCriterion1Weight = this.flip(data.defaultCriterion1Weight);\n        this.objectiveRulesManager.flipRule();\n        return this.checkValidityAndRecomputeObjective(false);\n    }\n\n    flip(a){\n        if(a == Infinity){\n            return 0;\n        }\n\n        if(a == 0){\n            return Infinity;\n        }\n\n        return this.expressionEngine.serialize(ExpressionEngine.divide(1, a))\n    }\n\n    updateDisplayValues(data, policyToDisplay = null) {\n        data = data || this.data;\n        if (policyToDisplay) {\n            return this.displayPolicy(data, policyToDisplay);\n        }\n\n        data.nodes.forEach(n=> {\n            this.updateNodeDisplayValues(n);\n        });\n        data.edges.forEach(e=> {\n            this.updateEdgeDisplayValues(e);\n        })\n    }\n\n    updateNodeDisplayValues(node) {\n        node.$DISPLAY_VALUE_NAMES.forEach(n=>node.displayValue(n, this.objectiveRulesManager.getNodeDisplayValue(node, n)));\n    }\n\n    updateEdgeDisplayValues(e) {\n        e.$DISPLAY_VALUE_NAMES.forEach(n=>e.displayValue(n, this.objectiveRulesManager.getEdgeDisplayValue(e, n)));\n    }\n\n    displayPolicy(policyToDisplay, data) {\n\n\n        data = data || this.data;\n        data.nodes.forEach(n=> {\n            n.clearDisplayValues();\n        });\n        data.edges.forEach(e=> {\n            e.clearDisplayValues();\n        });\n        data.getRoots().forEach((root)=>this.displayPolicyForNode(root, policyToDisplay));\n    }\n\n    displayPolicyForNode(node, policy) {\n        if (node instanceof model.DecisionNode) {\n            var decision = Policy.getDecision(policy, node);\n            //console.log(decision, node, policy);\n            if (decision) {\n                node.displayValue('optimal', true)\n                var childEdge = node.childEdges[decision.decisionValue];\n                childEdge.displayValue('optimal', true)\n                return this.displayPolicyForNode(childEdge.childNode, policy)\n            }\n            return;\n        } else if(node instanceof model.ChanceNode){\n            node.displayValue('optimal', true);\n            node.childEdges.forEach(e=>{\n                e.displayValue('optimal', true);\n                this.displayPolicyForNode(e.childNode, policy)\n            })\n        }else if(node instanceof model.TerminalNode){\n            node.displayValue('optimal', true);\n        }\n\n\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nexport class ComputationsUtils{\n\n    static sequence(min, max, length) {\n        var extent = ExpressionEngine.subtract(max, min);\n        var result = [min];\n        var steps = length - 1;\n        if(!steps){\n            return result;\n        }\n        var step = ExpressionEngine.divide(extent,length - 1);\n        var curr = min;\n        for (var i = 0; i < length - 2; i++) {\n            curr = ExpressionEngine.add(curr, step);\n            result.push(ExpressionEngine.toFloat(curr));\n        }\n        result.push(max);\n        return result;\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {domain as model} from 'sd-model'\nimport {Utils, log} from 'sd-utils'\n\n/*Evaluates code and expressions in trees*/\nexport class ExpressionsEvaluator {\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine = expressionEngine;\n    }\n\n    clear(data){\n        data.nodes.forEach(n=>{\n            n.clearComputedValues();\n        });\n        data.edges.forEach(e=>{\n            e.clearComputedValues();\n        });\n    }\n\n    clearTree(data, root){\n        data.getAllNodesInSubtree(root).forEach(n=>{\n            n.clearComputedValues();\n            n.childEdges.forEach(e=>{\n                e.clearComputedValues();\n            })\n        })\n    }\n\n    evalExpressions(data, evalCode=true, evalNumeric=true, initScopes=false){\n        log.debug('evalExpressions evalCode:'+evalCode+' evalNumeric:'+evalNumeric);\n        if(evalCode){\n            this.evalGlobalCode(data);\n        }\n\n        data.getRoots().forEach(n=>{\n            this.clearTree(data, n);\n            this.evalExpressionsForNode(data, n, evalCode, evalNumeric,initScopes);\n        });\n\n    }\n\n    evalGlobalCode(data){\n        data.clearExpressionScope();\n        data.$codeDirty = false;\n        try{\n            data.$codeError = null;\n            this.expressionEngine.eval(data.code, false, data.expressionScope);\n        }catch (e){\n            data.$codeError = e;\n        }\n    }\n\n    evalPayoff(edge, index = 0) {\n        if (ExpressionEngine.hasAssignmentExpression(edge.payoff[index])) {\n            return null;\n        }\n        return this.expressionEngine.eval(edge.payoff[index], true, edge.parentNode.expressionScope);\n    }\n\n    evalExpressionsForNode(data, node, evalCode=true, evalNumeric=true, initScope=false) {\n        if(!node.expressionScope || initScope || evalCode){\n            this.initScopeForNode(data, node);\n        }\n        if(evalCode){\n            node.$codeDirty = false;\n            if(node.code){\n                try{\n                    node.$codeError = null;\n                    this.expressionEngine.eval(node.code, false, node.expressionScope);\n                }catch (e){\n                    node.$codeError = e;\n                    log.debug(e);\n                }\n            }\n        }\n\n        if(evalNumeric){\n            var scope = node.expressionScope;\n            var probabilitySum=ExpressionEngine.toNumber(0);\n            var hashEdges= [];\n            var invalidProb = false;\n\n            node.childEdges.forEach(e=>{\n                e.payoff.forEach((rawPayoff, payoffIndex)=> {\n                    let path = 'payoff[' + payoffIndex + ']';\n                    if(e.isFieldValid(path, true, false)){\n                        try{\n                            e.computedValue(null, path, this.evalPayoff(e, payoffIndex))\n                        }catch (err){\n                            //   Left empty intentionally\n                        }\n                    }\n                });\n\n\n\n                if(node instanceof model.ChanceNode){\n                    if(ExpressionEngine.isHash(e.probability)){\n                        hashEdges.push(e);\n                        return;\n                    }\n\n                    if(ExpressionEngine.hasAssignmentExpression(e.probability)){ //It should not occur here!\n                        log.warn(\"evalExpressionsForNode hasAssignmentExpression!\", e);\n                        return null;\n                    }\n\n                    if(e.isFieldValid('probability', true, false)){\n                        try{\n                            var prob = this.expressionEngine.eval(e.probability, true, scope);\n                            e.computedValue(null, 'probability', prob);\n                            probabilitySum = ExpressionEngine.add(probabilitySum, prob);\n                        }catch (err){\n                            invalidProb = true;\n                        }\n                    }else{\n                        invalidProb = true;\n                    }\n                }\n\n            });\n\n\n            if(node instanceof model.ChanceNode){\n                var computeHash = hashEdges.length && !invalidProb && (probabilitySum.compare(0) >= 0 && probabilitySum.compare(1) <= 0);\n\n                if(computeHash) {\n                    var hash = ExpressionEngine.divide(ExpressionEngine.subtract(1, probabilitySum), hashEdges.length);\n                    hashEdges.forEach(e=> {\n                        e.computedValue(null, 'probability', hash);\n                    });\n                }\n            }\n\n            node.childEdges.forEach(e=>{\n                this.evalExpressionsForNode(data, e.childNode, evalCode, evalNumeric, initScope);\n            });\n        }\n    }\n\n    initScopeForNode(data, node){\n        var parent = node.$parent;\n        var parentScope = parent?parent.expressionScope : data.expressionScope;\n        node.expressionScope = Utils.cloneDeep(parentScope);\n    }\n}\n","export * from './computations-engine'\nexport * from './computations-manager'\nexport * from './expressions-evaluator'\nexport * from './jobs/index'\n\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\n\nexport class LeagueTableJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"weightLowerBound\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v <= JobParameterDefinition.computeNumberExpression(allVals['weightUpperBound'])\n        }));\n        this.definitions.push(new JobParameterDefinition(\"defaultWeight\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v >= JobParameterDefinition.computeNumberExpression(allVals['weightLowerBound']) && v <= JobParameterDefinition.computeNumberExpression(allVals['weightUpperBound'])\n        }));\n        this.definitions.push(new JobParameterDefinition(\"weightUpperBound\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v >= JobParameterDefinition.computeNumberExpression(allVals['weightLowerBound'])\n        }));\n\n    }\n\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            nameOfCriterion1: 'Cost',\n            nameOfCriterion2: 'Effect',\n            extendedPolicyDescription: true,\n            weightLowerBound: 0,\n            defaultWeight: 0,\n            weightUpperBound: Infinity,\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Policy} from \"../../../policies/policy\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {LeagueTableJobParameters} from \"./league-table-job-parameters\";\n\n\nexport class LeagueTableJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"league-table\", jobRepository, expressionsEvaluator, objectiveRulesManager);\n        this.initSteps();\n    }\n\n    initSteps() {\n        this.calculateStep = new CalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        this.addStep(this.calculateStep);\n    }\n\n    createJobParameters(values) {\n        return new LeagueTableJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders = true) {\n        var result = [];\n        if (withHeaders) {\n            var headers = ['policy_id', 'policy', jobResult.payoffNames[0], jobResult.payoffNames[1], 'dominated_by', 'extended-dominated_by', 'incratio', 'optimal', 'optimal_for_default_weight'];\n            result.push(headers);\n        }\n\n        jobResult.rows.forEach(row => {\n            row.policies.forEach(policy=> {\n                var rowCells = [\n                    row.id,\n                    Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription),\n                    row.payoffs[1],\n                    row.payoffs[0],\n                    row.dominatedBy,\n                    row.extendedDominatedBy === null ? null : row.extendedDominatedBy[0] + ', ' + row.extendedDominatedBy[1],\n                    row.incratio,\n                    row.optimal,\n                    row.optimalForDefaultWeight\n                ];\n                result.push(rowCells);\n            })\n        });\n\n        return result;\n    }\n}\n","import {Step} from \"../../../engine/step\";\nimport {JOB_STATUS} from \"../../../engine/job-status\";\nimport {PoliciesCollector} from \"../../../../policies/policies-collector\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {TreeValidator} from \"../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../policies/policy\";\n\nexport class CalculateStep extends Step {\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var data = stepExecution.getData();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let rule = this.objectiveRulesManager.currentRule;\n        var treeRoot = data.getRoots()[0];\n        var policiesCollector = new PoliciesCollector(treeRoot);\n\n        var policies = policiesCollector.policies;\n\n\n        var payoffCoeffs = this.payoffCoeffs = rule.payoffCoeffs;\n\n        this.expressionsEvaluator.evalExpressions(data);\n        var vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n\n        if (!vr.isValid()) {\n            return stepExecution;\n        }\n\n        var compare = (a, b)=>(-payoffCoeffs[0] *  (b.payoffs[0] - a.payoffs[0])) || (-payoffCoeffs[1] *  (a.payoffs[1] - b.payoffs[1]));\n\n        var rows = policies.map(policy => {\n            this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n            return {\n                policies: [policy],\n                payoffs: treeRoot.computedValue(ruleName, 'payoff').slice(),\n                dominatedBy: null,\n                extendedDominatedBy: null,\n                incratio: null,\n                optimal: false,\n                optimalForDefaultWeight: false\n            }\n        }).sort(compare);\n\n        rows = rows.reduce((previousValue, currentValue, index, array)=>{\n            if(!previousValue.length){\n                return [currentValue]\n            }\n\n            let prev = previousValue[previousValue.length-1];\n            if(compare(prev, currentValue) == 0){\n                prev.policies.push(...currentValue.policies);\n                return previousValue\n            }\n            return previousValue.concat(currentValue)\n        }, []);\n\n        rows.sort((a, b)=>(payoffCoeffs[0] *  (a.payoffs[0] - b.payoffs[0])) || (-payoffCoeffs[1] *   (a.payoffs[1] - b.payoffs[1])));\n        rows.forEach((r, i)=> {\n            r.id = i+1;\n        });\n        // rows.sort(compare);\n        rows.sort((a, b)=>(-payoffCoeffs[0] *  (a.payoffs[0] - b.payoffs[0])) || (-payoffCoeffs[1] *   (a.payoffs[1] - b.payoffs[1])));\n\n        let bestCost = -payoffCoeffs[1] * Infinity,\n            bestCostRow = null;\n\n        let cmp= (a, b) => a > b;\n        if(payoffCoeffs[1]<0){\n            cmp= (a, b) => a < b;\n        }\n\n        rows.forEach((r, i)=> {\n            if (cmp(r.payoffs[1], bestCost)) {\n                bestCost = r.payoffs[1];\n                bestCostRow = r;\n            } else if(bestCostRow) {\n                r.dominatedBy = bestCostRow.id;\n            }\n        });\n\n        cmp= (a, b) => a < b;\n        if(payoffCoeffs[0] > 0 && payoffCoeffs[1] < 0){\n            cmp= (a, b) => a < b;\n        }else if(payoffCoeffs[0] < 0 && payoffCoeffs[1] > 0){\n            cmp= (a, b) => a < b;\n        }else if(payoffCoeffs[1]<0){\n            cmp= (a, b) => a > b;\n        }\n\n        let prev2NotDominated = null;\n\n\n        rows.filter(r=>!r.dominatedBy).sort((a, b)=>(  payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0]))).forEach((r, i, arr)=> {\n            if (!i) {\n                r.incratio = 0;\n                return;\n            }\n\n            let prev = arr[i - 1];\n\n            r.incratio = this.computeICER(r, prev);\n            if (i < 2) {\n                return;\n            }\n\n            if(!prev2NotDominated){\n                prev2NotDominated = arr[i - 2];\n            }\n\n            if(cmp(r.incratio,prev.incratio)){\n                prev.incratio = null;\n                prev.extendedDominatedBy = [prev2NotDominated.id, r.id] ;\n                r.incratio = this.computeICER(r, prev2NotDominated);\n            }else{\n                prev2NotDominated = prev;\n            }\n        });\n\n        let weightLowerBound = params.value(\"weightLowerBound\");\n        let defaultWeight = params.value(\"defaultWeight\");\n        let weightUpperBound = params.value(\"weightUpperBound\");\n\n        //mark optimal for weight in [weightLowerBound, weightUpperBound] and optimal for default Weight\n        let lastLELower = null;\n        let lastLELowerDef = null;\n        rows.slice().filter(r=>!r.dominatedBy && !r.extendedDominatedBy).sort((a, b) => {\n            let sub = a.incratio - b.incratio;\n            return sub ? sub : payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0])\n        }).forEach((row, i, arr)=>{\n\n            if(row.incratio < weightLowerBound){\n                lastLELower  = row;\n            }\n            if(row.incratio < defaultWeight){\n                lastLELowerDef  = row;\n            }\n\n            row.optimal = row.incratio >= weightLowerBound && row.incratio <= weightUpperBound;\n            row.optimalForDefaultWeight = row.incratio == defaultWeight;\n\n        });\n        if(lastLELower){\n            lastLELower.optimal = true;\n        }\n\n        if(lastLELowerDef){\n            lastLELowerDef.optimalForDefaultWeight = true;\n        }\n\n        rows.forEach(row=>{\n            row.payoffs[0] =  ExpressionEngine.toFloat(row.payoffs[0]);\n            row.payoffs[1] =  ExpressionEngine.toFloat(row.payoffs[1]);\n            row.incratio = row.incratio === null ? null : ExpressionEngine.toFloat(row.incratio);\n        });\n\n        jobResult.data = {\n            payoffNames: data.payoffNames.slice(),\n            payoffCoeffs : payoffCoeffs,\n            rows: rows.sort((a, b)=>(a.id - b.id)),\n            weightLowerBound: ExpressionEngine.toFloat(weightLowerBound),\n            defaultWeight: ExpressionEngine.toFloat(defaultWeight),\n            weightUpperBound: ExpressionEngine.toFloat(weightUpperBound)\n        };\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n\n    computeICER(r, prev){\n        let d = ExpressionEngine.subtract(r.payoffs[0], prev.payoffs[0]);\n        let n = ExpressionEngine.subtract(r.payoffs[1], prev.payoffs[1]);\n        if (d == 0){\n            if(n<0){\n                return - Infinity;\n            }\n            return Infinity;\n        }\n        return Math.abs(ExpressionEngine.divide(n, d));\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\nexport class RecomputeJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING).set('required', false));\n        this.definitions.push(new JobParameterDefinition(\"evalCode\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"evalNumeric\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            ruleName: null, //recompute all rules\n            evalCode: true,\n            evalNumeric: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Step} from \"../../engine/step\";\nimport {JOB_STATUS} from \"../../engine/job-status\";\nimport {TreeValidator} from \"../../../validation/tree-validator\";\nimport {BatchStep} from \"../../engine/batch/batch-step\";\nimport {RecomputeJobParameters} from \"./recompute-job-parameters\";\nimport {Job} from \"../../engine/job\";\n\nexport class RecomputeJob extends Job {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"recompute\", jobRepository);\n        this.isRestartable = false;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(execution) {\n        var data = execution.getData();\n        var params = execution.jobParameters;\n        var ruleName = params.value(\"ruleName\");\n        var allRules = !ruleName;\n        if(ruleName){\n            this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        }\n        this.checkValidityAndRecomputeObjective(data, allRules, params.value(\"evalCode\"), params.value(\"evalNumeric\"))\n        return execution;\n    }\n\n    checkValidityAndRecomputeObjective(data, allRules, evalCode, evalNumeric) {\n        data.validationResults = [];\n\n        if(evalCode||evalNumeric){\n            this.expressionsEvaluator.evalExpressions(data, evalCode, evalNumeric);\n        }\n\n        data.getRoots().forEach(root=> {\n            var vr = this.treeValidator.validate(data.getAllNodesInSubtree(root));\n            data.validationResults.push(vr);\n            if (vr.isValid()) {\n                this.objectiveRulesManager.recomputeTree(root, allRules);\n            }\n        });\n    }\n\n    createJobParameters(values) {\n        return new RecomputeJobParameters(values);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class SensitivityAnalysisJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"min\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"max\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 2),\n            ], 1, Infinity, false,\n            v => v[\"min\"] < v[\"max\"],\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ))\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            extendedPolicyDescription: true,\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {SensitivityAnalysisJobParameters} from \"./sensitivity-analysis-job-parameters\";\nimport {PrepareVariablesStep} from \"./steps/prepare-variables-step\";\nimport {InitPoliciesStep} from \"./steps/init-policies-step\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {Policy} from \"../../../../policies/policy\";\nimport {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\n\nexport class SensitivityAnalysisJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize=5) {\n        super(\"sensitivity-analysis\", jobRepository, expressionsEvaluator, objectiveRulesManager);\n        this.batchSize = 5;\n        this.initSteps();\n    }\n\n    initSteps(){\n        this.addStep(new PrepareVariablesStep(this.jobRepository, this.expressionsEvaluator.expressionEngine));\n        this.addStep(new InitPoliciesStep(this.jobRepository));\n        this.calculateStep = new CalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager, this.batchSize);\n        this.addStep(this.calculateStep);\n    }\n\n    createJobParameters(values) {\n        return new SensitivityAnalysisJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n    setBatchSize(batchSize){\n        this.batchSize = batchSize;\n        this.calculateStep.chunkSize = batchSize;\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n        var result = [];\n        if(withHeaders){\n            var headers = ['policy_number', 'policy'];\n            jobResult.variableNames.forEach(n=>headers.push(n));\n            headers.push('payoff');\n            result.push(headers);\n        }\n\n        var roundVariables = !!jobParameters.values.roundVariables;\n        if(roundVariables){\n            this.roundVariables(jobResult);\n        }\n\n        jobResult.rows.forEach(row => {\n            var policy = jobResult.policies[row.policyIndex];\n            var rowCells = [row.policyIndex+1, Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription)];\n            row.variables.forEach(v=> rowCells.push(v));\n            rowCells.push(row.payoff);\n            result.push(rowCells);\n\n            if(row._variables){ //revert original variables\n                row.variables = row._variables;\n                delete row._variables;\n            }\n        });\n\n        return result;\n    }\n\n    roundVariables(jobResult){\n        var uniqueValues = jobResult.variableNames.map(()=>new Set());\n\n        jobResult.rows.forEach(row => {\n            row._variables = row.variables.slice(); // save original row variables\n            row.variables.forEach((v,i)=> {\n                uniqueValues[i].add(v)\n            });\n        });\n\n        var uniqueValuesNo = uniqueValues.map((s)=>s.size);\n        var maxPrecision = 14;\n        var precision = 2;\n        var notReadyVariablesIndexes = jobResult.variableNames.map((v,i)=>i);\n        while(precision<=maxPrecision && notReadyVariablesIndexes.length){\n            uniqueValues = notReadyVariablesIndexes.map(()=>new Set());\n            jobResult.rows.forEach(row => {\n                notReadyVariablesIndexes.forEach((variableIndex, notReadyIndex)=>{\n\n                    var val = row._variables[variableIndex];\n                    val = Utils.round(val, precision);\n                    uniqueValues[notReadyIndex].add(val);\n\n                    row.variables[variableIndex] = val;\n                })\n            });\n\n            var newReadyIndexes = [];\n            uniqueValues.forEach((uniqueVals, notReadyIndex)=>{\n                var origUniqueCount = uniqueValuesNo[notReadyVariablesIndexes[notReadyIndex]] ;\n                if(origUniqueCount==uniqueVals.size){ //ready in previous iteration\n                    newReadyIndexes.push(notReadyIndex);\n                }\n            });\n            if(newReadyIndexes.length) { //revert values to prev iteration\n                newReadyIndexes.reverse();\n                newReadyIndexes.forEach(notReadyIndex=>{\n                    notReadyVariablesIndexes.splice(notReadyIndex, 1);\n                })\n            }\n            precision++;\n        }\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n\n        if (execution.stepExecutions.length <= 2) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[2].getProgress(execution.stepExecutions[2]);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize) {\n        super(\"calculate_step\", jobRepository, batchSize);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        var jobExecutionContext = stepExecution.getJobExecutionContext();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        var variableValues = jobResult.data.variableValues;\n        var variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n\n\n        if (!jobResult.data.rows) {\n            jobResult.data.rows = [];\n            jobResult.data.variableNames = variableNames;\n        }\n\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        var variableValues = jobResult.data.variableValues;\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n\n    processItem(stepExecution, item) {\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n        var failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        var data = stepExecution.getData();\n        var treeRoot = data.getRoots()[0];\n        var variableNames = stepExecution.executionContext.get(\"variableNames\");\n        var policies = stepExecution.getJobExecutionContext().get(\"policies\");\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n        variableNames.forEach((variableName, i)=> {\n            data.expressionScope[variableName] = item[i];\n        });\n\n        this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n        var vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n\n        var valid = vr.isValid();\n\n        if(!valid && failOnInvalidTree){\n            let errorData = {\n                variables: {}\n            };\n            variableNames.forEach((variableName, i)=> {\n                errorData.variables[variableName] = item[i];\n            });\n            throw new JobComputationException(\"computations\", errorData)\n        }\n\n        var payoffs = [];\n\n        policies.forEach(policy=> {\n            var payoff = 'n/a';\n            if (valid) {\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n            }\n            payoffs.push(payoff);\n        });\n\n        return {\n            policies: policies,\n            variables: item,\n            payoffs: payoffs\n        };\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var extendedPolicyDescription = params.value(\"extendedPolicyDescription\");\n\n        items.forEach(item=> {\n            if (!item) {\n                return;\n            }\n            item.policies.forEach((policy, i)=> {\n                var variables = item.variables.map(v => this.toFloat(v));\n\n                var payoff = item.payoffs[i];\n                var row = {\n                    policyIndex: i,\n                    variables: variables,\n                    payoff: Utils.isString(payoff) ? payoff : this.toFloat(payoff)\n                };\n                jobResult.data.rows.push(row);\n            })\n        })\n    }\n\n    postProcess(stepExecution, jobResult) {\n        delete jobResult.data.variableValues;\n    }\n\n\n    toFloat(v) {\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\n\nexport class InitPoliciesStep extends Step {\n    constructor(jobRepository) {\n        super(\"init_policies\", jobRepository);\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var data = stepExecution.getData();\n        var treeRoot = data.getRoots()[0];\n        var policiesCollector = new PoliciesCollector(treeRoot);\n\n        var policies = policiesCollector.policies;\n        stepExecution.getJobExecutionContext().put(\"policies\", policies);\n\n        if(!jobResult.data){\n            jobResult.data={}\n        }\n\n        jobResult.data.policies = policies;\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class PrepareVariablesStep extends Step {\n    constructor(jobRepository, expressionEngine) {\n        super(\"prepare_variables\", jobRepository);\n        this.expressionEngine = expressionEngine;\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n\n        var variableValues = [];\n        variables.forEach(v=> {\n            variableValues.push(ComputationsUtils.sequence(v.min, v.max, v.length));\n        });\n        variableValues = Utils.cartesianProductOf(variableValues);\n        jobResult.data={\n            variableValues: variableValues\n        };\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class ProbabilisticSensitivityAnalysisJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"numberOfRuns\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v > 0));\n\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"formula\", PARAMETER_TYPE.NUMBER_EXPRESSION)\n            ], 1, Infinity, false,\n            null,\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ))\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            extendedPolicyDescription: true,\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {ProbabilisticSensitivityAnalysisJobParameters} from \"./probabilistic-sensitivity-analysis-job-parameters\";\nimport {InitPoliciesStep} from \"../n-way/steps/init-policies-step\";\nimport {SensitivityAnalysisJob} from \"../n-way/sensitivity-analysis-job\";\nimport {ProbCalculateStep} from \"./steps/prob-calculate-step\";\nimport {ComputePolicyStatsStep} from \"./steps/compute-policy-stats-step\";\n\nexport class ProbabilisticSensitivityAnalysisJob extends SensitivityAnalysisJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize=5) {\n        super(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize);\n        this.name = \"probabilistic-sensitivity-analysis\";\n    }\n\n    initSteps() {\n        this.addStep(new InitPoliciesStep(this.jobRepository));\n        this.calculateStep = new ProbCalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager, this.batchSize);\n        this.addStep(this.calculateStep);\n        this.addStep(new ComputePolicyStatsStep(this.expressionsEvaluator.expressionEngine, this.objectiveRulesManager, this.jobRepository));\n    }\n\n    createJobParameters(values) {\n        return new ProbabilisticSensitivityAnalysisJobParameters(values);\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution) {\n\n        if (execution.stepExecutions.length <= 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[1].getProgress(execution.stepExecutions[1]);\n    }\n}\n","import {log, Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport class ComputePolicyStatsStep extends Step {\n    constructor(expressionEngine, objectiveRulesManager, jobRepository) {\n        super(\"compute_policy_stats\", jobRepository);\n        this.expressionEngine = expressionEngine;\n        this.objectiveRulesManager = objectiveRulesManager;\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var numberOfRuns = params.value(\"numberOfRuns\");\n        var ruleName = params.value(\"ruleName\");\n\n        let rule = this.objectiveRulesManager.ruleByName[ruleName];\n\n\n        var payoffsPerPolicy = jobResult.data.policies.map(()=>[]);\n\n        jobResult.data.rows.forEach(row=> {\n            payoffsPerPolicy[row.policyIndex].push(Utils.isString(row.payoff) ? 0 : row.payoff)\n        });\n\n        log.debug('payoffsPerPolicy', payoffsPerPolicy, jobResult.data.rows.length, rule.maximization);\n\n        jobResult.data.medians = payoffsPerPolicy.map(payoffs=>ExpressionEngine.median(payoffs));\n        jobResult.data.standardDeviations = payoffsPerPolicy.map(payoffs=>ExpressionEngine.std(payoffs));\n\n        if (rule.maximization) {\n            jobResult.data.policyIsBestProbabilities = jobResult.data.policyToHighestPayoffCount.map(v=>ExpressionEngine.toFloat(ExpressionEngine.divide(v, numberOfRuns)));\n        } else {\n            jobResult.data.policyIsBestProbabilities = jobResult.data.policyToLowestPayoffCount.map(v=>ExpressionEngine.toFloat(ExpressionEngine.divide(v, numberOfRuns)));\n        }\n\n        jobResult.data.policyToHighestPayoffCount = jobResult.data.policyToHighestPayoffCount.map(v=>ExpressionEngine.toFloat(v));\n        jobResult.data.policyToLowestPayoffCount = jobResult.data.policyToLowestPayoffCount.map(v=>ExpressionEngine.toFloat(v));\n\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {CalculateStep} from \"../../n-way/steps/calculate-step\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\n\nexport class ProbCalculateStep extends CalculateStep {\n\n    init(stepExecution, jobResult) {\n        var jobExecutionContext = stepExecution.getJobExecutionContext();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        var variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n\n        if(!jobResult.data.rows){\n            jobResult.data.rows = [];\n            jobResult.data.variableNames = variableNames;\n            jobResult.data.expectedValues = Utils.fill(new Array(jobResult.data.policies.length), 0);\n            jobResult.data.policyToHighestPayoffCount = Utils.fill(new Array(jobResult.data.policies.length), 0);\n            jobResult.data.policyToLowestPayoffCount = Utils.fill(new Array(jobResult.data.policies.length), 0);\n        }\n\n        return params.value(\"numberOfRuns\");\n    }\n\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n        var data = stepExecution.getData();\n        var variableValues = [];\n        for(var runIndex=0; runIndex<chunkSize; runIndex++){\n            var singleRunVariableValues = [];\n            var errors = [];\n            variables.forEach(v=> {\n                try{\n                    var evaluated = this.expressionsEvaluator.expressionEngine.eval(v.formula, true, Utils.cloneDeep(data.expressionScope));\n                    singleRunVariableValues.push(ExpressionEngine.toFloat(evaluated));\n                }catch(e){\n                    errors.push({\n                        variable: v,\n                        error: e\n                    });\n                }\n\n            });\n            if(errors.length) {\n                var errorData = {variables: []};\n                errors.forEach(e=>{\n                    errorData.variables[e.variable.name] = e.error.message;\n                });\n                throw new JobComputationException(\"param-computation\", errorData)\n            }\n            variableValues.push(singleRunVariableValues)\n        }\n\n        return variableValues;\n    }\n\n    processItem(stepExecution, item, currentItemCount, jobResult) {\n        var r = super.processItem(stepExecution, item, jobResult);\n\n        var params = stepExecution.getJobParameters();\n        var numberOfRuns = params.value(\"numberOfRuns\");\n        var policies = stepExecution.getJobExecutionContext().get(\"policies\");\n\n        this.updatePolicyStats(r, policies, numberOfRuns, jobResult);\n\n        return r;\n    }\n\n    updatePolicyStats(r, policies, numberOfRuns, jobResult){\n        var highestPayoff = -Infinity;\n        var lowestPayoff = Infinity;\n        var bestPolicyIndexes = [];\n        var worstPolicyIndexes = [];\n\n        var zeroNum = ExpressionEngine.toNumber(0);\n\n        policies.forEach((policy,i)=>{\n            let payoff = r.payoffs[i];\n            if(Utils.isString(payoff)){\n                payoff = zeroNum;\n            }\n            if(payoff < lowestPayoff){\n                lowestPayoff = payoff;\n                worstPolicyIndexes = [i];\n            }else if(payoff.equals(lowestPayoff)){\n                worstPolicyIndexes.push(i)\n            }\n            if(payoff > highestPayoff){\n                highestPayoff = payoff;\n                bestPolicyIndexes = [i]\n            }else if(payoff.equals(highestPayoff)){\n                bestPolicyIndexes.push(i)\n            }\n\n            jobResult.data.expectedValues[i] = ExpressionEngine.add(jobResult.data.expectedValues[i], ExpressionEngine.divide(payoff, numberOfRuns));\n        });\n\n        bestPolicyIndexes.forEach(policyIndex=>{\n            jobResult.data.policyToHighestPayoffCount[policyIndex] = ExpressionEngine.add(jobResult.data.policyToHighestPayoffCount[policyIndex], ExpressionEngine.divide(1, bestPolicyIndexes.length))\n        });\n\n        worstPolicyIndexes.forEach(policyIndex=>{\n            jobResult.data.policyToLowestPayoffCount[policyIndex] = ExpressionEngine.add(jobResult.data.policyToLowestPayoffCount[policyIndex], ExpressionEngine.divide(1, worstPolicyIndexes.length))\n        });\n    }\n\n\n    postProcess(stepExecution, jobResult) {\n        jobResult.data.expectedValues = jobResult.data.expectedValues.map(v=>this.toFloat(v));\n    }\n\n\n    toFloat(v) {\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class SpiderPlotJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"percentageChangeRange\", PARAMETER_TYPE.NUMBER).set(\"singleValueValidator\", v => v > 0 && v <=100));\n        this.definitions.push(new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 0));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n            ], 1, Infinity, false,\n            null,\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {SpiderPlotJobParameters} from \"./spider-plot-job-parameters\";\n\nexport class SpiderPlotJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"spider-plot\", jobRepository);\n        this.addStep(new CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager));\n    }\n\n    createJobParameters(values) {\n        return new SpiderPlotJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n        if (execution.stepExecutions.length < 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[0].getProgress(execution.stepExecutions[0]);\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n\n        let result = [];\n        if(withHeaders){\n            result.push(['variable_name', 'policy_no'].concat(jobResult.percentageRangeValues));\n        }\n\n        jobResult.rows.forEach((row, index) => {\n\n            result.push(...row.payoffs.map((payoffs, policyIndex)=>[\n                row.variableName,\n                policyIndex+1,\n                ...payoffs\n            ]));\n\n        });\n\n        return result;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository, 1);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        let jobExecutionContext = stepExecution.getJobExecutionContext();\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let percentageChangeRange = params.value(\"percentageChangeRange\");\n        let length = params.value(\"length\");\n        let variables = params.value(\"variables\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n        let data = stepExecution.getData();\n\n        let treeRoot = data.getRoots()[0];\n        let payoff = treeRoot.computedValue(ruleName, 'payoff');\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalExpressions(data);\n\n        this.objectiveRulesManager.recomputeTree(treeRoot, false);\n\n        let policiesCollector = new PoliciesCollector(treeRoot, ruleName);\n\n        let defaultValues = {};\n        Utils.forOwn(data.expressionScope, (v,k)=>{\n            defaultValues[k]=this.toFloat(v);\n        });\n\n\n        let percentageRangeValues = ComputationsUtils.sequence(-percentageChangeRange, percentageChangeRange, 2*length+1);\n\n        let variableValues = [];\n\n        variables.forEach(v=> {\n            let defVal = defaultValues[v.name];\n            variableValues.push(percentageRangeValues.map(p=> this.toFloat(ExpressionEngine.add(defVal, ExpressionEngine.multiply(ExpressionEngine.divide(p,100), defVal)))));\n        });\n\n\n        if(!jobResult.data){\n            jobResult.data = {\n                variableNames: variableNames,\n                defaultValues: defaultValues,\n                percentageRangeValues: percentageRangeValues,\n                defaultPayoff: this.toFloat(payoff)[0],\n                policies: policiesCollector.policies,\n                rows: []\n            };\n        }\n\n        stepExecution.getJobExecutionContext().put(\"variableValues\", variableValues);\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize) {\n        let variableValues = stepExecution.getJobExecutionContext().get(\"variableValues\");\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n    processItem(stepExecution, item, itemIndex, jobResult) {\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        let data = stepExecution.getData();\n        let treeRoot = data.getRoots()[0];\n        let variableNames = stepExecution.executionContext.get(\"variableNames\");\n        let variableName = variableNames[itemIndex];\n\n\n        let payoffs = jobResult.data.policies.map(policy=>[]);\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n\n\n        item.forEach(variableValue=>{\n\n            data.expressionScope[variableName] = variableValue;\n\n            this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n            let vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n            let valid = vr.isValid();\n\n            if(!valid && failOnInvalidTree){\n                let errorData = {\n                    variables: {}\n                };\n                errorData.variables[variableName] = variableValue;\n\n                throw new JobComputationException(\"computations\", errorData)\n            }\n\n            jobResult.data.policies.forEach((policy, policyIndex)=>{\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                let payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n                payoffs[policyIndex].push(this.toFloat(payoff));\n            });\n\n        });\n\n        return {\n            variableName: variableName,\n            variableIndex: itemIndex,\n            variableValues: item,\n            payoffs: payoffs\n        };\n\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        jobResult.data.rows.push(...items);\n    }\n\n\n    toFloat(v){\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository, 1);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        let jobExecutionContext = stepExecution.getJobExecutionContext();\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let variableValues = jobExecutionContext.get(\"variableValues\");\n        let variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n        let data = stepExecution.getData();\n\n        let treeRoot = data.getRoots()[0];\n        let payoff = treeRoot.computedValue(ruleName, 'payoff');\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalExpressions(data);\n\n        this.objectiveRulesManager.recomputeTree(treeRoot, false);\n\n\n\n        let policiesCollector = new PoliciesCollector(treeRoot, ruleName);\n\n        let defaultValues = {};\n        Utils.forOwn(data.expressionScope, (v,k)=>{\n            defaultValues[k]=this.toFloat(v);\n        });\n\n        if(!jobResult.data){\n            jobResult.data = {\n                variableNames: variableNames,\n                defaultValues: defaultValues,\n                variableExtents: variableValues.map(v=>[v[0], v[v.length-1]]),\n                defaultPayoff: this.toFloat(payoff)[0],\n                policies: policiesCollector.policies,\n                rows: []\n            };\n        }\n\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize) {\n        let variableValues = stepExecution.getJobExecutionContext().get(\"variableValues\");\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n    processItem(stepExecution, item, itemIndex, jobResult) {\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        let data = stepExecution.getData();\n        let treeRoot = data.getRoots()[0];\n        let variableNames = stepExecution.executionContext.get(\"variableNames\");\n        let variableName = variableNames[itemIndex];\n\n        let extents = jobResult.data.policies.map(policy=>{\n            return {\n                min: Infinity,\n                max: -Infinity\n            }\n        });\n\n        let values = jobResult.data.policies.map(policy=>{\n            return {\n                min: null,\n                max: null\n            }\n        });\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n\n\n        item.forEach(variableValue=>{\n\n            data.expressionScope[variableName] = variableValue;\n\n            this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n            let vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n            let valid = vr.isValid();\n\n            if(!valid && failOnInvalidTree){\n                let errorData = {\n                    variables: {}\n                };\n                errorData.variables[variableName] = variableValue;\n\n                throw new JobComputationException(\"computations\", errorData)\n            }\n\n            jobResult.data.policies.forEach((policy, policyIndex)=>{\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                let payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n\n                if(payoff < extents[policyIndex].min){\n                    extents[policyIndex].min = payoff;\n                    values[policyIndex].min = variableValue\n                }\n\n                if(payoff > extents[policyIndex].max){\n                    extents[policyIndex].max = payoff;\n                    values[policyIndex].max = variableValue\n                }\n            });\n\n        });\n\n        return {\n            variableName: variableName,\n            variableIndex: itemIndex,\n            extents: extents.map(e=>[this.toFloat(e.min), this.toFloat(e.max)]),\n            extentVariableValues: values.map(v=>[this.toFloat(v.min), this.toFloat(v.max)])\n        };\n\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        jobResult.data.rows.push(...items);\n    }\n\n    postProcess(stepExecution, jobResult) {\n        jobResult.data.rows.sort((a, b)=>(b.extents[0][1]-b.extents[0][0])-(a.extents[0][1]-a.extents[0][0]))\n\n    }\n\n\n    toFloat(v){\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class PrepareVariablesStep extends Step {\n    constructor(jobRepository) {\n        super(\"prepare_variables\", jobRepository);\n    }\n\n    doExecute(stepExecution) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n\n        var variableValues = [];\n        variables.forEach(v=> {\n            variableValues.push(ComputationsUtils.sequence(v.min, v.max, v.length));\n        });\n        stepExecution.getJobExecutionContext().put(\"variableValues\", variableValues);\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class TornadoDiagramJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"min\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"max\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 0),\n            ], 1, Infinity, false,\n            v => v[\"min\"] <= v[\"max\"],\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {PrepareVariablesStep} from \"./steps/prepare-variables-step\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {TornadoDiagramJobParameters} from \"./tornado-diagram-job-parameters\";\n\nexport class TornadoDiagramJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"tornado-diagram\", jobRepository);\n        this.addStep(new PrepareVariablesStep(jobRepository));\n        this.addStep(new CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager));\n    }\n\n    createJobParameters(values) {\n        return new TornadoDiagramJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n\n        if (execution.stepExecutions.length <= 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[1].getProgress(execution.stepExecutions[1]);\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n        let result = [];\n        if(withHeaders){\n            result.push(['variable_name', 'default_var_value', \"min_var_value\", \"max_var_value\", 'default_payoff', \"min_payoff\", \"max_payoff\", \"policy_no\"]);\n        }\n\n\n        jobResult.rows.forEach((row, index) => {\n\n            result.push(...row.extents.map((extent, policyIndex)=>[\n                row.variableName,\n                jobResult.defaultValues[row.variableName],\n                row.extentVariableValues[policyIndex][0],\n                row.extentVariableValues[policyIndex][1],\n                jobResult.defaultPayoff,\n                extent[0],\n                extent[1],\n                policyIndex+1\n            ]));\n\n        });\n\n\n        return result;\n    }\n}\n","import {JOB_STATUS} from \"../job-status\";\nimport {log} from 'sd-utils'\nimport {Step} from \"../step\";\nimport {JobInterruptedException} from \"../exceptions/job-interrupted-exception\";\n\n/*job step that process batch of items*/\nexport class BatchStep extends Step {\n\n    chunkSize;\n    static CURRENT_ITEM_COUNT_PROP = 'batch_step_current_item_count';\n    static TOTAL_ITEM_COUNT_PROP = 'batch_step_total_item_count';\n\n    constructor(name, jobRepository, chunkSize) {\n        super(name, jobRepository);\n        this.chunkSize = chunkSize;\n    }\n\n    /**\n     * Extension point for subclasses to perform step initialization. Should return total item count\n     */\n    init(stepExecution, jobResult) {\n        throw \"BatchStep.init function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to read and return chunk of items to process\n     */\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        throw \"BatchStep.readNextChunk function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to process single item\n     * Must return processed item which will be passed in a chunk to writeChunk function\n     */\n    processItem(stepExecution, item, currentItemCount, jobResult) {\n        throw \"BatchStep.processItem function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to write chunk of items. Not required\n     */\n    writeChunk(stepExecution, items, jobResult) {\n    }\n\n    /**\n     * Extension point for subclasses to perform postprocessing after all items have been processed. Not required\n     */\n    postProcess(stepExecution, jobResult) {\n    }\n\n\n    setTotalItemCount(stepExecution, count) {\n        stepExecution.executionContext.put(BatchStep.TOTAL_ITEM_COUNT_PROP, count);\n    }\n\n    getTotalItemCount(stepExecution) {\n        return stepExecution.executionContext.get(BatchStep.TOTAL_ITEM_COUNT_PROP);\n    }\n\n    setCurrentItemCount(stepExecution, count) {\n        stepExecution.executionContext.put(BatchStep.CURRENT_ITEM_COUNT_PROP, count);\n    }\n\n    getCurrentItemCount(stepExecution) {\n        return stepExecution.executionContext.get(BatchStep.CURRENT_ITEM_COUNT_PROP) || 0;\n    }\n\n\n    doExecute(stepExecution, jobResult) {\n        return Promise.resolve().then(()=> {\n            return this.init(stepExecution, jobResult)\n        }).catch(e=> {\n            log.error(\"Failed to initialize batch step: \" + this.name, e);\n            throw e;\n        }).then(totalItemCount=> {\n            return Promise.resolve().then(()=>{\n                this.setCurrentItemCount(stepExecution, this.getCurrentItemCount(stepExecution));\n                this.setTotalItemCount(stepExecution, totalItemCount);\n                return this.handleNextChunk(stepExecution, jobResult)\n            }).catch(e=> {\n                if(!(e instanceof JobInterruptedException)){\n                    log.error(\"Failed to handle batch step: \" + this.name, e);\n                }\n                throw e;\n            })\n        }).then(()=> {\n            return Promise.resolve().then(()=>{\n                return this.postProcess(stepExecution, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to postProcess batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then(()=> {\n            stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n            return stepExecution;\n        })\n\n    }\n\n    handleNextChunk(stepExecution, jobResult) {\n        var currentItemCount = this.getCurrentItemCount(stepExecution);\n        var totalItemCount = this.getTotalItemCount(stepExecution);\n        var chunkSize = Math.min(this.chunkSize, totalItemCount - currentItemCount);\n        if (currentItemCount >= totalItemCount) {\n            return stepExecution;\n        }\n        return this.checkJobExecutionFlags(stepExecution).then(()=> {\n            // Check if someone is trying to stop us\n            if (stepExecution.terminateOnly) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            return stepExecution\n        }).then(()=> {\n            return Promise.resolve().then(()=>{\n                return this.readNextChunk(stepExecution, currentItemCount, chunkSize, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to read chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            });\n        }).then(chunk=> {\n            return Promise.resolve().then(()=>{\n                return this.processChunk(stepExecution, chunk, currentItemCount, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to process chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then(processedChunk=> {\n            return Promise.resolve().then(()=>{\n                return this.writeChunk(stepExecution, processedChunk, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to write chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then((res)=> {\n            currentItemCount += chunkSize;\n            this.setCurrentItemCount(stepExecution, currentItemCount);\n            return this.updateJobProgress(stepExecution).then(()=> {\n                return this.handleNextChunk(stepExecution, jobResult);\n            });\n        })\n    }\n\n    processChunk(stepExecution, chunk, currentItemCount, jobResult) { //TODO promisify\n        return chunk.map((item, i)=>this.processItem(stepExecution, item, currentItemCount+i, jobResult));\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(stepExecution){\n        return {\n            total: this.getTotalItemCount(stepExecution),\n            current: this.getCurrentItemCount(stepExecution)\n        }\n    }\n\n    updateJobProgress(stepExecution) {\n        var progress = this.jobRepository.getJobByName(stepExecution.jobExecution.jobInstance.jobName).getProgress(stepExecution.jobExecution);\n        return this.jobRepository.updateJobExecutionProgress(stepExecution.jobExecution.id, progress);\n    }\n\n    checkJobExecutionFlags(stepExecution){\n        return this.jobRepository.getJobByName(stepExecution.jobExecution.jobInstance.jobName).checkExecutionFlags(stepExecution.jobExecution);\n    }\n}\n","export class ExtendableError {\n    data;\n    constructor(message, data) {\n        this.message = message;\n        this.data = data;\n        this.name = this.constructor.name;\n    }\n}\n","export * from './extendable-error'\nexport * from './job-data-invalid-exception'\nexport * from './job-execution-already-running-exception'\nexport * from './job-instance-already-complete-exception'\nexport * from './job-interrupted-exception'\nexport * from './job-parameters-invalid-exception'\nexport * from './job-restart-exception'\n\n\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobComputationException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobDataInvalidException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobExecutionAlreadyRunningException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobInstanceAlreadyCompleteException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobInterruptedException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobParametersInvalidException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobRestartException extends ExtendableError {\n}\n","import {Utils} from \"sd-utils\";\n\nexport class ExecutionContext {\n\n    dirty = false;\n    context = {};\n\n    constructor(context) {\n        if (context) {\n            this.context = Utils.clone(context)\n        }\n    }\n\n    put(key, value) {\n        var prevValue = this.context[key];\n        if (value != null) {\n            var result = this.context[key] = value;\n            this.dirty = prevValue == null || prevValue != null && prevValue != value;\n        }\n        else {\n            delete this.context[key];\n            this.dirty = prevValue != null;\n        }\n    }\n\n    get(key) {\n        return this.context[key];\n    }\n\n    containsKey(key) {\n        return this.context.hasOwnProperty(key);\n    }\n\n    remove(key) {\n        delete this.context[key];\n    }\n\n    setData(data) { //set data model\n        return this.put(\"data\", data);\n    }\n\n    getData() { // get data model\n        return this.get(\"data\");\n    }\n\n    getDTO() {\n        var dto = Utils.cloneDeep(this);\n        var data = this.getData();\n        if (data) {\n            data = data.getDTO();\n            dto.context[\"data\"] = data;\n        }\n        return dto;\n    }\n\n}\n","import * as exceptions from './exceptions'\n\nexport {exceptions}\nexport * from './execution-context'\nexport * from './job'\nexport * from './job-execution'\nexport * from './job-execution-flag'\nexport * from './job-execution-listener'\nexport * from './job-instance'\nexport * from './job-key-generator'\nexport * from './job-launcher'\nexport * from './job-parameter-definition'\nexport * from './job-parameters'\nexport * from './job-status'\nexport * from './simple-job'\nexport * from './step'\nexport * from './step-execution'\nexport * from './step-execution-listener'\n\n\n\n\n","export const JOB_EXECUTION_FLAG = {\n    STOP: 'STOP'\n};\n","export class JobExecutionListener {\n    /*Called before a job executes*/\n    beforeJob(jobExecution) {\n\n    }\n\n    /*Called after completion of a job. Called after both successful and failed executions*/\n    afterJob(jobExecution) {\n\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {StepExecution} from \"./step-execution\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\n\n/*domain object representing the execution of a job.*/\nexport class JobExecution {\n    id;\n    jobInstance;\n    jobParameters;\n    stepExecutions = [];\n    status = JOB_STATUS.STARTING;\n    exitStatus = JOB_STATUS.UNKNOWN;\n    executionContext = new ExecutionContext();\n\n    startTime = null;\n    createTime = new Date();\n    endTime = null;\n    lastUpdated = null;\n\n    failureExceptions = [];\n\n    constructor(jobInstance, jobParameters, id) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.jobInstance = jobInstance;\n        this.jobParameters = jobParameters;\n    }\n\n    /**\n     * Register a step execution with the current job execution.\n     * @param stepName the name of the step the new execution is associated with\n     */\n    createStepExecution(stepName) {\n        var stepExecution = new StepExecution(stepName, this);\n        this.stepExecutions.push(stepExecution);\n        return stepExecution;\n    }\n\n    isRunning() {\n        return !this.endTime;\n    }\n\n    /**\n     * Test if this JobExecution has been signalled to\n     * stop.\n     */\n    isStopping() {\n        return this.status === JOB_STATUS.STOPPING;\n    }\n\n    /**\n     * Signal the JobExecution to stop.\n     */\n    stop() {\n        this.stepExecutions.forEach(se=> {\n            se.terminateOnly = true;\n        });\n        this.status = JOB_STATUS.STOPPING;\n    }\n\n    getData() {\n        return this.executionContext.getData();\n    }\n\n    getDTO(filteredProperties = [], deepClone = true) {\n        var cloneMethod = Utils.cloneDeepWith;\n        if (!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        return Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if (filteredProperties.indexOf(key) > -1) {\n                return null;\n            }\n\n            if ([\"jobParameters\", \"executionContext\"].indexOf(key) > -1) {\n                return value.getDTO()\n            }\n            if (value instanceof Error) {\n                return Utils.getErrorDTO(value);\n            }\n\n            if (value instanceof StepExecution) {\n                return value.getDTO([\"jobExecution\"], deepClone)\n            }\n        }))\n    }\n}\n","/* object representing a uniquely identifiable job run. JobInstance can be restarted multiple times in case of execution failure and it's lifecycle ends with first successful execution*/\nexport class JobInstance{\n\n    id;\n    jobName;\n    constructor(id, jobName){\n        this.id = id;\n        this.jobName = jobName;\n    }\n\n}\n","\nexport class JobKeyGenerator {\n    /*Method to generate the unique key used to identify a job instance.*/\n    static generateKey(jobParameters) {\n        var result = \"\";\n        jobParameters.definitions.forEach((d, i)=> {\n            if(d.identifying){\n                result += d.name + \"=\" + jobParameters.values[d.name] + \";\";\n            }\n        });\n        return result;\n    }\n}\n","import {JobRestartException} from \"./exceptions/job-restart-exception\";\nimport {JOB_STATUS} from \"./job-status\";\nimport {Utils, log} from \"sd-utils\";\nimport {JobParametersInvalidException} from \"./exceptions/job-parameters-invalid-exception\";\nimport {JobDataInvalidException} from \"./exceptions/job-data-invalid-exception\";\n\nexport class JobLauncher {\n\n    jobRepository;\n    jobWorker;\n\n    constructor(jobRepository, jobWorker, dataModelSerializer) {\n        this.jobRepository = jobRepository;\n        this.jobWorker = jobWorker;\n        this.dataModelSerializer = dataModelSerializer;\n    }\n\n\n    run(jobOrName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        var job;\n        var jobParameters;\n\n        return Promise.resolve().then(()=> {\n            if (Utils.isString(jobOrName)) {\n                job = this.jobRepository.getJobByName(jobOrName)\n            } else {\n                job = jobOrName;\n            }\n            if (!job) {\n                throw new JobRestartException(\"No such job: \" + jobOrName);\n            }\n\n            jobParameters = job.createJobParameters(jobParametersValues);\n\n            return this.validate(job, jobParameters, data);\n        }).then(valid=>{\n            return this.jobRepository.createJobExecution(job.name, jobParameters, data).then(jobExecution=>{\n\n\n                if(this.jobWorker){\n                    log.debug(\"Job: [\" + job.name + \"] execution [\"+jobExecution.id+\"] delegated to worker\");\n                    this.jobWorker.executeJob(jobExecution.id);\n                    return jobExecution;\n                }\n\n                var executionPromise = this._execute(job, jobExecution);\n                if(resolvePromiseAfterJobIsLaunched){\n                    return jobExecution;\n                }\n                return executionPromise;\n            })\n        })\n    }\n\n    validate(job, jobParameters, data){\n        return this.jobRepository.getLastJobExecution(job.name, jobParameters).then(lastExecution=>{\n            if (lastExecution != null) {\n                if (!job.isRestartable) {\n                    throw new JobRestartException(\"JobInstance already exists and is not restartable\");\n                }\n\n                lastExecution.stepExecutions.forEach(execution=> {\n                    if (execution.status == JOB_STATUS.UNKNOWN) {\n                        throw new JobRestartException(\"Step [\" + execution.stepName + \"] is of status UNKNOWN\");\n                    }\n                });\n            }\n            if (job.jobParametersValidator && !job.jobParametersValidator.validate(jobParameters)) {\n                throw new JobParametersInvalidException(\"Invalid job parameters in jobLauncher.run for job: \"+job.name)\n            }\n\n            if(job.jobDataValidator && !job.jobDataValidator.validate(data)){\n                throw new JobDataInvalidException(\"Invalid job data in jobLauncher.run for job: \"+job.name)\n            }\n\n            return true;\n        })\n    }\n\n    /**Execute previously created job execution*/\n    execute(jobExecutionOrId){\n\n        return Promise.resolve().then(()=>{\n            if(Utils.isString(jobExecutionOrId)){\n                return this.jobRepository.getJobExecutionById(jobExecutionOrId);\n            }\n            return jobExecutionOrId;\n        }).then(jobExecution=>{\n            if(!jobExecution){\n                throw new JobRestartException(\"JobExecution [\" + jobExecutionOrId + \"] is not found\");\n            }\n\n            if (jobExecution.status !== JOB_STATUS.STARTING) {\n                throw new JobRestartException(\"JobExecution [\" + jobExecution.id + \"] already started\");\n            }\n\n            var jobName = jobExecution.jobInstance.jobName;\n            var job = this.jobRepository.getJobByName(jobName);\n            if(!job){\n                throw new JobRestartException(\"No such job: \" + jobName);\n            }\n\n            return  this._execute(job, jobExecution);\n        })\n    }\n\n    _execute(job, jobExecution){\n        var jobName = job.name;\n        log.info(\"Job: [\" + jobName + \"] launched with the following parameters: [\" + jobExecution.jobParameters + \"]\", jobExecution.getData());\n        return job.execute(jobExecution).then(jobExecution=>{\n            log.info(\"Job: [\" + jobName + \"] completed with the following parameters: [\" + jobExecution.jobParameters + \"] and the following status: [\" + jobExecution.status + \"]\");\n            return jobExecution;\n        }).catch(e =>{\n            log.error(\"Job: [\" + jobName + \"] failed unexpectedly and fatally with the following parameters: [\" + jobExecution.jobParameters + \"]\", e);\n            throw e;\n        })\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport const PARAMETER_TYPE = {\n    STRING: 'STRING',\n    DATE: 'DATE',\n    INTEGER: 'INTEGER',\n    NUMBER: 'FLOAT',\n    BOOLEAN: 'BOOLEAN',\n    NUMBER_EXPRESSION: 'NUMBER_EXPRESSION',\n    COMPOSITE: 'COMPOSITE' //composite parameter with nested subparameters\n};\n\nexport class JobParameterDefinition {\n    name;\n    type;\n    nestedParameters = [];\n    minOccurs;\n    maxOccurs;\n    required = true;\n\n    identifying;\n    validator;\n    singleValueValidator;\n\n    constructor(name, typeOrNestedParametersDefinitions, minOccurs = 1, maxOccurs = 1, identifying = false, singleValueValidator = null, validator = null) {\n        this.name = name;\n        if (Utils.isArray(typeOrNestedParametersDefinitions)) {\n            this.type = PARAMETER_TYPE.COMPOSITE;\n            this.nestedParameters = typeOrNestedParametersDefinitions;\n        } else {\n            this.type = typeOrNestedParametersDefinitions;\n        }\n        this.validator = validator;\n        this.singleValueValidator = singleValueValidator;\n        this.identifying = identifying;\n        this.minOccurs = minOccurs;\n        this.maxOccurs = maxOccurs;\n    }\n\n    set(key, val) {\n        this[key] = val;\n        return this;\n    }\n\n    validate(value, allValues) {\n        var isArray = Utils.isArray(value);\n\n        if (this.maxOccurs > 1 && !isArray) {\n            return false;\n        }\n\n        if (!isArray) {\n            return this.validateSingleValue(value, allValues)\n        }\n\n        if (value.length < this.minOccurs || value.length > this.maxOccurs) {\n            return false;\n        }\n\n        if (!value.every(v=>this.validateSingleValue(v, value))) {\n            return false;\n        }\n\n        if (this.validator) {\n            return this.validator(value, allValues);\n        }\n\n        return true;\n    }\n\n    static computeNumberExpression(val){\n        let parsed = parseFloat(val);\n        if(parsed === Infinity || parsed === -Infinity) {\n            return parsed;\n        }\n\n        if(!ExpressionEngine.validate(val, {}, false)){\n            return null\n        }\n\n        return ExpressionEngine.eval(val, true)\n    }\n\n    // allValues - all values on the same level\n    validateSingleValue(value, allValues) {\n\n        if ((!value && value !== 0 && value !== false) && this.minOccurs > 0) {\n            return !this.required\n        }\n\n        if (PARAMETER_TYPE.STRING === this.type && !Utils.isString(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.DATE === this.type && !Utils.isDate(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.INTEGER === this.type && !Utils.isInt(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.NUMBER === this.type && !Utils.isNumber(value)) {\n            return false;\n        }\n\n        if (PARAMETER_TYPE.BOOLEAN === this.type && !Utils.isBoolean(value)) {\n            return false;\n        }\n\n\n        if (PARAMETER_TYPE.NUMBER_EXPRESSION === this.type) {\n            value = JobParameterDefinition.computeNumberExpression(value);\n            if(value === null){\n                return false\n            }\n        }\n\n        if (PARAMETER_TYPE.COMPOSITE === this.type) {\n            if (!Utils.isObject(value)) {\n                return false;\n            }\n            if (!this.nestedParameters.every((nestedDef, i)=>nestedDef.validate(value[nestedDef.name]))) {\n                return false;\n            }\n        }\n\n        if (this.singleValueValidator) {\n            return this.singleValueValidator(value, allValues);\n        }\n\n        return true;\n    }\n\n    value(value){\n        if(PARAMETER_TYPE.NUMBER_EXPRESSION === this.type) {\n            return JobParameterDefinition.computeNumberExpression(value);\n        }\n\n        return value;\n    }\n}\n","import {PARAMETER_TYPE} from \"./job-parameter-definition\";\nimport {Utils} from \"sd-utils\";\n\nexport class JobParameters{\n    definitions = [];\n    values={};\n\n    constructor(values){\n        this.initDefinitions();\n        this.initDefaultValues();\n        if (values) {\n            Utils.deepExtend(this.values, values);\n        }\n    }\n\n    initDefinitions(){\n\n    }\n\n    initDefaultValues(){\n\n    }\n\n    validate(){\n        return this.definitions.every((def, i)=>def.validate(this.values[def.name], this.values));\n    }\n\n    getDefinition(path){\n        var defs =this.definitions;\n        let def = null;\n        if(!path.split().every(name=>{\n                def = Utils.find(defs, d=>d.name == name);\n                if(!def){\n                    return false\n                }\n                defs = def.nestedParameters;\n                return true;\n        })){\n            return null;\n        }\n        return def;\n    }\n\n    /*get or set value by path*/\n    value(path, value){\n        if (arguments.length === 1) {\n            let def = this.getDefinition(path);\n            let val = Utils.get(this.values, path, null);\n            if(def){\n                return def.value(val);\n            }\n            return  val;\n        }\n        Utils.set(this.values, path, value);\n        return value;\n    }\n\n    toString(){\n        var result = \"JobParameters[\";\n\n        this.definitions.forEach((d, i)=> {\n\n            var val = this.values[d.name];\n            // if(Utils.isArray(val)){\n            //     var values = val;\n            //\n            //\n            // }\n            // if(PARAMETER_TYPE.COMPOSITE == d.type){\n            //\n            // }\n\n            result += d.name + \"=\"+val + \";\";\n        });\n        result+=\"]\";\n        return result;\n    }\n\n    getDTO(){\n        return {\n            values: this.values\n        }\n    }\n}\n","import {JobRepository} from \"./job-repository\";\nimport {default as idb} from \"idb\";\nimport {Utils} from \"sd-utils\";\nimport {JobExecution} from \"../job-execution\";\nimport {JobInstance} from \"../job-instance\";\nimport {StepExecution} from \"../step-execution\";\nimport {ExecutionContext} from \"../execution-context\";\nimport {DataModel} from \"sd-model\";\nimport {log} from \"sd-utils\";\n\n/* IndexedDB job repository*/\nexport class IdbJobRepository extends JobRepository {\n\n    dbPromise;\n    jobInstanceDao;\n    jobExecutionDao;\n    stepExecutionDao;\n    jobResultDao;\n    jobExecutionProgressDao;\n    jobExecutionFlagDao;\n\n    constructor(expressionsReviver, dbName = 'sd-job-repository', deleteDB = false) {\n        super();\n        this.dbName = dbName;\n        this.expressionsReviver = expressionsReviver;\n        if (deleteDB) {\n            this.deleteDB().then(()=> {\n                this.initDB()\n            }).catch(e=> {\n                log.error(e);\n                this.initDB();\n            })\n        } else {\n            this.initDB()\n        }\n    }\n\n    initDB() {\n        this.dbPromise = idb.open(this.dbName, 2, upgradeDB => {\n            // Note: we don't use 'break' in this switch statement,\n            // the fall-through behaviour is what we want.\n            switch (upgradeDB.oldVersion) {\n                case 0:\n                    upgradeDB.createObjectStore('job-instances');\n                    var jobExecutionsOS = upgradeDB.createObjectStore('job-executions');\n                    jobExecutionsOS.createIndex(\"jobInstanceId\", \"jobInstance.id\", {unique: false});\n                    jobExecutionsOS.createIndex(\"createTime\", \"createTime\", {unique: false});\n                    jobExecutionsOS.createIndex(\"status\", \"status\", {unique: false});\n                    upgradeDB.createObjectStore('job-execution-progress');\n                    upgradeDB.createObjectStore('job-execution-flags');\n                    var stepExecutionsOS = upgradeDB.createObjectStore('step-executions');\n                    stepExecutionsOS.createIndex(\"jobExecutionId\", \"jobExecutionId\", {unique: false});\n\n                    var jobResultOS = upgradeDB.createObjectStore('job-results');\n                    jobResultOS.createIndex(\"jobInstanceId\", \"jobInstance.id\", {unique: true});\n                case 1:\n                    upgradeDB.transaction.objectStore('job-instances').createIndex(\"id\", \"id\", {unique: true});\n            }\n\n        });\n\n        this.jobInstanceDao = new ObjectStoreDao('job-instances', this.dbPromise);\n        this.jobExecutionDao = new ObjectStoreDao('job-executions', this.dbPromise);\n        this.jobExecutionProgressDao = new ObjectStoreDao('job-execution-progress', this.dbPromise);\n        this.jobExecutionFlagDao = new ObjectStoreDao('job-execution-flags', this.dbPromise);\n        this.stepExecutionDao = new ObjectStoreDao('step-executions', this.dbPromise);\n        this.jobResultDao = new ObjectStoreDao('job-results', this.dbPromise);\n    }\n\n    deleteDB() {\n        return Promise.resolve().then(_=>idb.delete(this.dbName));\n    }\n\n\n    removeJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        return this.jobInstanceDao.remove(key).then(()=>{\n            this.findJobExecutions(jobInstance, false).then(jobExecutions=>{  //  Not waiting for promise resolves\n                jobExecutions.forEach(this.removeJobExecution, this);\n            });\n\n            this.getJobResultByInstance(jobInstance).then(jobResult=>{\n                return this.removeJobResult(jobResult)\n            })\n        });\n    }\n\n    removeJobExecution(jobExecution){\n        return this.jobExecutionDao.remove(jobExecution.id).then(()=>{\n            return this.findStepExecutions(jobExecution.id, false).then(stepExecutions=>{  // Not waiting for promise resolves\n                stepExecutions.forEach(this.removeStepExecution, this);\n            });\n        });\n    }\n\n    removeStepExecution(stepExecution){\n        return this.stepExecutionDao.remove(stepExecution.id)\n    }\n\n    removeJobResult(jobResult){\n        return this.jobResultDao.remove(jobResult.id);\n    }\n\n\n\n\n    getJobResult(jobResultId) {\n        return this.jobResultDao.get(jobResultId);\n    }\n\n    getJobResultByInstance(jobInstance) {\n        return this.jobResultDao.getByIndex(\"jobInstanceId\", jobInstance.id);\n    }\n\n    saveJobResult(jobResult) {\n        return this.jobResultDao.set(jobResult.id, jobResult).then(r=>jobResult);\n    }\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return this.jobInstanceDao.get(key).then(dto=>dto ? this.reviveJobInstance(dto) : dto);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters) {\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        return this.jobInstanceDao.set(key, jobInstance).then(r=>jobInstance);\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution) {\n        var dto = jobExecution.getDTO();\n        var stepExecutionsDTOs = dto.stepExecutions;\n        dto.stepExecutions = null;\n        return this.jobExecutionDao.set(jobExecution.id, dto).then(r=>this.saveStepExecutionsDTOS(stepExecutionsDTOs)).then(r=>jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress) {\n        return this.jobExecutionProgressDao.set(jobExecutionId, progress)\n    }\n\n    getJobExecutionProgress(jobExecutionId) {\n        return this.jobExecutionProgressDao.get(jobExecutionId)\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag) {\n        return this.jobExecutionFlagDao.set(jobExecutionId, flag)\n    }\n\n    getJobExecutionFlag(jobExecutionId) {\n        return this.jobExecutionFlagDao.get(jobExecutionId)\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution) {\n        var dto = stepExecution.getDTO([\"jobExecution\"]);\n        return this.stepExecutionDao.set(stepExecution.id, dto).then(r=>stepExecution);\n    }\n\n    saveStepExecutionsDTOS(stepExecutions, savedExecutions = []) {\n        if (stepExecutions.length <= savedExecutions.length) {\n            return Promise.resolve(savedExecutions);\n        }\n        var stepExecutionDTO = stepExecutions[savedExecutions.length];\n        return this.stepExecutionDao.set(stepExecutionDTO.id, stepExecutionDTO).then(()=> {\n            savedExecutions.push(stepExecutionDTO);\n            return this.saveStepExecutionsDTOS(stepExecutions, savedExecutions);\n        });\n    }\n\n    getJobExecutionById(id) {\n        return this.jobExecutionDao.get(id).then(dto=> {\n            return this.fetchJobExecutionRelations(dto);\n        });\n    }\n\n    fetchJobExecutionRelations(jobExecutionDTO, revive = true) {\n        if (!jobExecutionDTO) {\n            return Promise.resolve(null)\n        }\n        return this.findStepExecutions(jobExecutionDTO.id, false).then(steps=> {\n            jobExecutionDTO.stepExecutions = steps;\n            if (!revive) {\n                return jobExecutionDTO;\n            }\n            return this.reviveJobExecution(jobExecutionDTO);\n        })\n    }\n\n    fetchJobExecutionsRelations(jobExecutionDtoList, revive = true, fetched = []) {\n        if (jobExecutionDtoList.length <= fetched.length) {\n            return Promise.resolve(fetched);\n        }\n        return this.fetchJobExecutionRelations(jobExecutionDtoList[fetched.length], revive).then((jobExecution)=> {\n            fetched.push(jobExecution);\n\n            return this.fetchJobExecutionsRelations(jobExecutionDtoList, revive, fetched);\n        });\n    }\n\n    findStepExecutions(jobExecutionId, revive = true) {\n        return this.stepExecutionDao.getAllByIndex(\"jobExecutionId\", jobExecutionId).then(dtos=> {\n            if (!revive) {\n                return dtos;\n            }\n            return dtos.map(dto=>this.reviveStepExecution(dto));\n        })\n    }\n\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance, fetchRelationsAndRevive = true) {\n        return this.jobExecutionDao.getAllByIndex(\"jobInstanceId\", jobInstance.id).then(values=> {\n            var sorted = values.sort(function (a, b) {\n                return a.createTime.getTime() - b.createTime.getTime()\n            });\n\n            if (!fetchRelationsAndRevive) {\n                return sorted;\n            }\n\n            return this.fetchJobExecutionsRelations(sorted, true)\n        });\n    }\n\n    getLastJobExecutionByInstance(jobInstance) {\n        return this.findJobExecutions(jobInstance, false).then(executions=>this.fetchJobExecutionRelations(executions[executions.length - 1]));\n    }\n\n    getLastStepExecution(jobInstance, stepName) {\n        return this.findJobExecutions(jobInstance).then(jobExecutions=> {\n            var stepExecutions = [];\n            jobExecutions.forEach(jobExecution=>jobExecution.stepExecutions.filter(s=>s.stepName === stepName).forEach((s)=>stepExecutions.push(s)));\n            var latest = null;\n            stepExecutions.forEach(s=> {\n                if (latest == null || latest.startTime.getTime() < s.startTime.getTime()) {\n                    latest = s;\n                }\n            });\n            return latest;\n        })\n    }\n\n    reviveJobInstance(dto) {\n        return new JobInstance(dto.id, dto.jobName);\n    }\n\n    reviveExecutionContext(dto) {\n        var executionContext = new ExecutionContext();\n        executionContext.context = dto.context;\n        var data = executionContext.getData();\n        if (data) {\n            var dataModel = new DataModel();\n            dataModel.loadFromDTO(data, this.expressionsReviver);\n            executionContext.setData(dataModel);\n        }\n        return executionContext\n    }\n\n    reviveJobExecution(dto) {\n\n        var job = this.getJobByName(dto.jobInstance.jobName);\n        var jobInstance = this.reviveJobInstance(dto.jobInstance);\n        var jobParameters = job.createJobParameters(dto.jobParameters.values);\n        var jobExecution = new JobExecution(jobInstance, jobParameters, dto.id);\n        var executionContext = this.reviveExecutionContext(dto.executionContext);\n        return Utils.mergeWith(jobExecution, dto, (objValue, srcValue, key, object, source, stack)=> {\n            if (key === \"jobInstance\") {\n                return jobInstance;\n            }\n            if (key === \"executionContext\") {\n                return executionContext;\n            }\n            if (key === \"jobParameters\") {\n                return jobParameters;\n            }\n            if (key === \"jobExecution\") {\n                return jobExecution;\n            }\n\n            if (key === \"stepExecutions\") {\n                return srcValue.map(stepDTO => this.reviveStepExecution(stepDTO, jobExecution));\n            }\n        })\n    }\n\n    reviveStepExecution(dto, jobExecution) {\n        var stepExecution = new StepExecution(dto.stepName, jobExecution, dto.id);\n        var executionContext = this.reviveExecutionContext(dto.executionContext);\n        return Utils.mergeWith(stepExecution, dto, (objValue, srcValue, key, object, source, stack)=> {\n            if (key === \"jobExecution\") {\n                return jobExecution;\n            }\n            if (key === \"executionContext\") {\n                return executionContext;\n            }\n        })\n    }\n}\n\n\nclass ObjectStoreDao {\n\n    name;\n    dbPromise;\n\n    constructor(name, dbPromise) {\n        this.name = name;\n        this.dbPromise = dbPromise;\n    }\n\n    get(key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).get(key);\n        });\n    }\n\n    getAllByIndex(indexName, key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).index(indexName).getAll(key)\n        });\n    }\n\n    getByIndex(indexName, key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).index(indexName).get(key)\n        });\n    }\n\n    set(key, val) {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).put(val, key);\n            return tx.complete;\n        });\n    }\n\n    remove(key) {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).delete(key);\n            return tx.complete;\n        });\n    }\n\n    clear() {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).clear();\n            return tx.complete;\n        });\n    }\n\n    keys() {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name);\n            const keys = [];\n            const store = tx.objectStore(this.name);\n\n            // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n            // openKeyCursor isn't supported by Safari, so we fall back\n            (store.iterateKeyCursor || store.iterateCursor).call(store, cursor => {\n                if (!cursor) return;\n                keys.push(cursor.key);\n                cursor.continue();\n            });\n\n            return tx.complete.then(() => keys);\n        });\n    }\n}\n","import {JobKeyGenerator} from \"../job-key-generator\";\nimport {JobInstance} from \"../job-instance\";\nimport {Utils} from \"sd-utils\";\nimport {JobExecution} from \"../job-execution\";\nimport {JobExecutionAlreadyRunningException} from \"../exceptions/job-execution-already-running-exception\";\nimport {JOB_STATUS} from \"../job-status\";\nimport {JobInstanceAlreadyCompleteException} from \"../exceptions/job-instance-already-complete-exception\";\nimport {ExecutionContext} from \"../execution-context\";\nimport {StepExecution} from \"../step-execution\";\nimport {DataModel} from \"sd-model\";\nimport {JobResult} from \"../job-result\";\n\nexport class JobRepository {\n\n    jobByName = {};\n\n    registerJob(job) {\n        this.jobByName[job.name] = job;\n    }\n\n    getJobByName(name) {\n        return this.jobByName[name];\n    }\n\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n       throw \"JobRepository getJobInstance function not implemented!\"\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(key, jobInstance){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    getJobExecutionById(id){\n        throw \"JobRepository.getJobExecutionById function not implemented!\"\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        throw \"JobRepository.getJobExecutionProgress function not implemented!\"\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        throw \"JobRepository.saveJobExecutionFlag function not implemented!\"\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        throw \"JobRepository.getJobExecutionFlag function not implemented!\"\n    }\n\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        throw \"JobRepository.saveStepExecution function not implemented!\"\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        throw \"JobRepository.findJobExecutions function not implemented!\"\n    }\n\n    getJobResult(jobResultId){\n        throw \"JobRepository.getJobResult function not implemented!\"\n    }\n\n    getJobResultByInstance(jobInstance){\n        throw \"JobRepository.getJobResultByInstance function not implemented!\"\n    }\n\n    saveJobResult(jobResult) {\n        throw \"JobRepository.setJobResult function not implemented!\"\n    }\n\n\n    removeJobInstance(jobInstance, jobParameters){\n        throw \"JobRepository.removeJobInstance function not implemented!\"\n    }\n\n    removeJobExecution(jobExecution){\n        throw \"JobRepository.removeJobExecution function not implemented!\"\n    }\n\n    removeStepExecution(stepExecution){\n        throw \"JobRepository.removeStepExecution function not implemented!\"\n    }\n\n    removeJobResult(jobResult){\n        throw \"JobRepository.removeJobResult function not implemented!\"\n    }\n\n    /*Create a new JobInstance with the name and job parameters provided. return promise*/\n    createJobInstance(jobName, jobParameters) {\n        var jobInstance = new JobInstance(Utils.guid(), jobName);\n        return this.saveJobInstance(jobInstance, jobParameters);\n    }\n\n    /*Check if an instance of this job already exists with the parameters provided.*/\n    isJobInstanceExists(jobName, jobParameters) {\n        return this.getJobInstance(jobName, jobParameters).then(result => !!result).catch(error=>false);\n    }\n\n    generateJobInstanceKey(jobName, jobParameters) {\n        return jobName + \"|\" + JobKeyGenerator.generateKey(jobParameters);\n    }\n\n    /*Create a JobExecution for a given  Job and JobParameters. If matching JobInstance already exists,\n     * the job must be restartable and it's last JobExecution must *not* be\n     * completed. If matching JobInstance does not exist yet it will be  created.*/\n\n    createJobExecution(jobName, jobParameters, data) {\n        return this.getJobInstance(jobName, jobParameters).then(jobInstance=>{\n            if (jobInstance != null) {\n                return this.findJobExecutions(jobInstance).then(executions=>{\n                    executions.forEach(execution=> {\n                        if (execution.isRunning()) {\n                            throw new JobExecutionAlreadyRunningException(\"A job execution for this job is already running: \" + jobInstance.jobName);\n                        }\n                        if (execution.status == JOB_STATUS.COMPLETED || execution.status == JOB_STATUS.ABANDONED) {\n                            throw new JobInstanceAlreadyCompleteException(\n                                \"A job instance already exists and is complete for parameters=\" + jobParameters\n                                + \".  If you want to run this job again, change the parameters.\");\n                        }\n                    });\n\n                    var executionContext = executions[executions.length - 1].executionContext;\n\n                    return [jobInstance, executionContext];\n                })\n            }\n\n            // no job found, create one\n            jobInstance = this.createJobInstance(jobName, jobParameters);\n            var executionContext = new ExecutionContext();\n            var dataModel = new DataModel();\n            dataModel._setNewState(data.createStateSnapshot());\n            executionContext.setData(dataModel);\n            return Promise.all([jobInstance, executionContext]);\n        }).then(instanceAndExecutionContext=>{\n            var jobExecution = new JobExecution(instanceAndExecutionContext[0], jobParameters);\n            jobExecution.executionContext = instanceAndExecutionContext[1];\n            jobExecution.lastUpdated = new Date();\n            return this.saveJobExecution(jobExecution);\n        }).catch(e=>{\n            throw e;\n        })\n    }\n\n    getLastJobExecution(jobName, jobParameters) {\n        return this.getJobInstance(jobName, jobParameters).then((jobInstance)=>{\n            if(!jobInstance){\n                return null;\n            }\n            return this.getLastJobExecutionByInstance(jobInstance);\n        })\n    }\n\n    getLastJobExecutionByInstance(jobInstance){\n        return this.findJobExecutions(jobInstance).then(executions=>executions[executions.length -1]);\n    }\n\n    getLastStepExecution(jobInstance, stepName) {\n        return this.findJobExecutions(jobInstance).then(jobExecutions=>{\n            var stepExecutions=[];\n            jobExecutions.forEach(jobExecution=>jobExecution.stepExecutions.filter(s=>s.stepName === stepName).forEach((s)=>stepExecutions.push(s)));\n            var latest = null;\n            stepExecutions.forEach(s=>{\n                if (latest == null || latest.startTime.getTime() < s.startTime.getTime()) {\n                    latest = s;\n                }\n            });\n            return latest;\n        })\n    }\n\n    addStepExecution(stepExecution) {\n        stepExecution.lastUpdated = new Date();\n        return this.saveStepExecution(stepExecution);\n    }\n\n    update(o){\n        o.lastUpdated = new Date();\n\n        if(o instanceof JobExecution){\n            return this.saveJobExecution(o);\n        }\n\n        if(o instanceof StepExecution){\n            return this.saveStepExecution(o);\n        }\n\n        throw \"Object not updatable: \"+o\n    }\n\n    remove(o){\n\n        if(o instanceof JobExecution){\n            return this.removeJobExecution(o);\n        }\n\n        if(o instanceof StepExecution){\n            return this.removeStepExecution(o);\n        }\n\n        if(o instanceof JobResult){\n            return this.removeJobResult();\n        }\n\n        return Promise.reject(\"Object not removable: \"+o);\n    }\n\n\n    reviveJobInstance(dto) {\n        return dto;\n    }\n\n    reviveExecutionContext(dto) {\n        return dto;\n    }\n\n    reviveJobExecution(dto) {\n        return dto;\n    }\n\n    reviveStepExecution(dto, jobExecution) {\n        return dto;\n    }\n}\n","import {JobRepository} from \"./job-repository\";\nimport {Utils} from \"sd-utils\";\n\nexport class SimpleJobRepository extends JobRepository{\n    jobInstancesByKey = {};\n    jobExecutions = [];\n    stepExecutions = [];\n    executionProgress = {};\n    executionFlags = {};\n    jobResults = [];\n\n    removeJobInstance(jobInstance){\n        Utils.forOwn(this.jobInstancesByKey,  (ji, key)=>{\n            if(ji===jobInstance){\n                delete this.jobInstancesByKey[key]\n            }\n        });\n\n        this.jobExecutions.filter(jobExecution=>jobExecution.jobInstance.id == jobInstance.id).reverse().forEach(this.removeJobExecution, this);\n        this.jobResults.filter(jobResult=>jobResult.jobInstance.id == jobInstance.id).reverse().forEach(this.removeJobResult, this);\n\n        return Promise.resolve();\n    }\n\n    removeJobExecution(jobExecution){\n        let index = this.jobExecutions.indexOf(jobExecution);\n        if(index>-1) {\n            this.jobExecutions.splice(index, 1)\n        }\n\n        this.stepExecutions.filter(stepExecution=>stepExecution.jobExecution.id === jobExecution.id).reverse().forEach(this.removeStepExecution, this);\n        return Promise.resolve();\n    }\n\n    removeStepExecution(stepExecution){\n        let index = this.stepExecutions.indexOf(stepExecution);\n        if(index>-1) {\n            this.stepExecutions.splice(index, 1)\n        }\n        return Promise.resolve();\n    }\n\n    removeJobResult(jobResult){\n        let index = this.jobResults.indexOf(jobResult);\n        if(index>-1) {\n            this.jobResults.splice(index, 1)\n        }\n        return Promise.resolve();\n    }\n\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return Promise.resolve(this.jobInstancesByKey[key]);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        this.jobInstancesByKey[key] = jobInstance;\n        return Promise.resolve(jobInstance)\n    }\n\n    getJobResult(jobResultId){\n        return Promise.resolve(Utils.find(this.jobResults, r=>r.id===jobResultId))\n    }\n\n    getJobResultByInstance(jobInstance){\n        return Promise.resolve(Utils.find(this.jobResults, r=>r.jobInstance.id===jobInstance.id))\n    }\n\n    saveJobResult(jobResult) {\n        this.jobResults.push(jobResult);\n        return Promise.resolve(jobResult);\n    }\n\n    getJobExecutionById(id){\n        return Promise.resolve(Utils.find(this.jobExecutions, ex=>ex.id===id))\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        this.jobExecutions.push(jobExecution);\n        return Promise.resolve(jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        this.executionProgress[jobExecutionId] = progress;\n        return Promise.resolve(progress)\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        return Promise.resolve(this.executionProgress[jobExecutionId])\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        this.executionFlags[jobExecutionId] = flag;\n        return Promise.resolve(flag)\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        return Promise.resolve(this.executionFlags[jobExecutionId])\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        this.stepExecutions.push(stepExecution);\n        return Promise.resolve(stepExecution);\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        return Promise.resolve(this.jobExecutions.filter(e=>e.jobInstance.id == jobInstance.id).sort(function (a, b) {\n            return a.createTime.getTime() - b.createTime.getTime()\n        }));\n    }\n\n\n}\n","import {JobRepository} from \"./job-repository\";\nimport {Utils} from \"sd-utils\";\nimport {SimpleJobRepository} from \"./simple-job-repository\";\n\n\n\nexport class TimeoutJobRepository extends SimpleJobRepository{\n\n    createTimeoutPromise(valueToResolve, delay=1){\n        return new Promise(resolve=>{\n            setTimeout(function(){\n                resolve(valueToResolve);\n            }, delay)\n        });\n    }\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return this.createTimeoutPromise(this.jobInstancesByKey[key]);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        this.jobInstancesByKey[key] = jobInstance;\n        return this.createTimeoutPromise(jobInstance);\n    }\n\n    getJobResult(jobResultId){\n        return this.createTimeoutPromise(Utils.find(this.jobResults, r=>r.id===jobResultId));\n    }\n\n    getJobResultByInstance(jobInstance){\n        return this.createTimeoutPromise(Utils.find(this.jobResults, r=>r.jobInstance.id===jobInstance.id));\n    }\n\n    saveJobResult(jobResult) {\n        this.jobResults.push(jobResult);\n        return this.createTimeoutPromise(jobResult);\n    }\n\n    getJobExecutionById(id){\n        return this.createTimeoutPromise(Utils.find(this.jobExecutions, ex=>ex.id===id));\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        this.jobExecutions.push(jobExecution);\n        return this.createTimeoutPromise(jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        this.executionProgress[jobExecutionId] = progress;\n        return this.createTimeoutPromise(progress);\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        return this.createTimeoutPromise(this.executionProgress[jobExecutionId]);\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        this.executionFlags[jobExecutionId] = flag;\n        return this.createTimeoutPromise(flag);\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        return this.createTimeoutPromise(this.executionFlags[jobExecutionId]);\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        this.stepExecutions.push(stepExecution);\n        return this.createTimeoutPromise(stepExecution);\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        return this.createTimeoutPromise(this.jobExecutions.filter(e=>e.jobInstance.id == jobInstance.id).sort(function (a, b) {\n            return a.createTime.getTime() - b.createTime.getTime()\n        }));\n    }\n\n    remove(object){ //TODO\n\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {StepExecution} from \"./step-execution\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\n\n/*domain object representing the result of a job instance.*/\nexport class JobResult {\n    id;\n    jobInstance;\n    lastUpdated = null;\n\n    data;\n\n    constructor(jobInstance, id) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.jobInstance = jobInstance;\n    }\n}\n","export const JOB_STATUS = {\n    COMPLETED: 'COMPLETED',\n    STARTING: 'STARTING',\n    STARTED: 'STARTED',\n    STOPPING: 'STOPPING',\n    STOPPED: 'STOPPED',\n    FAILED: 'FAILED',\n    UNKNOWN: 'UNKNOWN',\n    ABANDONED: 'ABANDONED',\n    EXECUTING: 'EXECUTING' //for exit status only\n};\n","import {log} from 'sd-utils'\nimport {JOB_STATUS} from \"./job-status\";\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\nimport {JobParametersInvalidException} from \"./exceptions/job-parameters-invalid-exception\";\nimport {JobDataInvalidException} from \"./exceptions/job-data-invalid-exception\";\nimport {JOB_EXECUTION_FLAG} from \"./job-execution-flag\";\nimport {JobResult} from \"./job-result\";\n\n/**\n * Base class for jobs\n * A Job is an entity that encapsulates an entire job process ( an abstraction representing the configuration of a job)\n * */\n\nexport class Job {\n\n    id;\n    name;\n    steps = [];\n\n    isRestartable=true;\n    executionListeners = [];\n    jobParametersValidator;\n\n    jobRepository;\n\n    constructor(name, jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        this.name = name;\n        this.jobParametersValidator = this.getJobParametersValidator();\n        this.jobDataValidator = this.getJobDataValidator();\n        this.jobRepository = jobRepository;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n    }\n\n    setJobRepository(jobRepository) {\n        this.jobRepository = jobRepository;\n    }\n\n    execute(execution) {\n        log.debug(\"Job execution starting: \", execution);\n        var jobResult;\n        return this.checkExecutionFlags(execution).then(execution=>{\n\n            if (execution.status === JOB_STATUS.STOPPING) {\n                // The job was already stopped\n                execution.status = JOB_STATUS.STOPPED;\n                execution.exitStatus = JOB_STATUS.COMPLETED;\n                log.debug(\"Job execution was stopped: \" + execution);\n                return execution;\n            }\n\n            if (this.jobParametersValidator && !this.jobParametersValidator.validate(execution.jobParameters)) {\n                throw new JobParametersInvalidException(\"Invalid job parameters in job execute\")\n            }\n\n            if(this.jobDataValidator && !this.jobDataValidator.validate(execution.getData())){\n                throw new JobDataInvalidException(\"Invalid job data in job execute\")\n            }\n\n\n            execution.startTime = new Date();\n            return Promise.all([this.updateStatus(execution, JOB_STATUS.STARTED), this.getResult(execution), this.updateProgress(execution)]).then(res=>{\n                execution=res[0];\n                jobResult = res[1];\n                if(!jobResult) {\n                    jobResult = new JobResult(execution.jobInstance)\n                }\n                this.executionListeners.forEach(listener=>listener.beforeJob(execution));\n\n                return this.doExecute(execution, jobResult);\n            });\n\n        }).then(execution=>{\n            log.debug(\"Job execution complete: \",execution);\n            return execution\n        }).catch(e=>{\n            if (e instanceof JobInterruptedException) {\n                log.info(\"Encountered interruption executing job\", e);\n                execution.status = JOB_STATUS.STOPPED;\n                execution.exitStatus = JOB_STATUS.STOPPED;\n            } else {\n                log.error(\"Encountered fatal error executing job\", e);\n                execution.status = JOB_STATUS.FAILED;\n                execution.exitStatus = JOB_STATUS.FAILED;\n            }\n            execution.failureExceptions.push(e);\n            return execution;\n        }).then(execution=>{\n            if(jobResult){\n                return this.jobRepository.saveJobResult(jobResult).then(()=>execution)\n            }\n            return execution\n        }).catch(e=>{\n            log.error(\"Encountered fatal error saving job results\", e);\n            if(e){\n                execution.failureExceptions.push(e);\n            }\n            execution.status = JOB_STATUS.FAILED;\n            execution.exitStatus = JOB_STATUS.FAILED;\n            return execution;\n        }).then(execution=>{\n            execution.endTime = new Date();\n            return Promise.all([this.jobRepository.update(execution), this.updateProgress(execution)]).then(res=>res[0])\n        }).then(execution=>{\n            try {\n                this.executionListeners.forEach(listener=>listener.afterJob(execution));\n            } catch (e) {\n                log.error(\"Exception encountered in afterStep callback\", e);\n            }\n            return execution;\n        })\n    }\n\n\n    updateStatus(jobExecution, status) {\n        jobExecution.status=status;\n        return this.jobRepository.update(jobExecution)\n    }\n\n    updateProgress(jobExecution){\n        return this.jobRepository.updateJobExecutionProgress(jobExecution.id, this.getProgress(jobExecution));\n    }\n\n    /* Extension point for subclasses allowing them to concentrate on processing logic and ignore listeners, returns promise*/\n    doExecute(execution, jobResult) {\n        throw 'doExecute function not implemented for job: ' + this.name\n    }\n\n    getJobParametersValidator() {\n        return {\n            validate: (params) => params.validate()\n        }\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => true\n        }\n    }\n\n    addStep(step){\n        this.steps.push(step);\n    }\n\n\n    createJobParameters(values){\n        throw 'createJobParameters function not implemented for job: ' + this.name\n    }\n\n    /*Should return progress object with fields:\n    * current\n    * total */\n    getProgress(execution){\n        return {\n            total: 1,\n            current: execution.status === JOB_STATUS.COMPLETED ? 1 : 0\n        }\n    }\n\n    registerExecutionListener(listener){\n        this.executionListeners.push(listener);\n    }\n\n    checkExecutionFlags(execution){\n        return this.jobRepository.getJobExecutionFlag(execution.id).then(flag=>{\n            if(JOB_EXECUTION_FLAG.STOP === flag){\n                execution.stop();\n            }\n            return execution\n        })\n    }\n\n    getResult(execution) {\n        return this.jobRepository.getJobResultByInstance(execution.jobInstance);\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters){\n        throw 'jobResultToCsvRows function not implemented for job: ' + this.name\n    }\n}\n","import {log} from 'sd-utils'\nimport {JOB_STATUS} from \"./job-status\";\nimport {Job} from \"./job\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {Step} from \"./step\";\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\nimport {JobRestartException} from \"./exceptions/job-restart-exception\";\nimport {JOB_EXECUTION_FLAG} from \"./job-execution-flag\";\n\n/* Simple Job that sequentially executes a job by iterating through its list of steps.  Any Step that fails will fail the job.  The job is\n considered complete when all steps have been executed.*/\n\nexport class SimpleJob extends Job {\n\n    constructor(name, jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(name, jobRepository, expressionsEvaluator, objectiveRulesManager)\n    }\n\n    getStep(stepName) {\n        return Utils.find(this.steps, s=>s.name == stepName);\n    }\n\n    doExecute(execution, jobResult) {\n\n        return this.handleNextStep(execution, jobResult).then(lastExecutedStepExecution=>{\n            if (lastExecutedStepExecution != null) {\n                log.debug(\"Updating JobExecution status: \", lastExecutedStepExecution);\n                execution.status = lastExecutedStepExecution.status;\n                execution.exitStatus = lastExecutedStepExecution.exitStatus;\n                execution.failureExceptions.push(...lastExecutedStepExecution.failureExceptions)\n            }\n            return execution;\n        });\n    }\n\n    handleNextStep(jobExecution, jobResult, prevStep=null, prevStepExecution=null){\n        var stepIndex = 0;\n        if(prevStep){\n            stepIndex = this.steps.indexOf(prevStep)+1;\n        }\n        if(stepIndex>=this.steps.length){\n            return Promise.resolve(prevStepExecution)\n        }\n        var step = this.steps[stepIndex];\n        return this.handleStep(step, jobExecution, jobResult).then(stepExecution=>{\n            if(stepExecution.status !== JOB_STATUS.COMPLETED){ // Terminate the job if a step fails\n                return stepExecution;\n            }\n            return this.handleNextStep(jobExecution, jobResult, step, stepExecution);\n        })\n    }\n\n    handleStep(step, jobExecution, jobResult) {\n        var jobInstance = jobExecution.jobInstance;\n        return this.checkExecutionFlags(jobExecution).then(jobExecution=>{\n            if (jobExecution.isStopping()) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            return this.jobRepository.getLastStepExecution(jobInstance, step.name)\n\n        }).then(lastStepExecution=>{\n            if (this.stepExecutionPartOfExistingJobExecution(jobExecution, lastStepExecution)) {\n                // If the last execution of this step was in the same job, it's probably intentional so we want to run it again.\n                log.info(\"Duplicate step detected in execution of job. step: \" + step.name + \" jobName: \", jobInstance.jobName);\n                lastStepExecution = null;\n            }\n\n            var currentStepExecution = lastStepExecution;\n\n            if (!this.shouldStart(currentStepExecution, jobExecution, step)) {\n                return currentStepExecution;\n            }\n\n            currentStepExecution = jobExecution.createStepExecution(step.name);\n\n            var isCompleted = lastStepExecution != null && lastStepExecution.status === JOB_STATUS.COMPLETED;\n            var isRestart = lastStepExecution != null && !isCompleted;\n            var skipExecution = isCompleted && step.skipOnRestartIfCompleted;\n\n            if (isRestart) {\n                currentStepExecution.executionContext = lastStepExecution.executionContext;\n                if (lastStepExecution.executionContext.containsKey(\"executed\")) {\n                    currentStepExecution.executionContext.remove(\"executed\");\n                }\n            }\n            else {\n\n                currentStepExecution.executionContext = new ExecutionContext();\n            }\n            if(skipExecution){\n                currentStepExecution.exitStatus = JOB_STATUS.COMPLETED;\n                currentStepExecution.status = JOB_STATUS.COMPLETED;\n                currentStepExecution.executionContext.put(\"skipped\", true);\n            }\n\n            return this.jobRepository.addStepExecution(currentStepExecution).then((_currentStepExecution)=>{\n                currentStepExecution=_currentStepExecution;\n                if(skipExecution){\n                    log.info(\"Skipping completed step execution: [\" + step.name + \"]\");\n                    return currentStepExecution;\n                }\n                log.info(\"Executing step: [\" + step.name + \"]\");\n                return step.execute(currentStepExecution, jobResult)\n            }).then(()=>{\n                currentStepExecution.executionContext.put(\"executed\", true);\n                return currentStepExecution;\n            }).catch (e => {\n                jobExecution.status = JOB_STATUS.FAILED;\n                return this.jobRepository.update(jobExecution).then(jobExecution=>{throw e})\n            });\n\n        }).then((currentStepExecution)=>{\n            if (currentStepExecution.status == JOB_STATUS.STOPPING\n                || currentStepExecution.status == JOB_STATUS.STOPPED) {\n                // Ensure that the job gets the message that it is stopping\n                jobExecution.status = JOB_STATUS.STOPPING;\n                // throw new Error(\"Job interrupted by step execution\");\n            }\n            return this.updateProgress(jobExecution).then(()=>currentStepExecution);\n        })\n\n    }\n\n    stepExecutionPartOfExistingJobExecution(jobExecution, stepExecution) {\n        return stepExecution != null && stepExecution.jobExecution.id == jobExecution.id\n    }\n\n    shouldStart(lastStepExecution, execution, step) {\n        var stepStatus;\n        if (lastStepExecution == null) {\n            stepStatus = JOB_STATUS.STARTING;\n        }\n        else {\n            stepStatus = lastStepExecution.status;\n        }\n\n        if (stepStatus == JOB_STATUS.UNKNOWN) {\n            throw new JobRestartException(\"Cannot restart step from UNKNOWN status\")\n        }\n\n        return stepStatus != JOB_STATUS.COMPLETED || step.isRestartable;\n    }\n\n    getProgress(execution){\n        var completedSteps = execution.stepExecutions.length;\n        let progress = {\n            total: this.steps.length,\n            current: completedSteps\n        };\n        if(!completedSteps){\n            return progress\n        }\n        if(JOB_STATUS.COMPLETED !== execution.stepExecutions[execution.stepExecutions.length-1].status){\n            progress.current--;\n        }\n\n        return progress;\n    }\n\n    addStep(){\n        if(arguments.length===1){\n            return super.addStep(arguments[0])\n        }\n        var step = new Step(arguments[0], this.jobRepository);\n        step.doExecute = arguments[1];\n        return super.addStep(step);\n    }\n\n}\n","export class StepExecutionListener {\n    /*Called before a step executes*/\n    beforeStep(jobExecution) {\n\n    }\n\n    /*Called after completion of a step. Called after both successful and failed executions*/\n    afterStep(jobExecution) {\n\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {JOB_STATUS} from \"./job-status\";\nimport {JobExecution} from \"./job-execution\";\n\n/*\n representation of the execution of a step\n */\nexport class StepExecution {\n    id;\n    stepName;\n    jobExecution;\n\n    status = JOB_STATUS.STARTING;\n    exitStatus = JOB_STATUS.EXECUTING;\n    executionContext = new ExecutionContext(); //execution context for single step level,\n\n    startTime = new Date();\n    endTime = null;\n    lastUpdated = null;\n\n    terminateOnly = false; //flag to indicate that an execution should halt\n    failureExceptions = [];\n\n    constructor(stepName, jobExecution, id) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.stepName = stepName;\n        this.jobExecution = jobExecution;\n        this.jobExecutionId = jobExecution.id;\n    }\n\n    getJobParameters(){\n        return this.jobExecution.jobParameters;\n    }\n\n    getJobExecutionContext(){\n        return this.jobExecution.executionContext;\n    }\n\n    getData(){\n        return this.jobExecution.getData();\n    }\n\n    getDTO(filteredProperties=[], deepClone = true){\n\n        var cloneMethod = Utils.cloneDeepWith;\n        if(!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        return Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if(filteredProperties.indexOf(key)>-1){\n                return null;\n            }\n            if([\"executionContext\"].indexOf(key)>-1){\n                return value.getDTO()\n            }\n            if(value instanceof Error){\n                return Utils.getErrorDTO(value);\n            }\n\n            if (value instanceof JobExecution) {\n                return value.getDTO([\"stepExecutions\"], deepClone)\n            }\n        }))\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {log} from 'sd-utils'\n\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\n/*domain object representing the configuration of a job step*/\nexport class Step {\n\n    id;\n    name;\n    isRestartable = true;\n    skipOnRestartIfCompleted=true;\n    steps = [];\n    executionListeners = [];\n\n    jobRepository;\n\n    constructor(name, jobRepository) {\n        this.name = name;\n        this.jobRepository = jobRepository;\n    }\n\n    setJobRepository(jobRepository) {\n        this.jobRepository = jobRepository;\n    }\n\n    /*Process the step and assign progress and status meta information to the StepExecution provided*/\n    execute(stepExecution, jobResult) {\n        log.debug(\"Executing step: name=\" + this.name);\n        stepExecution.startTime = new Date();\n        stepExecution.status = JOB_STATUS.STARTED;\n        var exitStatus;\n        return this.jobRepository.update(stepExecution).then(stepExecution=>{\n            exitStatus = JOB_STATUS.EXECUTING;\n\n            this.executionListeners.forEach(listener=>listener.beforeStep(stepExecution));\n            this.open(stepExecution.executionContext);\n\n            return this.doExecute(stepExecution, jobResult)\n        }).then(_stepExecution=>{\n            stepExecution = _stepExecution;\n            exitStatus = stepExecution.exitStatus;\n\n            // Check if someone is trying to stop us\n            if (stepExecution.terminateOnly) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            // Need to upgrade here not set, in case the execution was stopped\n            stepExecution.status = JOB_STATUS.COMPLETED;\n            log.debug(\"Step execution success: name=\" + this.name);\n            return stepExecution\n        }).catch(e=>{\n            stepExecution.status = this.determineJobStatus(e);\n            exitStatus = stepExecution.status;\n            stepExecution.failureExceptions.push(e);\n\n            if (stepExecution.status == JOB_STATUS.STOPPED) {\n                log.info(\"Encountered interruption executing step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n            else {\n                log.error(\"Encountered an error executing step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n            return stepExecution;\n        }).then(stepExecution=>{\n            try {\n                stepExecution.exitStatus = exitStatus;\n                this.executionListeners.forEach(listener=>listener.afterStep(stepExecution));\n            }\n            catch (e) {\n                log.error(\"Exception in afterStep callback in step \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n\n            stepExecution.endTime = new Date();\n            stepExecution.exitStatus = exitStatus;\n\n\n            return this.jobRepository.update(stepExecution)\n        }).then(stepExecution=>{\n            try {\n                this.close(stepExecution.executionContext);\n            }\n            catch (e) {\n                log.error(\"Exception while closing step execution resources in step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n                stepExecution.failureExceptions.push(e);\n            }\n\n            try {\n                this.close(stepExecution.executionContext);\n            }\n            catch (e) {\n                log.error(\"Exception while closing step execution resources in step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n                stepExecution.failureExceptions.push(e);\n            }\n\n            // doExecutionRelease();\n\n            log.debug(\"Step execution complete: \" + stepExecution.id);\n            return stepExecution;\n        });\n\n    }\n\n    determineJobStatus(e) {\n        if (e instanceof JobInterruptedException) {\n            return JOB_STATUS.STOPPED;\n        }\n        else {\n            return JOB_STATUS.FAILED;\n        }\n    }\n\n    /**\n     * Extension point for subclasses to execute business logic. Subclasses should set the exitStatus on the\n     * StepExecution before returning. Must return stepExecution\n     */\n    doExecute(stepExecution, jobResult) {\n    }\n\n    /**\n     * Extension point for subclasses to provide callbacks to their collaborators at the beginning of a step, to open or\n     * acquire resources. Does nothing by default.\n     */\n    open(executionContext) {\n    }\n\n    /**\n     * Extension point for subclasses to provide callbacks to their collaborators at the end of a step (right at the end\n     * of the finally block), to close or release resources. Does nothing by default.\n     */\n    close(executionContext) {\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(stepExecution){\n        return {\n            total: 1,\n            current: stepExecution.status === JOB_STATUS.COMPLETED ? 1 : 0\n        }\n    }\n}\n","import * as engine from './engine/index'\n\nexport {engine}\nexport * from './jobs-manager'\nexport * from './job-worker'\n\n\n\n","import {JobExecutionListener} from \"./engine/job-execution-listener\";\nimport {JOB_STATUS} from \"./engine/job-status\";\nimport {JobInstance} from \"./engine/job-instance\";\nimport {Utils, log} from \"sd-utils\";\n\n\nexport class JobInstanceManagerConfig {\n    onJobStarted = () => {};\n    onJobCompleted = result => {};\n    onJobFailed = errors => {};\n    onJobStopped = () => {};\n    onJobTerminated = () => {};\n    onProgress = (progress) => {};\n    callbacksThisArg;\n    updateInterval = 100;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/*convenience class for managing and tracking job instance progress*/\nexport class JobInstanceManager extends JobExecutionListener {\n\n    jobsManger;\n    jobInstance;\n    config;\n\n    lastJobExecution;\n    lastUpdateTime;\n    progress = null;\n\n    constructor(jobsManger, jobInstanceOrExecution, config) {\n        super();\n        this.config = new JobInstanceManagerConfig(config);\n        this.jobsManger = jobsManger;\n        if (jobInstanceOrExecution instanceof JobInstance) {\n            this.jobInstance = jobInstanceOrExecution;\n            this.getLastJobExecution().then(je=> {\n                this.checkProgress();\n            })\n        } else {\n            this.lastJobExecution = jobInstanceOrExecution;\n            this.jobInstance = this.lastJobExecution.jobInstance;\n            this.checkProgress();\n        }\n        if (this.lastJobExecution && !this.lastJobExecution.isRunning()) {\n            this.afterJob(this.lastJobExecution);\n            return;\n        }\n        jobsManger.registerJobExecutionListener(this);\n    }\n\n    checkProgress() {\n\n        var self = this;\n        if (this.terminated || !this.lastJobExecution.isRunning() || this.getProgressPercents(this.progress) === 100) {\n            return;\n        }\n        this.jobsManger.getProgress(this.lastJobExecution).then(progress=> {\n            this.lastUpdateTime = new Date();\n            if (progress) {\n                this.progress = progress;\n                this.config.onProgress.call(this.config.callbacksThisArg || this, progress);\n            }\n\n            setTimeout(function () {\n                self.checkProgress();\n            }, this.config.updateInterval)\n        })\n    }\n\n    beforeJob(jobExecution) {\n        if (jobExecution.jobInstance.id !== this.jobInstance.id) {\n            return;\n        }\n\n        this.lastJobExecution = jobExecution;\n        this.config.onJobStarted.call(this.config.callbacksThisArg || this);\n    }\n\n    getProgressPercents(progress) {\n        if (!progress) {\n            return 0;\n        }\n        return progress.current * 100 / progress.total;\n    }\n\n    getProgressFromExecution(jobExecution) {\n        var job = this.jobsManger.getJobByName(jobExecution.jobInstance.jobName);\n        return job.getProgress(jobExecution);\n    }\n\n    afterJob(jobExecution) {\n        if (jobExecution.jobInstance.id !== this.jobInstance.id) {\n            return;\n        }\n        this.lastJobExecution = jobExecution;\n        if (JOB_STATUS.COMPLETED === jobExecution.status) {\n            this.jobsManger.deregisterJobExecutionListener(this);\n            this.progress = this.getProgressFromExecution(jobExecution);\n            this.config.onProgress.call(this.config.callbacksThisArg || this, this.progress);\n            this.jobsManger.getResult(jobExecution.jobInstance).then(result=> {\n                this.config.onJobCompleted.call(this.config.callbacksThisArg || this, result.data);\n            }).catch(e=> {\n                log.error(e);\n            })\n\n\n        } else if (JOB_STATUS.FAILED === jobExecution.status) {\n            this.config.onJobFailed.call(this.config.callbacksThisArg || this, jobExecution.failureExceptions);\n\n        } else if (JOB_STATUS.STOPPED === jobExecution.status) {\n            this.config.onJobStopped.call(this.config.callbacksThisArg || this);\n        }\n    }\n\n    getLastJobExecution(forceUpdate = false) {\n        if (!this.lastJobExecution || forceUpdate) {\n            return this.jobsManger.jobRepository.getLastJobExecutionByInstance(this.jobInstance).then(je=> {\n                this.lastJobExecution = je;\n                return je;\n            });\n        }\n        return Promise.resolve(this.lastJobExecution);\n    }\n\n    stop() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.stop(this.lastJobExecution)\n        })\n    }\n\n    resume() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.run(this.jobInstance.jobName, this.lastJobExecution.jobParameters.values, this.lastJobExecution.getData()).then(je=> {\n                this.lastJobExecution = je;\n                this.checkProgress();\n                return true;\n            }).catch(e=> {\n                log.error(e);\n                return false;\n            })\n        })\n    }\n\n    terminate() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.terminate(this.jobInstance).then(()=> {\n                this.terminated = true;\n                this.config.onJobTerminated.call(this.config.callbacksThisArg || this, this.lastJobExecution);\n                this.jobsManger.deregisterJobExecutionListener(this);\n\n                return this.lastJobExecution;\n            })\n        }).catch(e=> {\n            log.error(e);\n            return false;\n        })\n    }\n\n}\n","export class JobWorker{\n\n    worker;\n    listeners = {};\n    defaultListener;\n\n    constructor(url, defaultListener, onError){\n        var instance = this;\n        this.worker = new Worker(url);\n        this.defaultListener = defaultListener || function() {};\n        if (onError) {this.worker.onerror = onError;}\n\n        this.worker.onmessage = function(event) {\n            if (event.data instanceof Object &&\n                event.data.hasOwnProperty('queryMethodListener') && event.data.hasOwnProperty('queryMethodArguments')) {\n                var listener = instance.listeners[event.data.queryMethodListener];\n                var args = event.data.queryMethodArguments;\n                if(listener.deserializer){\n                    args = listener.deserializer(args);\n                }\n                listener.fn.apply(listener.thisArg, args);\n            } else {\n                this.defaultListener.call(instance, event.data);\n            }\n        }\n\n    }\n\n    sendQuery() {\n        if (arguments.length < 1) {\n            throw new TypeError('JobWorker.sendQuery takes at least one argument');\n        }\n        this.worker.postMessage({\n            'queryMethod': arguments[0],\n            'queryArguments': Array.prototype.slice.call(arguments, 1)\n        });\n    }\n\n    runJob(jobName, jobParametersValues, dataDTO){\n        this.sendQuery('runJob', jobName, jobParametersValues, dataDTO)\n    }\n\n    executeJob(jobExecutionId){\n        this.sendQuery('executeJob', jobExecutionId)\n    }\n\n    recompute(dataDTO, ruleNames, evalCode, evalNumeric){\n        this.sendQuery('recompute', dataDTO, ruleNames, evalCode, evalNumeric)\n    }\n\n    postMessage(message) {\n        this.worker.postMessage(message);\n    }\n\n    terminate() {\n        this.worker.terminate();\n    }\n\n    addListener(name, listener, thisArg, deserializer) {\n        this.listeners[name] = {\n            fn: listener,\n            thisArg: thisArg || this,\n            deserializer: deserializer\n        };\n    }\n\n    removeListener(name) {\n        delete this.listeners[name];\n    }\n}\n","import {Utils, log} from \"sd-utils\";\nimport {SensitivityAnalysisJob} from \"./configurations/sensitivity-analysis/n-way/sensitivity-analysis-job\";\nimport {JobLauncher} from \"./engine/job-launcher\";\nimport {JobWorker} from \"./job-worker\";\nimport {JobExecutionListener} from \"./engine/job-execution-listener\";\nimport {JobParameters} from \"./engine/job-parameters\";\nimport {IdbJobRepository} from \"./engine/job-repository/idb-job-repository\";\nimport {JOB_EXECUTION_FLAG} from \"./engine/job-execution-flag\";\nimport {RecomputeJob} from \"./configurations/recompute/recompute-job\";\nimport {ProbabilisticSensitivityAnalysisJob} from \"./configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job\";\nimport {TimeoutJobRepository} from \"./engine/job-repository/timeout-job-repository\";\nimport {TornadoDiagramJob} from \"./configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job\";\nimport {JOB_STATUS} from \"./engine/job-status\";\nimport {SimpleJobRepository} from \"./engine/job-repository/simple-job-repository\";\nimport {LeagueTableJob} from \"./configurations/league-table/league-table-job\";\nimport {SpiderPlotJob} from \"./configurations/sensitivity-analysis/spider-plot/spider-plot-job\";\n\n\nexport class JobsManagerConfig {\n\n    workerUrl = null;\n    repositoryType = 'idb';\n    clearRepository = false;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\nexport class JobsManager extends JobExecutionListener {\n\n\n    useWorker;\n    expressionsEvaluator;\n    objectiveRulesManager;\n    jobWorker;\n\n    jobRepository;\n    jobLauncher;\n\n    jobExecutionListeners = [];\n\n    afterJobExecutionPromiseResolves = {};\n    jobInstancesToTerminate = {};\n\n    constructor(expressionsEvaluator, objectiveRulesManager, config) {\n        super();\n        this.setConfig(config);\n        this.expressionEngine = expressionsEvaluator.expressionEngine;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n\n\n        this.useWorker = !!this.config.workerUrl;\n        if (this.useWorker) {\n            this.initWorker(this.config.workerUrl);\n        }\n\n        this.initRepository();\n\n        this.registerJobs();\n\n\n\n        this.jobLauncher = new JobLauncher(this.jobRepository, this.jobWorker, (data)=>this.serializeData(data));\n    }\n\n    setConfig(config) {\n        this.config = new JobsManagerConfig(config);\n        return this;\n    }\n\n    initRepository() {\n        switch (this.config.repositoryType){\n            case 'idb':\n                this.jobRepository = new IdbJobRepository(this.expressionEngine.getJsonReviver(), 'sd-job-repository', this.config.clearRepository);\n                break;\n            case 'timeout':\n                this.jobRepository = new TimeoutJobRepository(this.expressionEngine.getJsonReviver());\n                break;\n            case 'simple':\n                this.jobRepository = new SimpleJobRepository(this.expressionEngine.getJsonReviver());\n                break;\n            default:\n                log.error('JobsManager configuration error! Unknown repository type: '+this.config.repositoryType+'. Using default: idb');\n                this.config.repositoryType = 'idb';\n                this.initRepository()\n        }\n    }\n\n    serializeData(data) {\n        return data.serialize(true, false, false, this.expressionEngine.getJsonReplacer());\n    }\n\n    getProgress(jobExecutionOrId) {\n        var id = jobExecutionOrId;\n        if (!Utils.isString(jobExecutionOrId)) {\n            id = jobExecutionOrId.id\n        }\n        return this.jobRepository.getJobExecutionProgress(id);\n    }\n\n    getResult(jobInstance) {\n        return this.jobRepository.getJobResultByInstance(jobInstance);\n    }\n\n    run(jobName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        return this.jobLauncher.run(jobName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched).then(jobExecution=> {\n            if (resolvePromiseAfterJobIsLaunched || !jobExecution.isRunning()) {\n                return jobExecution;\n            }\n            //job was delegated to worker and is still running\n\n            return new Promise((resolve, reject)=> {\n                this.afterJobExecutionPromiseResolves[jobExecution.id] = resolve;\n            });\n        });\n    }\n\n    execute(jobExecutionOrId) {\n        return this.jobLauncher.execute(jobExecutionOrId);\n    }\n\n    stop(jobExecutionOrId) {\n        var id = jobExecutionOrId;\n        if (!Utils.isString(jobExecutionOrId)) {\n            id = jobExecutionOrId.id\n        }\n\n        return this.jobRepository.getJobExecutionById(id).then(jobExecution=> {\n            if (!jobExecution) {\n                log.error(\"Job Execution not found: \" + jobExecutionOrId);\n                return null;\n            }\n            if (!jobExecution.isRunning()) {\n                log.warn(\"Job Execution not running, status: \" + jobExecution.status + \", endTime: \" + jobExecution.endTime);\n                return jobExecution;\n            }\n\n            return this.jobRepository.saveJobExecutionFlag(jobExecution.id, JOB_EXECUTION_FLAG.STOP).then(()=>jobExecution);\n        });\n    }\n\n    /*stop job execution if running and delete job instance from repository*/\n    terminate(jobInstance) {\n        return this.jobRepository.getLastJobExecutionByInstance(jobInstance).then(jobExecution=> {\n            if (jobExecution) {\n                if(jobExecution.isRunning()){\n                    return this.jobRepository.saveJobExecutionFlag(jobExecution.id, JOB_EXECUTION_FLAG.STOP).then(()=>jobExecution);\n                }else{\n                    return this.jobRepository.removeJobInstance(jobInstance, jobExecution.jobParameters);\n                }\n            }\n        }).then(()=>{\n            this.jobInstancesToTerminate[jobInstance.id]=jobInstance;\n        })\n    }\n\n    getJobByName(jobName) {\n        return this.jobRepository.getJobByName(jobName);\n    }\n\n\n    createJobParameters(jobName, jobParametersValues) {\n        var job = this.jobRepository.getJobByName(jobName);\n        return job.createJobParameters(jobParametersValues);\n    }\n\n\n    /*Returns a promise*/\n    getLastJobExecution(jobName, jobParameters) {\n        if (this.useWorker) {\n            return this.jobWorker;\n        }\n        if (!(jobParameters instanceof JobParameters)) {\n            jobParameters = this.createJobParameters(jobParameters)\n        }\n        return this.jobRepository.getLastJobExecution(jobName, jobParameters);\n    }\n\n    initWorker(workerUrl) {\n        this.jobWorker = new JobWorker(workerUrl, ()=>{\n            log.error('error in worker', arguments);\n        });\n        var argsDeserializer = (args)=> {\n            return [this.jobRepository.reviveJobExecution(args[0])]\n        };\n\n        this.jobWorker.addListener(\"beforeJob\", this.beforeJob, this, argsDeserializer);\n        this.jobWorker.addListener(\"afterJob\", this.afterJob, this, argsDeserializer);\n        this.jobWorker.addListener(\"jobFatalError\", this.onJobFatalError, this);\n    }\n\n    registerJobs() {\n\n        let sensitivityAnalysisJob = new SensitivityAnalysisJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        let probabilisticSensitivityAnalysisJob = new ProbabilisticSensitivityAnalysisJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        if(!Utils.isWorker()){\n            sensitivityAnalysisJob.setBatchSize(1);\n            probabilisticSensitivityAnalysisJob.setBatchSize(1);\n        }\n\n        this.registerJob(sensitivityAnalysisJob);\n        this.registerJob(new TornadoDiagramJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(probabilisticSensitivityAnalysisJob);\n        this.registerJob(new RecomputeJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new LeagueTableJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new SpiderPlotJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n    }\n\n    registerJob(job) {\n        this.jobRepository.registerJob(job);\n        job.registerExecutionListener(this)\n    }\n\n    registerJobExecutionListener(listener) {\n        this.jobExecutionListeners.push(listener);\n    }\n\n    deregisterJobExecutionListener(listener) {\n        var index = this.jobExecutionListeners.indexOf(listener);\n        if (index > -1) {\n            this.jobExecutionListeners.splice(index, 1)\n        }\n    }\n\n    beforeJob(jobExecution) {\n        log.debug(\"beforeJob\", this.useWorker, jobExecution);\n        this.jobExecutionListeners.forEach(l=>l.beforeJob(jobExecution));\n    }\n\n    afterJob(jobExecution) {\n        log.debug(\"afterJob\", this.useWorker, jobExecution);\n        this.jobExecutionListeners.forEach(l=>l.afterJob(jobExecution));\n        var promiseResolve = this.afterJobExecutionPromiseResolves[jobExecution.id];\n        if (promiseResolve) {\n            promiseResolve(jobExecution)\n        }\n\n        if(this.jobInstancesToTerminate[jobExecution.jobInstance.id]){\n            this.jobRepository.removeJobInstance(jobExecution.jobInstance, jobExecution.jobParameters);\n        }\n    }\n\n    onJobFatalError(jobExecutionId, error){\n        var promiseResolve = this.afterJobExecutionPromiseResolves[jobExecutionId];\n        if (promiseResolve) {\n            this.jobRepository.getJobExecutionById(jobExecutionId).then(jobExecution=>{\n                jobExecution.status = JOB_STATUS.FAILED;\n                if(error){\n                    jobExecution.failureExceptions.push(error);\n                }\n\n                return this.jobRepository.saveJobExecution(jobExecution).then(()=>{\n                    promiseResolve(jobExecution);\n                })\n            }).catch(e=>{\n                log.error(e);\n            })\n\n        }\n        log.debug('onJobFatalError', jobExecutionId, error);\n    }\n\n\n}\n","import {\n    ExpectedValueMaximizationRule,\n    ExpectedValueMinimizationRule,\n    MaxiMinRule,\n    MaxiMaxRule,\n    MiniMinRule,\n    MiniMaxRule\n} from \"./rules\";\nimport {log} from \"sd-utils\";\nimport * as model from \"sd-model\";\nimport {MinMaxRule} from \"./rules/min-max-rule\";\nimport {MaxMinRule} from \"./rules/max-min-rule\";\nimport {MinMinRule} from \"./rules/min-min-rule\";\nimport {MaxMaxRule} from \"./rules/max-max-rule\";\n\nexport class ObjectiveRulesManager{\n\n    expressionEngine;\n    currentRule;\n    ruleByName = {};\n    rules = [];\n\n\n    flipPair = {};\n    payoffIndex = 0;\n\n    constructor(expressionEngine, currentRuleName) {\n        this.expressionEngine = expressionEngine;\n        this.addRule(new ExpectedValueMaximizationRule(expressionEngine));\n        this.addRule(new ExpectedValueMinimizationRule(expressionEngine));\n        this.addRule(new MaxiMinRule(expressionEngine));\n        this.addRule(new MaxiMaxRule(expressionEngine));\n        this.addRule(new MiniMinRule(expressionEngine));\n        this.addRule(new MiniMaxRule(expressionEngine));\n\n        let minMax = new MinMaxRule(expressionEngine);\n        this.addRule(minMax);\n        let maxMin = new MaxMinRule(expressionEngine);\n        this.addRule(maxMin);\n        this.addFlipPair(minMax, maxMin);\n\n        let minMin = new MinMinRule(expressionEngine);\n        this.addRule(minMin);\n        let maxMax = new MaxMaxRule(expressionEngine);\n        this.addRule(maxMax);\n\n\n        if (currentRuleName) {\n            this.currentRule = this.ruleByName[currentRuleName];\n        } else {\n            this.currentRule = this.rules[0];\n        }\n\n    }\n\n\n    setPayoffIndex(payoffIndex){\n        this.payoffIndex = payoffIndex || 0;\n    }\n\n    addRule(rule){\n        this.ruleByName[rule.name]=rule;\n        this.rules.push(rule);\n    }\n\n    isRuleName(ruleName){\n         return !!this.ruleByName[ruleName]\n    }\n\n    setCurrentRuleByName(ruleName){\n        this.currentRule = this.ruleByName[ruleName];\n    }\n\n    getObjectiveRuleByName(ruleName){\n        return this.ruleByName[ruleName];\n    }\n\n    flipRule(){\n        var flipped = this.flipPair[this.currentRule.name];\n        if(flipped){\n            this.currentRule = flipped;\n        }\n    }\n\n    updateDefaultCriterion1Weight(defaultCriterion1Weight){\n        this.rules.filter(r=>r.multiCriteria).forEach(r=>r.setDefaultCriterion1Weight(defaultCriterion1Weight));\n    }\n\n    recompute(dataModel, allRules, decisionPolicy=null){\n\n        var startTime = new Date().getTime();\n        log.trace('recomputing rules, all: '+allRules);\n\n        dataModel.getRoots().forEach(n=>{\n            this.recomputeTree(n, allRules, decisionPolicy);\n        });\n\n        var time  = (new Date().getTime() - startTime/1000);\n        log.trace('recomputation took '+time+'s');\n\n        return this;\n    }\n\n    recomputeTree(root, allRules, decisionPolicy=null){\n        log.trace('recomputing rules for tree ...', root);\n\n        var startTime = new Date().getTime();\n\n        var rules  = [this.currentRule];\n        if(allRules){\n            rules = this.rules;\n        }\n\n        rules.forEach(rule=> {\n            rule.setPayoffIndex(this.payoffIndex);\n            rule.setDecisionPolicy(decisionPolicy);\n            rule.computePayoff(root);\n            rule.computeOptimal(root);\n            rule.clearDecisionPolicy();\n        });\n\n        var time  = (new Date().getTime() - startTime)/1000;\n        log.trace('recomputation took '+time+'s');\n\n        return this;\n    }\n\n\n    getNodeDisplayValue(node, name) {\n        return node.computedValue(this.currentRule.name, name)\n\n    }\n\n    getEdgeDisplayValue(e, name){\n        if(name==='probability'){\n            if(e.parentNode instanceof model.domain.DecisionNode){\n                return e.computedValue(this.currentRule.name, 'probability');\n            }\n            if(e.parentNode instanceof model.domain.ChanceNode){\n                return e.computedBaseProbability();\n            }\n            return null;\n        }\n        if(name==='payoff'){\n            if(this.currentRule.multiCriteria){\n                return e.computedValue(null, 'payoff');\n            }else{\n                return e.computedValue(null, 'payoff[' +this.payoffIndex + ']');\n            }\n\n        }\n        if(name==='optimal'){\n            return e.computedValue(this.currentRule.name, 'optimal')\n        }\n    }\n\n    addFlipPair(rule1, rule2) {\n        this.flipPair[rule1.name] = rule2;\n        this.flipPair[rule2.name] = rule1;\n    }\n\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from 'sd-utils'\n\n/*expected value maximization rule*/\nexport class ExpectedValueMaximizationRule extends ObjectiveRule{\n\n    static NAME = 'expected-value-maximization';\n\n    constructor(expressionEngine){\n        super(ExpectedValueMaximizationRule.NAME, true, expressionEngine);\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff=0, probabilityToEnter=1){\n        this.cValue(node, 'optimal', true);\n        if(node instanceof model.TerminalNode){\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=>{\n            if ( this.subtract(this.computedPayoff(node),payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode) ) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e,'probability')));\n            }else{\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*expected value minimization rule*/\nexport class ExpectedValueMinimizationRule extends ObjectiveRule{\n\n    static NAME = 'expected-value-minimization';\n\n    constructor(expressionEngine){\n        super(ExpectedValueMinimizationRule.NAME, false, expressionEngine);\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff=0, probabilityToEnter=1){\n        this.cValue(node, 'optimal', true);\n        if(node instanceof model.TerminalNode){\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=>{\n            if ( this.subtract(this.computedPayoff(node),payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode) ) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e,'probability')));\n            }else{\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","export * from './objective-rule'\nexport * from './expected-value-maximization-rule'\nexport * from './expected-value-minimization-rule'\nexport * from './maxi-max-rule'\nexport * from './maxi-min-rule'\nexport * from './mini-max-rule'\nexport * from './mini-min-rule'\n\n\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MaxMaxRule extends MultiCriteriaRule{\n\n    static NAME = 'max-max';\n\n    constructor(expressionEngine){\n        super(MaxMaxRule.NAME, [1, 1], expressionEngine);\n    }\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MaxMinRule extends MultiCriteriaRule{\n\n    static NAME = 'max-min';\n\n    constructor(expressionEngine){\n        super(MaxMinRule.NAME, [1, -1], expressionEngine);\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*maxi-max rule*/\nexport class MaxiMaxRule extends ObjectiveRule{\n\n    static NAME = 'maxi-max';\n\n    constructor(expressionEngine){\n        super(MaxiMaxRule.NAME, true, expressionEngine);\n    }\n\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)<bestChildPayoff ? 0.0 : (1.0/bestCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.maxBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*maxi-min rule*/\nexport class MaxiMinRule extends ObjectiveRule{\n\n    static NAME = 'maxi-min';\n\n    constructor(expressionEngine){\n        super(MaxiMinRule.NAME, true, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)>worstChildPayoff ? 0.0 : (1.0/worstCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.minBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MinMaxRule extends MultiCriteriaRule{\n\n    static NAME = 'min-max';\n\n    constructor(expressionEngine){\n        super(MinMaxRule.NAME, [-1, 1], expressionEngine);\n    }\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MinMinRule extends MultiCriteriaRule{\n\n    static NAME = 'min-min';\n\n    constructor(expressionEngine){\n        super(MinMinRule.NAME, [-1, -1], expressionEngine);\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*mini-max rule*/\nexport class MiniMaxRule extends ObjectiveRule{\n\n    static NAME = 'mini-max';\n\n    constructor(expressionEngine){\n        super(MiniMaxRule.NAME, false, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)<bestChildPayoff ? 0.0 : (1.0/bestCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.maxBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*mini-min rule*/\nexport class MiniMinRule extends ObjectiveRule{\n\n    static NAME = 'mini-min';\n\n    constructor(expressionEngine){\n        super(MiniMinRule.NAME, false, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)>worstChildPayoff ? 0.0 : (1.0/worstCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.minBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from \"sd-model\";\nimport {ObjectiveRule} from \"./objective-rule\";\nimport {Policy} from \"../../policies/policy\";\n\n\nexport class MultiCriteriaRule extends ObjectiveRule {\n\n    criterion1Weight = 1;\n    payoffCoeffs = [1, -1];\n\n    constructor(name, payoffCoeffs, expressionEngine) {\n        super(name, true, expressionEngine, true);\n        this.payoffCoeffs = payoffCoeffs;\n\n    }\n\n    setDefaultCriterion1Weight(criterion1Weight) {\n        this.criterion1Weight = criterion1Weight;\n    }\n\n    // payoff - parent edge payoff, aggregatedPayoff - aggregated payoff along path\n    computePayoff(node, payoff = [0, 0], aggregatedPayoff = [0, 0]) {\n        var childrenPayoff = [0, 0];\n        if (node.childEdges.length) {\n            if (node instanceof model.DecisionNode) {\n\n                var selectedIndexes = [];\n                var bestChild = -Infinity;\n\n                node.childEdges.forEach((e, i)=> {\n                    let basePayoffs = [this.basePayoff(e, 0), this.basePayoff(e, 1)];\n                    var childPayoff = this.computePayoff(e.childNode, basePayoffs, [this.add(basePayoffs[0], aggregatedPayoff[0]), this.add(basePayoffs[1], aggregatedPayoff[1])]);\n                    var childCombinedPayoff = this.cValue(e.childNode, 'combinedPayoff');\n                    if (childCombinedPayoff > bestChild) {\n                        bestChild = childCombinedPayoff;\n                        selectedIndexes = [i];\n                    } else if (bestChild.equals(childCombinedPayoff)) {\n                        selectedIndexes.push(i);\n                    }\n                });\n\n                if (this.decisionPolicy) {\n                    selectedIndexes = [];\n                    var decision = Policy.getDecision(this.decisionPolicy, node);\n                    if (decision) {\n                        selectedIndexes = [decision.decisionValue];\n                    }\n\n                }\n\n                node.childEdges.forEach((e, i)=> {\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', selectedIndexes.indexOf(i) < 0 ? 0.0 : 1.0);\n                });\n            } else {\n                node.childEdges.forEach(e=> {\n                    let basePayoffs = [this.basePayoff(e, 0), this.basePayoff(e, 1)];\n                    this.computePayoff(e.childNode, basePayoffs, [this.add(basePayoffs[0], aggregatedPayoff[0]), this.add(basePayoffs[1], aggregatedPayoff[1])]);\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', this.baseProbability(e));\n                });\n            }\n\n            var sumweight = 0;\n            node.childEdges.forEach(e=> {\n                sumweight = this.add(sumweight, this.cValue(e, 'probability'));\n            });\n\n            if (sumweight > 0) {\n                node.childEdges.forEach(e=> {\n                    childrenPayoff.forEach((p, i)=> {\n                        let ep = this.cValue(e.childNode, 'payoff[' + i + ']');\n                        childrenPayoff[i] = this.add(p, this.multiply(this.cValue(e, 'probability'), ep).div(sumweight))\n                    });\n                });\n            }\n\n\n        }\n        payoff.forEach((p, i)=> {\n            payoff[i] = this.add(p, childrenPayoff[i]);\n        });\n\n        this.clearComputedValues(node);\n\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'aggregatedPayoff', aggregatedPayoff);\n            this.cValue(node, 'probabilityToEnter', 0); //initial value\n        } else {\n            this.cValue(node, 'childrenPayoff', childrenPayoff);\n        }\n\n        this.cValue(node, 'combinedPayoff', this.computeCombinedPayoff(payoff));\n\n        return this.cValue(node, 'payoff', payoff);\n    }\n\n    computeCombinedPayoff(payoff){\n        // [criterion 1 coeff]*[criterion 1]*[weight]+[criterion 2 coeff]*[criterion 2]\n        if (this.criterion1Weight === Infinity) {\n            return this.multiply(this.payoffCoeffs[0], payoff[0]);\n        }\n        return this.add(this.multiply(this.payoffCoeffs[0], this.multiply(this.criterion1Weight, payoff[0])), this.multiply(this.payoffCoeffs[1], payoff[1]));\n    }\n\n    //  combinedPayoff - parent edge combinedPayoff\n    computeOptimal(node, combinedPayoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=> {\n            if (this.subtract(this.cValue(node, 'combinedPayoff'), combinedPayoff).equals(this.cValue(e.childNode, 'combinedPayoff')) || !(node instanceof model.DecisionNode)) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.computeCombinedPayoff([this.basePayoff(e, 0), this.basePayoff(e, 1)]), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {domain as model} from \"sd-model\";\nimport {Policy} from \"../../policies/policy\";\n\n/*Base class for objective rules*/\nexport class ObjectiveRule {\n    name;\n    expressionEngine;\n\n    decisionPolicy;\n    maximization;\n\n    payoffIndex = 0;\n    multiCriteria = false;\n\n    constructor(name, maximization, expressionEngine, multiCriteria=false) {\n        this.name = name;\n        this.maximization = maximization;\n        this.expressionEngine = expressionEngine;\n        this.multiCriteria = multiCriteria;\n    }\n\n    setDecisionPolicy(decisionPolicy) {\n        this.decisionPolicy = decisionPolicy;\n    }\n\n    setPayoffIndex(payoffIndex) {\n        this.payoffIndex = payoffIndex;\n    }\n\n    clearDecisionPolicy() {\n        this.decisionPolicy = null;\n    }\n\n    // should return array of selected children indexes\n    makeDecision(decisionNode, childrenPayoffs) {\n        var best;\n        if (this.maximization) {\n            best = this.max(...childrenPayoffs);\n        } else {\n            best = this.min(...childrenPayoffs);\n        }\n        var selectedIndexes = [];\n        childrenPayoffs.forEach((p, i)=> {\n            if (ExpressionEngine.compare(best, p) == 0) {\n                selectedIndexes.push(i);\n            }\n        });\n        return selectedIndexes;\n    }\n\n    _makeDecision(decisionNode, childrenPayoffs) {\n        if (this.decisionPolicy) {\n            var decision = Policy.getDecision(this.decisionPolicy, decisionNode);\n            if (decision) {\n                return [decision.decisionValue];\n            }\n            return [];\n        }\n        return this.makeDecision(decisionNode, childrenPayoffs);\n    }\n\n    // extension point for changing computed probability of edges in a chance node\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount) {\n\n    }\n\n    // payoff - parent edge payoff, aggregatedPayoff - aggregated payoff along path\n    computePayoff(node, payoff = 0, aggregatedPayoff = 0) {\n        var childrenPayoff = 0;\n        if (node.childEdges.length) {\n            if (node instanceof model.DecisionNode) {\n\n                var selectedIndexes = this._makeDecision(node, node.childEdges.map(e=>this.computePayoff(e.childNode, this.basePayoff(e), this.add(this.basePayoff(e), aggregatedPayoff))));\n                node.childEdges.forEach((e, i)=> {\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', selectedIndexes.indexOf(i) < 0 ? 0.0 : 1.0);\n                });\n\n            } else {\n                var bestChild = -Infinity;\n                var bestCount = 1;\n                var worstChild = Infinity;\n                var worstCount = 1;\n\n                node.childEdges.forEach(e=> {\n                    var childPayoff = this.computePayoff(e.childNode, this.basePayoff(e), this.add(this.basePayoff(e), aggregatedPayoff));\n                    if (childPayoff < worstChild) {\n                        worstChild = childPayoff;\n                        worstCount = 1;\n                    } else if (childPayoff.equals(worstChild)) {\n                        worstCount++\n                    }\n                    if (childPayoff > bestChild) {\n                        bestChild = childPayoff;\n                        bestCount = 1;\n                    } else if (childPayoff.equals(bestChild)) {\n                        bestCount++\n                    }\n\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', this.baseProbability(e));\n                });\n                this.modifyChanceProbability(node.childEdges, bestChild, bestCount, worstChild, worstCount);\n            }\n\n            var sumweight = 0;\n            node.childEdges.forEach(e=> {\n                sumweight = this.add(sumweight, this.cValue(e, 'probability'));\n            });\n\n            // console.log(payoff,node.childEdges,'sumweight',sumweight);\n            if (sumweight > 0) {\n                node.childEdges.forEach(e=> {\n                    childrenPayoff = this.add(childrenPayoff, this.multiply(this.cValue(e, 'probability'), this.computedPayoff(e.childNode)).div(sumweight));\n                });\n            }\n\n\n        }\n\n        payoff = this.add(payoff, childrenPayoff);\n        this.clearComputedValues(node);\n\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'aggregatedPayoff'+ '[' + this.payoffIndex + ']', aggregatedPayoff);\n            this.cValue(node, 'probabilityToEnter', 0); //initial value\n        } else {\n            this.cValue(node, 'childrenPayoff' + '[' + this.payoffIndex + ']', childrenPayoff);\n        }\n\n        return this.computedPayoff(node, payoff);\n    }\n\n    // koloruje optymalne ścieżki\n    computeOptimal(node) {\n        throw 'computeOptimal function not implemented for rule: ' + this.name\n    }\n\n    /* get or set computed payoff*/\n    computedPayoff(node, value){\n        return this.cValue(node, 'payoff[' + this.payoffIndex + ']', value)\n    }\n\n    /*Get or set object's computed value for current rule*/\n    cValue(object, fieldPath, value) {\n        // if(fieldPath.trim() === 'payoff'){\n        //     fieldPath += '[' + this.payoffIndex + ']';\n        // }\n\n        return object.computedValue(this.name, fieldPath, value);\n    }\n\n    baseProbability(edge) {\n        return edge.computedBaseProbability();\n    }\n\n    basePayoff(edge, payoffIndex) {\n        return edge.computedBasePayoff(undefined, payoffIndex || this.payoffIndex);\n    }\n\n    clearComputedValues(object) {\n        object.clearComputedValues(this.name);\n    }\n\n    add(a, b) {\n        return ExpressionEngine.add(a, b)\n    }\n\n    subtract(a, b) {\n        return ExpressionEngine.subtract(a, b)\n    }\n\n    divide(a, b) {\n        return ExpressionEngine.divide(a, b)\n    }\n\n    multiply(a, b) {\n        return ExpressionEngine.multiply(a, b)\n    }\n\n    max() {\n        return ExpressionEngine.max(...arguments)\n    }\n\n    min() {\n        return ExpressionEngine.min(...arguments)\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ExpressionEngine} from 'sd-expression-engine'\nimport {log} from 'sd-utils'\nimport {Operation} from \"./operation\";\nimport {TreeValidator} from \"../validation/tree-validator\";\n\n/*Subtree flipping operation*/\nexport class FlipSubtree extends Operation{\n\n    static $NAME = 'flipSubtree';\n    data;\n    expressionEngine;\n\n    constructor(data, expressionEngine) {\n        super(FlipSubtree.$NAME);\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.treeValidator = new TreeValidator(expressionEngine);\n    }\n\n    isApplicable(object){\n        return object instanceof model.ChanceNode\n    }\n\n    canPerform(node) {\n        if (!this.isApplicable(node)) {\n            return false;\n        }\n\n        if (!this.treeValidator.validate(this.data.getAllNodesInSubtree(node)).isValid()) { //check if the whole subtree is proper\n            return false;\n        }\n\n        if (node.childEdges.length < 1) {\n            return false;\n        }\n\n\n        var grandchildrenNumber = null;\n        var grandchildrenEdgeLabels = [];\n        var childrenEdgeLabelsSet = new Set();\n        var grandchildrenEdgeLabelsSet;\n        if (!node.childEdges.every(e=> {\n\n                var child = e.childNode;\n                if (!(child instanceof model.ChanceNode)) {\n                    return false;\n                }\n\n                if (childrenEdgeLabelsSet.has(e.name.trim())) { // edge labels should be unique\n                    return false;\n                }\n                childrenEdgeLabelsSet.add(e.name.trim());\n\n                if (grandchildrenNumber === null) {\n                    grandchildrenNumber = child.childEdges.length;\n                    if (grandchildrenNumber < 1) {\n                        return false;\n                    }\n                    child.childEdges.forEach(ge=> {\n                        grandchildrenEdgeLabels.push(ge.name.trim());\n                    });\n\n                    grandchildrenEdgeLabelsSet = new Set(grandchildrenEdgeLabels);\n\n                    if (grandchildrenEdgeLabelsSet.size !== grandchildrenEdgeLabels.length) { //grandchildren edge labels should be unique\n                        return false;\n                    }\n\n                    return true;\n                }\n\n                if (child.childEdges.length != grandchildrenNumber) {\n                    return false;\n                }\n\n                if (!child.childEdges.every((ge, i)=>grandchildrenEdgeLabels[i] === ge.name.trim())) {\n                    return false;\n                }\n\n                return true;\n\n            })) {\n\n            return false;\n        }\n\n        return true;\n    }\n\n    perform(root) {\n\n        var rootClone = this.data.cloneSubtree(root, true);\n        var oldChildrenNumber = root.childEdges.length;\n        var oldGrandChildrenNumber = root.childEdges[0].childNode.childEdges.length;\n\n        var childrenNumber = oldGrandChildrenNumber;\n        var grandChildrenNumber = oldChildrenNumber;\n\n        var callbacksDisabled = this.data.callbacksDisabled;\n        this.data.callbacksDisabled = true;\n\n\n        var childX = root.childEdges[0].childNode.location.x;\n        var topY = root.childEdges[0].childNode.childEdges[0].childNode.location.y;\n        var bottomY = root.childEdges[oldChildrenNumber - 1].childNode.childEdges[oldGrandChildrenNumber - 1].childNode.location.y;\n\n        var extentY = bottomY - topY;\n        var stepY = extentY / (childrenNumber + 1);\n\n        root.childEdges.slice().forEach(e=> this.data.removeNode(e.childNode));\n\n\n        for (var i = 0; i < childrenNumber; i++) {\n            var child = new model.ChanceNode(new model.Point(childX, topY + (i + 1) * stepY));\n            var edge = this.data.addNode(child, root);\n            edge.name = rootClone.childEdges[0].childNode.childEdges[i].name;\n\n            edge.probability = 0;\n\n            for (var j = 0; j < grandChildrenNumber; j++) {\n                var grandChild = rootClone.childEdges[j].childNode.childEdges[i].childNode;\n\n\n                var grandChildEdge = this.data.attachSubtree(grandChild, child);\n                grandChildEdge.name = rootClone.childEdges[j].name;\n                grandChildEdge.payoff = [\n                    ExpressionEngine.add(rootClone.childEdges[j].computedBasePayoff(undefined, 0), rootClone.childEdges[j].childNode.childEdges[i].computedBasePayoff(undefined, 0)),\n                    ExpressionEngine.add(rootClone.childEdges[j].computedBasePayoff(undefined, 1), rootClone.childEdges[j].childNode.childEdges[i].computedBasePayoff(undefined, 1)),\n                ];\n\n                grandChildEdge.probability = ExpressionEngine.multiply(rootClone.childEdges[j].computedBaseProbability(), rootClone.childEdges[j].childNode.childEdges[i].computedBaseProbability());\n                edge.probability = ExpressionEngine.add(edge.probability, grandChildEdge.probability);\n            }\n\n            var divideGrandChildEdgeProbability = p => ExpressionEngine.divide(p, edge.probability);\n            if (edge.probability.equals(0)) {\n                var prob = ExpressionEngine.divide(1, grandChildrenNumber);\n                divideGrandChildEdgeProbability = p => prob;\n            }\n\n            var probabilitySum = 0.0;\n            child.childEdges.forEach(grandChildEdge=> {\n                grandChildEdge.probability = divideGrandChildEdgeProbability(grandChildEdge.probability);\n                probabilitySum = ExpressionEngine.add(probabilitySum, grandChildEdge.probability);\n                grandChildEdge.probability = this.expressionEngine.serialize(grandChildEdge.probability)\n            });\n\n            this._normalizeProbabilitiesAfterFlip(child.childEdges, probabilitySum);\n            edge.probability = this.expressionEngine.serialize(edge.probability)\n        }\n        this._normalizeProbabilitiesAfterFlip(root.childEdges);\n\n\n        this.data.callbacksDisabled = callbacksDisabled;\n        this.data._fireNodeAddedCallback();\n    }\n\n    _normalizeProbabilitiesAfterFlip(childEdges, probabilitySum){\n        if(!probabilitySum){\n            probabilitySum = 0.0;\n            childEdges.forEach(e=> {\n                probabilitySum = ExpressionEngine.add(probabilitySum, e.probability);\n            });\n        }\n        if (!probabilitySum.equals(1)) {\n            log.info('Sum of the probabilities in child nodes is not equal to 1 : ', probabilitySum);\n            var newProbabilitySum = 0.0;\n            var cf = 1000000000000; //10^12\n            var prec = 12;\n            childEdges.forEach(e=> {\n                e.probability = parseInt(ExpressionEngine.round(e.probability, prec) * cf);\n                newProbabilitySum = newProbabilitySum + e.probability;\n            });\n            var rest = cf - newProbabilitySum;\n            log.info('Normalizing with rounding to precision: ' + prec, rest);\n            childEdges[0].probability = ExpressionEngine.add(rest, childEdges[0].probability);\n            newProbabilitySum = 0.0;\n            childEdges.forEach(e=> {\n                e.probability = this.expressionEngine.serialize(ExpressionEngine.divide(parseInt(e.probability), cf))\n            })\n        }\n    }\n}\n","\n/*Base class for complex operations on tree structure*/\nexport class Operation{\n\n    name;\n\n    constructor(name){\n        this.name = name;\n    }\n\n    //check if operation is potentially applicable for object\n    isApplicable(){\n        throw 'isApplicable function not implemented for operation: '+this.name\n    }\n\n    //check if can perform operation for applicable object\n    canPerform(object){\n        throw 'canPerform function not implemented for operation: '+this.name\n    }\n\n    perform(object){\n        throw 'perform function not implemented for operation: '+this.name\n    }\n\n\n}\n","import {FlipSubtree} from \"./flip-subtree\";\n\n\nexport class OperationsManager {\n\n    operations = [];\n    operationByName = {};\n\n    constructor(data, expressionEngine){\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.registerOperation(new FlipSubtree(data, expressionEngine));\n    }\n\n    registerOperation(operation){\n        this.operations.push(operation);\n        this.operationByName[operation.name] = operation;\n    }\n\n\n    getOperationByName(name){\n        return this.operationByName[name];\n    }\n\n    operationsForObject(object){\n        return this.operations.filter(op=>op.isApplicable(object))\n    }\n\n    setData(data){\n        this.data = data;\n        this.operations.forEach(o => o.data = data)\n    }\n}\n","\nexport class Decision{\n    node;\n    decisionValue; //index of  selected edge\n    children = [];\n    key;\n\n    constructor(node, decisionValue) {\n        this.node = node;\n        this.decisionValue = decisionValue;\n        this.key = Decision.generateKey(this);\n    }\n\n    static generateKey(decision, keyProperty='$id'){\n        var e = decision.node.childEdges[decision.decisionValue];\n        var key = decision.node[keyProperty]+\":\"+(e[keyProperty]? e[keyProperty] : decision.decisionValue+1);\n        return key.replace(/\\n/g, ' ');\n    }\n\n    addDecision(node, decisionValue){\n        var decision = new Decision(node, decisionValue);\n        this.children.push(decision);\n        this.key = Decision.generateKey(this);\n        return decision;\n    }\n\n    getDecision(decisionNode){\n        return Decision.getDecision(this, decisionNode)\n    }\n\n    static getDecision(decision, decisionNode){\n        if(decision.node===decisionNode || decision.node.$id === decisionNode.$id){\n            return decision;\n        }\n        for(var i=0; i<decision.children.length; i++){\n            var d = Decision.getDecision(decision.children[i], decisionNode);\n            if(d){\n                return d;\n            }\n        }\n    }\n\n    static toDecisionString(decision, extended=false, keyProperty='name', indent = ''){\n\n        var res = Decision.generateKey(decision, keyProperty);\n        var childrenRes = \"\";\n\n        decision.children.forEach(d=>{\n            if(childrenRes){\n                if(extended){\n                    childrenRes += '\\n'+indent;\n                }else{\n                    childrenRes += \", \"\n                }\n\n            }\n            childrenRes += Decision.toDecisionString(d,extended,keyProperty, indent+'\\t')\n        });\n        if(decision.children.length){\n            if(extended){\n                childrenRes =  '\\n'+indent +childrenRes;\n            }else{\n                childrenRes = \" - (\" + childrenRes + \")\";\n            }\n\n\n\n        }\n\n        return res+childrenRes;\n    }\n\n    toDecisionString(indent=false){\n        return Decision.toDecisionString(this, indent)\n    }\n}\n","import {Policy} from \"./policy\";\nimport {domain as model} from 'sd-model'\nimport {Utils} from 'sd-utils'\nimport {Decision} from \"./decision\";\n\nexport class PoliciesCollector{\n    policies = [];\n    ruleName=false;\n\n    constructor(root, optimalForRuleName){\n        this.ruleName = optimalForRuleName;\n        this.collect(root).forEach((decisions,i)=>{\n            this.policies.push(new Policy(\"#\"+(i+1), decisions));\n        });\n        if(this.policies.length===1){\n            this.policies[0].id = \"default\"\n        }\n    }\n\n    collect(root){\n        var nodeQueue = [root];\n        var node;\n        var decisionNodes = [];\n        while(nodeQueue.length){\n            node = nodeQueue.shift();\n\n            if(this.ruleName && !node.computedValue(this.ruleName, 'optimal')){\n                continue;\n            }\n\n            if(node instanceof model.DecisionNode){\n                decisionNodes.push(node);\n                continue;\n            }\n\n            node.childEdges.forEach((edge, i)=>{\n                nodeQueue.push(edge.childNode)\n            })\n        }\n\n        return Utils.cartesianProductOf(decisionNodes.map((decisionNode)=>{\n            var decisions= [];\n            decisionNode.childEdges.forEach((edge, i)=>{\n\n                if(this.ruleName && !edge.computedValue(this.ruleName, 'optimal')){\n                    return;\n                }\n\n                var childDecisions = this.collect(edge.childNode); //all possible child decisions (cartesian)\n                childDecisions.forEach(cd=>{\n                    var decision = new Decision(decisionNode, i);\n                    decisions.push(decision);\n                    decision.children = cd;\n                })\n\n            });\n            return decisions;\n        }));\n    }\n\n}\n","import {Decision} from \"./decision\";\n\nexport class Policy{\n    id;\n    decisions = [];\n\n    constructor(id, decisions){\n        this.id = id;\n        this.decisions = decisions || [];\n        this.key = Policy.generateKey(this);\n    }\n\n    addDecision(node, decisionValue){\n        var decision = new Decision(node, decisionValue);\n        this.decisions .push(decision);\n        this.key = Policy.generateKey(this);\n        return decision;\n    }\n\n    static generateKey(policy){\n        var key = \"\";\n        policy.decisions.forEach(d=>key+=(key? \"&\": \"\")+d.key);\n        return key;\n    }\n\n    equals(policy, ignoreId=true){\n        if(this.key != policy.key){\n            return false;\n        }\n\n        return ignoreId || this.id === policy.id;\n    }\n\n    getDecision(decisionNode){\n        return Policy.getDecision(this, decisionNode);\n    }\n\n    static getDecision(policy, decisionNode){\n        for(var i=0; i<policy.decisions.length; i++){\n            var decision = Decision.getDecision(policy.decisions[i], decisionNode);\n            if(decision){\n                return decision;\n            }\n        }\n        return null;\n    }\n\n    static toPolicyString(policy, extended=false, prependId=false){\n\n        var res = \"\";\n        policy.decisions.forEach(d=>{\n            if(res){\n                if(extended){\n                    res += \"\\n\"\n                }else{\n                    res += \", \"\n                }\n\n\n            }\n            res += Decision.toDecisionString(d, extended, 'name', '\\t');\n        });\n        if(prependId && policy.id!==undefined){\n            return policy.id+\" \"+res;\n        }\n        return res;\n    }\n\n\n    toPolicyString(indent=false){\n        return Policy.toPolicyString(this, indent)\n    }\n\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n\nexport class McdmWeightValueValidator{\n\n    additionalValidator = null;\n\n    constructor(additionalValidator){\n        this.additionalValidator = additionalValidator;\n    }\n\n    validate(value){\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        let parsed = parseFloat(value);\n        if(parsed !== Infinity && !ExpressionEngine.validate(value, {}, false)){\n            return false\n        }\n\n        value = ExpressionEngine.toNumber(value);\n        var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991; // Number.MAX_SAFE_INTEGER is undefined in IE\n        if(ExpressionEngine.compare(value, 0) < 0 || (value !== Infinity && ExpressionEngine.compare(value, maxSafeInteger)> 0)){\n            return false;\n        }\n\n        if(this.additionalValidator) {\n            return this.additionalValidator(ExpressionEngine.toNumber(value))\n        }\n\n        return true;\n    }\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n/*Computed base value validator*/\nexport class PayoffValueValidator{\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine=expressionEngine;\n    }\n\n    validate(value){\n\n\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        value = ExpressionEngine.toNumber(value);\n        var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991; // Number.MAX_SAFE_INTEGER in undefined in IE\n        return ExpressionEngine.compare(value, -maxSafeInteger) >= 0 && ExpressionEngine.compare(value, maxSafeInteger) <= 0;\n    }\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n/*Computed base value validator*/\nexport class ProbabilityValueValidator{\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine=expressionEngine;\n    }\n\n    validate(value, edge){\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        var value = ExpressionEngine.toNumber(value);\n        return value.compare(0) >= 0 && value.compare(1) <= 0;\n    }\n\n}\n","import {domain as model, ValidationResult} from \"sd-model\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {ProbabilityValueValidator} from \"./probability-value-validator\";\nimport {PayoffValueValidator} from \"./payoff-value-validator\";\n\nexport class TreeValidator {\n\n    expressionEngine;\n\n    constructor(expressionEngine) {\n        this.expressionEngine = expressionEngine;\n        this.probabilityValueValidator = new ProbabilityValueValidator(expressionEngine);\n        this.payoffValueValidator = new PayoffValueValidator(expressionEngine);\n    }\n\n    validate(nodes) {\n\n        var validationResult = new ValidationResult();\n\n        nodes.forEach(n=> {\n            this.validateNode(n, validationResult);\n        });\n\n        return validationResult;\n    }\n\n    validateNode(node, validationResult = new ValidationResult()) {\n\n        if (node instanceof model.TerminalNode) {\n            return;\n        }\n        if (!node.childEdges.length) {\n            validationResult.addError('incompletePath', node)\n        }\n\n        var probabilitySum = ExpressionEngine.toNumber(0);\n        var withHash = false;\n        node.childEdges.forEach((e, i)=> {\n            e.setValueValidity('probability', true);\n\n            if (node instanceof model.ChanceNode) {\n                var probability = e.computedBaseProbability();\n                if (!this.probabilityValueValidator.validate(probability)) {\n                    if (!ExpressionEngine.isHash(e.probability)) {\n                        validationResult.addError({name: 'invalidProbability', data: {'number': i + 1}}, node);\n                        e.setValueValidity('probability', false);\n                    }\n\n                } else {\n                    probabilitySum = ExpressionEngine.add(probabilitySum, probability);\n                }\n            }\n\n            e.payoff.forEach((rawPayoff, payoffIndex)=> {\n                var path = 'payoff[' + payoffIndex + ']';\n                e.setValueValidity(path, true);\n                var payoff = e.computedBasePayoff(undefined, payoffIndex);\n                if (!this.payoffValueValidator.validate(payoff)) {\n                    validationResult.addError({name: 'invalidPayoff', data: {'number': i + 1}}, node);\n                    e.setValueValidity(path, false);\n                }\n            })\n\n\n        });\n        if (node instanceof model.ChanceNode) {\n            if (isNaN(probabilitySum) || !probabilitySum.equals(1)) {\n                validationResult.addError('probabilityDoNotSumUpTo1', node);\n            }\n        }\n\n\n        return validationResult;\n    }\n}\n","export * from './src/index'\n"]}