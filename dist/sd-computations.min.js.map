{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/build/cjs/index.js","node_modules/idb/build/cjs/wrap-idb-value.js","src/computations-engine.js","src/computations-manager.js","src/computations-utils.js","src/expressions-evaluator.js","src/index.js","src/jobs/configurations/league-table/league-table-job-parameters.js","src/jobs/configurations/league-table/league-table-job.js","src/jobs/configurations/league-table/steps/calculate-step.js","src/jobs/configurations/payoffs-transformation/payoffs-transformation-job-parameters.js","src/jobs/configurations/payoffs-transformation/payoffs-transformation-job.js","src/jobs/configurations/recompute/recompute-job-parameters.js","src/jobs/configurations/recompute/recompute-job.js","src/jobs/configurations/sensitivity-analysis/n-way/sensitivity-analysis-job-parameters.js","src/jobs/configurations/sensitivity-analysis/n-way/sensitivity-analysis-job.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/init-policies-step.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/prepare-variables-step.js","src/jobs/configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job-parameters.js","src/jobs/configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job.js","src/jobs/configurations/sensitivity-analysis/probabilistic/steps/compute-policy-stats-step.js","src/jobs/configurations/sensitivity-analysis/probabilistic/steps/prob-calculate-step.js","src/jobs/configurations/sensitivity-analysis/spider-plot/spider-plot-job-parameters.js","src/jobs/configurations/sensitivity-analysis/spider-plot/spider-plot-job.js","src/jobs/configurations/sensitivity-analysis/spider-plot/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/steps/prepare-variables-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job-parameters.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job.js","src/jobs/engine/batch/batch-step.js","src/jobs/engine/exceptions/extendable-error.js","src/jobs/engine/exceptions/index.js","src/jobs/engine/exceptions/job-computation-exception.js","src/jobs/engine/exceptions/job-data-invalid-exception.js","src/jobs/engine/exceptions/job-execution-already-running-exception.js","src/jobs/engine/exceptions/job-instance-already-complete-exception.js","src/jobs/engine/exceptions/job-interrupted-exception.js","src/jobs/engine/exceptions/job-parameters-invalid-exception.js","src/jobs/engine/exceptions/job-restart-exception.js","src/jobs/engine/execution-context.js","src/jobs/engine/index.js","src/jobs/engine/job-execution-flag.js","src/jobs/engine/job-execution-listener.js","src/jobs/engine/job-execution.js","src/jobs/engine/job-instance.js","src/jobs/engine/job-key-generator.js","src/jobs/engine/job-launcher.js","src/jobs/engine/job-parameter-definition.js","src/jobs/engine/job-parameters.js","src/jobs/engine/job-repository/idb-job-repository.js","src/jobs/engine/job-repository/job-repository.js","src/jobs/engine/job-repository/simple-job-repository.js","src/jobs/engine/job-repository/timeout-job-repository.js","src/jobs/engine/job-result.js","src/jobs/engine/job-status.js","src/jobs/engine/job.js","src/jobs/engine/simple-job.js","src/jobs/engine/step-execution-listener.js","src/jobs/engine/step-execution.js","src/jobs/engine/step.js","src/jobs/index.js","src/jobs/job-instance-manager.js","src/jobs/job-worker.js","src/jobs/jobs-manager.js","src/objective/objective-rules-manager.js","src/objective/rules/expected-value-maximization-rule.js","src/objective/rules/expected-value-minimization-rule.js","src/objective/rules/index.js","src/objective/rules/max-max-rule.js","src/objective/rules/max-min-rule.js","src/objective/rules/maxi-max-rule.js","src/objective/rules/maxi-min-rule.js","src/objective/rules/min-max-rule.js","src/objective/rules/min-min-rule.js","src/objective/rules/mini-max-rule.js","src/objective/rules/mini-min-rule.js","src/objective/rules/multi-criteria-rule.js","src/objective/rules/objective-rule.js","src/operations/flip-subtree.js","src/operations/job-executing-operation.js","src/operations/operation.js","src/operations/operations-manager.js","src/operations/payoffs-transformation.js","src/policies/decision.js","src/policies/policies-collector.js","src/policies/policy.js","src/validation/mcdm-weight-value-validator.js","src/validation/payoff-value-validator.js","src/validation/probability-value-validator.js","src/validation/tree-validator.js","index.js"],"names":["require","r","e","n","t","o","i","f","c","u","a","Error","code","p","exports","call","length","1","module","Object","defineProperty","value","wrapIdbValue","readMethods","writeMethods","cachedMethods","Map","getMethod","target","prop","IDBDatabase","get","targetFuncName","replace","useIndex","isWrite","includes","IDBIndex","IDBObjectStore","prototype","method","_ref3","regeneratorRuntime","mark","_callee","storeName","_target","tx","_len","args","_key","_args","arguments","wrap","_context","prev","next","this","transaction","store","Array","index","shift","Promise","all","apply","done","abrupt","sent","stop","_x","set","replaceTraps","oldTraps","_objectSpread","receiver","has","unwrap","deleteDB","name","blocked","undefined","request","indexedDB","deleteDatabase","addEventListener","then","openDB","version","_ref","upgrade","blocking","terminated","open","openPromise","event","result","oldVersion","newVersion","db","catch","idbProxyableTypes","cursorAdvanceMethods","instanceOfAny","object","constructors","some","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","IDBTransaction","objectStoreNames","objectStore","wrapFunction","func","IDBCursor","advance","continue","continuePrimaryKey","_len2","_key2","_len3","_key3","storeNames","concat","sort","transformCachableValue","resolve","reject","unlisten","removeEventListener","complete","error","DOMException","cacheDonePromiseForTransaction","Proxy","IDBRequest","promise","success","newValue","callback","_sdUtils","_sdModel","_computationsManager","ComputationsEngineConfig","ComputationsManagerConfig","custom","_this","_classCallCheck","_super","logLevel","Utils","deepExtend","_assertThisInitialized","ComputationsEngine","ComputationsManager","config","data","_this2","_super2","global","getGlobalObject","isWorker","jobsManger","registerJobExecutionListener","beforeJob","jobExecution","reply","getDTO","afterJob","instance","queryableFunctions","runJob","jobName","jobParametersValues","dataDTO","DataModel","executeJob","jobExecutionId","execute","getErrorDTO","recompute","ruleName","evalCode","evalNumeric","objectiveRulesManager","setCurrentRuleByName","allRules","_checkValidityAndRecomputeObjective","onmessage","oEvent","hasOwnProperty","queryMethod","self","queryArguments","defaultReply","_get","_getPrototypeOf","setLogLevel","level","log","setLevel","message","TypeError","postMessage","queryMethodListener","queryMethodArguments","slice","_sdExpressionEngine","_objectiveRulesManager","_treeValidator","_operationsManager","_jobsManager","_expressionsEvaluator","_jobInstanceManager","_policy","_mcdmWeightValueValidator","worker","delegateRecomputation","url","jobRepositoryType","clearRepository","setConfig","expressionEngine","ExpressionEngine","expressionsEvaluator","ExpressionsEvaluator","ObjectiveRulesManager","JobsManager","workerUrl","repositoryType","operationsManager","OperationsManager","treeValidator","TreeValidator","mcdmWeightValueValidator","McdmWeightValueValidator","setData","checkValidityAndRecomputeObjective","params","getCurrentRule","d","getData","updateFrom","updateDisplayValues","updateDefaultCriterion1Weight","defaultCriterion1Weight","validationResults","evalExpressions","weightValid","validate","multiCriteria","getRoots","forEach","root","vr","getAllNodesInSubtree","push","isValid","recomputeTree","currentRule","getJobByName","operationsForObject","every","jobParamsValues","resolvePromiseAfterJobIsLaunched","run","jobInstanceManagerConfig","_this3","je","JobInstanceManager","operationName","performOperation","rules","getObjectiveRuleByName","isRuleName","reversePayoffs","tmp","weightLowerBound","flip","weightUpperBound","flipRule","Infinity","serialize","divide","_this4","policyToDisplay","displayPolicy","nodes","updateNodeDisplayValues","edges","updateEdgeDisplayValues","node","_this5","$DISPLAY_VALUE_NAMES","displayValue","getNodeDisplayValue","_this6","getEdgeDisplayValue","_this7","clearDisplayValues","displayPolicyForNode","policy","_this8","domain","DecisionNode","decision","Policy","getDecision","childEdge","childEdges","decisionValue","childNode","ChanceNode","TerminalNode","ComputationsUtils","min","max","extent","subtract","step","curr","add","toFloat","clearComputedValues","initScopes","debug","evalGlobalCode","clearTree","evalExpressionsForNode","clearExpressionScope","$codeDirty","$codeError","eval","expressionScope","edge","hasAssignmentExpression","payoff","parentNode","initScope","initScopeForNode","scope","probabilitySum","toNumber","hashEdges","invalidProb","rawPayoff","payoffIndex","path","isFieldValid","computedValue","evalPayoff","err","isHash","probability","warn","prob","compare","hash","parent","$parent","parentScope","cloneDeep","_computationsEngine","keys","key","enumerable","_index","_jobParameters","_jobParameterDefinition","LeagueTableJobParameters","JobParameters","definitions","JobParameterDefinition","PARAMETER_TYPE","STRING","BOOLEAN","NUMBER_EXPRESSION","v","allVals","computeNumberExpression","values","id","guid","nameOfCriterion1","nameOfCriterion2","extendedPolicyDescription","defaultWeight","_simpleJob","_calculateStep","_leagueTableJobParameters","LeagueTableJob","SimpleJob","jobRepository","initSteps","calculateStep","CalculateStep","addStep","jobResult","jobParameters","withHeaders","headers","payoffNames","rows","row","policies","rowCells","toPolicyString","payoffs","dominatedBy","extendedDominatedBy","incratio","optimal","optimalForDefaultWeight","_step","_jobStatus","_policiesCollector","Step","stepExecution","getJobParameters","rule","treeRoot","PoliciesCollector","payoffCoeffs","b","map","reduce","previousValue","currentValue","array","_prev$policies","_toConsumableArray","bestCost","bestCostRow","cmp","notDominated","filter","current","computeICER","splice","lastLELower","lastLELowerDef","sub","arr","exitStatus","JOB_STATUS","COMPLETED","Math","abs","PayoffsTransformationJobParameters","INTEGER","functionName","functionBody","functionArgumentName","makeClone","_payoffsTransformationJobParameters","_job","PayoffsTransformationJob","Job","$NAME","isRestartable","execution","findNodeById","rootTarget","cloneSubtree","allNodes","processNodePayoff","minY","Number","MAX_VALUE","maxY","MIN_VALUE","location","y","offset","move","attachSubtree","parentEdge","aggregatedPayoff","type","$TYPE","fill","computedBasePayoff","transformValue","toFraction","RecomputeJobParameters","_recomputeJobParameters","RecomputeJob","SensitivityAnalysisJobParameters","NUMBER","isUnique","failOnInvalidTree","_sensitivityAnalysisJobParameters","_prepareVariablesStep","_initPoliciesStep","SensitivityAnalysisJob","batchSize","PrepareVariablesStep","InitPoliciesStep","chunkSize","variableNames","roundVariables","policyIndex","variables","_variables","uniqueValues","Set","uniqueValuesNo","s","size","precision","notReadyVariablesIndexes","variableIndex","notReadyIndex","val","round","newReadyIndexes","uniqueVals","reverse","stepExecutions","total","steps","getProgress","_batchStep","_jobComputationException","BatchStep","getJobExecutionContext","variableValues","executionContext","put","startIndex","item","clear","variableName","valid","errorData","JobComputationException","items","isString","_computationsUtils","sequence","cartesianProductOf","ProbabilisticSensitivityAnalysisJobParameters","_probabilisticSensitivityAnalysisJobParameters","_sensitivityAnalysisJob","_probCalculateStep","_computePolicyStatsStep","ProbabilisticSensitivityAnalysisJob","ProbCalculateStep","ComputePolicyStatsStep","numberOfRuns","ruleByName","payoffsPerPolicy","maximization","medians","median","standardDeviations","std","policyIsBestProbabilities","policyToHighestPayoffCount","policyToLowestPayoffCount","expectedValues","runIndex","singleRunVariableValues","errors","evaluated","formula","variable","currentItemCount","updatePolicyStats","highestPayoff","lowestPayoff","bestPolicyIndexes","worstPolicyIndexes","zeroNum","equals","SpiderPlotJobParameters","_spiderPlotJobParameters","SpiderPlotJob","percentageRangeValues","percentageChangeRange","policiesCollector","defaultValues","getGlobalVariableNames","defVal","multiply","defaultPayoff","itemIndex","variableValue","_jobResult$data$rows","jobExecutionContext","variableExtents","extents","extentVariableValues","TornadoDiagramJobParameters","_tornadoDiagramJobParameters","TornadoDiagramJob","_jobInterruptedException","count","TOTAL_ITEM_COUNT_PROP","CURRENT_ITEM_COUNT_PROP","init","totalItemCount","setCurrentItemCount","getCurrentItemCount","setTotalItemCount","handleNextChunk","JobInterruptedException","postProcess","getTotalItemCount","checkJobExecutionFlags","terminateOnly","readNextChunk","chunk","processChunk","processedChunk","writeChunk","res","updateJobProgress","processItem","progress","jobInstance","updateJobExecutionProgress","checkExecutionFlags","ExtendableError","constructor","_extendableError","_jobDataInvalidException","_jobExecutionAlreadyRunningException","_jobInstanceAlreadyCompleteException","_jobParametersInvalidException","_jobRestartException","JobDataInvalidException","JobExecutionAlreadyRunningException","JobInstanceAlreadyCompleteException","JobParametersInvalidException","JobRestartException","ExecutionContext","context","dirty","clone","prevValue","filteredProperties","deepClone","cloneMethod","cloneDeepWith","cloneWith","assign","stack","indexOf","$ObjectWithIdAndEditableFields","findById","exceptions","_interopRequireWildcard","_executionContext","_exportNames","_jobExecution","_jobExecutionFlag","_jobExecutionListener","_jobInstance","_jobKeyGenerator","_jobLauncher","_stepExecution","_stepExecutionListener","STOP","JobExecutionListener","JobExecution","status","STARTING","UNKNOWN","startTime","createTime","Date","endTime","lastUpdated","failureExceptions","stepName","StepExecution","STOPPING","se","JobInstance","JobKeyGenerator","identifying","JobLauncher","jobWorker","dataModelSerializer","jobOrName","job","createJobParameters","createJobExecution","executionPromise","_execute","getLastJobExecution","lastExecution","jobParametersValidator","jobDataValidator","jobExecutionOrId","getJobExecutionById","info","DATE","COMPOSITE","typeOrNestedParametersDefinitions","minOccurs","maxOccurs","singleValueValidator","validator","nestedParameters","required","isArray","parsed","parseFloat","allValues","validateSingleValue","isDate","isInt","isNumber","isBoolean","isObject","nestedDef","_value","initDefinitions","initDefaultValues","def","defs","split","find","getDefinition","_jobRepository","_idb","_jobResult","IdbJobRepository","JobRepository","expressionsReviver","dbName","initDB","dbPromise","createObjectStore","jobExecutionsOS","createIndex","unique","jobInstanceDao","ObjectStoreDao","jobExecutionDao","jobExecutionProgressDao","jobExecutionFlagDao","stepExecutionDao","jobResultDao","_","generateJobInstanceKey","remove","findJobExecutions","jobExecutions","removeJobExecution","getJobResultByInstance","removeJobResult","findStepExecutions","removeStepExecution","jobResultId","revive","dto","reviveJobResult","getByIndex","reviveJobInstance","_this9","stepExecutionsDTOs","saveStepExecutionsDTOS","flag","_this10","savedExecutions","stepExecutionDTO","_this11","fetchJobExecutionRelations","jobExecutionDTO","_this12","reviveJobExecution","jobExecutionDtoList","_this13","fetched","fetchJobExecutionsRelations","_this14","getAllByIndex","dtos","reviveStepExecution","_this15","fetchRelationsAndRevive","sorted","getTime","_this16","executions","latest","dataModel","loadFromDTO","reviveFromDTO","mergeWith","dtoValue","_this17","reviveExecutionContext","objValue","srcValue","source","stepDTO","_this18","getLastJobExecutionByInstance","jobExecutionDto","reviveResultData","JobResult","_this19","indexName","_this20","getAll","_this21","_this22","_this23","delete","_this24","_this25","getAllKeys","jobByName","saveJobInstance","getJobInstance","generateKey","isRunning","ABANDONED","createJobInstance","_setNewState","createStateSnapshot","instanceAndExecutionContext","saveJobExecution","saveStepExecution","SimpleJobRepository","jobInstancesByKey","executionProgress","executionFlags","jobResults","forOwn","ji","ex","_simpleJobRepository","TimeoutJobRepository","valueToResolve","delay","setTimeout","createTimeoutPromise","STARTED","STOPPED","FAILED","EXECUTING","executionListeners","getJobParametersValidator","getJobDataValidator","updateStatus","getResult","updateProgress","listener","doExecute","saveJobResult","update","getJobExecutionFlag","JOB_EXECUTION_FLAG","getJobResultByExecution","handleNextStep","lastExecutedStepExecution","_execution$failureExc","prevStep","prevStepExecution","stepIndex","handleStep","isStopping","getLastStepExecution","lastStepExecution","stepExecutionPartOfExistingJobExecution","currentStepExecution","shouldStart","createStepExecution","isCompleted","isRestart","skipExecution","skipOnRestartIfCompleted","containsKey","addStepExecution","_currentStepExecution","stepStatus","completedSteps","StepExecutionListener","beforeStep","determineJobStatus","afterStep","close","engine","_jobWorker","JobInstanceManagerConfig","onJobStarted","onJobCompleted","onJobFailed","onJobStopped","onJobTerminated","onProgress","updateInterval","jobInstanceOrExecution","checkProgress","lastJobExecution","_possibleConstructorReturn","getProgressPercents","lastUpdateTime","callbacksThisArg","deregisterJobExecutionListener","getProgressFromExecution","forceUpdate","terminate","JobWorker","defaultListener","onError","listeners","Worker","onerror","deserializer","fn","thisArg","sendQuery","ruleNames","_idbJobRepository","_recomputeJob","_probabilisticSensitivityAnalysisJob","_timeoutJobRepository","_tornadoDiagramJob","_leagueTableJob","_spiderPlotJob","_payoffsTransformationJob","JobsManagerConfig","jobExecutionListeners","afterJobExecutionPromiseResolves","jobInstancesToTerminate","useWorker","initWorker","initRepository","registerJobs","jobLauncher","serializeData","getJsonReviver","getJsonReplacer","getJobExecutionProgress","saveJobExecutionFlag","removeJobInstance","_arguments","argsDeserializer","addListener","onJobFatalError","sensitivityAnalysisJob","probabilisticSensitivityAnalysisJob","setBatchSize","registerJob","registerExecutionListener","l","promiseResolve","_rules","model","_minMaxRule","_maxMinRule","_minMinRule","_maxMaxRule","currentRuleName","flipPair","addRule","ExpectedValueMaximizationRule","ExpectedValueMinimizationRule","MaxiMinRule","MaxiMaxRule","MiniMinRule","MiniMaxRule","minMax","MinMaxRule","maxMin","MaxMinRule","addFlipPair","minMin","MinMinRule","maxMax","MaxMaxRule","flipped","setDefaultCriterion1Weight","decisionPolicy","trace","time","setPayoffIndex","setDecisionPolicy","computePayoff","computeOptimal","clearDecisionPolicy","computedBaseProbability","rule1","rule2","_objectiveRule","ObjectiveRule","NAME","probabilityToEnter","cValue","computedPayoff","basePayoff","_expectedValueMaximizationRule","_expectedValueMinimizationRule","_maxiMaxRule","_maxiMinRule","_miniMaxRule","_miniMinRule","_multiCriteriaRule","MultiCriteriaRule","bestChildPayoff","bestCount","worstChildPayoff","worstCount","optimalEdge","maxBy","minBy","criterion1Weight","childrenPayoff","selectedIndexes","bestChild","basePayoffs","childCombinedPayoff","baseProbability","sumweight","ep","div","computeCombinedPayoff","combinedPayoff","decisionNode","childrenPayoffs","best","makeDecision","_makeDecision","worstChild","childPayoff","modifyChanceProbability","fieldPath","_operation","FlipSubtree","Operation","isApplicable","grandchildrenNumber","grandchildrenEdgeLabels","childrenEdgeLabelsSet","child","trim","ge","rootClone","oldChildrenNumber","oldGrandChildrenNumber","childrenNumber","grandChildrenNumber","callbacksDisabled","childX","x","topY","stepY","removeNode","Point","addNode","j","grandChild","grandChildEdge","divideGrandChildEdgeProbability","_normalizeProbabilitiesAfterFlip","_fireNodeAddedCallback","newProbabilitySum","parseInt","rest","JobExecutingOperation","_flipSubtree","_payoffsTransformation","operations","operationByName","registerOperation","PayoffsTransformation","operation","op","getOperationByName","perform","_jobExecutingOperation","Decision","children","keyProperty","extended","indent","childrenRes","toDecisionString","_decision","optimalForRuleName","collect","decisions","nodeQueue","decisionNodes","cd","prependId","ignoreId","additionalValidator","maxSafeInteger","MAX_SAFE_INTEGER","PayoffValueValidator","ProbabilityValueValidator","_probabilityValueValidator","_payoffValueValidator","probabilityValueValidator","payoffValueValidator","validationResult","ValidationResult","validateNode","addError","setValueValidity","number","isNaN"],"mappings":"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","file":"sd-computations.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar wrapIdbValue = require('./wrap-idb-value.js');\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrapIdbValue.wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrapIdbValue.wrap(request.result), event.oldVersion, event.newVersion, wrapIdbValue.wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrapIdbValue.wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nwrapIdbValue.replaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexports.unwrap = wrapIdbValue.unwrap;\nexports.wrap = wrapIdbValue.wrap;\nexports.deleteDB = deleteDB;\nexports.openDB = openDB;\n","'use strict';\n\nconst instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexports.instanceOfAny = instanceOfAny;\nexports.replaceTraps = replaceTraps;\nexports.reverseTransformCache = reverseTransformCache;\nexports.unwrap = unwrap;\nexports.wrap = wrap;\n","import {Utils, log} from \"sd-utils\";\nimport {DataModel} from \"sd-model\";\nimport {ComputationsManager} from \"./computations-manager\";\nimport {ComputationsManagerConfig} from \"./computations-manager\";\n\n\n\nexport class ComputationsEngineConfig extends ComputationsManagerConfig{\n    logLevel = 'warn';\n    constructor(custom) {\n        super();\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/**\n * Entry point class for standalone computation workers\n */\nexport class ComputationsEngine extends ComputationsManager{\n\n    global = Utils.getGlobalObject();\n    isWorker = Utils.isWorker();\n\n    constructor(config, data){\n        super(config, data);\n\n        if(this.isWorker) {\n            this.jobsManger.registerJobExecutionListener({\n                beforeJob: (jobExecution)=>{\n                    this.reply('beforeJob', jobExecution.getDTO());\n                },\n\n                afterJob: (jobExecution)=>{\n                    this.reply('afterJob', jobExecution.getDTO());\n                }\n            });\n\n            var instance = this;\n            this.queryableFunctions = {\n                runJob: function(jobName, jobParametersValues, dataDTO){\n                    // console.log(jobName, jobParameters, serializedData);\n                    var data = new DataModel(dataDTO);\n                    instance.runJob(jobName, jobParametersValues, data);\n                },\n                executeJob: function(jobExecutionId){\n                    instance.jobsManger.execute(jobExecutionId).catch(e=>{\n                        instance.reply('jobFatalError', jobExecutionId, Utils.getErrorDTO(e));\n                    })\n                },\n                recompute: function(dataDTO, ruleName, evalCode, evalNumeric){\n                    if(ruleName){\n                        instance.objectiveRulesManager.setCurrentRuleByName(ruleName);\n                    }\n                    var allRules = !ruleName;\n                    var data = new DataModel(dataDTO);\n                    instance._checkValidityAndRecomputeObjective(data, allRules, evalCode, evalNumeric)\n                    this.reply('recomputed', data.getDTO());\n                }\n            };\n\n            global.onmessage = function(oEvent) {\n                if (oEvent.data instanceof Object && oEvent.data.hasOwnProperty('queryMethod') && oEvent.data.hasOwnProperty('queryArguments')) {\n                    instance.queryableFunctions[oEvent.data.queryMethod].apply(self, oEvent.data.queryArguments);\n                } else {\n                    instance.defaultReply(oEvent.data);\n                }\n            };\n        }\n    }\n\n\n\n    setConfig(config) {\n        super.setConfig(config);\n        if(this.config.logLevel){\n            this.setLogLevel(this.config.logLevel);\n        }\n\n        return this;\n    }\n\n    setLogLevel(level){\n        log.setLevel(level)\n    }\n\n    defaultReply(message) {\n        this.reply('test', message);\n    }\n\n    reply() {\n        if (arguments.length < 1) {\n            throw new TypeError('reply - not enough arguments');\n        }\n        this.global.postMessage({\n            'queryMethodListener': arguments[0],\n            'queryMethodArguments': Array.prototype.slice.call(arguments, 1)\n        });\n    }\n}\n\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {Utils} from \"sd-utils\";\nimport {ObjectiveRulesManager} from \"./objective/objective-rules-manager\";\nimport {TreeValidator} from \"./validation/tree-validator\";\nimport {OperationsManager} from \"./operations/operations-manager\";\nimport {JobsManager} from \"./jobs/jobs-manager\";\nimport {ExpressionsEvaluator} from \"./expressions-evaluator\";\nimport {JobInstanceManager} from \"./jobs/job-instance-manager\";\nimport {domain as model} from \"sd-model\";\nimport {Policy} from \"./policies/policy\";\nimport {McdmWeightValueValidator} from \"./validation/mcdm-weight-value-validator\";\n\n/** Computation manager configuration object\n * @param custom configuration object to extend\n */\nexport class ComputationsManagerConfig {\n\n    /**\n     * logging level\n     * */\n    logLevel = null;\n\n    /**\n     * default objective rule name\n     * */\n    ruleName = null;\n\n    /**\n     * worker configuration object\n     * */\n    worker = {\n        /**\n         * delegate tree recomputation to worker\n         * */\n        delegateRecomputation: false,\n\n        /**\n         * worker url\n         * */\n        url: null\n    };\n\n    /**\n     * job repository to use, available types: idb, timeout, simple\n    * */\n    jobRepositoryType = 'idb';\n\n    /**\n     * clear repository after init\n     * */\n    clearRepository = false;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/** Computation manager\n* @param {object} config\n* @param {DataModel} data model object\n* */\nexport class ComputationsManager {\n\n    data;\n    expressionEngine;\n    expressionsEvaluator;\n    objectiveRulesManager;\n    operationsManager;\n    jobsManger;\n\n    treeValidator;\n\n    constructor(config, data = null) {\n        this.data = data;\n        this.setConfig(config);\n        this.expressionEngine = new ExpressionEngine();\n        this.expressionsEvaluator = new ExpressionsEvaluator(this.expressionEngine);\n        this.objectiveRulesManager = new ObjectiveRulesManager(this.expressionEngine, this.config.ruleName);\n\n        this.jobsManger = new JobsManager(this.expressionsEvaluator, this.objectiveRulesManager, {\n            workerUrl: this.config.worker.url,\n            repositoryType: this.config.jobRepositoryType,\n            clearRepository: this.config.clearRepository\n        });\n\n        this.operationsManager = new OperationsManager(this.data, this.expressionEngine, new JobsManager(this.expressionsEvaluator, this.objectiveRulesManager, {\n            repositoryType: 'timeout',\n        }));\n\n        this.treeValidator = new TreeValidator(this.expressionEngine);\n        this.mcdmWeightValueValidator = new McdmWeightValueValidator();\n    }\n\n    setConfig(config) {\n        this.config = new ComputationsManagerConfig(config);\n        return this;\n    }\n\n    setData(data){\n        this.data = data;\n        this.operationsManager.setData(data);\n    }\n\n\n    /** Alias function for checkValidityAndRecomputeObjective*/\n    recompute(){\n        return this.checkValidityAndRecomputeObjective(...arguments);\n    }\n\n    /**\n     * Checks validity of data model and recomputes objective rules\n     * @returns promise\n     * @param {boolean} allRules - recompute all objective rules\n     * @param {boolean} evalCode - evaluate code\n     * @param {boolean} evalNumeric - evaluate numeric expressions\n     */\n    checkValidityAndRecomputeObjective(allRules, evalCode = false, evalNumeric = true) {\n        return Promise.resolve().then(()=> {\n            if (this.config.worker.delegateRecomputation) {\n                var params = {\n                    evalCode: evalCode,\n                    evalNumeric: evalNumeric\n                };\n                if (!allRules) {\n                    params.ruleName = this.getCurrentRule().name;\n                }\n                return this.runJob(\"recompute\", params, this.data, false).then((jobExecution)=> {\n                    var d = jobExecution.getData();\n                    this.data.updateFrom(d)\n                })\n            }\n            return this._checkValidityAndRecomputeObjective(this.data, allRules, evalCode, evalNumeric);\n        }).then(()=> {\n            this.updateDisplayValues(this.data);\n        })\n\n    }\n\n    _checkValidityAndRecomputeObjective(data, allRules, evalCode = false, evalNumeric = true) {\n\n        this.objectiveRulesManager.updateDefaultCriterion1Weight(data.defaultCriterion1Weight);\n        data.validationResults = [];\n\n        if (evalCode || evalNumeric) {\n            this.expressionsEvaluator.evalExpressions(data, evalCode, evalNumeric);\n        }\n\n        var weightValid = this.mcdmWeightValueValidator.validate(data.defaultCriterion1Weight);\n        var multiCriteria = this.getCurrentRule().multiCriteria;\n\n\n        data.getRoots().forEach(root=> {\n            var vr = this.treeValidator.validate(data.getAllNodesInSubtree(root));\n            data.validationResults.push(vr);\n            if (vr.isValid() && (!multiCriteria || weightValid)) {\n                this.objectiveRulesManager.recomputeTree(root, allRules);\n            }\n        });\n    }\n\n    /**\n     * @returns {ObjectiveRule} current objective rule\n     * */\n    getCurrentRule() {\n        return this.objectiveRulesManager.currentRule;\n    }\n\n    /**\n     * Sets current objective rule\n     * @param {string} ruleName - name of objective rule\n     * */\n    setCurrentRuleByName(ruleName) {\n        this.config.ruleName = ruleName;\n        return this.objectiveRulesManager.setCurrentRuleByName(ruleName)\n    }\n\n    /**\n     *\n     *  @param {string} jobName\n     *  @returns {Job}\n     * */\n    getJobByName(jobName) {\n        return this.jobsManger.getJobByName(jobName);\n    }\n\n    /**\n     * @returns array of operations applicable to the given object (node or edge)\n     * @param object\n     */\n    operationsForObject(object) {\n        return this.operationsManager.operationsForObject(object);\n    }\n\n\n    /**\n     * Checks validity of data model without recomputation and revalidation\n     * @param {DataModel} data to check\n     */\n\n    isValid(data) {\n        data = data || this.data;\n        return data.validationResults.every(vr=>vr.isValid());\n    }\n    /**\n     * Run job\n     * @param {string} name - job name\n     * @param {object} jobParamsValues - job parameter values object\n     * @param {DataModel} data model\n     * @param {boolean} resolvePromiseAfterJobIsLaunched - immediately resolve promise with still running JobExecution\n     * @returns {Promise} resolving to JobExecution\n     */\n    runJob(name, jobParamsValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        return this.jobsManger.run(name, jobParamsValues, data || this.data, resolvePromiseAfterJobIsLaunched)\n    }\n\n    /**\n     * Run job using JobInstanceManager\n     * @param {string} name - job name\n     * @param {object} jobParamsValues - job parameter values object\n     * @param {JobInstanceManagerConfig} jobInstanceManagerConfig - JobInstanceManager configuration\n     * @returns {Promise} resolving to JobInstanceManager\n     */\n    runJobWithInstanceManager(name, jobParamsValues, jobInstanceManagerConfig) {\n        return this.runJob(name, jobParamsValues).then(je=> {\n            return new JobInstanceManager(this.jobsManger, je, jobInstanceManagerConfig);\n        })\n    }\n\n    performOperation(object, operationName, jobParamsValues){\n        return this.operationsManager.performOperation(object, operationName, jobParamsValues);\n    }\n\n    getObjectiveRules() {\n        return this.objectiveRulesManager.rules;\n    }\n\n    getObjectiveRuleByName(ruleName){\n        return this.objectiveRulesManager.getObjectiveRuleByName(ruleName)\n    }\n\n    isRuleName(ruleName) {\n        return this.objectiveRulesManager.isRuleName(ruleName)\n    }\n\n\n    flipCriteria(data){\n        data = data || this.data;\n        data.reversePayoffs();\n        let tmp = data.weightLowerBound;\n        data.weightLowerBound = this.flip(data.weightUpperBound);\n        data.weightUpperBound = this.flip(tmp);\n        data.defaultCriterion1Weight = this.flip(data.defaultCriterion1Weight);\n        this.objectiveRulesManager.flipRule();\n        return this.checkValidityAndRecomputeObjective(false);\n    }\n\n    flip(a){\n        if(a == Infinity){\n            return 0;\n        }\n\n        if(a == 0){\n            return Infinity;\n        }\n\n        return this.expressionEngine.serialize(ExpressionEngine.divide(1, a))\n    }\n\n    updateDisplayValues(data, policyToDisplay = null) {\n        data = data || this.data;\n        if (policyToDisplay) {\n            return this.displayPolicy(data, policyToDisplay);\n        }\n\n        data.nodes.forEach(n=> {\n            this.updateNodeDisplayValues(n);\n        });\n        data.edges.forEach(e=> {\n            this.updateEdgeDisplayValues(e);\n        })\n    }\n\n    updateNodeDisplayValues(node) {\n        node.$DISPLAY_VALUE_NAMES.forEach(n=>node.displayValue(n, this.objectiveRulesManager.getNodeDisplayValue(node, n)));\n    }\n\n    updateEdgeDisplayValues(e) {\n        e.$DISPLAY_VALUE_NAMES.forEach(n=>e.displayValue(n, this.objectiveRulesManager.getEdgeDisplayValue(e, n)));\n    }\n\n    displayPolicy(policyToDisplay, data) {\n\n\n        data = data || this.data;\n        data.nodes.forEach(n=> {\n            n.clearDisplayValues();\n        });\n        data.edges.forEach(e=> {\n            e.clearDisplayValues();\n        });\n        data.getRoots().forEach((root)=>this.displayPolicyForNode(root, policyToDisplay));\n    }\n\n    displayPolicyForNode(node, policy) {\n        if (node instanceof model.DecisionNode) {\n            var decision = Policy.getDecision(policy, node);\n            //console.log(decision, node, policy);\n            if (decision) {\n                node.displayValue('optimal', true)\n                var childEdge = node.childEdges[decision.decisionValue];\n                childEdge.displayValue('optimal', true)\n                return this.displayPolicyForNode(childEdge.childNode, policy)\n            }\n            return;\n        } else if(node instanceof model.ChanceNode){\n            node.displayValue('optimal', true);\n            node.childEdges.forEach(e=>{\n                e.displayValue('optimal', true);\n                this.displayPolicyForNode(e.childNode, policy)\n            })\n        }else if(node instanceof model.TerminalNode){\n            node.displayValue('optimal', true);\n        }\n\n\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nexport class ComputationsUtils{\n\n    static sequence(min, max, length) {\n        var extent = ExpressionEngine.subtract(max, min);\n        var result = [min];\n        var steps = length - 1;\n        if(!steps){\n            return result;\n        }\n        var step = ExpressionEngine.divide(extent,length - 1);\n        var curr = min;\n        for (var i = 0; i < length - 2; i++) {\n            curr = ExpressionEngine.add(curr, step);\n            result.push(ExpressionEngine.toFloat(curr));\n        }\n        result.push(max);\n        return result;\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {domain as model} from 'sd-model'\nimport {Utils, log} from 'sd-utils'\n\n/*Evaluates code and expressions in trees*/\nexport class ExpressionsEvaluator {\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine = expressionEngine;\n    }\n\n    clear(data){\n        data.nodes.forEach(n=>{\n            n.clearComputedValues();\n        });\n        data.edges.forEach(e=>{\n            e.clearComputedValues();\n        });\n    }\n\n    clearTree(data, root){\n        data.getAllNodesInSubtree(root).forEach(n=>{\n            n.clearComputedValues();\n            n.childEdges.forEach(e=>{\n                e.clearComputedValues();\n            })\n        })\n    }\n\n    evalExpressions(data, evalCode=true, evalNumeric=true, initScopes=false){\n        log.debug('evalExpressions evalCode:'+evalCode+' evalNumeric:'+evalNumeric);\n        if(evalCode){\n            this.evalGlobalCode(data);\n        }\n\n        data.getRoots().forEach(n=>{\n            this.clearTree(data, n);\n            this.evalExpressionsForNode(data, n, evalCode, evalNumeric,initScopes);\n        });\n\n    }\n\n    evalGlobalCode(data){\n        data.clearExpressionScope();\n        data.$codeDirty = false;\n        try{\n            data.$codeError = null;\n            this.expressionEngine.eval(data.code, false, data.expressionScope);\n        }catch (e){\n            data.$codeError = e;\n        }\n    }\n\n    evalPayoff(edge, index = 0) {\n        if (ExpressionEngine.hasAssignmentExpression(edge.payoff[index])) {\n            return null;\n        }\n        return this.expressionEngine.eval(edge.payoff[index], true, edge.parentNode.expressionScope);\n    }\n\n    evalExpressionsForNode(data, node, evalCode=true, evalNumeric=true, initScope=false) {\n        if(!node.expressionScope || initScope || evalCode){\n            this.initScopeForNode(data, node);\n        }\n        if(evalCode){\n            node.$codeDirty = false;\n            if(node.code){\n                try{\n                    node.$codeError = null;\n                    this.expressionEngine.eval(node.code, false, node.expressionScope);\n                }catch (e){\n                    node.$codeError = e;\n                    log.debug(e);\n                }\n            }\n        }\n\n        if(evalNumeric){\n            var scope = node.expressionScope;\n            var probabilitySum=ExpressionEngine.toNumber(0);\n            var hashEdges= [];\n            var invalidProb = false;\n\n            node.childEdges.forEach(e=>{\n                e.payoff.forEach((rawPayoff, payoffIndex)=> {\n                    let path = 'payoff[' + payoffIndex + ']';\n                    if(e.isFieldValid(path, true, false)){\n                        try{\n                            e.computedValue(null, path, this.evalPayoff(e, payoffIndex))\n                        }catch (err){\n                            //   Left empty intentionally\n                        }\n                    }\n                });\n\n\n\n                if(node instanceof model.ChanceNode){\n                    if(ExpressionEngine.isHash(e.probability)){\n                        hashEdges.push(e);\n                        return;\n                    }\n\n                    if(ExpressionEngine.hasAssignmentExpression(e.probability)){ //It should not occur here!\n                        log.warn(\"evalExpressionsForNode hasAssignmentExpression!\", e);\n                        return null;\n                    }\n\n                    if(e.isFieldValid('probability', true, false)){\n                        try{\n                            var prob = this.expressionEngine.eval(e.probability, true, scope);\n                            e.computedValue(null, 'probability', prob);\n                            probabilitySum = ExpressionEngine.add(probabilitySum, prob);\n                        }catch (err){\n                            invalidProb = true;\n                        }\n                    }else{\n                        invalidProb = true;\n                    }\n                }\n\n            });\n\n\n            if(node instanceof model.ChanceNode){\n                var computeHash = hashEdges.length && !invalidProb && (probabilitySum.compare(0) >= 0 && probabilitySum.compare(1) <= 0);\n\n                if(computeHash) {\n                    var hash = ExpressionEngine.divide(ExpressionEngine.subtract(1, probabilitySum), hashEdges.length);\n                    hashEdges.forEach(e=> {\n                        e.computedValue(null, 'probability', hash);\n                    });\n                }\n            }\n\n            node.childEdges.forEach(e=>{\n                this.evalExpressionsForNode(data, e.childNode, evalCode, evalNumeric, initScope);\n            });\n        }\n    }\n\n    initScopeForNode(data, node){\n        var parent = node.$parent;\n        var parentScope = parent?parent.expressionScope : data.expressionScope;\n        node.expressionScope = Utils.cloneDeep(parentScope);\n    }\n}\n","export * from './computations-engine'\nexport * from './computations-manager'\nexport * from './expressions-evaluator'\nexport * from './jobs/index'\n\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\n\nexport class LeagueTableJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"weightLowerBound\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v <= JobParameterDefinition.computeNumberExpression(allVals['weightUpperBound'])\n        }));\n        this.definitions.push(new JobParameterDefinition(\"defaultWeight\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v >= JobParameterDefinition.computeNumberExpression(allVals['weightLowerBound']) && v <= JobParameterDefinition.computeNumberExpression(allVals['weightUpperBound'])\n        }));\n        this.definitions.push(new JobParameterDefinition(\"weightUpperBound\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v >= JobParameterDefinition.computeNumberExpression(allVals['weightLowerBound'])\n        }));\n\n    }\n\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            nameOfCriterion1: 'Cost',\n            nameOfCriterion2: 'Effect',\n            extendedPolicyDescription: true,\n            weightLowerBound: 0,\n            defaultWeight: 0,\n            weightUpperBound: Infinity,\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Policy} from \"../../../policies/policy\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {LeagueTableJobParameters} from \"./league-table-job-parameters\";\n\n\nexport class LeagueTableJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"league-table\", jobRepository, expressionsEvaluator, objectiveRulesManager);\n        this.initSteps();\n    }\n\n    initSteps() {\n        this.calculateStep = new CalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        this.addStep(this.calculateStep);\n    }\n\n    createJobParameters(values) {\n        return new LeagueTableJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders = true) {\n        var result = [];\n        if (withHeaders) {\n            var headers = ['policy_id', 'policy', jobResult.payoffNames[0], jobResult.payoffNames[1], 'dominated_by', 'extended-dominated_by', 'incratio', 'optimal', 'optimal_for_default_weight'];\n            result.push(headers);\n        }\n\n        jobResult.rows.forEach(row => {\n            row.policies.forEach(policy=> {\n                var rowCells = [\n                    row.id,\n                    Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription),\n                    row.payoffs[1],\n                    row.payoffs[0],\n                    row.dominatedBy,\n                    row.extendedDominatedBy === null ? null : row.extendedDominatedBy[0] + ', ' + row.extendedDominatedBy[1],\n                    row.incratio,\n                    row.optimal,\n                    row.optimalForDefaultWeight\n                ];\n                result.push(rowCells);\n            })\n        });\n\n        return result;\n    }\n}\n","import {Step} from \"../../../engine/step\";\nimport {JOB_STATUS} from \"../../../engine/job-status\";\nimport {PoliciesCollector} from \"../../../../policies/policies-collector\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {TreeValidator} from \"../../../../validation/tree-validator\";\n\nexport class CalculateStep extends Step {\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var data = stepExecution.getData();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let rule = this.objectiveRulesManager.currentRule;\n        var treeRoot = data.getRoots()[0];\n        var policiesCollector = new PoliciesCollector(treeRoot);\n\n        var policies = policiesCollector.policies;\n\n\n        var payoffCoeffs = this.payoffCoeffs = rule.payoffCoeffs;\n\n        this.expressionsEvaluator.evalExpressions(data);\n        var vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n\n        if (!vr.isValid()) {\n            return stepExecution;\n        }\n\n        var compare = (a, b)=>(-payoffCoeffs[0] *  (b.payoffs[0] - a.payoffs[0])) || (-payoffCoeffs[1] *  (a.payoffs[1] - b.payoffs[1]));\n\n        var rows = policies.map(policy => {\n            this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n            return {\n                policies: [policy],\n                payoffs: treeRoot.computedValue(ruleName, 'payoff').slice(),\n                dominatedBy: null,\n                extendedDominatedBy: null,\n                incratio: null,\n                optimal: false,\n                optimalForDefaultWeight: false\n            }\n        }).sort(compare);\n\n        rows = rows.reduce((previousValue, currentValue, index, array)=>{\n            if(!previousValue.length){\n                return [currentValue]\n            }\n\n            let prev = previousValue[previousValue.length-1];\n            if(compare(prev, currentValue) == 0){\n                prev.policies.push(...currentValue.policies);\n                return previousValue\n            }\n            return previousValue.concat(currentValue)\n        }, []);\n\n        rows.sort((a, b)=>(payoffCoeffs[0] *  (a.payoffs[0] - b.payoffs[0])) || (-payoffCoeffs[1] *   (a.payoffs[1] - b.payoffs[1])));\n        rows.forEach((r, i)=> {\n            r.id = i+1;\n        });\n        // rows.sort(compare);\n        rows.sort((a, b)=>(-payoffCoeffs[0] *  (a.payoffs[0] - b.payoffs[0])) || (-payoffCoeffs[1] *   (a.payoffs[1] - b.payoffs[1])));\n\n        let bestCost = -payoffCoeffs[1] * Infinity,\n            bestCostRow = null;\n\n        let cmp= (a, b) => a > b;\n        if(payoffCoeffs[1]<0){\n            cmp= (a, b) => a < b;\n        }\n\n        rows.forEach((r, i)=> {\n            if (cmp(r.payoffs[1], bestCost)) {\n                bestCost = r.payoffs[1];\n                bestCostRow = r;\n            } else if(bestCostRow) {\n                r.dominatedBy = bestCostRow.id;\n            }\n        });\n\n        cmp = (a, b) => a < b;\n        if(payoffCoeffs[0] > 0 && payoffCoeffs[1] < 0){\n            cmp = (a, b) => a < b;\n        }else if(payoffCoeffs[0] < 0 && payoffCoeffs[1] > 0){\n            cmp = (a, b) => a < b;\n        }else if(payoffCoeffs[1]<0){\n            cmp = (a, b) => a > b;\n        }\n\n        const notDominated = rows.filter(r => !r.dominatedBy).sort((a, b) => (payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0])));\n        if (notDominated.length) {\n\n            notDominated[0].incratio = 0\n            let i = 1;\n            while (i < notDominated.length && notDominated.length > 1) {\n                let current = notDominated[i];\n                let prev = notDominated[i - 1];\n\n                current.incratio = this.computeICER(current, prev);\n\n                if (cmp(current.incratio, prev.incratio)) {\n                    prev.incratio = null;\n                    prev.extendedDominatedBy = [notDominated[i - 2].id, current.id];\n                    notDominated.splice(i - 1, 1);\n                    i--;\n                } else {\n                    i++;\n                }\n            }\n        }\n\n        let weightLowerBound = params.value(\"weightLowerBound\");\n        let defaultWeight = params.value(\"defaultWeight\");\n        let weightUpperBound = params.value(\"weightUpperBound\");\n\n        //mark optimal for weight in [weightLowerBound, weightUpperBound] and optimal for default Weight\n        let lastLELower = null;\n        let lastLELowerDef = null;\n        rows.slice().filter(r=>!r.dominatedBy && !r.extendedDominatedBy).sort((a, b) => {\n            let sub = a.incratio - b.incratio;\n            return sub ? sub : payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0])\n        }).forEach((row, i, arr)=>{\n\n            if(row.incratio < weightLowerBound){\n                lastLELower  = row;\n            }\n            if(row.incratio < defaultWeight){\n                lastLELowerDef  = row;\n            }\n\n            row.optimal = row.incratio >= weightLowerBound && row.incratio <= weightUpperBound;\n            row.optimalForDefaultWeight = row.incratio == defaultWeight;\n\n        });\n        if(lastLELower){\n            lastLELower.optimal = true;\n        }\n\n        if(lastLELowerDef){\n            lastLELowerDef.optimalForDefaultWeight = true;\n        }\n\n        rows.forEach(row=>{\n            row.payoffs[0] =  ExpressionEngine.toFloat(row.payoffs[0]);\n            row.payoffs[1] =  ExpressionEngine.toFloat(row.payoffs[1]);\n            row.incratio = row.incratio === null ? null : ExpressionEngine.toFloat(row.incratio);\n        });\n\n        jobResult.data = {\n            payoffNames: data.payoffNames.slice(),\n            payoffCoeffs : payoffCoeffs,\n            rows: rows.sort((a, b)=>(a.id - b.id)),\n            weightLowerBound: ExpressionEngine.toFloat(weightLowerBound),\n            defaultWeight: ExpressionEngine.toFloat(defaultWeight),\n            weightUpperBound: ExpressionEngine.toFloat(weightUpperBound)\n        };\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n\n    computeICER(r, prev){\n        let d = ExpressionEngine.subtract(r.payoffs[0], prev.payoffs[0]);\n        let n = ExpressionEngine.subtract(r.payoffs[1], prev.payoffs[1]);\n        if (d == 0){\n            if(n<0){\n                return - Infinity;\n            }\n            return Infinity;\n        }\n        return Math.abs(ExpressionEngine.divide(n, d));\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\nexport class PayoffsTransformationJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"objectId\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"functionName\", PARAMETER_TYPE.STRING).set('required', true));\n        this.definitions.push(new JobParameterDefinition(\"functionBody\", PARAMETER_TYPE.STRING).set('required', true));\n        this.definitions.push(new JobParameterDefinition(\"functionArgumentName\", PARAMETER_TYPE.STRING).set('required', true));\n        this.definitions.push(new JobParameterDefinition(\"payoffIndex\", PARAMETER_TYPE.INTEGER).set('required', false));\n        this.definitions.push(new JobParameterDefinition(\"makeClone\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            functionName: 'transformPayoff',\n            functionBody: 'log(p)',\n            functionArgumentName: 'p',\n            makeClone: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Step} from \"../../engine/step\";\nimport {JOB_STATUS} from \"../../engine/job-status\";\nimport {TreeValidator} from \"../../../validation/tree-validator\";\n\nimport {PayoffsTransformationJobParameters} from \"./payoffs-transformation-job-parameters\";\nimport {Job} from \"../../engine/job\";\nimport {domain as model} from \"sd-model\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport class PayoffsTransformationJob extends Job {\n\n    static $NAME = 'payoffs-transformation';\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(PayoffsTransformationJob.$NAME, jobRepository);\n        this.isRestartable = false;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(execution) {\n        var data = execution.getData();\n        var params = execution.jobParameters;\n        let functionName = params.value(\"functionName\");\n\n        const root = data.findNodeById(params.value(\"objectId\"));\n\n        let makeClone = params.value(\"makeClone\");\n\n        let rootTarget = makeClone ? data.cloneSubtree(root, true) : root;\n\n\n        rootTarget.code += '\\n' + functionName + '('+ params.value('functionArgumentName') + ') = ' + params.value('functionBody');\n\n        let allNodes = data.getAllNodesInSubtree(rootTarget);\n\n        this.processNodePayoff(rootTarget, params);\n\n        if(makeClone){\n            let minY = Number.MAX_VALUE;\n            let maxY = Number.MIN_VALUE;\n            allNodes.forEach(n => {\n                if (n.location.y < minY) {\n                    minY = n.location.y;\n                }\n                if (n.location.y > maxY) {\n                    maxY = n.location.y;\n                }\n\n            });\n\n            let extentY = maxY - minY;\n            let margin = 30;\n            let offset = extentY + margin;\n\n\n            rootTarget.move(0, offset);\n            data.attachSubtree(rootTarget);\n        }\n\n        return execution;\n    }\n\n    processNodePayoff(node, params, parentEdge = null, aggregatedPayoff = [0, 0]){\n        const payoffIndex = params.value(\"payoffIndex\");\n        if(node.type === model.TerminalNode.$TYPE){\n            if (payoffIndex === null || payoffIndex === undefined) {\n                parentEdge.payoff = aggregatedPayoff.map(p => this.transformValue(params, p));\n            } else {\n                parentEdge.payoff[payoffIndex] = this.transformValue(params, aggregatedPayoff[payoffIndex]);\n            }\n\n            return;\n        }\n\n        if (parentEdge) {\n            if (payoffIndex === null || payoffIndex === undefined) {\n                parentEdge.payoff.fill(0);\n            } else {\n                parentEdge.payoff[payoffIndex] = 0;\n            }\n\n        }\n\n\n        node.childEdges.forEach((e) => {\n            this.processNodePayoff(e.childNode, params, e, aggregatedPayoff.map((p,i) => ExpressionEngine.add(p, e.computedBasePayoff(undefined, i))))\n        })\n    }\n\n    transformValue(params, p) {\n        return params.value(\"functionName\") + '(' + ExpressionEngine.toNumber(p).toFraction(false) + ')';\n    }\n\n    createJobParameters(values) {\n        return new PayoffsTransformationJobParameters(values);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\nexport class RecomputeJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING).set('required', false));\n        this.definitions.push(new JobParameterDefinition(\"evalCode\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"evalNumeric\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            ruleName: null, //recompute all rules\n            evalCode: true,\n            evalNumeric: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Step} from \"../../engine/step\";\nimport {JOB_STATUS} from \"../../engine/job-status\";\nimport {TreeValidator} from \"../../../validation/tree-validator\";\nimport {BatchStep} from \"../../engine/batch/batch-step\";\nimport {RecomputeJobParameters} from \"./recompute-job-parameters\";\nimport {Job} from \"../../engine/job\";\n\nexport class RecomputeJob extends Job {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"recompute\", jobRepository);\n        this.isRestartable = false;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(execution) {\n        var data = execution.getData();\n        var params = execution.jobParameters;\n        var ruleName = params.value(\"ruleName\");\n        var allRules = !ruleName;\n        if(ruleName){\n            this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        }\n        this.checkValidityAndRecomputeObjective(data, allRules, params.value(\"evalCode\"), params.value(\"evalNumeric\"))\n        return execution;\n    }\n\n    checkValidityAndRecomputeObjective(data, allRules, evalCode, evalNumeric) {\n        data.validationResults = [];\n\n        if(evalCode||evalNumeric){\n            this.expressionsEvaluator.evalExpressions(data, evalCode, evalNumeric);\n        }\n\n        data.getRoots().forEach(root=> {\n            var vr = this.treeValidator.validate(data.getAllNodesInSubtree(root));\n            data.validationResults.push(vr);\n            if (vr.isValid()) {\n                this.objectiveRulesManager.recomputeTree(root, allRules);\n            }\n        });\n    }\n\n    createJobParameters(values) {\n        return new RecomputeJobParameters(values);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class SensitivityAnalysisJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"min\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"max\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 2),\n            ], 1, Infinity, false,\n            v => v[\"min\"] < v[\"max\"],\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ))\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            extendedPolicyDescription: true,\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {SensitivityAnalysisJobParameters} from \"./sensitivity-analysis-job-parameters\";\nimport {PrepareVariablesStep} from \"./steps/prepare-variables-step\";\nimport {InitPoliciesStep} from \"./steps/init-policies-step\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {Policy} from \"../../../../policies/policy\";\nimport {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\n\nexport class SensitivityAnalysisJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize=5) {\n        super(\"sensitivity-analysis\", jobRepository, expressionsEvaluator, objectiveRulesManager);\n        this.batchSize = 5;\n        this.initSteps();\n    }\n\n    initSteps(){\n        this.addStep(new PrepareVariablesStep(this.jobRepository, this.expressionsEvaluator.expressionEngine));\n        this.addStep(new InitPoliciesStep(this.jobRepository));\n        this.calculateStep = new CalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager, this.batchSize);\n        this.addStep(this.calculateStep);\n    }\n\n    createJobParameters(values) {\n        return new SensitivityAnalysisJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n    setBatchSize(batchSize){\n        this.batchSize = batchSize;\n        this.calculateStep.chunkSize = batchSize;\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n        var result = [];\n        if(withHeaders){\n            var headers = ['policy_number', 'policy'];\n            jobResult.variableNames.forEach(n=>headers.push(n));\n            headers.push('payoff');\n            result.push(headers);\n        }\n\n        var roundVariables = !!jobParameters.values.roundVariables;\n        if(roundVariables){\n            this.roundVariables(jobResult);\n        }\n\n        jobResult.rows.forEach(row => {\n            var policy = jobResult.policies[row.policyIndex];\n            var rowCells = [row.policyIndex+1, Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription)];\n            row.variables.forEach(v=> rowCells.push(v));\n            rowCells.push(row.payoff);\n            result.push(rowCells);\n\n            if(row._variables){ //revert original variables\n                row.variables = row._variables;\n                delete row._variables;\n            }\n        });\n\n        return result;\n    }\n\n    roundVariables(jobResult){\n        var uniqueValues = jobResult.variableNames.map(()=>new Set());\n\n        jobResult.rows.forEach(row => {\n            row._variables = row.variables.slice(); // save original row variables\n            row.variables.forEach((v,i)=> {\n                uniqueValues[i].add(v)\n            });\n        });\n\n        var uniqueValuesNo = uniqueValues.map((s)=>s.size);\n        var maxPrecision = 14;\n        var precision = 2;\n        var notReadyVariablesIndexes = jobResult.variableNames.map((v,i)=>i);\n        while(precision<=maxPrecision && notReadyVariablesIndexes.length){\n            uniqueValues = notReadyVariablesIndexes.map(()=>new Set());\n            jobResult.rows.forEach(row => {\n                notReadyVariablesIndexes.forEach((variableIndex, notReadyIndex)=>{\n\n                    var val = row._variables[variableIndex];\n                    val = Utils.round(val, precision);\n                    uniqueValues[notReadyIndex].add(val);\n\n                    row.variables[variableIndex] = val;\n                })\n            });\n\n            var newReadyIndexes = [];\n            uniqueValues.forEach((uniqueVals, notReadyIndex)=>{\n                var origUniqueCount = uniqueValuesNo[notReadyVariablesIndexes[notReadyIndex]] ;\n                if(origUniqueCount==uniqueVals.size){ //ready in previous iteration\n                    newReadyIndexes.push(notReadyIndex);\n                }\n            });\n            if(newReadyIndexes.length) { //revert values to prev iteration\n                newReadyIndexes.reverse();\n                newReadyIndexes.forEach(notReadyIndex=>{\n                    notReadyVariablesIndexes.splice(notReadyIndex, 1);\n                })\n            }\n            precision++;\n        }\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n\n        if (execution.stepExecutions.length <= 2) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[2].getProgress(execution.stepExecutions[2]);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize) {\n        super(\"calculate_step\", jobRepository, batchSize);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        var jobExecutionContext = stepExecution.getJobExecutionContext();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        var variableValues = jobResult.data.variableValues;\n        var variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n\n\n        if (!jobResult.data.rows) {\n            jobResult.data.rows = [];\n            jobResult.data.variableNames = variableNames;\n        }\n\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        var variableValues = jobResult.data.variableValues;\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n\n    processItem(stepExecution, item) {\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n        var failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        var data = stepExecution.getData();\n        var treeRoot = data.getRoots()[0];\n        var variableNames = stepExecution.executionContext.get(\"variableNames\");\n        var policies = stepExecution.getJobExecutionContext().get(\"policies\");\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n        variableNames.forEach((variableName, i)=> {\n            data.expressionScope[variableName] = item[i];\n        });\n\n        this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n        var vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n\n        var valid = vr.isValid();\n\n        if(!valid && failOnInvalidTree){\n            let errorData = {\n                variables: {}\n            };\n            variableNames.forEach((variableName, i)=> {\n                errorData.variables[variableName] = item[i];\n            });\n            throw new JobComputationException(\"computations\", errorData)\n        }\n\n        var payoffs = [];\n\n        policies.forEach(policy=> {\n            var payoff = 'n/a';\n            if (valid) {\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n            }\n            payoffs.push(payoff);\n        });\n\n        return {\n            policies: policies,\n            variables: item,\n            payoffs: payoffs\n        };\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var extendedPolicyDescription = params.value(\"extendedPolicyDescription\");\n\n        items.forEach(item=> {\n            if (!item) {\n                return;\n            }\n            item.policies.forEach((policy, i)=> {\n                var variables = item.variables.map(v => this.toFloat(v));\n\n                var payoff = item.payoffs[i];\n                var row = {\n                    policyIndex: i,\n                    variables: variables,\n                    payoff: Utils.isString(payoff) ? payoff : this.toFloat(payoff)\n                };\n                jobResult.data.rows.push(row);\n            })\n        })\n    }\n\n    postProcess(stepExecution, jobResult) {\n        delete jobResult.data.variableValues;\n    }\n\n\n    toFloat(v) {\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\n\nexport class InitPoliciesStep extends Step {\n    constructor(jobRepository) {\n        super(\"init_policies\", jobRepository);\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var data = stepExecution.getData();\n        var treeRoot = data.getRoots()[0];\n        var policiesCollector = new PoliciesCollector(treeRoot);\n\n        var policies = policiesCollector.policies;\n        stepExecution.getJobExecutionContext().put(\"policies\", policies);\n\n        if(!jobResult.data){\n            jobResult.data={}\n        }\n\n        jobResult.data.policies = policies;\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class PrepareVariablesStep extends Step {\n    constructor(jobRepository, expressionEngine) {\n        super(\"prepare_variables\", jobRepository);\n        this.expressionEngine = expressionEngine;\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n\n        var variableValues = [];\n        variables.forEach(v=> {\n            variableValues.push(ComputationsUtils.sequence(v.min, v.max, v.length));\n        });\n        variableValues = Utils.cartesianProductOf(variableValues);\n        jobResult.data={\n            variableValues: variableValues\n        };\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class ProbabilisticSensitivityAnalysisJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"numberOfRuns\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v > 0));\n\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"formula\", PARAMETER_TYPE.NUMBER_EXPRESSION)\n            ], 1, Infinity, false,\n            null,\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ))\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            extendedPolicyDescription: true,\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {ProbabilisticSensitivityAnalysisJobParameters} from \"./probabilistic-sensitivity-analysis-job-parameters\";\nimport {InitPoliciesStep} from \"../n-way/steps/init-policies-step\";\nimport {SensitivityAnalysisJob} from \"../n-way/sensitivity-analysis-job\";\nimport {ProbCalculateStep} from \"./steps/prob-calculate-step\";\nimport {ComputePolicyStatsStep} from \"./steps/compute-policy-stats-step\";\n\nexport class ProbabilisticSensitivityAnalysisJob extends SensitivityAnalysisJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize=5) {\n        super(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize);\n        this.name = \"probabilistic-sensitivity-analysis\";\n    }\n\n    initSteps() {\n        this.addStep(new InitPoliciesStep(this.jobRepository));\n        this.calculateStep = new ProbCalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager, this.batchSize);\n        this.addStep(this.calculateStep);\n        this.addStep(new ComputePolicyStatsStep(this.expressionsEvaluator.expressionEngine, this.objectiveRulesManager, this.jobRepository));\n    }\n\n    createJobParameters(values) {\n        return new ProbabilisticSensitivityAnalysisJobParameters(values);\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution) {\n\n        if (execution.stepExecutions.length <= 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[1].getProgress(execution.stepExecutions[1]);\n    }\n}\n","import {log, Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport class ComputePolicyStatsStep extends Step {\n    constructor(expressionEngine, objectiveRulesManager, jobRepository) {\n        super(\"compute_policy_stats\", jobRepository);\n        this.expressionEngine = expressionEngine;\n        this.objectiveRulesManager = objectiveRulesManager;\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var numberOfRuns = params.value(\"numberOfRuns\");\n        var ruleName = params.value(\"ruleName\");\n\n        let rule = this.objectiveRulesManager.ruleByName[ruleName];\n\n\n        var payoffsPerPolicy = jobResult.data.policies.map(()=>[]);\n\n        jobResult.data.rows.forEach(row=> {\n            payoffsPerPolicy[row.policyIndex].push(Utils.isString(row.payoff) ? 0 : row.payoff)\n        });\n\n        log.debug('payoffsPerPolicy', payoffsPerPolicy, jobResult.data.rows.length, rule.maximization);\n\n        jobResult.data.medians = payoffsPerPolicy.map(payoffs=>ExpressionEngine.median(payoffs));\n        jobResult.data.standardDeviations = payoffsPerPolicy.map(payoffs=>ExpressionEngine.std(payoffs));\n\n        if (rule.maximization) {\n            jobResult.data.policyIsBestProbabilities = jobResult.data.policyToHighestPayoffCount.map(v=>ExpressionEngine.toFloat(ExpressionEngine.divide(v, numberOfRuns)));\n        } else {\n            jobResult.data.policyIsBestProbabilities = jobResult.data.policyToLowestPayoffCount.map(v=>ExpressionEngine.toFloat(ExpressionEngine.divide(v, numberOfRuns)));\n        }\n\n        jobResult.data.policyToHighestPayoffCount = jobResult.data.policyToHighestPayoffCount.map(v=>ExpressionEngine.toFloat(v));\n        jobResult.data.policyToLowestPayoffCount = jobResult.data.policyToLowestPayoffCount.map(v=>ExpressionEngine.toFloat(v));\n\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {CalculateStep} from \"../../n-way/steps/calculate-step\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\n\nexport class ProbCalculateStep extends CalculateStep {\n\n    init(stepExecution, jobResult) {\n        var jobExecutionContext = stepExecution.getJobExecutionContext();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        var variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n\n        if(!jobResult.data.rows){\n            jobResult.data.rows = [];\n            jobResult.data.variableNames = variableNames;\n            jobResult.data.expectedValues = Utils.fill(new Array(jobResult.data.policies.length), 0);\n            jobResult.data.policyToHighestPayoffCount = Utils.fill(new Array(jobResult.data.policies.length), 0);\n            jobResult.data.policyToLowestPayoffCount = Utils.fill(new Array(jobResult.data.policies.length), 0);\n        }\n\n        return params.value(\"numberOfRuns\");\n    }\n\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n        var data = stepExecution.getData();\n        var variableValues = [];\n        for(var runIndex=0; runIndex<chunkSize; runIndex++){\n            var singleRunVariableValues = [];\n            var errors = [];\n            variables.forEach(v=> {\n                try{\n                    var evaluated = this.expressionsEvaluator.expressionEngine.eval(v.formula, true, Utils.cloneDeep(data.expressionScope));\n                    singleRunVariableValues.push(ExpressionEngine.toFloat(evaluated));\n                }catch(e){\n                    errors.push({\n                        variable: v,\n                        error: e\n                    });\n                }\n\n            });\n            if(errors.length) {\n                var errorData = {variables: []};\n                errors.forEach(e=>{\n                    errorData.variables[e.variable.name] = e.error.message;\n                });\n                throw new JobComputationException(\"param-computation\", errorData)\n            }\n            variableValues.push(singleRunVariableValues)\n        }\n\n        return variableValues;\n    }\n\n    processItem(stepExecution, item, currentItemCount, jobResult) {\n        var r = super.processItem(stepExecution, item, jobResult);\n\n        var params = stepExecution.getJobParameters();\n        var numberOfRuns = params.value(\"numberOfRuns\");\n        var policies = stepExecution.getJobExecutionContext().get(\"policies\");\n\n        this.updatePolicyStats(r, policies, numberOfRuns, jobResult);\n\n        return r;\n    }\n\n    updatePolicyStats(r, policies, numberOfRuns, jobResult){\n        var highestPayoff = -Infinity;\n        var lowestPayoff = Infinity;\n        var bestPolicyIndexes = [];\n        var worstPolicyIndexes = [];\n\n        var zeroNum = ExpressionEngine.toNumber(0);\n\n        policies.forEach((policy,i)=>{\n            let payoff = r.payoffs[i];\n            if(Utils.isString(payoff)){\n                payoff = zeroNum;\n            }\n            if(payoff < lowestPayoff){\n                lowestPayoff = payoff;\n                worstPolicyIndexes = [i];\n            }else if(payoff.equals(lowestPayoff)){\n                worstPolicyIndexes.push(i)\n            }\n            if(payoff > highestPayoff){\n                highestPayoff = payoff;\n                bestPolicyIndexes = [i]\n            }else if(payoff.equals(highestPayoff)){\n                bestPolicyIndexes.push(i)\n            }\n\n            jobResult.data.expectedValues[i] = ExpressionEngine.add(jobResult.data.expectedValues[i], ExpressionEngine.divide(payoff, numberOfRuns));\n        });\n\n        bestPolicyIndexes.forEach(policyIndex=>{\n            jobResult.data.policyToHighestPayoffCount[policyIndex] = ExpressionEngine.add(jobResult.data.policyToHighestPayoffCount[policyIndex], ExpressionEngine.divide(1, bestPolicyIndexes.length))\n        });\n\n        worstPolicyIndexes.forEach(policyIndex=>{\n            jobResult.data.policyToLowestPayoffCount[policyIndex] = ExpressionEngine.add(jobResult.data.policyToLowestPayoffCount[policyIndex], ExpressionEngine.divide(1, worstPolicyIndexes.length))\n        });\n    }\n\n\n    postProcess(stepExecution, jobResult) {\n        jobResult.data.expectedValues = jobResult.data.expectedValues.map(v=>this.toFloat(v));\n    }\n\n\n    toFloat(v) {\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class SpiderPlotJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"percentageChangeRange\", PARAMETER_TYPE.NUMBER).set(\"singleValueValidator\", v => v > 0 && v <=100));\n        this.definitions.push(new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 0));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n            ], 1, Infinity, false,\n            null,\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {SpiderPlotJobParameters} from \"./spider-plot-job-parameters\";\n\nexport class SpiderPlotJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"spider-plot\", jobRepository);\n        this.addStep(new CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager));\n    }\n\n    createJobParameters(values) {\n        return new SpiderPlotJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n        if (execution.stepExecutions.length < 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[0].getProgress(execution.stepExecutions[0]);\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n\n        let result = [];\n        if(withHeaders){\n            result.push(['variable_name', 'policy_no'].concat(jobResult.percentageRangeValues));\n        }\n\n        jobResult.rows.forEach((row, index) => {\n\n            result.push(...row.payoffs.map((payoffs, policyIndex)=>[\n                row.variableName,\n                policyIndex+1,\n                ...payoffs\n            ]));\n\n        });\n\n        return result;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository, 1);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        let jobExecutionContext = stepExecution.getJobExecutionContext();\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let percentageChangeRange = params.value(\"percentageChangeRange\");\n        let length = params.value(\"length\");\n        let variables = params.value(\"variables\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n        let data = stepExecution.getData();\n\n        let treeRoot = data.getRoots()[0];\n        let payoff = treeRoot.computedValue(ruleName, 'payoff');\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalExpressions(data);\n\n        this.objectiveRulesManager.recomputeTree(treeRoot, false);\n\n        let policiesCollector = new PoliciesCollector(treeRoot, ruleName);\n\n        let defaultValues = {};\n        data.getGlobalVariableNames().forEach(name => {\n            let v = data.expressionScope[name];\n            try {\n                defaultValues[name] = this.toFloat(v);\n            } catch (e) {\n                throw new JobComputationException(\"error computing float value of a variable\", {\n                    name: name,\n                    value: v,\n                })\n            }\n        });\n\n\n        let percentageRangeValues = ComputationsUtils.sequence(-percentageChangeRange, percentageChangeRange, 2*length+1);\n\n        let variableValues = [];\n\n        variables.forEach(v=> {\n            let defVal = defaultValues[v.name];\n            variableValues.push(percentageRangeValues.map(p=> this.toFloat(ExpressionEngine.add(defVal, ExpressionEngine.multiply(ExpressionEngine.divide(p,100), defVal)))));\n        });\n\n\n        if(!jobResult.data){\n            jobResult.data = {\n                variableNames: variableNames,\n                defaultValues: defaultValues,\n                percentageRangeValues: percentageRangeValues,\n                defaultPayoff: this.toFloat(payoff)[0],\n                policies: policiesCollector.policies,\n                rows: []\n            };\n        }\n\n        stepExecution.getJobExecutionContext().put(\"variableValues\", variableValues);\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize) {\n        let variableValues = stepExecution.getJobExecutionContext().get(\"variableValues\");\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n    processItem(stepExecution, item, itemIndex, jobResult) {\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        let data = stepExecution.getData();\n        let treeRoot = data.getRoots()[0];\n        let variableNames = stepExecution.executionContext.get(\"variableNames\");\n        let variableName = variableNames[itemIndex];\n\n\n        let payoffs = jobResult.data.policies.map(policy=>[]);\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n\n\n        item.forEach(variableValue=>{\n\n            data.expressionScope[variableName] = variableValue;\n\n            this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n            let vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n            let valid = vr.isValid();\n\n            if(!valid && failOnInvalidTree){\n                let errorData = {\n                    variables: {}\n                };\n                errorData.variables[variableName] = variableValue;\n\n                throw new JobComputationException(\"computations\", errorData)\n            }\n\n            jobResult.data.policies.forEach((policy, policyIndex)=>{\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                let payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n                payoffs[policyIndex].push(this.toFloat(payoff));\n            });\n\n        });\n\n        return {\n            variableName: variableName,\n            variableIndex: itemIndex,\n            variableValues: item,\n            payoffs: payoffs\n        };\n\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        jobResult.data.rows.push(...items);\n    }\n\n\n    toFloat(v){\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository, 1);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        let jobExecutionContext = stepExecution.getJobExecutionContext();\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let variableValues = jobExecutionContext.get(\"variableValues\");\n        let variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n        let data = stepExecution.getData();\n\n        let treeRoot = data.getRoots()[0];\n        let payoff = treeRoot.computedValue(ruleName, 'payoff');\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalExpressions(data);\n\n        this.objectiveRulesManager.recomputeTree(treeRoot, false);\n\n\n\n        let policiesCollector = new PoliciesCollector(treeRoot, ruleName);\n\n        let defaultValues = {};\n        data.getGlobalVariableNames().forEach(name => {\n            let v = data.expressionScope[name];\n            try {\n                defaultValues[name] = this.toFloat(v);\n            } catch (e) {\n                throw new JobComputationException(\"error computing float value of a variable\", {\n                    name: name,\n                    value: v,\n                })\n            }\n        });\n\n        if(!jobResult.data){\n            jobResult.data = {\n                variableNames: variableNames,\n                defaultValues: defaultValues,\n                variableExtents: variableValues.map(v=>[v[0], v[v.length-1]]),\n                defaultPayoff: this.toFloat(payoff)[0],\n                policies: policiesCollector.policies,\n                rows: []\n            };\n        }\n\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize) {\n        let variableValues = stepExecution.getJobExecutionContext().get(\"variableValues\");\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n    processItem(stepExecution, item, itemIndex, jobResult) {\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        let data = stepExecution.getData();\n        let treeRoot = data.getRoots()[0];\n        let variableNames = stepExecution.executionContext.get(\"variableNames\");\n        let variableName = variableNames[itemIndex];\n\n        let extents = jobResult.data.policies.map(policy=>{\n            return {\n                min: Infinity,\n                max: -Infinity\n            }\n        });\n\n        let values = jobResult.data.policies.map(policy=>{\n            return {\n                min: null,\n                max: null\n            }\n        });\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n\n\n        item.forEach(variableValue=>{\n\n            data.expressionScope[variableName] = variableValue;\n\n            this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n            let vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n            let valid = vr.isValid();\n\n            if(!valid && failOnInvalidTree){\n                let errorData = {\n                    variables: {}\n                };\n                errorData.variables[variableName] = variableValue;\n\n                throw new JobComputationException(\"computations\", errorData)\n            }\n\n            jobResult.data.policies.forEach((policy, policyIndex)=>{\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                let payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n\n                if(payoff < extents[policyIndex].min){\n                    extents[policyIndex].min = payoff;\n                    values[policyIndex].min = variableValue\n                }\n\n                if(payoff > extents[policyIndex].max){\n                    extents[policyIndex].max = payoff;\n                    values[policyIndex].max = variableValue\n                }\n            });\n\n        });\n\n        return {\n            variableName: variableName,\n            variableIndex: itemIndex,\n            extents: extents.map(e=>[this.toFloat(e.min), this.toFloat(e.max)]),\n            extentVariableValues: values.map(v=>[this.toFloat(v.min), this.toFloat(v.max)])\n        };\n\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        jobResult.data.rows.push(...items);\n    }\n\n    postProcess(stepExecution, jobResult) {\n        jobResult.data.rows.sort((a, b)=>(b.extents[0][1]-b.extents[0][0])-(a.extents[0][1]-a.extents[0][0]))\n\n    }\n\n\n    toFloat(v){\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class PrepareVariablesStep extends Step {\n    constructor(jobRepository) {\n        super(\"prepare_variables\", jobRepository);\n    }\n\n    doExecute(stepExecution) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n\n        var variableValues = [];\n        variables.forEach(v=> {\n            variableValues.push(ComputationsUtils.sequence(v.min, v.max, v.length));\n        });\n        stepExecution.getJobExecutionContext().put(\"variableValues\", variableValues);\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class TornadoDiagramJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"min\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"max\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 0),\n            ], 1, Infinity, false,\n            v => v[\"min\"] <= v[\"max\"],\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {PrepareVariablesStep} from \"./steps/prepare-variables-step\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {TornadoDiagramJobParameters} from \"./tornado-diagram-job-parameters\";\n\nexport class TornadoDiagramJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"tornado-diagram\", jobRepository);\n        this.addStep(new PrepareVariablesStep(jobRepository));\n        this.addStep(new CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager));\n    }\n\n    createJobParameters(values) {\n        return new TornadoDiagramJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n\n        if (execution.stepExecutions.length <= 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[1].getProgress(execution.stepExecutions[1]);\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n        let result = [];\n        if(withHeaders){\n            result.push(['variable_name', 'default_var_value', \"min_var_value\", \"max_var_value\", 'default_payoff', \"min_payoff\", \"max_payoff\", \"policy_no\"]);\n        }\n\n\n        jobResult.rows.forEach((row, index) => {\n\n            result.push(...row.extents.map((extent, policyIndex)=>[\n                row.variableName,\n                jobResult.defaultValues[row.variableName],\n                row.extentVariableValues[policyIndex][0],\n                row.extentVariableValues[policyIndex][1],\n                jobResult.defaultPayoff,\n                extent[0],\n                extent[1],\n                policyIndex+1\n            ]));\n\n        });\n\n\n        return result;\n    }\n}\n","import {JOB_STATUS} from \"../job-status\";\nimport {log} from 'sd-utils'\nimport {Step} from \"../step\";\nimport {JobInterruptedException} from \"../exceptions/job-interrupted-exception\";\n\n/*job step that process batch of items*/\nexport class BatchStep extends Step {\n\n    chunkSize;\n    static CURRENT_ITEM_COUNT_PROP = 'batch_step_current_item_count';\n    static TOTAL_ITEM_COUNT_PROP = 'batch_step_total_item_count';\n\n    constructor(name, jobRepository, chunkSize) {\n        super(name, jobRepository);\n        this.chunkSize = chunkSize;\n    }\n\n    /**\n     * Extension point for subclasses to perform step initialization. Should return total item count\n     */\n    init(stepExecution, jobResult) {\n        throw \"BatchStep.init function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to read and return chunk of items to process\n     */\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        throw \"BatchStep.readNextChunk function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to process single item\n     * Must return processed item which will be passed in a chunk to writeChunk function\n     */\n    processItem(stepExecution, item, currentItemCount, jobResult) {\n        throw \"BatchStep.processItem function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to write chunk of items. Not required\n     */\n    writeChunk(stepExecution, items, jobResult) {\n    }\n\n    /**\n     * Extension point for subclasses to perform postprocessing after all items have been processed. Not required\n     */\n    postProcess(stepExecution, jobResult) {\n    }\n\n\n    setTotalItemCount(stepExecution, count) {\n        stepExecution.executionContext.put(BatchStep.TOTAL_ITEM_COUNT_PROP, count);\n    }\n\n    getTotalItemCount(stepExecution) {\n        return stepExecution.executionContext.get(BatchStep.TOTAL_ITEM_COUNT_PROP);\n    }\n\n    setCurrentItemCount(stepExecution, count) {\n        stepExecution.executionContext.put(BatchStep.CURRENT_ITEM_COUNT_PROP, count);\n    }\n\n    getCurrentItemCount(stepExecution) {\n        return stepExecution.executionContext.get(BatchStep.CURRENT_ITEM_COUNT_PROP) || 0;\n    }\n\n\n    doExecute(stepExecution, jobResult) {\n        return Promise.resolve().then(()=> {\n            return this.init(stepExecution, jobResult)\n        }).catch(e=> {\n            log.error(\"Failed to initialize batch step: \" + this.name, e);\n            throw e;\n        }).then(totalItemCount=> {\n            return Promise.resolve().then(()=>{\n                this.setCurrentItemCount(stepExecution, this.getCurrentItemCount(stepExecution));\n                this.setTotalItemCount(stepExecution, totalItemCount);\n                return this.handleNextChunk(stepExecution, jobResult)\n            }).catch(e=> {\n                if(!(e instanceof JobInterruptedException)){\n                    log.error(\"Failed to handle batch step: \" + this.name, e);\n                }\n                throw e;\n            })\n        }).then(()=> {\n            return Promise.resolve().then(()=>{\n                return this.postProcess(stepExecution, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to postProcess batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then(()=> {\n            stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n            return stepExecution;\n        })\n\n    }\n\n    handleNextChunk(stepExecution, jobResult) {\n        var currentItemCount = this.getCurrentItemCount(stepExecution);\n        var totalItemCount = this.getTotalItemCount(stepExecution);\n        var chunkSize = Math.min(this.chunkSize, totalItemCount - currentItemCount);\n        if (currentItemCount >= totalItemCount) {\n            return stepExecution;\n        }\n        return this.checkJobExecutionFlags(stepExecution).then(()=> {\n            // Check if someone is trying to stop us\n            if (stepExecution.terminateOnly) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            return stepExecution\n        }).then(()=> {\n            return Promise.resolve().then(()=>{\n                return this.readNextChunk(stepExecution, currentItemCount, chunkSize, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to read chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            });\n        }).then(chunk=> {\n            return Promise.resolve().then(()=>{\n                return this.processChunk(stepExecution, chunk, currentItemCount, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to process chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then(processedChunk=> {\n            return Promise.resolve().then(()=>{\n                return this.writeChunk(stepExecution, processedChunk, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to write chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then((res)=> {\n            currentItemCount += chunkSize;\n            this.setCurrentItemCount(stepExecution, currentItemCount);\n            return this.updateJobProgress(stepExecution).then(()=> {\n                return this.handleNextChunk(stepExecution, jobResult);\n            });\n        })\n    }\n\n    processChunk(stepExecution, chunk, currentItemCount, jobResult) { //TODO promisify\n        return chunk.map((item, i)=>this.processItem(stepExecution, item, currentItemCount+i, jobResult));\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(stepExecution){\n        return {\n            total: this.getTotalItemCount(stepExecution),\n            current: this.getCurrentItemCount(stepExecution)\n        }\n    }\n\n    updateJobProgress(stepExecution) {\n        var progress = this.jobRepository.getJobByName(stepExecution.jobExecution.jobInstance.jobName).getProgress(stepExecution.jobExecution);\n        return this.jobRepository.updateJobExecutionProgress(stepExecution.jobExecution.id, progress);\n    }\n\n    checkJobExecutionFlags(stepExecution){\n        return this.jobRepository.getJobByName(stepExecution.jobExecution.jobInstance.jobName).checkExecutionFlags(stepExecution.jobExecution);\n    }\n}\n","export class ExtendableError {\n    data;\n    constructor(message, data) {\n        this.message = message;\n        this.data = data;\n        this.name = this.constructor.name;\n    }\n}\n","export * from './extendable-error'\nexport * from './job-data-invalid-exception'\nexport * from './job-execution-already-running-exception'\nexport * from './job-instance-already-complete-exception'\nexport * from './job-interrupted-exception'\nexport * from './job-parameters-invalid-exception'\nexport * from './job-restart-exception'\n\n\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobComputationException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobDataInvalidException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobExecutionAlreadyRunningException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobInstanceAlreadyCompleteException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobInterruptedException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobParametersInvalidException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobRestartException extends ExtendableError {\n}\n","import {Utils} from \"sd-utils\";\nimport {DataModel} from \"sd-model\";\nimport {StepExecution} from \"./step-execution\";\n\nexport class ExecutionContext {\n\n    dirty = false;\n    context = {};\n\n    constructor(context) {\n        if (context) {\n            this.context = Utils.clone(context)\n        }\n    }\n\n    put(key, value) {\n        var prevValue = this.context[key];\n        if (value != null) {\n            var result = this.context[key] = value;\n            this.dirty = prevValue == null || prevValue != null && prevValue != value;\n        }\n        else {\n            delete this.context[key];\n            this.dirty = prevValue != null;\n        }\n    }\n\n    get(key) {\n        return this.context[key];\n    }\n\n    containsKey(key) {\n        return this.context.hasOwnProperty(key);\n    }\n\n    remove(key) {\n        delete this.context[key];\n    }\n\n    setData(data) { //set data model\n        return this.put(\"data\", data);\n    }\n\n    getData() { // get data model\n        return this.get(\"data\");\n    }\n\n\n    getDTO(filteredProperties = [], deepClone = true) {\n        var cloneMethod = Utils.cloneDeepWith;\n        if (!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n\n        let dto = Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if (filteredProperties.indexOf(key) > -1) {\n                return null;\n            }\n\n            if (value instanceof DataModel) {\n                return value.getDTO()\n            }\n\n            if(value && value.$ObjectWithIdAndEditableFields && value.id && this.getData().findById(value.id)){\n                return {\n                    '$ObjectWithIdAndEditableFields': true,\n                    id: value.id\n                }\n            }\n\n            if (value instanceof Error) {\n                return Utils.getErrorDTO(value);\n            }\n\n        }));\n\n        return dto\n    }\n\n}\n","import * as exceptions from './exceptions'\n\nexport {exceptions}\nexport * from './execution-context'\nexport * from './job'\nexport * from './job-execution'\nexport * from './job-execution-flag'\nexport * from './job-execution-listener'\nexport * from './job-instance'\nexport * from './job-key-generator'\nexport * from './job-launcher'\nexport * from './job-parameter-definition'\nexport * from './job-parameters'\nexport * from './job-status'\nexport * from './simple-job'\nexport * from './step'\nexport * from './step-execution'\nexport * from './step-execution-listener'\n\n\n\n\n","export const JOB_EXECUTION_FLAG = {\n    STOP: 'STOP'\n};\n","export class JobExecutionListener {\n    /*Called before a job executes*/\n    beforeJob(jobExecution) {\n\n    }\n\n    /*Called after completion of a job. Called after both successful and failed executions*/\n    afterJob(jobExecution) {\n\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {StepExecution} from \"./step-execution\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\n\n/*domain object representing the execution of a job.*/\nexport class JobExecution {\n    id;\n    jobInstance;\n    jobParameters;\n    stepExecutions = [];\n    status = JOB_STATUS.STARTING;\n    exitStatus = JOB_STATUS.UNKNOWN;\n    executionContext = new ExecutionContext();\n\n    startTime = null;\n    createTime = new Date();\n    endTime = null;\n    lastUpdated = null;\n\n    failureExceptions = [];\n\n    constructor(jobInstance, jobParameters, id) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.jobInstance = jobInstance;\n        this.jobParameters = jobParameters;\n    }\n\n    /**\n     * Register a step execution with the current job execution.\n     * @param stepName the name of the step the new execution is associated with\n     */\n    createStepExecution(stepName) {\n        var stepExecution = new StepExecution(stepName, this);\n        this.stepExecutions.push(stepExecution);\n        return stepExecution;\n    }\n\n    isRunning() {\n        return !this.endTime;\n    }\n\n    /**\n     * Test if this JobExecution has been signalled to\n     * stop.\n     */\n    isStopping() {\n        return this.status === JOB_STATUS.STOPPING;\n    }\n\n    /**\n     * Signal the JobExecution to stop.\n     */\n    stop() {\n        this.stepExecutions.forEach(se=> {\n            se.terminateOnly = true;\n        });\n        this.status = JOB_STATUS.STOPPING;\n    }\n\n    getData() {\n        return this.executionContext.getData();\n    }\n\n    getDTO(filteredProperties = [], deepClone = true) {\n        var cloneMethod = Utils.cloneDeepWith;\n        if (!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        return Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if (filteredProperties.indexOf(key) > -1) {\n                return null;\n            }\n\n            if ([\"jobParameters\", \"executionContext\"].indexOf(key) > -1) {\n                return value.getDTO()\n            }\n            if (value instanceof Error) {\n                return Utils.getErrorDTO(value);\n            }\n\n            if (value instanceof StepExecution) {\n                return value.getDTO([\"jobExecution\"], deepClone)\n            }\n        }))\n    }\n}\n","/* object representing a uniquely identifiable job run. JobInstance can be restarted multiple times in case of execution failure and it's lifecycle ends with first successful execution*/\nexport class JobInstance{\n\n    id;\n    jobName;\n    constructor(id, jobName){\n        this.id = id;\n        this.jobName = jobName;\n    }\n\n}\n","\nexport class JobKeyGenerator {\n    /*Method to generate the unique key used to identify a job instance.*/\n    static generateKey(jobParameters) {\n        var result = \"\";\n        jobParameters.definitions.forEach((d, i)=> {\n            if(d.identifying){\n                result += d.name + \"=\" + jobParameters.values[d.name] + \";\";\n            }\n        });\n        return result;\n    }\n}\n","import {JobRestartException} from \"./exceptions/job-restart-exception\";\nimport {JOB_STATUS} from \"./job-status\";\nimport {Utils, log} from \"sd-utils\";\nimport {JobParametersInvalidException} from \"./exceptions/job-parameters-invalid-exception\";\nimport {JobDataInvalidException} from \"./exceptions/job-data-invalid-exception\";\n\nexport class JobLauncher {\n\n    jobRepository;\n    jobWorker;\n\n    constructor(jobRepository, jobWorker, dataModelSerializer) {\n        this.jobRepository = jobRepository;\n        this.jobWorker = jobWorker;\n        this.dataModelSerializer = dataModelSerializer;\n    }\n\n\n    run(jobOrName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        var job;\n        var jobParameters;\n\n        return Promise.resolve().then(()=> {\n            if (Utils.isString(jobOrName)) {\n                job = this.jobRepository.getJobByName(jobOrName)\n            } else {\n                job = jobOrName;\n            }\n            if (!job) {\n                throw new JobRestartException(\"No such job: \" + jobOrName);\n            }\n\n            jobParameters = job.createJobParameters(jobParametersValues);\n\n            return this.validate(job, jobParameters, data);\n        }).then(valid=>{\n            return this.jobRepository.createJobExecution(job.name, jobParameters, data).then(jobExecution=>{\n\n\n                if(this.jobWorker){\n                    log.debug(\"Job: [\" + job.name + \"] execution [\"+jobExecution.id+\"] delegated to worker\");\n                    this.jobWorker.executeJob(jobExecution.id);\n                    return jobExecution;\n                }\n\n                var executionPromise = this._execute(job, jobExecution);\n                if(resolvePromiseAfterJobIsLaunched){\n                    return jobExecution;\n                }\n                return executionPromise;\n            })\n        })\n    }\n\n    validate(job, jobParameters, data){\n        return this.jobRepository.getLastJobExecution(job.name, jobParameters).then(lastExecution=>{\n            if (lastExecution != null) {\n                if (!job.isRestartable) {\n                    throw new JobRestartException(\"JobInstance already exists and is not restartable\");\n                }\n\n                lastExecution.stepExecutions.forEach(execution=> {\n                    if (execution.status == JOB_STATUS.UNKNOWN) {\n                        throw new JobRestartException(\"Step [\" + execution.stepName + \"] is of status UNKNOWN\");\n                    }\n                });\n            }\n            if (job.jobParametersValidator && !job.jobParametersValidator.validate(jobParameters)) {\n                throw new JobParametersInvalidException(\"Invalid job parameters in jobLauncher.run for job: \"+job.name)\n            }\n\n            if(job.jobDataValidator && !job.jobDataValidator.validate(data)){\n                throw new JobDataInvalidException(\"Invalid job data in jobLauncher.run for job: \"+job.name)\n            }\n\n            return true;\n        })\n    }\n\n    /**Execute previously created job execution*/\n    execute(jobExecutionOrId){\n\n        return Promise.resolve().then(()=>{\n            if(Utils.isString(jobExecutionOrId)){\n                return this.jobRepository.getJobExecutionById(jobExecutionOrId);\n            }\n            return jobExecutionOrId;\n        }).then(jobExecution=>{\n            if(!jobExecution){\n                throw new JobRestartException(\"JobExecution [\" + jobExecutionOrId + \"] is not found\");\n            }\n\n            if (jobExecution.status !== JOB_STATUS.STARTING) {\n                throw new JobRestartException(\"JobExecution [\" + jobExecution.id + \"] already started\");\n            }\n\n            var jobName = jobExecution.jobInstance.jobName;\n            var job = this.jobRepository.getJobByName(jobName);\n            if(!job){\n                throw new JobRestartException(\"No such job: \" + jobName);\n            }\n\n            return  this._execute(job, jobExecution);\n        })\n    }\n\n    _execute(job, jobExecution){\n        var jobName = job.name;\n        log.info(\"Job: [\" + jobName + \"] launched with the following parameters: [\" + jobExecution.jobParameters + \"]\", jobExecution.getData());\n        return job.execute(jobExecution).then(jobExecution=>{\n            log.info(\"Job: [\" + jobName + \"] completed with the following parameters: [\" + jobExecution.jobParameters + \"] and the following status: [\" + jobExecution.status + \"]\");\n            return jobExecution;\n        }).catch(e =>{\n            log.error(\"Job: [\" + jobName + \"] failed unexpectedly and fatally with the following parameters: [\" + jobExecution.jobParameters + \"]\", e);\n            throw e;\n        })\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport const PARAMETER_TYPE = {\n    STRING: 'STRING',\n    DATE: 'DATE',\n    INTEGER: 'INTEGER',\n    NUMBER: 'FLOAT',\n    BOOLEAN: 'BOOLEAN',\n    NUMBER_EXPRESSION: 'NUMBER_EXPRESSION',\n    COMPOSITE: 'COMPOSITE' //composite parameter with nested subparameters\n};\n\nexport class JobParameterDefinition {\n    name;\n    type;\n    nestedParameters = [];\n    minOccurs;\n    maxOccurs;\n    required = true;\n\n    identifying;\n    validator;\n    singleValueValidator;\n\n    constructor(name, typeOrNestedParametersDefinitions, minOccurs = 1, maxOccurs = 1, identifying = false, singleValueValidator = null, validator = null) {\n        this.name = name;\n        if (Utils.isArray(typeOrNestedParametersDefinitions)) {\n            this.type = PARAMETER_TYPE.COMPOSITE;\n            this.nestedParameters = typeOrNestedParametersDefinitions;\n        } else {\n            this.type = typeOrNestedParametersDefinitions;\n        }\n        this.validator = validator;\n        this.singleValueValidator = singleValueValidator;\n        this.identifying = identifying;\n        this.minOccurs = minOccurs;\n        this.maxOccurs = maxOccurs;\n    }\n\n    set(key, val) {\n        this[key] = val;\n        return this;\n    }\n\n    validate(value, allValues) {\n        var isArray = Utils.isArray(value);\n\n        if (this.maxOccurs > 1 && !isArray) {\n            return false;\n        }\n\n        if (!isArray) {\n            return this.validateSingleValue(value, allValues)\n        }\n\n        if (value.length < this.minOccurs || value.length > this.maxOccurs) {\n            return false;\n        }\n\n        if (!value.every(v=>this.validateSingleValue(v, value))) {\n            return false;\n        }\n\n        if (this.validator) {\n            return this.validator(value, allValues);\n        }\n\n        return true;\n    }\n\n    static computeNumberExpression(val){\n        let parsed = parseFloat(val);\n        if(parsed === Infinity || parsed === -Infinity) {\n            return parsed;\n        }\n\n        if(!ExpressionEngine.validate(val, {}, false)){\n            return null\n        }\n\n        return ExpressionEngine.eval(val, true)\n    }\n\n    // allValues - all values on the same level\n    validateSingleValue(value, allValues) {\n\n        if ((!value && value !== 0 && value !== false) && this.minOccurs > 0) {\n            return !this.required\n        }\n\n        if (PARAMETER_TYPE.STRING === this.type && !Utils.isString(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.DATE === this.type && !Utils.isDate(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.INTEGER === this.type && !Utils.isInt(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.NUMBER === this.type && !Utils.isNumber(value)) {\n            return false;\n        }\n\n        if (PARAMETER_TYPE.BOOLEAN === this.type && !Utils.isBoolean(value)) {\n            return false;\n        }\n\n\n        if (PARAMETER_TYPE.NUMBER_EXPRESSION === this.type) {\n            value = JobParameterDefinition.computeNumberExpression(value);\n            if(value === null){\n                return false\n            }\n        }\n\n        if (PARAMETER_TYPE.COMPOSITE === this.type) {\n            if (!Utils.isObject(value)) {\n                return false;\n            }\n            if (!this.nestedParameters.every((nestedDef, i)=>nestedDef.validate(value[nestedDef.name]))) {\n                return false;\n            }\n        }\n\n        if (this.singleValueValidator) {\n            return this.singleValueValidator(value, allValues);\n        }\n\n        return true;\n    }\n\n    value(value){\n        if(PARAMETER_TYPE.NUMBER_EXPRESSION === this.type) {\n            return JobParameterDefinition.computeNumberExpression(value);\n        }\n\n        return value;\n    }\n}\n","import {PARAMETER_TYPE} from \"./job-parameter-definition\";\nimport {Utils} from \"sd-utils\";\n\nexport class JobParameters{\n    definitions = [];\n    values={};\n\n    constructor(values){\n        this.initDefinitions();\n        this.initDefaultValues();\n        if (values) {\n            Utils.deepExtend(this.values, values);\n        }\n    }\n\n    initDefinitions(){\n\n    }\n\n    initDefaultValues(){\n\n    }\n\n    validate(){\n        return this.definitions.every((def, i)=>def.validate(this.values[def.name], this.values));\n    }\n\n    getDefinition(path){\n        var defs =this.definitions;\n        let def = null;\n        if(!path.split().every(name=>{\n                def = Utils.find(defs, d=>d.name == name);\n                if(!def){\n                    return false\n                }\n                defs = def.nestedParameters;\n                return true;\n        })){\n            return null;\n        }\n        return def;\n    }\n\n    /*get or set value by path*/\n    value(path, value){\n        if (arguments.length === 1) {\n            let def = this.getDefinition(path);\n            let val = Utils.get(this.values, path, null);\n            if(def){\n                return def.value(val);\n            }\n            return  val;\n        }\n        Utils.set(this.values, path, value);\n        return value;\n    }\n\n    toString(){\n        var result = \"JobParameters[\";\n\n        this.definitions.forEach((d, i)=> {\n\n            var val = this.values[d.name];\n            // if(Utils.isArray(val)){\n            //     var values = val;\n            //\n            //\n            // }\n            // if(PARAMETER_TYPE.COMPOSITE == d.type){\n            //\n            // }\n\n            result += d.name + \"=\"+val + \";\";\n        });\n        result+=\"]\";\n        return result;\n    }\n\n    getDTO(){\n        return {\n            values: this.values\n        }\n    }\n}\n","import {JobRepository} from \"./job-repository\";\nimport { openDB, deleteDB } from 'idb';\nimport {Utils} from \"sd-utils\";\nimport {JobExecution} from \"../job-execution\";\nimport {JobInstance} from \"../job-instance\";\nimport {StepExecution} from \"../step-execution\";\nimport {ExecutionContext} from \"../execution-context\";\nimport {DataModel} from \"sd-model\";\nimport {log} from \"sd-utils\";\nimport {JobResult} from \"../job-result\";\n\n/* IndexedDB job repository*/\nexport class IdbJobRepository extends JobRepository {\n\n    dbPromise;\n    jobInstanceDao;\n    jobExecutionDao;\n    stepExecutionDao;\n    jobResultDao;\n    jobExecutionProgressDao;\n    jobExecutionFlagDao;\n\n    constructor(expressionsReviver, dbName = 'sd-job-repository', deleteDB = false) {\n        super();\n        this.dbName = dbName;\n        this.expressionsReviver = expressionsReviver;\n        if (deleteDB) {\n            this.deleteDB().then(()=> {\n                this.initDB()\n            }).catch(e=> {\n                log.error(e);\n                this.initDB();\n            })\n        } else {\n            this.initDB()\n        }\n    }\n\n    initDB() {\n        this.dbPromise = openDB(this.dbName, 2, {\n            upgrade(db, oldVersion, newVersion, transaction) {\n                // Note: we don't use 'break' in this switch statement,\n                // the fall-through behaviour is what we want.\n                switch (oldVersion) {\n                    case 0:\n                        db.createObjectStore('job-instances');\n                        var jobExecutionsOS = db.createObjectStore('job-executions');\n                        jobExecutionsOS.createIndex(\"jobInstanceId\", \"jobInstance.id\", {unique: false});\n                        jobExecutionsOS.createIndex(\"createTime\", \"createTime\", {unique: false});\n                        jobExecutionsOS.createIndex(\"status\", \"status\", {unique: false});\n                        db.createObjectStore('job-execution-progress');\n                        db.createObjectStore('job-execution-flags');\n                        var stepExecutionsOS = db.createObjectStore('step-executions');\n                        stepExecutionsOS.createIndex(\"jobExecutionId\", \"jobExecutionId\", {unique: false});\n\n                        var jobResultOS = db.createObjectStore('job-results');\n                        jobResultOS.createIndex(\"jobInstanceId\", \"jobInstance.id\", {unique: true});\n                    case 1:\n                        transaction.objectStore('job-instances').createIndex(\"id\", \"id\", {unique: true});\n                }\n\n            }\n        });\n\n        this.jobInstanceDao = new ObjectStoreDao('job-instances', this.dbPromise);\n        this.jobExecutionDao = new ObjectStoreDao('job-executions', this.dbPromise);\n        this.jobExecutionProgressDao = new ObjectStoreDao('job-execution-progress', this.dbPromise);\n        this.jobExecutionFlagDao = new ObjectStoreDao('job-execution-flags', this.dbPromise);\n        this.stepExecutionDao = new ObjectStoreDao('step-executions', this.dbPromise);\n        this.jobResultDao = new ObjectStoreDao('job-results', this.dbPromise);\n    }\n\n    deleteDB() {\n        return Promise.resolve().then(_=>deleteDB(this.dbName));\n    }\n\n\n    removeJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        return this.jobInstanceDao.remove(key).then(()=>{\n            this.findJobExecutions(jobInstance, false).then(jobExecutions=>{  //  Not waiting for promise resolves\n                jobExecutions.forEach(this.removeJobExecution, this);\n            });\n\n            this.getJobResultByInstance(jobInstance).then(jobResult=>{\n                return this.removeJobResult(jobResult)\n            })\n        });\n    }\n\n    removeJobExecution(jobExecution){\n        return this.jobExecutionDao.remove(jobExecution.id).then(()=>{\n            return this.findStepExecutions(jobExecution.id, false).then(stepExecutions=>{  // Not waiting for promise resolves\n                stepExecutions.forEach(this.removeStepExecution, this);\n            });\n        });\n    }\n\n    removeStepExecution(stepExecution){\n        return this.stepExecutionDao.remove(stepExecution.id)\n    }\n\n    removeJobResult(jobResult){\n        return this.jobResultDao.remove(jobResult.id);\n    }\n\n\n\n\n    getJobResult(jobResultId, revive = true) {\n        return this.jobResultDao.get(jobResultId).then(dto => dto && revive ? this.reviveJobResult(dto) : dto);\n    }\n\n    getJobResultByInstance(jobInstance, revive = true) {\n        return this.jobResultDao.getByIndex(\"jobInstanceId\", jobInstance.id).then(dto => dto && revive ? this.reviveJobResult(dto) : dto);\n    }\n\n    getJobResultByExecution(jobExecution, revive = true) {\n        return this.getJobResultByInstance(jobExecution.jobInstance, false).then(dto => dto && revive ? this.reviveJobResult(dto, jobExecution) : dto);\n    }\n\n    saveJobResult(jobResult) {\n        let dto = jobResult.getDTO();\n        return this.jobResultDao.set(jobResult.id, dto).then(r=>jobResult);\n    }\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return this.jobInstanceDao.get(key).then(dto=>dto ? this.reviveJobInstance(dto) : dto);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters) {\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        return this.jobInstanceDao.set(key, jobInstance).then(r=>jobInstance);\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution) {\n        var dto = jobExecution.getDTO();\n        var stepExecutionsDTOs = dto.stepExecutions;\n        dto.stepExecutions = null;\n        return this.jobExecutionDao.set(jobExecution.id, dto).then(r=>this.saveStepExecutionsDTOS(stepExecutionsDTOs)).then(r=>jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress) {\n        return this.jobExecutionProgressDao.set(jobExecutionId, progress)\n    }\n\n    getJobExecutionProgress(jobExecutionId) {\n        return this.jobExecutionProgressDao.get(jobExecutionId)\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag) {\n        return this.jobExecutionFlagDao.set(jobExecutionId, flag)\n    }\n\n    getJobExecutionFlag(jobExecutionId) {\n        return this.jobExecutionFlagDao.get(jobExecutionId)\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution) {\n        var dto = stepExecution.getDTO([\"jobExecution\"]);\n        return this.stepExecutionDao.set(stepExecution.id, dto).then(r=>stepExecution);\n    }\n\n    saveStepExecutionsDTOS(stepExecutions, savedExecutions = []) {\n        if (stepExecutions.length <= savedExecutions.length) {\n            return Promise.resolve(savedExecutions);\n        }\n        var stepExecutionDTO = stepExecutions[savedExecutions.length];\n        return this.stepExecutionDao.set(stepExecutionDTO.id, stepExecutionDTO).then(()=> {\n            savedExecutions.push(stepExecutionDTO);\n            return this.saveStepExecutionsDTOS(stepExecutions, savedExecutions);\n        });\n    }\n\n    getJobExecutionById(id) {\n        return this.jobExecutionDao.get(id).then(dto=> {\n            return this.fetchJobExecutionRelations(dto);\n        });\n    }\n\n    fetchJobExecutionRelations(jobExecutionDTO, revive = true) {\n        if (!jobExecutionDTO) {\n            return Promise.resolve(null)\n        }\n        return this.findStepExecutions(jobExecutionDTO.id, false).then(steps=> {\n            jobExecutionDTO.stepExecutions = steps;\n            if (!revive) {\n                return jobExecutionDTO;\n            }\n            return this.reviveJobExecution(jobExecutionDTO);\n        })\n    }\n\n    fetchJobExecutionsRelations(jobExecutionDtoList, revive = true, fetched = []) {\n        if (jobExecutionDtoList.length <= fetched.length) {\n            return Promise.resolve(fetched);\n        }\n        return this.fetchJobExecutionRelations(jobExecutionDtoList[fetched.length], revive).then((jobExecution)=> {\n            fetched.push(jobExecution);\n\n            return this.fetchJobExecutionsRelations(jobExecutionDtoList, revive, fetched);\n        });\n    }\n\n    findStepExecutions(jobExecutionId, revive = true) {\n        return this.stepExecutionDao.getAllByIndex(\"jobExecutionId\", jobExecutionId).then(dtos=> {\n            if (!revive) {\n                return dtos;\n            }\n            return dtos.map(dto=>this.reviveStepExecution(dto));\n        })\n    }\n\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance, fetchRelationsAndRevive = true) {\n        return this.jobExecutionDao.getAllByIndex(\"jobInstanceId\", jobInstance.id).then(values=> {\n            var sorted = values.sort(function (a, b) {\n                return a.createTime.getTime() - b.createTime.getTime()\n            });\n\n            if (!fetchRelationsAndRevive) {\n                return sorted;\n            }\n\n            return this.fetchJobExecutionsRelations(sorted, true)\n        });\n    }\n\n    getLastJobExecutionByInstance(jobInstance, fetchRelationsAndRevive = true) {\n        return this.findJobExecutions(jobInstance, false).then(executions=>{\n            let execution = executions[executions.length - 1];\n            if (!fetchRelationsAndRevive) {\n                return execution;\n            }\n            this.fetchJobExecutionRelations(execution);\n        });\n    }\n\n    getLastStepExecution(jobInstance, stepName) {\n        return this.findJobExecutions(jobInstance).then(jobExecutions=> {\n            var stepExecutions = [];\n            jobExecutions.forEach(jobExecution=>jobExecution.stepExecutions.filter(s=>s.stepName === stepName).forEach((s)=>stepExecutions.push(s)));\n            var latest = null;\n            stepExecutions.forEach(s=> {\n                if (latest == null || latest.startTime.getTime() < s.startTime.getTime()) {\n                    latest = s;\n                }\n            });\n            return latest;\n        })\n    }\n\n    reviveJobInstance(dto) {\n        return new JobInstance(dto.id, dto.jobName);\n    }\n\n    reviveExecutionContext(dto) {\n        let executionContext = new ExecutionContext();\n        executionContext.context = dto.context;\n        let data = executionContext.getData();\n        if (data) {\n            let dataModel = new DataModel();\n            dataModel.loadFromDTO(data, this.expressionsReviver);\n\n            executionContext.setData(null);\n            this.reviveFromDTO(executionContext.context, dto.context, dataModel);\n\n            executionContext.setData(dataModel);\n\n        }\n        return executionContext\n    }\n\n    reviveFromDTO(target, dto, dataModel) {\n        return Utils.mergeWith(target, dto, (value, dtoValue, key)=> {\n            if(dtoValue && dtoValue.$ObjectWithIdAndEditableFields && dtoValue.id){\n                return dataModel.findById(dtoValue.id) || value;\n            }\n        })\n    }\n\n    reviveJobExecution(dto) {\n\n        var job = this.getJobByName(dto.jobInstance.jobName);\n        var jobInstance = this.reviveJobInstance(dto.jobInstance);\n        var jobParameters = job.createJobParameters(dto.jobParameters.values);\n        var jobExecution = new JobExecution(jobInstance, jobParameters, dto.id);\n        var executionContext = this.reviveExecutionContext(dto.executionContext);\n        return Utils.mergeWith(jobExecution, dto, (objValue, srcValue, key, object, source, stack)=> {\n            if (key === \"jobInstance\") {\n                return jobInstance;\n            }\n            if (key === \"executionContext\") {\n                return executionContext;\n            }\n            if (key === \"jobParameters\") {\n                return jobParameters;\n            }\n            if (key === \"jobExecution\") {\n                return jobExecution;\n            }\n\n            if (key === \"stepExecutions\") {\n                return srcValue.map(stepDTO => this.reviveStepExecution(stepDTO, jobExecution));\n            }\n        })\n    }\n\n    reviveStepExecution(dto, jobExecution) {\n        var stepExecution = new StepExecution(dto.stepName, jobExecution, dto.id);\n        var executionContext = this.reviveExecutionContext(dto.executionContext);\n        return Utils.mergeWith(stepExecution, dto, (objValue, srcValue, key, object, source, stack)=> {\n            if (key === \"jobExecution\") {\n                return jobExecution;\n            }\n            if (key === \"executionContext\") {\n                return executionContext;\n            }\n        })\n    }\n\n    reviveJobResult(dto, jobExecution = null) {\n        let job = this.getJobByName(dto.jobInstance.jobName);\n        let jobInstance = this.reviveJobInstance(dto.jobInstance);\n\n        let contextPromise;\n        if (jobExecution != null) {\n            contextPromise = Promise.resolve(jobExecution.executionContext);\n        }else{\n            contextPromise = this.getLastJobExecutionByInstance(jobInstance, false).then(jobExecutionDto => this.reviveExecutionContext(jobExecutionDto.executionContext));\n        }\n\n        return contextPromise.then(executionContext => job.reviveResultData( this.reviveFromDTO({}, dto.data, executionContext.getData()), executionContext)).then(d=>new JobResult(jobInstance, dto.id, d));\n    }\n}\n\n\nclass ObjectStoreDao {\n\n    name;\n    dbPromise;\n\n    constructor(name, dbPromise) {\n        this.name = name;\n        this.dbPromise = dbPromise;\n    }\n\n    get(key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).get(key);\n        });\n    }\n\n    getAllByIndex(indexName, key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).index(indexName).getAll(key)\n        });\n    }\n\n    getByIndex(indexName, key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).index(indexName).get(key)\n        });\n    }\n\n    set(key, val) {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).put(val, key);\n            return tx.done;\n        });\n    }\n\n    remove(key) {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).delete(key);\n            return tx.done;\n        });\n    }\n\n    clear() {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).clear();\n            return tx.done;\n        });\n    }\n\n    keys() {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name);\n            const store = tx.objectStore(this.name);\n            return store.getAllKeys();\n        });\n    }\n}\n","import {JobKeyGenerator} from \"../job-key-generator\";\nimport {JobInstance} from \"../job-instance\";\nimport {Utils} from \"sd-utils\";\nimport {JobExecution} from \"../job-execution\";\nimport {JobExecutionAlreadyRunningException} from \"../exceptions/job-execution-already-running-exception\";\nimport {JOB_STATUS} from \"../job-status\";\nimport {JobInstanceAlreadyCompleteException} from \"../exceptions/job-instance-already-complete-exception\";\nimport {ExecutionContext} from \"../execution-context\";\nimport {StepExecution} from \"../step-execution\";\nimport {DataModel} from \"sd-model\";\nimport {JobResult} from \"../job-result\";\n\nexport class JobRepository {\n\n    jobByName = {};\n\n    registerJob(job) {\n        this.jobByName[job.name] = job;\n    }\n\n    getJobByName(name) {\n        return this.jobByName[name];\n    }\n\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n       throw \"JobRepository getJobInstance function not implemented!\"\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(key, jobInstance){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    getJobExecutionById(id){\n        throw \"JobRepository.getJobExecutionById function not implemented!\"\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        throw \"JobRepository.getJobExecutionProgress function not implemented!\"\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        throw \"JobRepository.saveJobExecutionFlag function not implemented!\"\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        throw \"JobRepository.getJobExecutionFlag function not implemented!\"\n    }\n\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        throw \"JobRepository.saveStepExecution function not implemented!\"\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        throw \"JobRepository.findJobExecutions function not implemented!\"\n    }\n\n    getJobResult(jobResultId){\n        throw \"JobRepository.getJobResult function not implemented!\"\n    }\n\n    getJobResultByInstance(jobInstance){\n        throw \"JobRepository.getJobResultByInstance function not implemented!\"\n    }\n\n    getJobResultByExecution(jobInstance){\n        throw \"JobRepository.getJobResultByExecution function not implemented!\"\n    }\n\n    saveJobResult(jobResult) {\n        throw \"JobRepository.setJobResult function not implemented!\"\n    }\n\n\n    removeJobInstance(jobInstance, jobParameters){\n        throw \"JobRepository.removeJobInstance function not implemented!\"\n    }\n\n    removeJobExecution(jobExecution){\n        throw \"JobRepository.removeJobExecution function not implemented!\"\n    }\n\n    removeStepExecution(stepExecution){\n        throw \"JobRepository.removeStepExecution function not implemented!\"\n    }\n\n    removeJobResult(jobResult){\n        throw \"JobRepository.removeJobResult function not implemented!\"\n    }\n\n    /*Create a new JobInstance with the name and job parameters provided. return promise*/\n    createJobInstance(jobName, jobParameters) {\n        var jobInstance = new JobInstance(Utils.guid(), jobName);\n        return this.saveJobInstance(jobInstance, jobParameters);\n    }\n\n    /*Check if an instance of this job already exists with the parameters provided.*/\n    isJobInstanceExists(jobName, jobParameters) {\n        return this.getJobInstance(jobName, jobParameters).then(result => !!result).catch(error=>false);\n    }\n\n    generateJobInstanceKey(jobName, jobParameters) {\n        return jobName + \"|\" + JobKeyGenerator.generateKey(jobParameters);\n    }\n\n    /*Create a JobExecution for a given  Job and JobParameters. If matching JobInstance already exists,\n     * the job must be restartable and it's last JobExecution must *not* be\n     * completed. If matching JobInstance does not exist yet it will be  created.*/\n\n    createJobExecution(jobName, jobParameters, data) {\n        return this.getJobInstance(jobName, jobParameters).then(jobInstance=>{\n            if (jobInstance != null) {\n                return this.findJobExecutions(jobInstance).then(executions=>{\n                    executions.forEach(execution=> {\n                        if (execution.isRunning()) {\n                            throw new JobExecutionAlreadyRunningException(\"A job execution for this job is already running: \" + jobInstance.jobName);\n                        }\n                        if (execution.status == JOB_STATUS.COMPLETED || execution.status == JOB_STATUS.ABANDONED) {\n                            throw new JobInstanceAlreadyCompleteException(\n                                \"A job instance already exists and is complete for parameters=\" + jobParameters\n                                + \".  If you want to run this job again, change the parameters.\");\n                        }\n                    });\n\n                    var executionContext = executions[executions.length - 1].executionContext;\n\n                    return [jobInstance, executionContext];\n                })\n            }\n\n            // no job found, create one\n            jobInstance = this.createJobInstance(jobName, jobParameters);\n            var executionContext = new ExecutionContext();\n            var dataModel = new DataModel();\n            dataModel._setNewState(data.createStateSnapshot());\n            executionContext.setData(dataModel);\n            return Promise.all([jobInstance, executionContext]);\n        }).then(instanceAndExecutionContext=>{\n            var jobExecution = new JobExecution(instanceAndExecutionContext[0], jobParameters);\n            jobExecution.executionContext = instanceAndExecutionContext[1];\n            jobExecution.lastUpdated = new Date();\n            return this.saveJobExecution(jobExecution);\n        }).catch(e=>{\n            throw e;\n        })\n    }\n\n    getLastJobExecution(jobName, jobParameters) {\n        return this.getJobInstance(jobName, jobParameters).then((jobInstance)=>{\n            if(!jobInstance){\n                return null;\n            }\n            return this.getLastJobExecutionByInstance(jobInstance);\n        })\n    }\n\n    getLastJobExecutionByInstance(jobInstance){\n        return this.findJobExecutions(jobInstance).then(executions=>executions[executions.length -1]);\n    }\n\n    getLastStepExecution(jobInstance, stepName) {\n        return this.findJobExecutions(jobInstance).then(jobExecutions=>{\n            var stepExecutions=[];\n            jobExecutions.forEach(jobExecution=>jobExecution.stepExecutions.filter(s=>s.stepName === stepName).forEach((s)=>stepExecutions.push(s)));\n            var latest = null;\n            stepExecutions.forEach(s=>{\n                if (latest == null || latest.startTime.getTime() < s.startTime.getTime()) {\n                    latest = s;\n                }\n            });\n            return latest;\n        })\n    }\n\n    addStepExecution(stepExecution) {\n        stepExecution.lastUpdated = new Date();\n        return this.saveStepExecution(stepExecution);\n    }\n\n    update(o){\n        o.lastUpdated = new Date();\n\n        if(o instanceof JobExecution){\n            return this.saveJobExecution(o);\n        }\n\n        if(o instanceof StepExecution){\n            return this.saveStepExecution(o);\n        }\n\n        throw \"Object not updatable: \"+o\n    }\n\n    remove(o){\n\n        if(o instanceof JobExecution){\n            return this.removeJobExecution(o);\n        }\n\n        if(o instanceof StepExecution){\n            return this.removeStepExecution(o);\n        }\n\n        if(o instanceof JobResult){\n            return this.removeJobResult();\n        }\n\n        return Promise.reject(\"Object not removable: \"+o);\n    }\n\n\n    reviveJobInstance(dto) {\n        return dto;\n    }\n\n    reviveExecutionContext(dto) {\n        return dto;\n    }\n\n    reviveJobExecution(dto) {\n        return dto;\n    }\n\n    reviveStepExecution(dto, jobExecution) {\n        return dto;\n    }\n}\n","import {JobRepository} from \"./job-repository\";\nimport {Utils} from \"sd-utils\";\n\nexport class SimpleJobRepository extends JobRepository{\n    jobInstancesByKey = {};\n    jobExecutions = [];\n    stepExecutions = [];\n    executionProgress = {};\n    executionFlags = {};\n    jobResults = [];\n\n    removeJobInstance(jobInstance){\n        Utils.forOwn(this.jobInstancesByKey,  (ji, key)=>{\n            if(ji===jobInstance){\n                delete this.jobInstancesByKey[key]\n            }\n        });\n\n        this.jobExecutions.filter(jobExecution=>jobExecution.jobInstance.id == jobInstance.id).reverse().forEach(this.removeJobExecution, this);\n        this.jobResults.filter(jobResult=>jobResult.jobInstance.id == jobInstance.id).reverse().forEach(this.removeJobResult, this);\n\n        return Promise.resolve();\n    }\n\n    removeJobExecution(jobExecution){\n        let index = this.jobExecutions.indexOf(jobExecution);\n        if(index>-1) {\n            this.jobExecutions.splice(index, 1)\n        }\n\n        this.stepExecutions.filter(stepExecution=>stepExecution.jobExecution.id === jobExecution.id).reverse().forEach(this.removeStepExecution, this);\n        return Promise.resolve();\n    }\n\n    removeStepExecution(stepExecution){\n        let index = this.stepExecutions.indexOf(stepExecution);\n        if(index>-1) {\n            this.stepExecutions.splice(index, 1)\n        }\n        return Promise.resolve();\n    }\n\n    removeJobResult(jobResult){\n        let index = this.jobResults.indexOf(jobResult);\n        if(index>-1) {\n            this.jobResults.splice(index, 1)\n        }\n        return Promise.resolve();\n    }\n\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return Promise.resolve(this.jobInstancesByKey[key]);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        this.jobInstancesByKey[key] = jobInstance;\n        return Promise.resolve(jobInstance)\n    }\n\n    getJobResult(jobResultId){\n        return Promise.resolve(Utils.find(this.jobResults, r=>r.id===jobResultId))\n    }\n\n    getJobResultByInstance(jobInstance){\n        return Promise.resolve(Utils.find(this.jobResults, r=>r.jobInstance.id===jobInstance.id))\n    }\n\n    getJobResultByExecution(jobExecution){\n        return this.getJobResultByInstance(jobExecution.jobInstance);\n    }\n\n    saveJobResult(jobResult) {\n        this.jobResults.push(jobResult);\n        return Promise.resolve(jobResult);\n    }\n\n    getJobExecutionById(id){\n        return Promise.resolve(Utils.find(this.jobExecutions, ex=>ex.id===id))\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        this.jobExecutions.push(jobExecution);\n        return Promise.resolve(jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        this.executionProgress[jobExecutionId] = progress;\n        return Promise.resolve(progress)\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        return Promise.resolve(this.executionProgress[jobExecutionId])\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        this.executionFlags[jobExecutionId] = flag;\n        return Promise.resolve(flag)\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        return Promise.resolve(this.executionFlags[jobExecutionId])\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        this.stepExecutions.push(stepExecution);\n        return Promise.resolve(stepExecution);\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        return Promise.resolve(this.jobExecutions.filter(e=>e.jobInstance.id == jobInstance.id).sort(function (a, b) {\n            return a.createTime.getTime() - b.createTime.getTime()\n        }));\n    }\n\n\n}\n","import {JobRepository} from \"./job-repository\";\nimport {Utils} from \"sd-utils\";\nimport {SimpleJobRepository} from \"./simple-job-repository\";\n\n\n\nexport class TimeoutJobRepository extends SimpleJobRepository{\n\n    createTimeoutPromise(valueToResolve, delay=1){\n        return new Promise(resolve=>{\n            setTimeout(function(){\n                resolve(valueToResolve);\n            }, delay)\n        });\n    }\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return this.createTimeoutPromise(this.jobInstancesByKey[key]);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        this.jobInstancesByKey[key] = jobInstance;\n        return this.createTimeoutPromise(jobInstance);\n    }\n\n    getJobResult(jobResultId){\n        return this.createTimeoutPromise(Utils.find(this.jobResults, r=>r.id===jobResultId));\n    }\n\n    getJobResultByInstance(jobInstance){\n        return this.createTimeoutPromise(Utils.find(this.jobResults, r=>r.jobInstance.id===jobInstance.id));\n    }\n\n    getJobResultByExecution(jobExecution){\n        return this.getJobResultByInstance(jobExecution.jobInstance);\n    }\n\n    saveJobResult(jobResult) {\n        this.jobResults.push(jobResult);\n        return this.createTimeoutPromise(jobResult);\n    }\n\n    getJobExecutionById(id){\n        return this.createTimeoutPromise(Utils.find(this.jobExecutions, ex=>ex.id===id));\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        this.jobExecutions.push(jobExecution);\n        return this.createTimeoutPromise(jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        this.executionProgress[jobExecutionId] = progress;\n        return this.createTimeoutPromise(progress);\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        return this.createTimeoutPromise(this.executionProgress[jobExecutionId]);\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        this.executionFlags[jobExecutionId] = flag;\n        return this.createTimeoutPromise(flag);\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        return this.createTimeoutPromise(this.executionFlags[jobExecutionId]);\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        this.stepExecutions.push(stepExecution);\n        return this.createTimeoutPromise(stepExecution);\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        return this.createTimeoutPromise(this.jobExecutions.filter(e=>e.jobInstance.id == jobInstance.id).sort(function (a, b) {\n            return a.createTime.getTime() - b.createTime.getTime()\n        }));\n    }\n\n    remove(object){ //TODO\n\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {StepExecution} from \"./step-execution\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {JobExecution} from \"./job-execution\";\n\n/*domain object representing the result of a job instance.*/\nexport class JobResult {\n    id;\n    jobInstance;\n    lastUpdated = null;\n\n    data; // job result data - this is not a data model!\n\n    constructor(jobInstance, id, data) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.jobInstance = jobInstance;\n        this.data = data;\n    }\n\n    getDTO(filteredProperties=[], deepClone = true){\n\n        var cloneMethod = Utils.cloneDeepWith;\n        if(!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        let dto = Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if(filteredProperties.indexOf(key)>-1){\n                return null;\n            }\n\n            if(value && value.$ObjectWithIdAndEditableFields && value.id){\n                return {\n                    '$ObjectWithIdAndEditableFields': true,\n                    id: value.id\n                }\n            }\n\n            if(value instanceof Error){\n                return Utils.getErrorDTO(value);\n            }\n        }));\n\n        return dto\n    }\n}\n","export const JOB_STATUS = {\n    COMPLETED: 'COMPLETED',\n    STARTING: 'STARTING',\n    STARTED: 'STARTED',\n    STOPPING: 'STOPPING',\n    STOPPED: 'STOPPED',\n    FAILED: 'FAILED',\n    UNKNOWN: 'UNKNOWN',\n    ABANDONED: 'ABANDONED',\n    EXECUTING: 'EXECUTING' //for exit status only\n};\n","import {log} from 'sd-utils'\nimport {JOB_STATUS} from \"./job-status\";\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\nimport {JobParametersInvalidException} from \"./exceptions/job-parameters-invalid-exception\";\nimport {JobDataInvalidException} from \"./exceptions/job-data-invalid-exception\";\nimport {JOB_EXECUTION_FLAG} from \"./job-execution-flag\";\nimport {JobResult} from \"./job-result\";\n\n/**\n * Base class for jobs\n * A Job is an entity that encapsulates an entire job process ( an abstraction representing the configuration of a job)\n * */\n\nexport class Job {\n\n    id;\n    name;\n    steps = [];\n\n    isRestartable=true;\n    executionListeners = [];\n    jobParametersValidator;\n\n    jobRepository;\n\n    constructor(name, jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        this.name = name;\n        this.jobParametersValidator = this.getJobParametersValidator();\n        this.jobDataValidator = this.getJobDataValidator();\n        this.jobRepository = jobRepository;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n    }\n\n    setJobRepository(jobRepository) {\n        this.jobRepository = jobRepository;\n    }\n\n    execute(execution) {\n        log.debug(\"Job execution starting: \", execution);\n        var jobResult;\n        return this.checkExecutionFlags(execution).then(execution=>{\n\n            if (execution.status === JOB_STATUS.STOPPING) {\n                // The job was already stopped\n                execution.status = JOB_STATUS.STOPPED;\n                execution.exitStatus = JOB_STATUS.COMPLETED;\n                log.debug(\"Job execution was stopped: \" + execution);\n                return execution;\n            }\n\n            if (this.jobParametersValidator && !this.jobParametersValidator.validate(execution.jobParameters)) {\n                throw new JobParametersInvalidException(\"Invalid job parameters in job execute\")\n            }\n\n            if(this.jobDataValidator && !this.jobDataValidator.validate(execution.getData())){\n                throw new JobDataInvalidException(\"Invalid job data in job execute\")\n            }\n\n\n            execution.startTime = new Date();\n            return Promise.all([this.updateStatus(execution, JOB_STATUS.STARTED), this.getResult(execution), this.updateProgress(execution)]).then(res=>{\n                execution=res[0];\n                jobResult = res[1];\n                if(!jobResult) {\n                    jobResult = new JobResult(execution.jobInstance)\n                }\n                this.executionListeners.forEach(listener=>listener.beforeJob(execution));\n\n                return this.doExecute(execution, jobResult);\n            });\n\n        }).then(execution=>{\n            log.debug(\"Job execution complete: \",execution);\n            return execution\n        }).catch(e=>{\n            if (e instanceof JobInterruptedException) {\n                log.info(\"Encountered interruption executing job\", e);\n                execution.status = JOB_STATUS.STOPPED;\n                execution.exitStatus = JOB_STATUS.STOPPED;\n            } else {\n                log.error(\"Encountered fatal error executing job\", e);\n                execution.status = JOB_STATUS.FAILED;\n                execution.exitStatus = JOB_STATUS.FAILED;\n            }\n            execution.failureExceptions.push(e);\n            return execution;\n        }).then(execution=>{\n            if(jobResult){\n                return this.jobRepository.saveJobResult(jobResult).then(()=>execution)\n            }\n            return execution\n        }).catch(e=>{\n            log.error(\"Encountered fatal error saving job results\", e);\n            if(e){\n                execution.failureExceptions.push(e);\n            }\n            execution.status = JOB_STATUS.FAILED;\n            execution.exitStatus = JOB_STATUS.FAILED;\n            return execution;\n        }).then(execution=>{\n            execution.endTime = new Date();\n            return Promise.all([this.jobRepository.update(execution), this.updateProgress(execution)]).then(res=>res[0])\n        }).then(execution=>{\n            try {\n                this.executionListeners.forEach(listener=>listener.afterJob(execution));\n            } catch (e) {\n                log.error(\"Exception encountered in afterStep callback\", e);\n            }\n            return execution;\n        })\n    }\n\n\n    updateStatus(jobExecution, status) {\n        jobExecution.status=status;\n        return this.jobRepository.update(jobExecution)\n    }\n\n    updateProgress(jobExecution){\n        return this.jobRepository.updateJobExecutionProgress(jobExecution.id, this.getProgress(jobExecution));\n    }\n\n    /* Extension point for subclasses allowing them to concentrate on processing logic and ignore listeners, returns promise*/\n    doExecute(execution, jobResult) {\n        throw 'doExecute function not implemented for job: ' + this.name\n    }\n\n    getJobParametersValidator() {\n        return {\n            validate: (params) => params.validate()\n        }\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => true\n        }\n    }\n\n    addStep(step){\n        this.steps.push(step);\n    }\n\n\n    createJobParameters(values){\n        throw 'createJobParameters function not implemented for job: ' + this.name\n    }\n\n    /*Should return progress object with fields:\n    * current\n    * total */\n    getProgress(execution){\n        return {\n            total: 1,\n            current: execution.status === JOB_STATUS.COMPLETED ? 1 : 0\n        }\n    }\n\n    registerExecutionListener(listener){\n        this.executionListeners.push(listener);\n    }\n\n    checkExecutionFlags(execution){\n        return this.jobRepository.getJobExecutionFlag(execution.id).then(flag=>{\n            if(JOB_EXECUTION_FLAG.STOP === flag){\n                execution.stop();\n            }\n            return execution\n        })\n    }\n\n    getResult(execution) {\n        return this.jobRepository.getJobResultByExecution(execution);\n    }\n\n    /* revive job result data (after conversion to dto) if needed*/\n    reviveResultData(data, executionContext) {\n        return data;\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters){\n        throw 'jobResultToCsvRows function not implemented for job: ' + this.name\n    }\n}\n","import {log} from 'sd-utils'\nimport {JOB_STATUS} from \"./job-status\";\nimport {Job} from \"./job\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {Step} from \"./step\";\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\nimport {JobRestartException} from \"./exceptions/job-restart-exception\";\nimport {JOB_EXECUTION_FLAG} from \"./job-execution-flag\";\n\n/* Simple Job that sequentially executes a job by iterating through its list of steps.  Any Step that fails will fail the job.  The job is\n considered complete when all steps have been executed.*/\n\nexport class SimpleJob extends Job {\n\n    constructor(name, jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(name, jobRepository, expressionsEvaluator, objectiveRulesManager)\n    }\n\n    getStep(stepName) {\n        return Utils.find(this.steps, s=>s.name == stepName);\n    }\n\n    doExecute(execution, jobResult) {\n\n        return this.handleNextStep(execution, jobResult).then(lastExecutedStepExecution=>{\n            if (lastExecutedStepExecution != null) {\n                log.debug(\"Updating JobExecution status: \", lastExecutedStepExecution);\n                execution.status = lastExecutedStepExecution.status;\n                execution.exitStatus = lastExecutedStepExecution.exitStatus;\n                execution.failureExceptions.push(...lastExecutedStepExecution.failureExceptions)\n            }\n            return execution;\n        });\n    }\n\n    handleNextStep(jobExecution, jobResult, prevStep=null, prevStepExecution=null){\n        var stepIndex = 0;\n        if(prevStep){\n            stepIndex = this.steps.indexOf(prevStep)+1;\n        }\n        if(stepIndex>=this.steps.length){\n            return Promise.resolve(prevStepExecution)\n        }\n        var step = this.steps[stepIndex];\n        return this.handleStep(step, jobExecution, jobResult).then(stepExecution=>{\n            if(stepExecution.status !== JOB_STATUS.COMPLETED){ // Terminate the job if a step fails\n                return stepExecution;\n            }\n            return this.handleNextStep(jobExecution, jobResult, step, stepExecution);\n        })\n    }\n\n    handleStep(step, jobExecution, jobResult) {\n        var jobInstance = jobExecution.jobInstance;\n        return this.checkExecutionFlags(jobExecution).then(jobExecution=>{\n            if (jobExecution.isStopping()) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            return this.jobRepository.getLastStepExecution(jobInstance, step.name)\n\n        }).then(lastStepExecution=>{\n            if (this.stepExecutionPartOfExistingJobExecution(jobExecution, lastStepExecution)) {\n                // If the last execution of this step was in the same job, it's probably intentional so we want to run it again.\n                log.info(\"Duplicate step detected in execution of job. step: \" + step.name + \" jobName: \", jobInstance.jobName);\n                lastStepExecution = null;\n            }\n\n            var currentStepExecution = lastStepExecution;\n\n            if (!this.shouldStart(currentStepExecution, jobExecution, step)) {\n                return currentStepExecution;\n            }\n\n            currentStepExecution = jobExecution.createStepExecution(step.name);\n\n            var isCompleted = lastStepExecution != null && lastStepExecution.status === JOB_STATUS.COMPLETED;\n            var isRestart = lastStepExecution != null && !isCompleted;\n            var skipExecution = isCompleted && step.skipOnRestartIfCompleted;\n\n            if (isRestart) {\n                currentStepExecution.executionContext = lastStepExecution.executionContext;\n                if (lastStepExecution.executionContext.containsKey(\"executed\")) {\n                    currentStepExecution.executionContext.remove(\"executed\");\n                }\n            }\n            else {\n\n                currentStepExecution.executionContext = new ExecutionContext();\n            }\n            if(skipExecution){\n                currentStepExecution.exitStatus = JOB_STATUS.COMPLETED;\n                currentStepExecution.status = JOB_STATUS.COMPLETED;\n                currentStepExecution.executionContext.put(\"skipped\", true);\n            }\n\n            return this.jobRepository.addStepExecution(currentStepExecution).then((_currentStepExecution)=>{\n                currentStepExecution=_currentStepExecution;\n                if(skipExecution){\n                    log.info(\"Skipping completed step execution: [\" + step.name + \"]\");\n                    return currentStepExecution;\n                }\n                log.info(\"Executing step: [\" + step.name + \"]\");\n                return step.execute(currentStepExecution, jobResult)\n            }).then(()=>{\n                currentStepExecution.executionContext.put(\"executed\", true);\n                return currentStepExecution;\n            }).catch (e => {\n                jobExecution.status = JOB_STATUS.FAILED;\n                return this.jobRepository.update(jobExecution).then(jobExecution=>{throw e})\n            });\n\n        }).then((currentStepExecution)=>{\n            if (currentStepExecution.status == JOB_STATUS.STOPPING\n                || currentStepExecution.status == JOB_STATUS.STOPPED) {\n                // Ensure that the job gets the message that it is stopping\n                jobExecution.status = JOB_STATUS.STOPPING;\n                // throw new Error(\"Job interrupted by step execution\");\n            }\n            return this.updateProgress(jobExecution).then(()=>currentStepExecution);\n        })\n\n    }\n\n    stepExecutionPartOfExistingJobExecution(jobExecution, stepExecution) {\n        return stepExecution != null && stepExecution.jobExecution.id == jobExecution.id\n    }\n\n    shouldStart(lastStepExecution, execution, step) {\n        var stepStatus;\n        if (lastStepExecution == null) {\n            stepStatus = JOB_STATUS.STARTING;\n        }\n        else {\n            stepStatus = lastStepExecution.status;\n        }\n\n        if (stepStatus == JOB_STATUS.UNKNOWN) {\n            throw new JobRestartException(\"Cannot restart step from UNKNOWN status\")\n        }\n\n        return stepStatus != JOB_STATUS.COMPLETED || step.isRestartable;\n    }\n\n    getProgress(execution){\n        var completedSteps = execution.stepExecutions.length;\n        let progress = {\n            total: this.steps.length,\n            current: completedSteps\n        };\n        if(!completedSteps){\n            return progress\n        }\n        if(JOB_STATUS.COMPLETED !== execution.stepExecutions[execution.stepExecutions.length-1].status){\n            progress.current--;\n        }\n\n        return progress;\n    }\n\n    addStep(){\n        if(arguments.length===1){\n            return super.addStep(arguments[0])\n        }\n        var step = new Step(arguments[0], this.jobRepository);\n        step.doExecute = arguments[1];\n        return super.addStep(step);\n    }\n\n}\n","export class StepExecutionListener {\n    /*Called before a step executes*/\n    beforeStep(jobExecution) {\n\n    }\n\n    /*Called after completion of a step. Called after both successful and failed executions*/\n    afterStep(jobExecution) {\n\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {JOB_STATUS} from \"./job-status\";\nimport {JobExecution} from \"./job-execution\";\n\n/*\n representation of the execution of a step\n */\nexport class StepExecution {\n    id;\n    stepName;\n    jobExecution;\n\n    status = JOB_STATUS.STARTING;\n    exitStatus = JOB_STATUS.EXECUTING;\n    executionContext = new ExecutionContext(); //execution context for single step level,\n\n    startTime = new Date();\n    endTime = null;\n    lastUpdated = null;\n\n    terminateOnly = false; //flag to indicate that an execution should halt\n    failureExceptions = [];\n\n    constructor(stepName, jobExecution, id) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.stepName = stepName;\n        this.jobExecution = jobExecution;\n        this.jobExecutionId = jobExecution.id;\n    }\n\n    getJobParameters(){\n        return this.jobExecution.jobParameters;\n    }\n\n    getJobExecutionContext(){\n        return this.jobExecution.executionContext;\n    }\n\n    getData(){\n        return this.jobExecution.getData();\n    }\n\n    getDTO(filteredProperties=[], deepClone = true){\n\n        var cloneMethod = Utils.cloneDeepWith;\n        if(!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        return Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if(filteredProperties.indexOf(key)>-1){\n                return null;\n            }\n            if([\"executionContext\"].indexOf(key)>-1){\n                return value.getDTO()\n            }\n            if(value instanceof Error){\n                return Utils.getErrorDTO(value);\n            }\n\n            if (value instanceof JobExecution) {\n                return value.getDTO([\"stepExecutions\"], deepClone)\n            }\n        }))\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {log} from 'sd-utils'\n\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\n/*domain object representing the configuration of a job step*/\nexport class Step {\n\n    id;\n    name;\n    isRestartable = true;\n    skipOnRestartIfCompleted=true;\n    steps = [];\n    executionListeners = [];\n\n    jobRepository;\n\n    constructor(name, jobRepository) {\n        this.name = name;\n        this.jobRepository = jobRepository;\n    }\n\n    setJobRepository(jobRepository) {\n        this.jobRepository = jobRepository;\n    }\n\n    /*Process the step and assign progress and status meta information to the StepExecution provided*/\n    execute(stepExecution, jobResult) {\n        log.debug(\"Executing step: name=\" + this.name);\n        stepExecution.startTime = new Date();\n        stepExecution.status = JOB_STATUS.STARTED;\n        var exitStatus;\n        return this.jobRepository.update(stepExecution).then(stepExecution=>{\n            exitStatus = JOB_STATUS.EXECUTING;\n\n            this.executionListeners.forEach(listener=>listener.beforeStep(stepExecution));\n            this.open(stepExecution.executionContext);\n\n            return this.doExecute(stepExecution, jobResult)\n        }).then(_stepExecution=>{\n            stepExecution = _stepExecution;\n            exitStatus = stepExecution.exitStatus;\n\n            // Check if someone is trying to stop us\n            if (stepExecution.terminateOnly) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            // Need to upgrade here not set, in case the execution was stopped\n            stepExecution.status = JOB_STATUS.COMPLETED;\n            log.debug(\"Step execution success: name=\" + this.name);\n            return stepExecution\n        }).catch(e=>{\n            stepExecution.status = this.determineJobStatus(e);\n            exitStatus = stepExecution.status;\n            stepExecution.failureExceptions.push(e);\n\n            if (stepExecution.status == JOB_STATUS.STOPPED) {\n                log.info(\"Encountered interruption executing step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n            else {\n                log.error(\"Encountered an error executing step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n            return stepExecution;\n        }).then(stepExecution=>{\n            try {\n                stepExecution.exitStatus = exitStatus;\n                this.executionListeners.forEach(listener=>listener.afterStep(stepExecution));\n            }\n            catch (e) {\n                log.error(\"Exception in afterStep callback in step \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n\n            stepExecution.endTime = new Date();\n            stepExecution.exitStatus = exitStatus;\n\n\n            return this.jobRepository.update(stepExecution)\n        }).then(stepExecution=>{\n            try {\n                this.close(stepExecution.executionContext);\n            }\n            catch (e) {\n                log.error(\"Exception while closing step execution resources in step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n                stepExecution.failureExceptions.push(e);\n            }\n\n            try {\n                this.close(stepExecution.executionContext);\n            }\n            catch (e) {\n                log.error(\"Exception while closing step execution resources in step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n                stepExecution.failureExceptions.push(e);\n            }\n\n            // doExecutionRelease();\n\n            log.debug(\"Step execution complete: \" + stepExecution.id);\n            return stepExecution;\n        });\n\n    }\n\n    determineJobStatus(e) {\n        if (e instanceof JobInterruptedException) {\n            return JOB_STATUS.STOPPED;\n        }\n        else {\n            return JOB_STATUS.FAILED;\n        }\n    }\n\n    /**\n     * Extension point for subclasses to execute business logic. Subclasses should set the exitStatus on the\n     * StepExecution before returning. Must return stepExecution\n     */\n    doExecute(stepExecution, jobResult) {\n    }\n\n    /**\n     * Extension point for subclasses to provide callbacks to their collaborators at the beginning of a step, to open or\n     * acquire resources. Does nothing by default.\n     */\n    open(executionContext) {\n    }\n\n    /**\n     * Extension point for subclasses to provide callbacks to their collaborators at the end of a step (right at the end\n     * of the finally block), to close or release resources. Does nothing by default.\n     */\n    close(executionContext) {\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(stepExecution){\n        return {\n            total: 1,\n            current: stepExecution.status === JOB_STATUS.COMPLETED ? 1 : 0\n        }\n    }\n}\n","import * as engine from './engine/index'\n\nexport {engine}\nexport * from './jobs-manager'\nexport * from './job-worker'\n\n\n\n","import {JobExecutionListener} from \"./engine/job-execution-listener\";\nimport {JOB_STATUS} from \"./engine/job-status\";\nimport {JobInstance} from \"./engine/job-instance\";\nimport {Utils, log} from \"sd-utils\";\n\n\nexport class JobInstanceManagerConfig {\n    onJobStarted = () => {};\n    onJobCompleted = result => {};\n    onJobFailed = errors => {};\n    onJobStopped = () => {};\n    onJobTerminated = () => {};\n    onProgress = (progress) => {};\n    callbacksThisArg;\n    updateInterval = 100;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/*convenience class for managing and tracking job instance progress*/\nexport class JobInstanceManager extends JobExecutionListener {\n\n    jobsManger;\n    jobInstance;\n    config;\n\n    lastJobExecution;\n    lastUpdateTime;\n    progress = null;\n\n    constructor(jobsManger, jobInstanceOrExecution, config) {\n        super();\n        this.config = new JobInstanceManagerConfig(config);\n        this.jobsManger = jobsManger;\n        if (jobInstanceOrExecution instanceof JobInstance) {\n            this.jobInstance = jobInstanceOrExecution;\n            this.getLastJobExecution().then(je=> {\n                this.checkProgress();\n            })\n        } else {\n            this.lastJobExecution = jobInstanceOrExecution;\n            this.jobInstance = this.lastJobExecution.jobInstance;\n            this.checkProgress();\n        }\n        if (this.lastJobExecution && !this.lastJobExecution.isRunning()) {\n            this.afterJob(this.lastJobExecution);\n            return;\n        }\n        jobsManger.registerJobExecutionListener(this);\n    }\n\n    checkProgress() {\n\n        var self = this;\n        if (this.terminated || !this.lastJobExecution.isRunning() || this.getProgressPercents(this.progress) === 100) {\n            return;\n        }\n        this.jobsManger.getProgress(this.lastJobExecution).then(progress=> {\n            this.lastUpdateTime = new Date();\n            if (progress) {\n                this.progress = progress;\n                this.config.onProgress.call(this.config.callbacksThisArg || this, progress);\n            }\n\n            setTimeout(function () {\n                self.checkProgress();\n            }, this.config.updateInterval)\n        })\n    }\n\n    beforeJob(jobExecution) {\n        if (jobExecution.jobInstance.id !== this.jobInstance.id) {\n            return;\n        }\n\n        this.lastJobExecution = jobExecution;\n        this.config.onJobStarted.call(this.config.callbacksThisArg || this);\n    }\n\n    getProgressPercents(progress) {\n        if (!progress) {\n            return 0;\n        }\n        return progress.current * 100 / progress.total;\n    }\n\n    getProgressFromExecution(jobExecution) {\n        var job = this.jobsManger.getJobByName(jobExecution.jobInstance.jobName);\n        return job.getProgress(jobExecution);\n    }\n\n    afterJob(jobExecution) {\n        if (jobExecution.jobInstance.id !== this.jobInstance.id) {\n            return;\n        }\n        this.lastJobExecution = jobExecution;\n        if (JOB_STATUS.COMPLETED === jobExecution.status) {\n            this.jobsManger.deregisterJobExecutionListener(this);\n            this.progress = this.getProgressFromExecution(jobExecution);\n            this.config.onProgress.call(this.config.callbacksThisArg || this, this.progress);\n            this.jobsManger.getResult(jobExecution).then(result=> {\n                this.config.onJobCompleted.call(this.config.callbacksThisArg || this, result.data);\n            }).catch(e=> {\n                log.error(e);\n            })\n\n\n        } else if (JOB_STATUS.FAILED === jobExecution.status) {\n            this.config.onJobFailed.call(this.config.callbacksThisArg || this, jobExecution.failureExceptions);\n\n        } else if (JOB_STATUS.STOPPED === jobExecution.status) {\n            this.config.onJobStopped.call(this.config.callbacksThisArg || this);\n        }\n    }\n\n    getLastJobExecution(forceUpdate = false) {\n        if (!this.lastJobExecution || forceUpdate) {\n            return this.jobsManger.jobRepository.getLastJobExecutionByInstance(this.jobInstance).then(je=> {\n                this.lastJobExecution = je;\n                return je;\n            });\n        }\n        return Promise.resolve(this.lastJobExecution);\n    }\n\n    stop() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.stop(this.lastJobExecution)\n        })\n    }\n\n    resume() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.run(this.jobInstance.jobName, this.lastJobExecution.jobParameters.values, this.lastJobExecution.getData()).then(je=> {\n                this.lastJobExecution = je;\n                this.checkProgress();\n                return true;\n            }).catch(e=> {\n                log.error(e);\n                return false;\n            })\n        })\n    }\n\n    terminate() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.terminate(this.jobInstance).then(()=> {\n                this.terminated = true;\n                this.config.onJobTerminated.call(this.config.callbacksThisArg || this, this.lastJobExecution);\n                this.jobsManger.deregisterJobExecutionListener(this);\n\n                return this.lastJobExecution;\n            })\n        }).catch(e=> {\n            log.error(e);\n            return false;\n        })\n    }\n\n}\n","export class JobWorker{\n\n    worker;\n    listeners = {};\n    defaultListener;\n\n    constructor(url, defaultListener, onError){\n        var instance = this;\n        this.worker = new Worker(url);\n        this.defaultListener = defaultListener || function() {};\n        if (onError) {this.worker.onerror = onError;}\n\n        this.worker.onmessage = function(event) {\n            if (event.data instanceof Object &&\n                event.data.hasOwnProperty('queryMethodListener') && event.data.hasOwnProperty('queryMethodArguments')) {\n                var listener = instance.listeners[event.data.queryMethodListener];\n                var args = event.data.queryMethodArguments;\n                if(listener.deserializer){\n                    args = listener.deserializer(args);\n                }\n                listener.fn.apply(listener.thisArg, args);\n            } else {\n                this.defaultListener.call(instance, event.data);\n            }\n        }\n\n    }\n\n    sendQuery() {\n        if (arguments.length < 1) {\n            throw new TypeError('JobWorker.sendQuery takes at least one argument');\n        }\n        this.worker.postMessage({\n            'queryMethod': arguments[0],\n            'queryArguments': Array.prototype.slice.call(arguments, 1)\n        });\n    }\n\n    runJob(jobName, jobParametersValues, dataDTO){\n        this.sendQuery('runJob', jobName, jobParametersValues, dataDTO)\n    }\n\n    executeJob(jobExecutionId){\n        this.sendQuery('executeJob', jobExecutionId)\n    }\n\n    recompute(dataDTO, ruleNames, evalCode, evalNumeric){\n        this.sendQuery('recompute', dataDTO, ruleNames, evalCode, evalNumeric)\n    }\n\n    postMessage(message) {\n        this.worker.postMessage(message);\n    }\n\n    terminate() {\n        this.worker.terminate();\n    }\n\n    addListener(name, listener, thisArg, deserializer) {\n        this.listeners[name] = {\n            fn: listener,\n            thisArg: thisArg || this,\n            deserializer: deserializer\n        };\n    }\n\n    removeListener(name) {\n        delete this.listeners[name];\n    }\n}\n","import {Utils, log} from \"sd-utils\";\nimport {SensitivityAnalysisJob} from \"./configurations/sensitivity-analysis/n-way/sensitivity-analysis-job\";\nimport {JobLauncher} from \"./engine/job-launcher\";\nimport {JobWorker} from \"./job-worker\";\nimport {JobExecutionListener} from \"./engine/job-execution-listener\";\nimport {JobParameters} from \"./engine/job-parameters\";\nimport {IdbJobRepository} from \"./engine/job-repository/idb-job-repository\";\nimport {JOB_EXECUTION_FLAG} from \"./engine/job-execution-flag\";\nimport {RecomputeJob} from \"./configurations/recompute/recompute-job\";\nimport {ProbabilisticSensitivityAnalysisJob} from \"./configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job\";\nimport {TimeoutJobRepository} from \"./engine/job-repository/timeout-job-repository\";\nimport {TornadoDiagramJob} from \"./configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job\";\nimport {JOB_STATUS} from \"./engine/job-status\";\nimport {SimpleJobRepository} from \"./engine/job-repository/simple-job-repository\";\nimport {LeagueTableJob} from \"./configurations/league-table/league-table-job\";\nimport {SpiderPlotJob} from \"./configurations/sensitivity-analysis/spider-plot/spider-plot-job\";\nimport {PayoffsTransformationJob} from \"./configurations/payoffs-transformation/payoffs-transformation-job\";\n\n\nexport class JobsManagerConfig {\n\n    workerUrl = null;\n    repositoryType = 'idb';\n    clearRepository = false;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\nexport class JobsManager extends JobExecutionListener {\n\n\n    useWorker;\n    expressionsEvaluator;\n    objectiveRulesManager;\n    jobWorker;\n\n    jobRepository;\n    jobLauncher;\n\n    jobExecutionListeners = [];\n\n    afterJobExecutionPromiseResolves = {};\n    jobInstancesToTerminate = {};\n\n    constructor(expressionsEvaluator, objectiveRulesManager, config) {\n        super();\n        this.setConfig(config);\n        this.expressionEngine = expressionsEvaluator.expressionEngine;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n\n\n        this.useWorker = !!this.config.workerUrl;\n        if (this.useWorker) {\n            this.initWorker(this.config.workerUrl);\n        }\n\n        this.initRepository();\n\n        this.registerJobs();\n\n\n\n        this.jobLauncher = new JobLauncher(this.jobRepository, this.jobWorker, (data)=>this.serializeData(data));\n    }\n\n    setConfig(config) {\n        this.config = new JobsManagerConfig(config);\n        return this;\n    }\n\n    initRepository() {\n        switch (this.config.repositoryType){\n            case 'idb':\n                this.jobRepository = new IdbJobRepository(this.expressionEngine.getJsonReviver(), 'sd-job-repository', this.config.clearRepository);\n                break;\n            case 'timeout':\n                this.jobRepository = new TimeoutJobRepository(this.expressionEngine.getJsonReviver());\n                break;\n            case 'simple':\n                this.jobRepository = new SimpleJobRepository(this.expressionEngine.getJsonReviver());\n                break;\n            default:\n                log.error('JobsManager configuration error! Unknown repository type: '+this.config.repositoryType+'. Using default: idb');\n                this.config.repositoryType = 'idb';\n                this.initRepository()\n        }\n    }\n\n    serializeData(data) {\n        return data.serialize(true, false, false, this.expressionEngine.getJsonReplacer());\n    }\n\n    getProgress(jobExecutionOrId) {\n        var id = jobExecutionOrId;\n        if (!Utils.isString(jobExecutionOrId)) {\n            id = jobExecutionOrId.id\n        }\n        return this.jobRepository.getJobExecutionProgress(id);\n    }\n\n    getResult(jobInstanceOrExecution) {\n        let jobInstance = jobInstanceOrExecution;\n        let jobExecution = null;\n        if(jobInstanceOrExecution.jobInstance){\n            jobExecution = jobInstanceOrExecution;\n            jobInstance = jobExecution.jobInstance;\n        }\n\n        return this.jobRepository.getJobResultByInstance(jobInstance);\n    }\n\n    run(jobName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        return this.jobLauncher.run(jobName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched).then(jobExecution=> {\n            if (resolvePromiseAfterJobIsLaunched || !jobExecution.isRunning()) {\n                return jobExecution;\n            }\n            //job was delegated to worker and is still running\n\n            return new Promise((resolve, reject)=> {\n                this.afterJobExecutionPromiseResolves[jobExecution.id] = resolve;\n            });\n        });\n    }\n\n    execute(jobExecutionOrId) {\n        return this.jobLauncher.execute(jobExecutionOrId);\n    }\n\n    stop(jobExecutionOrId) {\n        var id = jobExecutionOrId;\n        if (!Utils.isString(jobExecutionOrId)) {\n            id = jobExecutionOrId.id\n        }\n\n        return this.jobRepository.getJobExecutionById(id).then(jobExecution=> {\n            if (!jobExecution) {\n                log.error(\"Job Execution not found: \" + jobExecutionOrId);\n                return null;\n            }\n            if (!jobExecution.isRunning()) {\n                log.warn(\"Job Execution not running, status: \" + jobExecution.status + \", endTime: \" + jobExecution.endTime);\n                return jobExecution;\n            }\n\n            return this.jobRepository.saveJobExecutionFlag(jobExecution.id, JOB_EXECUTION_FLAG.STOP).then(()=>jobExecution);\n        });\n    }\n\n    /*stop job execution if running and delete job instance from repository*/\n    terminate(jobInstance) {\n        return this.jobRepository.getLastJobExecutionByInstance(jobInstance).then(jobExecution=> {\n            if (jobExecution) {\n                if(jobExecution.isRunning()){\n                    return this.jobRepository.saveJobExecutionFlag(jobExecution.id, JOB_EXECUTION_FLAG.STOP).then(()=>jobExecution);\n                }else{\n                    return this.jobRepository.removeJobInstance(jobInstance, jobExecution.jobParameters);\n                }\n            }\n        }).then(()=>{\n            this.jobInstancesToTerminate[jobInstance.id]=jobInstance;\n        })\n    }\n\n    getJobByName(jobName) {\n        return this.jobRepository.getJobByName(jobName);\n    }\n\n\n    createJobParameters(jobName, jobParametersValues) {\n        var job = this.jobRepository.getJobByName(jobName);\n        return job.createJobParameters(jobParametersValues);\n    }\n\n\n    /*Returns a promise*/\n    getLastJobExecution(jobName, jobParameters) {\n        if (this.useWorker) {\n            return this.jobWorker;\n        }\n        if (!(jobParameters instanceof JobParameters)) {\n            jobParameters = this.createJobParameters(jobParameters)\n        }\n        return this.jobRepository.getLastJobExecution(jobName, jobParameters);\n    }\n\n    initWorker(workerUrl) {\n        this.jobWorker = new JobWorker(workerUrl, ()=>{\n            log.error('error in worker', arguments);\n        });\n        var argsDeserializer = (args)=> {\n            return [this.jobRepository.reviveJobExecution(args[0])]\n        };\n\n        this.jobWorker.addListener(\"beforeJob\", this.beforeJob, this, argsDeserializer);\n        this.jobWorker.addListener(\"afterJob\", this.afterJob, this, argsDeserializer);\n        this.jobWorker.addListener(\"jobFatalError\", this.onJobFatalError, this);\n    }\n\n    registerJobs() {\n\n        let sensitivityAnalysisJob = new SensitivityAnalysisJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        let probabilisticSensitivityAnalysisJob = new ProbabilisticSensitivityAnalysisJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        if(!Utils.isWorker()){\n            sensitivityAnalysisJob.setBatchSize(1);\n            probabilisticSensitivityAnalysisJob.setBatchSize(1);\n        }\n\n        this.registerJob(sensitivityAnalysisJob);\n        this.registerJob(new TornadoDiagramJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(probabilisticSensitivityAnalysisJob);\n        this.registerJob(new RecomputeJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new LeagueTableJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new SpiderPlotJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new PayoffsTransformationJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n    }\n\n    registerJob(job) {\n        this.jobRepository.registerJob(job);\n        job.registerExecutionListener(this)\n    }\n\n    registerJobExecutionListener(listener) {\n        this.jobExecutionListeners.push(listener);\n    }\n\n    deregisterJobExecutionListener(listener) {\n        var index = this.jobExecutionListeners.indexOf(listener);\n        if (index > -1) {\n            this.jobExecutionListeners.splice(index, 1)\n        }\n    }\n\n    beforeJob(jobExecution) {\n        log.debug(\"beforeJob\", this.useWorker, jobExecution);\n        this.jobExecutionListeners.forEach(l=>l.beforeJob(jobExecution));\n    }\n\n    afterJob(jobExecution) {\n        log.debug(\"afterJob\", this.useWorker, jobExecution);\n        this.jobExecutionListeners.forEach(l=>l.afterJob(jobExecution));\n        var promiseResolve = this.afterJobExecutionPromiseResolves[jobExecution.id];\n        if (promiseResolve) {\n            promiseResolve(jobExecution)\n        }\n\n        if(this.jobInstancesToTerminate[jobExecution.jobInstance.id]){\n            this.jobRepository.removeJobInstance(jobExecution.jobInstance, jobExecution.jobParameters);\n        }\n    }\n\n    onJobFatalError(jobExecutionId, error){\n        var promiseResolve = this.afterJobExecutionPromiseResolves[jobExecutionId];\n        if (promiseResolve) {\n            this.jobRepository.getJobExecutionById(jobExecutionId).then(jobExecution=>{\n                jobExecution.status = JOB_STATUS.FAILED;\n                if(error){\n                    jobExecution.failureExceptions.push(error);\n                }\n\n                return this.jobRepository.saveJobExecution(jobExecution).then(()=>{\n                    promiseResolve(jobExecution);\n                })\n            }).catch(e=>{\n                log.error(e);\n            })\n\n        }\n        log.debug('onJobFatalError', jobExecutionId, error);\n    }\n\n\n}\n","import {\n    ExpectedValueMaximizationRule,\n    ExpectedValueMinimizationRule,\n    MaxiMinRule,\n    MaxiMaxRule,\n    MiniMinRule,\n    MiniMaxRule\n} from \"./rules\";\nimport {log} from \"sd-utils\";\nimport * as model from \"sd-model\";\nimport {MinMaxRule} from \"./rules/min-max-rule\";\nimport {MaxMinRule} from \"./rules/max-min-rule\";\nimport {MinMinRule} from \"./rules/min-min-rule\";\nimport {MaxMaxRule} from \"./rules/max-max-rule\";\n\nexport class ObjectiveRulesManager{\n\n    expressionEngine;\n    currentRule;\n    ruleByName = {};\n    rules = [];\n\n\n    flipPair = {};\n    payoffIndex = 0;\n\n    constructor(expressionEngine, currentRuleName) {\n        this.expressionEngine = expressionEngine;\n        this.addRule(new ExpectedValueMaximizationRule(expressionEngine));\n        this.addRule(new ExpectedValueMinimizationRule(expressionEngine));\n        this.addRule(new MaxiMinRule(expressionEngine));\n        this.addRule(new MaxiMaxRule(expressionEngine));\n        this.addRule(new MiniMinRule(expressionEngine));\n        this.addRule(new MiniMaxRule(expressionEngine));\n\n        let minMax = new MinMaxRule(expressionEngine);\n        this.addRule(minMax);\n        let maxMin = new MaxMinRule(expressionEngine);\n        this.addRule(maxMin);\n        this.addFlipPair(minMax, maxMin);\n\n        let minMin = new MinMinRule(expressionEngine);\n        this.addRule(minMin);\n        let maxMax = new MaxMaxRule(expressionEngine);\n        this.addRule(maxMax);\n\n\n        if (currentRuleName) {\n            this.currentRule = this.ruleByName[currentRuleName];\n        } else {\n            this.currentRule = this.rules[0];\n        }\n\n    }\n\n\n    setPayoffIndex(payoffIndex){\n        this.payoffIndex = payoffIndex || 0;\n    }\n\n    addRule(rule){\n        this.ruleByName[rule.name]=rule;\n        this.rules.push(rule);\n    }\n\n    isRuleName(ruleName){\n         return !!this.ruleByName[ruleName]\n    }\n\n    setCurrentRuleByName(ruleName){\n        this.currentRule = this.ruleByName[ruleName];\n    }\n\n    getObjectiveRuleByName(ruleName){\n        return this.ruleByName[ruleName];\n    }\n\n    flipRule(){\n        var flipped = this.flipPair[this.currentRule.name];\n        if(flipped){\n            this.currentRule = flipped;\n        }\n    }\n\n    updateDefaultCriterion1Weight(defaultCriterion1Weight){\n        this.rules.filter(r=>r.multiCriteria).forEach(r=>r.setDefaultCriterion1Weight(defaultCriterion1Weight));\n    }\n\n    recompute(dataModel, allRules, decisionPolicy=null){\n\n        var startTime = new Date().getTime();\n        log.trace('recomputing rules, all: '+allRules);\n\n        dataModel.getRoots().forEach(n=>{\n            this.recomputeTree(n, allRules, decisionPolicy);\n        });\n\n        var time  = (new Date().getTime() - startTime/1000);\n        log.trace('recomputation took '+time+'s');\n\n        return this;\n    }\n\n    recomputeTree(root, allRules, decisionPolicy=null){\n        log.trace('recomputing rules for tree ...', root);\n\n        var startTime = new Date().getTime();\n\n        var rules  = [this.currentRule];\n        if(allRules){\n            rules = this.rules;\n        }\n\n        rules.forEach(rule=> {\n            rule.setPayoffIndex(this.payoffIndex);\n            rule.setDecisionPolicy(decisionPolicy);\n            rule.computePayoff(root);\n            rule.computeOptimal(root);\n            rule.clearDecisionPolicy();\n        });\n\n        var time  = (new Date().getTime() - startTime)/1000;\n        log.trace('recomputation took '+time+'s');\n\n        return this;\n    }\n\n\n    getNodeDisplayValue(node, name) {\n        return node.computedValue(this.currentRule.name, name)\n\n    }\n\n    getEdgeDisplayValue(e, name){\n        if(name==='probability'){\n            if(e.parentNode instanceof model.domain.DecisionNode){\n                return e.computedValue(this.currentRule.name, 'probability');\n            }\n            if(e.parentNode instanceof model.domain.ChanceNode){\n                return e.computedBaseProbability();\n            }\n            return null;\n        }\n        if(name==='payoff'){\n            if(this.currentRule.multiCriteria){\n                return e.computedValue(null, 'payoff');\n            }else{\n                return e.computedValue(null, 'payoff[' +this.payoffIndex + ']');\n            }\n\n        }\n        if(name==='optimal'){\n            return e.computedValue(this.currentRule.name, 'optimal')\n        }\n    }\n\n    addFlipPair(rule1, rule2) {\n        this.flipPair[rule1.name] = rule2;\n        this.flipPair[rule2.name] = rule1;\n    }\n\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from 'sd-utils'\n\n/*expected value maximization rule*/\nexport class ExpectedValueMaximizationRule extends ObjectiveRule{\n\n    static NAME = 'expected-value-maximization';\n\n    constructor(expressionEngine){\n        super(ExpectedValueMaximizationRule.NAME, true, expressionEngine);\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff=0, probabilityToEnter=1){\n        this.cValue(node, 'optimal', true);\n        if(node instanceof model.TerminalNode){\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=>{\n            if ( this.subtract(this.computedPayoff(node),payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode) ) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e,'probability')));\n            }else{\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*expected value minimization rule*/\nexport class ExpectedValueMinimizationRule extends ObjectiveRule{\n\n    static NAME = 'expected-value-minimization';\n\n    constructor(expressionEngine){\n        super(ExpectedValueMinimizationRule.NAME, false, expressionEngine);\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff=0, probabilityToEnter=1){\n        this.cValue(node, 'optimal', true);\n        if(node instanceof model.TerminalNode){\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=>{\n            if ( this.subtract(this.computedPayoff(node),payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode) ) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e,'probability')));\n            }else{\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","export * from './objective-rule'\nexport * from './expected-value-maximization-rule'\nexport * from './expected-value-minimization-rule'\nexport * from './maxi-max-rule'\nexport * from './maxi-min-rule'\nexport * from './mini-max-rule'\nexport * from './mini-min-rule'\n\n\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MaxMaxRule extends MultiCriteriaRule{\n\n    static NAME = 'max-max';\n\n    constructor(expressionEngine){\n        super(MaxMaxRule.NAME, [1, 1], expressionEngine);\n    }\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MaxMinRule extends MultiCriteriaRule{\n\n    static NAME = 'max-min';\n\n    constructor(expressionEngine){\n        super(MaxMinRule.NAME, [1, -1], expressionEngine);\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*maxi-max rule*/\nexport class MaxiMaxRule extends ObjectiveRule{\n\n    static NAME = 'maxi-max';\n\n    constructor(expressionEngine){\n        super(MaxiMaxRule.NAME, true, expressionEngine);\n    }\n\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)<bestChildPayoff ? 0.0 : (1.0/bestCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.maxBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*maxi-min rule*/\nexport class MaxiMinRule extends ObjectiveRule{\n\n    static NAME = 'maxi-min';\n\n    constructor(expressionEngine){\n        super(MaxiMinRule.NAME, true, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)>worstChildPayoff ? 0.0 : (1.0/worstCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.minBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MinMaxRule extends MultiCriteriaRule{\n\n    static NAME = 'min-max';\n\n    constructor(expressionEngine){\n        super(MinMaxRule.NAME, [-1, 1], expressionEngine);\n    }\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MinMinRule extends MultiCriteriaRule{\n\n    static NAME = 'min-min';\n\n    constructor(expressionEngine){\n        super(MinMinRule.NAME, [-1, -1], expressionEngine);\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*mini-max rule*/\nexport class MiniMaxRule extends ObjectiveRule{\n\n    static NAME = 'mini-max';\n\n    constructor(expressionEngine){\n        super(MiniMaxRule.NAME, false, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)<bestChildPayoff ? 0.0 : (1.0/bestCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.maxBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*mini-min rule*/\nexport class MiniMinRule extends ObjectiveRule{\n\n    static NAME = 'mini-min';\n\n    constructor(expressionEngine){\n        super(MiniMinRule.NAME, false, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)>worstChildPayoff ? 0.0 : (1.0/worstCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.minBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from \"sd-model\";\nimport {ObjectiveRule} from \"./objective-rule\";\nimport {Policy} from \"../../policies/policy\";\n\n\nexport class MultiCriteriaRule extends ObjectiveRule {\n\n    criterion1Weight = 1;\n    payoffCoeffs = [1, -1];\n\n    constructor(name, payoffCoeffs, expressionEngine) {\n        super(name, true, expressionEngine, true);\n        this.payoffCoeffs = payoffCoeffs;\n\n    }\n\n    setDefaultCriterion1Weight(criterion1Weight) {\n        this.criterion1Weight = criterion1Weight;\n    }\n\n    // payoff - parent edge payoff, aggregatedPayoff - aggregated payoff along path\n    computePayoff(node, payoff = [0, 0], aggregatedPayoff = [0, 0]) {\n        var childrenPayoff = [0, 0];\n        if (node.childEdges.length) {\n            if (node instanceof model.DecisionNode) {\n\n                var selectedIndexes = [];\n                var bestChild = -Infinity;\n\n                node.childEdges.forEach((e, i)=> {\n                    let basePayoffs = [this.basePayoff(e, 0), this.basePayoff(e, 1)];\n                    var childPayoff = this.computePayoff(e.childNode, basePayoffs, [this.add(basePayoffs[0], aggregatedPayoff[0]), this.add(basePayoffs[1], aggregatedPayoff[1])]);\n                    var childCombinedPayoff = this.cValue(e.childNode, 'combinedPayoff');\n                    if (childCombinedPayoff > bestChild) {\n                        bestChild = childCombinedPayoff;\n                        selectedIndexes = [i];\n                    } else if (bestChild.equals(childCombinedPayoff)) {\n                        selectedIndexes.push(i);\n                    }\n                });\n\n                if (this.decisionPolicy) {\n                    selectedIndexes = [];\n                    var decision = Policy.getDecision(this.decisionPolicy, node);\n                    if (decision) {\n                        selectedIndexes = [decision.decisionValue];\n                    }\n\n                }\n\n                node.childEdges.forEach((e, i)=> {\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', selectedIndexes.indexOf(i) < 0 ? 0.0 : 1.0);\n                });\n            } else {\n                node.childEdges.forEach(e=> {\n                    let basePayoffs = [this.basePayoff(e, 0), this.basePayoff(e, 1)];\n                    this.computePayoff(e.childNode, basePayoffs, [this.add(basePayoffs[0], aggregatedPayoff[0]), this.add(basePayoffs[1], aggregatedPayoff[1])]);\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', this.baseProbability(e));\n                });\n            }\n\n            var sumweight = 0;\n            node.childEdges.forEach(e=> {\n                sumweight = this.add(sumweight, this.cValue(e, 'probability'));\n            });\n\n            if (sumweight > 0) {\n                node.childEdges.forEach(e=> {\n                    childrenPayoff.forEach((p, i)=> {\n                        let ep = this.cValue(e.childNode, 'payoff[' + i + ']');\n                        childrenPayoff[i] = this.add(p, this.multiply(this.cValue(e, 'probability'), ep).div(sumweight))\n                    });\n                });\n            }\n\n\n        }\n        payoff.forEach((p, i)=> {\n            payoff[i] = this.add(p, childrenPayoff[i]);\n        });\n\n        this.clearComputedValues(node);\n\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'aggregatedPayoff', aggregatedPayoff);\n            this.cValue(node, 'probabilityToEnter', 0); //initial value\n        } else {\n            this.cValue(node, 'childrenPayoff', childrenPayoff);\n        }\n\n        this.cValue(node, 'combinedPayoff', this.computeCombinedPayoff(payoff));\n\n        return this.cValue(node, 'payoff', payoff);\n    }\n\n    computeCombinedPayoff(payoff){\n        // [criterion 1 coeff]*[criterion 1]*[weight]+[criterion 2 coeff]*[criterion 2]\n        if (this.criterion1Weight === Infinity) {\n            return this.multiply(this.payoffCoeffs[0], payoff[0]);\n        }\n        return this.add(this.multiply(this.payoffCoeffs[0], this.multiply(this.criterion1Weight, payoff[0])), this.multiply(this.payoffCoeffs[1], payoff[1]));\n    }\n\n    //  combinedPayoff - parent edge combinedPayoff\n    computeOptimal(node, combinedPayoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=> {\n            if (this.subtract(this.cValue(node, 'combinedPayoff'), combinedPayoff).equals(this.cValue(e.childNode, 'combinedPayoff')) || !(node instanceof model.DecisionNode)) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.computeCombinedPayoff([this.basePayoff(e, 0), this.basePayoff(e, 1)]), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {domain as model} from \"sd-model\";\nimport {Policy} from \"../../policies/policy\";\n\n/*Base class for objective rules*/\nexport class ObjectiveRule {\n    name;\n    expressionEngine;\n\n    decisionPolicy;\n    maximization;\n\n    payoffIndex = 0;\n    multiCriteria = false;\n\n    constructor(name, maximization, expressionEngine, multiCriteria=false) {\n        this.name = name;\n        this.maximization = maximization;\n        this.expressionEngine = expressionEngine;\n        this.multiCriteria = multiCriteria;\n    }\n\n    setDecisionPolicy(decisionPolicy) {\n        this.decisionPolicy = decisionPolicy;\n    }\n\n    setPayoffIndex(payoffIndex) {\n        this.payoffIndex = payoffIndex;\n    }\n\n    clearDecisionPolicy() {\n        this.decisionPolicy = null;\n    }\n\n    // should return array of selected children indexes\n    makeDecision(decisionNode, childrenPayoffs) {\n        var best;\n        if (this.maximization) {\n            best = this.max(...childrenPayoffs);\n        } else {\n            best = this.min(...childrenPayoffs);\n        }\n        var selectedIndexes = [];\n        childrenPayoffs.forEach((p, i)=> {\n            if (ExpressionEngine.compare(best, p) == 0) {\n                selectedIndexes.push(i);\n            }\n        });\n        return selectedIndexes;\n    }\n\n    _makeDecision(decisionNode, childrenPayoffs) {\n        if (this.decisionPolicy) {\n            var decision = Policy.getDecision(this.decisionPolicy, decisionNode);\n            if (decision) {\n                return [decision.decisionValue];\n            }\n            return [];\n        }\n        return this.makeDecision(decisionNode, childrenPayoffs);\n    }\n\n    // extension point for changing computed probability of edges in a chance node\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount) {\n\n    }\n\n    // payoff - parent edge payoff, aggregatedPayoff - aggregated payoff along path\n    computePayoff(node, payoff = 0, aggregatedPayoff = 0) {\n        var childrenPayoff = 0;\n        if (node.childEdges.length) {\n            if (node instanceof model.DecisionNode) {\n\n                var selectedIndexes = this._makeDecision(node, node.childEdges.map(e=>this.computePayoff(e.childNode, this.basePayoff(e), this.add(this.basePayoff(e), aggregatedPayoff))));\n                node.childEdges.forEach((e, i)=> {\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', selectedIndexes.indexOf(i) < 0 ? 0.0 : 1.0);\n                });\n\n            } else {\n                var bestChild = -Infinity;\n                var bestCount = 1;\n                var worstChild = Infinity;\n                var worstCount = 1;\n\n                node.childEdges.forEach(e=> {\n                    var childPayoff = this.computePayoff(e.childNode, this.basePayoff(e), this.add(this.basePayoff(e), aggregatedPayoff));\n                    if (childPayoff < worstChild) {\n                        worstChild = childPayoff;\n                        worstCount = 1;\n                    } else if (childPayoff.equals(worstChild)) {\n                        worstCount++\n                    }\n                    if (childPayoff > bestChild) {\n                        bestChild = childPayoff;\n                        bestCount = 1;\n                    } else if (childPayoff.equals(bestChild)) {\n                        bestCount++\n                    }\n\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', this.baseProbability(e));\n                });\n                this.modifyChanceProbability(node.childEdges, bestChild, bestCount, worstChild, worstCount);\n            }\n\n            var sumweight = 0;\n            node.childEdges.forEach(e=> {\n                sumweight = this.add(sumweight, this.cValue(e, 'probability'));\n            });\n\n            // console.log(payoff,node.childEdges,'sumweight',sumweight);\n            if (sumweight > 0) {\n                node.childEdges.forEach(e=> {\n                    childrenPayoff = this.add(childrenPayoff, this.multiply(this.cValue(e, 'probability'), this.computedPayoff(e.childNode)).div(sumweight));\n                });\n            }\n\n\n        }\n\n        payoff = this.add(payoff, childrenPayoff);\n        this.clearComputedValues(node);\n\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'aggregatedPayoff'+ '[' + this.payoffIndex + ']', aggregatedPayoff);\n            this.cValue(node, 'probabilityToEnter', 0); //initial value\n        } else {\n            this.cValue(node, 'childrenPayoff' + '[' + this.payoffIndex + ']', childrenPayoff);\n        }\n\n        return this.computedPayoff(node, payoff);\n    }\n\n    // koloruje optymalne ścieżki\n    computeOptimal(node) {\n        throw 'computeOptimal function not implemented for rule: ' + this.name\n    }\n\n    /* get or set computed payoff*/\n    computedPayoff(node, value){\n        return this.cValue(node, 'payoff[' + this.payoffIndex + ']', value)\n    }\n\n    /*Get or set object's computed value for current rule*/\n    cValue(object, fieldPath, value) {\n        // if(fieldPath.trim() === 'payoff'){\n        //     fieldPath += '[' + this.payoffIndex + ']';\n        // }\n\n        return object.computedValue(this.name, fieldPath, value);\n    }\n\n    baseProbability(edge) {\n        return edge.computedBaseProbability();\n    }\n\n    basePayoff(edge, payoffIndex) {\n        return edge.computedBasePayoff(undefined, payoffIndex || this.payoffIndex);\n    }\n\n    clearComputedValues(object) {\n        object.clearComputedValues(this.name);\n    }\n\n    add(a, b) {\n        return ExpressionEngine.add(a, b)\n    }\n\n    subtract(a, b) {\n        return ExpressionEngine.subtract(a, b)\n    }\n\n    divide(a, b) {\n        return ExpressionEngine.divide(a, b)\n    }\n\n    multiply(a, b) {\n        return ExpressionEngine.multiply(a, b)\n    }\n\n    max() {\n        return ExpressionEngine.max(...arguments)\n    }\n\n    min() {\n        return ExpressionEngine.min(...arguments)\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ExpressionEngine} from 'sd-expression-engine'\nimport {log} from 'sd-utils'\nimport {Operation} from \"./operation\";\nimport {TreeValidator} from \"../validation/tree-validator\";\n\n/*Subtree flipping operation*/\nexport class FlipSubtree extends Operation{\n\n    static $NAME = 'flipSubtree';\n    data;\n    expressionEngine;\n\n    constructor(data, expressionEngine) {\n        super(FlipSubtree.$NAME);\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.treeValidator = new TreeValidator(expressionEngine);\n    }\n\n    isApplicable(object){\n        return object instanceof model.ChanceNode\n    }\n\n    canPerform(node) {\n        if (!this.isApplicable(node)) {\n            return false;\n        }\n\n        if (!this.treeValidator.validate(this.data.getAllNodesInSubtree(node)).isValid()) { //check if the whole subtree is proper\n            return false;\n        }\n\n        if (node.childEdges.length < 1) {\n            return false;\n        }\n\n\n        var grandchildrenNumber = null;\n        var grandchildrenEdgeLabels = [];\n        var childrenEdgeLabelsSet = new Set();\n        var grandchildrenEdgeLabelsSet;\n        if (!node.childEdges.every(e=> {\n\n                var child = e.childNode;\n                if (!(child instanceof model.ChanceNode)) {\n                    return false;\n                }\n\n                if (childrenEdgeLabelsSet.has(e.name.trim())) { // edge labels should be unique\n                    return false;\n                }\n                childrenEdgeLabelsSet.add(e.name.trim());\n\n                if (grandchildrenNumber === null) {\n                    grandchildrenNumber = child.childEdges.length;\n                    if (grandchildrenNumber < 1) {\n                        return false;\n                    }\n                    child.childEdges.forEach(ge=> {\n                        grandchildrenEdgeLabels.push(ge.name.trim());\n                    });\n\n                    grandchildrenEdgeLabelsSet = new Set(grandchildrenEdgeLabels);\n\n                    if (grandchildrenEdgeLabelsSet.size !== grandchildrenEdgeLabels.length) { //grandchildren edge labels should be unique\n                        return false;\n                    }\n\n                    return true;\n                }\n\n                if (child.childEdges.length != grandchildrenNumber) {\n                    return false;\n                }\n\n                if (!child.childEdges.every((ge, i)=>grandchildrenEdgeLabels[i] === ge.name.trim())) {\n                    return false;\n                }\n\n                return true;\n\n            })) {\n\n            return false;\n        }\n\n        return true;\n    }\n\n    perform(root) {\n\n        var rootClone = this.data.cloneSubtree(root, true);\n        var oldChildrenNumber = root.childEdges.length;\n        var oldGrandChildrenNumber = root.childEdges[0].childNode.childEdges.length;\n\n        var childrenNumber = oldGrandChildrenNumber;\n        var grandChildrenNumber = oldChildrenNumber;\n\n        var callbacksDisabled = this.data.callbacksDisabled;\n        this.data.callbacksDisabled = true;\n\n\n        var childX = root.childEdges[0].childNode.location.x;\n        var topY = root.childEdges[0].childNode.childEdges[0].childNode.location.y;\n        var bottomY = root.childEdges[oldChildrenNumber - 1].childNode.childEdges[oldGrandChildrenNumber - 1].childNode.location.y;\n\n        var extentY = bottomY - topY;\n        var stepY = extentY / (childrenNumber + 1);\n\n        root.childEdges.slice().forEach(e=> this.data.removeNode(e.childNode));\n\n\n        for (var i = 0; i < childrenNumber; i++) {\n            var child = new model.ChanceNode(new model.Point(childX, topY + (i + 1) * stepY));\n            var edge = this.data.addNode(child, root);\n            edge.name = rootClone.childEdges[0].childNode.childEdges[i].name;\n\n            edge.probability = 0;\n\n            for (var j = 0; j < grandChildrenNumber; j++) {\n                var grandChild = rootClone.childEdges[j].childNode.childEdges[i].childNode;\n\n\n                var grandChildEdge = this.data.attachSubtree(grandChild, child);\n                grandChildEdge.name = rootClone.childEdges[j].name;\n                grandChildEdge.payoff = [\n                    ExpressionEngine.add(rootClone.childEdges[j].computedBasePayoff(undefined, 0), rootClone.childEdges[j].childNode.childEdges[i].computedBasePayoff(undefined, 0)),\n                    ExpressionEngine.add(rootClone.childEdges[j].computedBasePayoff(undefined, 1), rootClone.childEdges[j].childNode.childEdges[i].computedBasePayoff(undefined, 1)),\n                ];\n\n                grandChildEdge.probability = ExpressionEngine.multiply(rootClone.childEdges[j].computedBaseProbability(), rootClone.childEdges[j].childNode.childEdges[i].computedBaseProbability());\n                edge.probability = ExpressionEngine.add(edge.probability, grandChildEdge.probability);\n            }\n\n            var divideGrandChildEdgeProbability = p => ExpressionEngine.divide(p, edge.probability);\n            if (edge.probability.equals(0)) {\n                var prob = ExpressionEngine.divide(1, grandChildrenNumber);\n                divideGrandChildEdgeProbability = p => prob;\n            }\n\n            var probabilitySum = 0.0;\n            child.childEdges.forEach(grandChildEdge=> {\n                grandChildEdge.probability = divideGrandChildEdgeProbability(grandChildEdge.probability);\n                probabilitySum = ExpressionEngine.add(probabilitySum, grandChildEdge.probability);\n                grandChildEdge.probability = this.expressionEngine.serialize(grandChildEdge.probability)\n            });\n\n            this._normalizeProbabilitiesAfterFlip(child.childEdges, probabilitySum);\n            edge.probability = this.expressionEngine.serialize(edge.probability)\n        }\n        this._normalizeProbabilitiesAfterFlip(root.childEdges);\n\n\n        this.data.callbacksDisabled = callbacksDisabled;\n        this.data._fireNodeAddedCallback();\n    }\n\n    _normalizeProbabilitiesAfterFlip(childEdges, probabilitySum){\n        if(!probabilitySum){\n            probabilitySum = 0.0;\n            childEdges.forEach(e=> {\n                probabilitySum = ExpressionEngine.add(probabilitySum, e.probability);\n            });\n        }\n        if (!probabilitySum.equals(1)) {\n            log.info('Sum of the probabilities in child nodes is not equal to 1 : ', probabilitySum);\n            var newProbabilitySum = 0.0;\n            var cf = 1000000000000; //10^12\n            var prec = 12;\n            childEdges.forEach(e=> {\n                e.probability = parseInt(ExpressionEngine.round(e.probability, prec) * cf);\n                newProbabilitySum = newProbabilitySum + e.probability;\n            });\n            var rest = cf - newProbabilitySum;\n            log.info('Normalizing with rounding to precision: ' + prec, rest);\n            childEdges[0].probability = ExpressionEngine.add(rest, childEdges[0].probability);\n            newProbabilitySum = 0.0;\n            childEdges.forEach(e=> {\n                e.probability = this.expressionEngine.serialize(ExpressionEngine.divide(parseInt(e.probability), cf))\n            })\n        }\n    }\n}\n","\n\n\n/*Base class for complex operations executing a job*/\nimport {Operation} from \"./operation\";\n\nexport class JobExecutingOperation extends Operation{\n\n\n    jobName; //Job name if this operation executes a job\n\n    constructor(name, jobName = null){\n        super(name);\n\n        this.name = name;\n        this.jobName = jobName;\n    }\n\n\n    //check if can perform operation for applicable object\n    canPerform(object, params){\n\n        throw 'canPerform function not implemented for operation: '+this.name\n    }\n\n    //Performed in job by operations manager\n    perform(object, params, ){\n\n    }\n\n\n    postProcess(object, params){\n\n    }\n\n\n}\n","\n\n\n/*Base class for complex operations on tree structure*/\nexport class Operation{\n\n    name;\n\n    constructor(name){\n        this.name = name;\n    }\n\n    //check if operation is potentially applicable for object\n    isApplicable(object){\n        throw 'isApplicable function not implemented for operation: '+this.name\n    }\n\n    //check if can perform operation for applicable object\n    canPerform(object){\n        throw 'canPerform function not implemented for operation: '+this.name\n    }\n\n    perform(object, params){\n        throw 'perform function not implemented for operation: '+this.name\n    }\n\n\n}\n","import {FlipSubtree} from \"./flip-subtree\";\nimport {PayoffsTransformation} from \"./payoffs-transformation.js\";\n\n\nexport class OperationsManager {\n\n    operations = [];\n    operationByName = {};\n\n    constructor(data, expressionEngine, jobsManger){\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.jobsManger = jobsManger;\n        this.registerOperation(new FlipSubtree(data, expressionEngine));\n        this.registerOperation(new PayoffsTransformation(data, expressionEngine));\n    }\n\n    registerOperation(operation){\n        this.operations.push(operation);\n        this.operationByName[operation.name] = operation;\n    }\n\n\n    getOperationByName(name){\n        return this.operationByName[name];\n    }\n\n    operationsForObject(object){\n        return this.operations.filter(op=>op.isApplicable(object))\n    }\n\n    setData(data){\n        this.data = data;\n        this.operations.forEach(o => o.data = data)\n    }\n\n    performOperation(object, operationName, jobParamsValues){\n\n        let operation = this.getOperationByName(operationName);\n\n        if(!operation.jobName){\n            return Promise.resolve(operation.perform(object, jobParamsValues))\n        }\n\n        jobParamsValues['objectId'] = object.id;\n\n        return this.jobsManger.run(operation.jobName, jobParamsValues, this.data, false).then((jobExecution)=> {\n\n            const d = jobExecution.getData();\n            this.data.nodes = d.nodes;\n            this.data.edges = d.edges;\n            this.data.code = d.code;\n\n            operation.postProcess(object, jobParamsValues);\n\n            return true;\n        })\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {TreeValidator} from \"../validation/tree-validator\";\nimport {JobExecutingOperation} from \"./job-executing-operation\";\nimport {PayoffsTransformationJob} from \"../jobs/configurations/payoffs-transformation/payoffs-transformation-job\";\n\n\nexport class PayoffsTransformation extends JobExecutingOperation {\n\n    static $NAME = 'payoffsTransformation';\n\n    data;\n    expressionEngine;\n\n    constructor(data, expressionEngine) {\n        super(PayoffsTransformation.$NAME, PayoffsTransformationJob.$NAME);\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.treeValidator = new TreeValidator(expressionEngine);\n    }\n\n    isApplicable(object){\n        return object instanceof model.ChanceNode || object instanceof model.DecisionNode\n    }\n\n    canPerform(node) {\n        if (!this.isApplicable(node)) {\n            return false;\n        }\n\n        if (!this.treeValidator.validate(this.data.getAllNodesInSubtree(node)).isValid()) { //check if the whole subtree is proper\n            return false;\n        }\n\n        return !node.$parent && node.childEdges.length > 0;\n    }\n\n}\n","\nexport class Decision{\n    node;\n    decisionValue; //index of  selected edge\n    children = [];\n    key;\n\n    constructor(node, decisionValue) {\n        this.node = node;\n        this.decisionValue = decisionValue;\n        this.key = Decision.generateKey(this);\n    }\n\n    static generateKey(decision, keyProperty='id'){\n        var e = decision.node.childEdges[decision.decisionValue];\n        var key = decision.node[keyProperty]+\":\"+(e[keyProperty]? e[keyProperty] : decision.decisionValue+1);\n        return key.replace(/\\n/g, ' ');\n    }\n\n    addDecision(node, decisionValue){\n        var decision = new Decision(node, decisionValue);\n        this.children.push(decision);\n        this.key = Decision.generateKey(this);\n        return decision;\n    }\n\n    getDecision(decisionNode){\n        return Decision.getDecision(this, decisionNode)\n    }\n\n    static getDecision(decision, decisionNode){\n        if(decision.node===decisionNode || decision.node.id === decisionNode.id){\n            return decision;\n        }\n        for(var i=0; i<decision.children.length; i++){\n            var d = Decision.getDecision(decision.children[i], decisionNode);\n            if(d){\n                return d;\n            }\n        }\n    }\n\n    static toDecisionString(decision, extended=false, keyProperty='name', indent = ''){\n\n        var res = Decision.generateKey(decision, keyProperty);\n        var childrenRes = \"\";\n\n        decision.children.forEach(d=>{\n            if(childrenRes){\n                if(extended){\n                    childrenRes += '\\n'+indent;\n                }else{\n                    childrenRes += \", \"\n                }\n\n            }\n            childrenRes += Decision.toDecisionString(d,extended,keyProperty, indent+'\\t')\n        });\n        if(decision.children.length){\n            if(extended){\n                childrenRes =  '\\n'+indent +childrenRes;\n            }else{\n                childrenRes = \" - (\" + childrenRes + \")\";\n            }\n\n\n\n        }\n\n        return res+childrenRes;\n    }\n\n    toDecisionString(indent=false){\n        return Decision.toDecisionString(this, indent)\n    }\n}\n","import {Policy} from \"./policy\";\nimport {domain as model} from 'sd-model'\nimport {Utils} from 'sd-utils'\nimport {Decision} from \"./decision\";\n\nexport class PoliciesCollector{\n    policies = [];\n    ruleName=false;\n\n    constructor(root, optimalForRuleName){\n        this.ruleName = optimalForRuleName;\n        this.collect(root).forEach((decisions,i)=>{\n            this.policies.push(new Policy(\"#\"+(i+1), decisions));\n        });\n        if(this.policies.length===1){\n            this.policies[0].id = \"default\"\n        }\n    }\n\n    collect(root){\n        var nodeQueue = [root];\n        var node;\n        var decisionNodes = [];\n        while(nodeQueue.length){\n            node = nodeQueue.shift();\n\n            if(this.ruleName && !node.computedValue(this.ruleName, 'optimal')){\n                continue;\n            }\n\n            if(node instanceof model.DecisionNode){\n                decisionNodes.push(node);\n                continue;\n            }\n\n            node.childEdges.forEach((edge, i)=>{\n                nodeQueue.push(edge.childNode)\n            })\n        }\n\n        return Utils.cartesianProductOf(decisionNodes.map((decisionNode)=>{\n            var decisions= [];\n            decisionNode.childEdges.forEach((edge, i)=>{\n\n                if(this.ruleName && !edge.computedValue(this.ruleName, 'optimal')){\n                    return;\n                }\n\n                var childDecisions = this.collect(edge.childNode); //all possible child decisions (cartesian)\n                childDecisions.forEach(cd=>{\n                    var decision = new Decision(decisionNode, i);\n                    decisions.push(decision);\n                    decision.children = cd;\n                })\n\n            });\n            return decisions;\n        }));\n    }\n\n}\n","import {Decision} from \"./decision\";\n\nexport class Policy{\n    id;\n    decisions = [];\n\n    constructor(id, decisions){\n        this.id = id;\n        this.decisions = decisions || [];\n        this.key = Policy.generateKey(this);\n    }\n\n    addDecision(node, decisionValue){\n        var decision = new Decision(node, decisionValue);\n        this.decisions .push(decision);\n        this.key = Policy.generateKey(this);\n        return decision;\n    }\n\n    static generateKey(policy){\n        var key = \"\";\n        policy.decisions.forEach(d=>key+=(key? \"&\": \"\")+d.key);\n        return key;\n    }\n\n    equals(policy, ignoreId=true){\n        if(this.key != policy.key){\n            return false;\n        }\n\n        return ignoreId || this.id === policy.id;\n    }\n\n    getDecision(decisionNode){\n        return Policy.getDecision(this, decisionNode);\n    }\n\n    static getDecision(policy, decisionNode){\n        for(var i=0; i<policy.decisions.length; i++){\n            var decision = Decision.getDecision(policy.decisions[i], decisionNode);\n            if(decision){\n                return decision;\n            }\n        }\n        return null;\n    }\n\n    static toPolicyString(policy, extended=false, prependId=false){\n\n        var res = \"\";\n        policy.decisions.forEach(d=>{\n            if(res){\n                if(extended){\n                    res += \"\\n\"\n                }else{\n                    res += \", \"\n                }\n\n\n            }\n            res += Decision.toDecisionString(d, extended, 'name', '\\t');\n        });\n        if(prependId && policy.id!==undefined){\n            return policy.id+\" \"+res;\n        }\n        return res;\n    }\n\n\n    toPolicyString(indent=false){\n        return Policy.toPolicyString(this, indent)\n    }\n\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n\nexport class McdmWeightValueValidator{\n\n    additionalValidator = null;\n\n    constructor(additionalValidator){\n        this.additionalValidator = additionalValidator;\n    }\n\n    validate(value){\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        let parsed = parseFloat(value);\n        if(parsed !== Infinity && !ExpressionEngine.validate(value, {}, false)){\n            return false\n        }\n\n        value = ExpressionEngine.toNumber(value);\n        var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991; // Number.MAX_SAFE_INTEGER is undefined in IE\n        if(ExpressionEngine.compare(value, 0) < 0 || (value !== Infinity && ExpressionEngine.compare(value, maxSafeInteger)> 0)){\n            return false;\n        }\n\n        if(this.additionalValidator) {\n            return this.additionalValidator(ExpressionEngine.toNumber(value))\n        }\n\n        return true;\n    }\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n/*Computed base value validator*/\nexport class PayoffValueValidator{\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine=expressionEngine;\n    }\n\n    validate(value){\n\n\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        value = ExpressionEngine.toNumber(value);\n        var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991; // Number.MAX_SAFE_INTEGER in undefined in IE\n        return ExpressionEngine.compare(value, -maxSafeInteger) >= 0 && ExpressionEngine.compare(value, maxSafeInteger) <= 0;\n    }\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n/*Computed base value validator*/\nexport class ProbabilityValueValidator{\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine=expressionEngine;\n    }\n\n    validate(value, edge){\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        var value = ExpressionEngine.toNumber(value);\n        return value.compare(0) >= 0 && value.compare(1) <= 0;\n    }\n\n}\n","import {domain as model, ValidationResult} from \"sd-model\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {ProbabilityValueValidator} from \"./probability-value-validator\";\nimport {PayoffValueValidator} from \"./payoff-value-validator\";\n\nexport class TreeValidator {\n\n    expressionEngine;\n\n    constructor(expressionEngine) {\n        this.expressionEngine = expressionEngine;\n        this.probabilityValueValidator = new ProbabilityValueValidator(expressionEngine);\n        this.payoffValueValidator = new PayoffValueValidator(expressionEngine);\n    }\n\n    validate(nodes) {\n\n        var validationResult = new ValidationResult();\n\n        nodes.forEach(n=> {\n            this.validateNode(n, validationResult);\n        });\n\n        return validationResult;\n    }\n\n    validateNode(node, validationResult = new ValidationResult()) {\n\n        if (node instanceof model.TerminalNode) {\n            return;\n        }\n        if (!node.childEdges.length) {\n            validationResult.addError('incompletePath', node)\n        }\n\n        var probabilitySum = ExpressionEngine.toNumber(0);\n        var withHash = false;\n        node.childEdges.forEach((e, i)=> {\n            e.setValueValidity('probability', true);\n\n            if (node instanceof model.ChanceNode) {\n                var probability = e.computedBaseProbability();\n                if (!this.probabilityValueValidator.validate(probability)) {\n                    if (!ExpressionEngine.isHash(e.probability)) {\n                        validationResult.addError({name: 'invalidProbability', data: {'number': i + 1}}, node);\n                        e.setValueValidity('probability', false);\n                    }\n\n                } else {\n                    probabilitySum = ExpressionEngine.add(probabilitySum, probability);\n                }\n            }\n\n            e.payoff.forEach((rawPayoff, payoffIndex)=> {\n                var path = 'payoff[' + payoffIndex + ']';\n                e.setValueValidity(path, true);\n                var payoff = e.computedBasePayoff(undefined, payoffIndex);\n                if (!this.payoffValueValidator.validate(payoff)) {\n                    validationResult.addError({name: 'invalidPayoff', data: {'number': i + 1}}, node);\n                    e.setValueValidity(path, false);\n                }\n            })\n\n\n        });\n        if (node instanceof model.ChanceNode) {\n            if (isNaN(probabilitySum) || !probabilitySum.equals(1)) {\n                validationResult.addError('probabilityDoNotSumUpTo1', node);\n            }\n        }\n\n\n        return validationResult;\n    }\n}\n","export * from './src/index'\n"]}