{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/build/idb.js","src/computations-engine.js","src/computations-manager.js","src/computations-utils.js","src/expressions-evaluator.js","src/index.js","src/jobs/configurations/league-table/league-table-job-parameters.js","src/jobs/configurations/league-table/league-table-job.js","src/jobs/configurations/league-table/steps/calculate-step.js","src/jobs/configurations/payoffs-transformation/payoffs-transformation-job-parameters.js","src/jobs/configurations/payoffs-transformation/payoffs-transformation-job.js","src/jobs/configurations/recompute/recompute-job-parameters.js","src/jobs/configurations/recompute/recompute-job.js","src/jobs/configurations/sensitivity-analysis/n-way/sensitivity-analysis-job-parameters.js","src/jobs/configurations/sensitivity-analysis/n-way/sensitivity-analysis-job.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/init-policies-step.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/prepare-variables-step.js","src/jobs/configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job-parameters.js","src/jobs/configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job.js","src/jobs/configurations/sensitivity-analysis/probabilistic/steps/compute-policy-stats-step.js","src/jobs/configurations/sensitivity-analysis/probabilistic/steps/prob-calculate-step.js","src/jobs/configurations/sensitivity-analysis/spider-plot/spider-plot-job-parameters.js","src/jobs/configurations/sensitivity-analysis/spider-plot/spider-plot-job.js","src/jobs/configurations/sensitivity-analysis/spider-plot/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/steps/prepare-variables-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job-parameters.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job.js","src/jobs/engine/batch/batch-step.js","src/jobs/engine/exceptions/extendable-error.js","src/jobs/engine/exceptions/index.js","src/jobs/engine/exceptions/job-computation-exception.js","src/jobs/engine/exceptions/job-data-invalid-exception.js","src/jobs/engine/exceptions/job-execution-already-running-exception.js","src/jobs/engine/exceptions/job-instance-already-complete-exception.js","src/jobs/engine/exceptions/job-interrupted-exception.js","src/jobs/engine/exceptions/job-parameters-invalid-exception.js","src/jobs/engine/exceptions/job-restart-exception.js","src/jobs/engine/execution-context.js","src/jobs/engine/index.js","src/jobs/engine/job-execution-flag.js","src/jobs/engine/job-execution-listener.js","src/jobs/engine/job-execution.js","src/jobs/engine/job-instance.js","src/jobs/engine/job-key-generator.js","src/jobs/engine/job-launcher.js","src/jobs/engine/job-parameter-definition.js","src/jobs/engine/job-parameters.js","src/jobs/engine/job-repository/idb-job-repository.js","src/jobs/engine/job-repository/job-repository.js","src/jobs/engine/job-repository/simple-job-repository.js","src/jobs/engine/job-repository/timeout-job-repository.js","src/jobs/engine/job-result.js","src/jobs/engine/job-status.js","src/jobs/engine/job.js","src/jobs/engine/simple-job.js","src/jobs/engine/step-execution-listener.js","src/jobs/engine/step-execution.js","src/jobs/engine/step.js","src/jobs/index.js","src/jobs/job-instance-manager.js","src/jobs/job-worker.js","src/jobs/jobs-manager.js","src/objective/objective-rules-manager.js","src/objective/rules/expected-value-maximization-rule.js","src/objective/rules/expected-value-minimization-rule.js","src/objective/rules/index.js","src/objective/rules/max-max-rule.js","src/objective/rules/max-min-rule.js","src/objective/rules/maxi-max-rule.js","src/objective/rules/maxi-min-rule.js","src/objective/rules/min-max-rule.js","src/objective/rules/min-min-rule.js","src/objective/rules/mini-max-rule.js","src/objective/rules/mini-min-rule.js","src/objective/rules/multi-criteria-rule.js","src/objective/rules/objective-rule.js","src/operations/flip-subtree.js","src/operations/job-executing-operation.js","src/operations/operation.js","src/operations/operations-manager.js","src/operations/payoffs-transformation.js","src/policies/decision.js","src/policies/policies-collector.js","src/policies/policy.js","src/validation/mcdm-weight-value-validator.js","src/validation/payoff-value-validator.js","src/validation/probability-value-validator.js","src/validation/tree-validator.js","index.js"],"names":["require","r","e","n","t","o","i","f","c","u","a","Error","code","p","exports","call","length","1","module","global","factory","this","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","apply","then","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","replace","arr","Array","slice","callback","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","openDb","name","version","upgradeCallback","indexedDB","onupgradeneeded","event","deleteDb","define","amd","self","idb","_sdUtils","_sdModel","_computationsManager","ComputationsEngineConfig","custom","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","logLevel","Utils","deepExtend","_assertThisInitialized","ComputationsManagerConfig","ComputationsEngine","config","data","_this2","getGlobalObject","isWorker","jobsManger","registerJobExecutionListener","beforeJob","jobExecution","reply","getDTO","afterJob","queryableFunctions","runJob","jobName","jobParametersValues","dataDTO","DataModel","executeJob","jobExecutionId","execute","getErrorDTO","recompute","ruleName","evalCode","evalNumeric","objectiveRulesManager","setCurrentRuleByName","allRules","_checkValidityAndRecomputeObjective","onmessage","oEvent","hasOwnProperty","queryMethod","queryArguments","defaultReply","ComputationsManager","_get","setLogLevel","level","log","setLevel","message","TypeError","postMessage","queryMethodListener","queryMethodArguments","_sdExpressionEngine","_objectiveRulesManager","_treeValidator","_operationsManager","_jobsManager","_expressionsEvaluator","_jobInstanceManager","_policy","_mcdmWeightValueValidator","worker","delegateRecomputation","url","jobRepositoryType","clearRepository","setConfig","expressionEngine","ExpressionEngine","expressionsEvaluator","ExpressionsEvaluator","ObjectiveRulesManager","JobsManager","workerUrl","repositoryType","operationsManager","OperationsManager","treeValidator","TreeValidator","mcdmWeightValueValidator","McdmWeightValueValidator","setData","checkValidityAndRecomputeObjective","params","getCurrentRule","d","getData","updateFrom","updateDisplayValues","updateDefaultCriterion1Weight","defaultCriterion1Weight","validationResults","evalExpressions","weightValid","validate","multiCriteria","getRoots","root","vr","getAllNodesInSubtree","isValid","recomputeTree","currentRule","getJobByName","object","operationsForObject","every","jobParamsValues","resolvePromiseAfterJobIsLaunched","run","jobInstanceManagerConfig","_this3","je","JobInstanceManager","operationName","performOperation","rules","getObjectiveRuleByName","isRuleName","reversePayoffs","tmp","weightLowerBound","flip","weightUpperBound","flipRule","Infinity","serialize","divide","_this4","policyToDisplay","displayPolicy","nodes","updateNodeDisplayValues","edges","updateEdgeDisplayValues","node","_this5","$DISPLAY_VALUE_NAMES","displayValue","getNodeDisplayValue","_this6","getEdgeDisplayValue","_this7","clearDisplayValues","displayPolicyForNode","policy","_this8","domain","DecisionNode","decision","Policy","getDecision","childEdge","childEdges","decisionValue","childNode","ChanceNode","TerminalNode","ComputationsUtils","min","max","extent","subtract","step","curr","add","toFloat","clearComputedValues","initScopes","debug","evalGlobalCode","clearTree","evalExpressionsForNode","clearExpressionScope","$codeDirty","$codeError","eval","expressionScope","edge","hasAssignmentExpression","payoff","parentNode","initScope","initScopeForNode","scope","probabilitySum","toNumber","hashEdges","invalidProb","rawPayoff","payoffIndex","path","isFieldValid","computedValue","evalPayoff","err","isHash","probability","warn","prob","compare","hash","parent","$parent","parentScope","cloneDeep","_computationsEngine","keys","key","enumerable","_jobParameters","_jobParameterDefinition","LeagueTableJobParameters","JobParameters","definitions","JobParameterDefinition","PARAMETER_TYPE","STRING","BOOLEAN","NUMBER_EXPRESSION","v","allVals","computeNumberExpression","values","id","guid","nameOfCriterion1","nameOfCriterion2","extendedPolicyDescription","defaultWeight","_simpleJob","_calculateStep","_leagueTableJobParameters","LeagueTableJob","jobRepository","initSteps","SimpleJob","calculateStep","CalculateStep","addStep","jobResult","jobParameters","withHeaders","headers","payoffNames","rows","row","policies","rowCells","toPolicyString","payoffs","dominatedBy","extendedDominatedBy","incratio","optimal","optimalForDefaultWeight","_step","_jobStatus","_policiesCollector","Step","stepExecution","getJobParameters","rule","treeRoot","PoliciesCollector","payoffCoeffs","b","map","sort","reduce","previousValue","currentValue","array","_prev$policies","prev","concat","_toConsumableArray","bestCost","bestCostRow","cmp","prev2NotDominated","filter","computeICER","lastLELower","lastLELowerDef","sub","exitStatus","JOB_STATUS","COMPLETED","Math","abs","PayoffsTransformationJobParameters","functionName","functionBody","functionArgumentName","makeClone","_payoffsTransformationJobParameters","_job","PayoffsTransformationJob","$NAME","isRestartable","Job","execution","findNodeById","rootTarget","cloneSubtree","allNodes","processNodePayoff","minY","Number","MAX_VALUE","maxY","MIN_VALUE","location","y","offset","move","attachSubtree","parentEdge","aggregatedPayoff","type","$TYPE","fill","computedBasePayoff","toFraction","RecomputeJobParameters","_recomputeJobParameters","RecomputeJob","SensitivityAnalysisJobParameters","NUMBER","INTEGER","isUnique","failOnInvalidTree","_sensitivityAnalysisJobParameters","_prepareVariablesStep","_initPoliciesStep","SensitivityAnalysisJob","batchSize","PrepareVariablesStep","InitPoliciesStep","chunkSize","variableNames","roundVariables","policyIndex","variables","_variables","uniqueValues","Set","uniqueValuesNo","s","size","precision","notReadyVariablesIndexes","variableIndex","notReadyIndex","round","newReadyIndexes","uniqueVals","reverse","splice","stepExecutions","total","current","steps","getProgress","_batchStep","_jobComputationException","BatchStep","getJobExecutionContext","variableValues","executionContext","put","startIndex","item","clear","variableName","valid","errorData","JobComputationException","isString","_computationsUtils","sequence","cartesianProductOf","ProbabilisticSensitivityAnalysisJobParameters","_probabilisticSensitivityAnalysisJobParameters","_sensitivityAnalysisJob","_probCalculateStep","_computePolicyStatsStep","ProbabilisticSensitivityAnalysisJob","ProbCalculateStep","ComputePolicyStatsStep","numberOfRuns","ruleByName","payoffsPerPolicy","maximization","medians","median","standardDeviations","std","policyIsBestProbabilities","policyToHighestPayoffCount","policyToLowestPayoffCount","expectedValues","runIndex","singleRunVariableValues","errors","evaluated","formula","variable","currentItemCount","updatePolicyStats","highestPayoff","lowestPayoff","bestPolicyIndexes","worstPolicyIndexes","zeroNum","equals","SpiderPlotJobParameters","_spiderPlotJobParameters","SpiderPlotJob","percentageRangeValues","percentageChangeRange","policiesCollector","defaultValues","getGlobalVariableNames","defVal","multiply","defaultPayoff","itemIndex","variableValue","_jobResult$data$rows","jobExecutionContext","variableExtents","extents","extentVariableValues","TornadoDiagramJobParameters","_tornadoDiagramJobParameters","TornadoDiagramJob","_jobInterruptedException","TOTAL_ITEM_COUNT_PROP","CURRENT_ITEM_COUNT_PROP","init","totalItemCount","setCurrentItemCount","getCurrentItemCount","setTotalItemCount","handleNextChunk","JobInterruptedException","postProcess","getTotalItemCount","checkJobExecutionFlags","terminateOnly","readNextChunk","chunk","processChunk","processedChunk","writeChunk","res","updateJobProgress","processItem","progress","jobInstance","updateJobExecutionProgress","checkExecutionFlags","ExtendableError","constructor","_extendableError","_jobDataInvalidException","_jobExecutionAlreadyRunningException","_jobInstanceAlreadyCompleteException","_jobParametersInvalidException","_jobRestartException","JobDataInvalidException","JobExecutionAlreadyRunningException","JobInstanceAlreadyCompleteException","JobParametersInvalidException","JobRestartException","ExecutionContext","context","dirty","clone","prevValue","filteredProperties","deepClone","cloneMethod","cloneDeepWith","cloneWith","assign","stack","indexOf","$ObjectWithIdAndEditableFields","findById","exceptions","_interopRequireWildcard","_executionContext","_exportNames","_jobExecution","_jobExecutionFlag","_jobExecutionListener","_jobInstance","_jobKeyGenerator","_jobLauncher","_stepExecution","_stepExecutionListener","STOP","JobExecutionListener","JobExecution","status","STARTING","UNKNOWN","startTime","createTime","Date","endTime","lastUpdated","failureExceptions","stepName","StepExecution","STOPPING","se","JobInstance","JobKeyGenerator","identifying","JobLauncher","jobWorker","dataModelSerializer","jobOrName","job","createJobParameters","createJobExecution","executionPromise","_execute","getLastJobExecution","lastExecution","jobParametersValidator","jobDataValidator","jobExecutionOrId","getJobExecutionById","info","DATE","COMPOSITE","typeOrNestedParametersDefinitions","minOccurs","maxOccurs","singleValueValidator","validator","nestedParameters","required","isArray","parsed","parseFloat","allValues","validateSingleValue","isDate","isInt","isNumber","isBoolean","isObject","nestedDef","_value","initDefinitions","initDefaultValues","def","defs","split","find","getDefinition","_jobRepository","_idb","_jobResult","IdbJobRepository","expressionsReviver","dbName","deleteDB","initDB","JobRepository","dbPromise","upgradeDB","jobExecutionsOS","unique","jobInstanceDao","ObjectStoreDao","jobExecutionDao","jobExecutionProgressDao","jobExecutionFlagDao","stepExecutionDao","jobResultDao","_","generateJobInstanceKey","remove","findJobExecutions","jobExecutions","removeJobExecution","getJobResultByInstance","removeJobResult","findStepExecutions","removeStepExecution","jobResultId","revive","dto","reviveJobResult","getByIndex","reviveJobInstance","_this9","stepExecutionsDTOs","saveStepExecutionsDTOS","flag","_this10","savedExecutions","stepExecutionDTO","_this11","fetchJobExecutionRelations","jobExecutionDTO","_this12","reviveJobExecution","jobExecutionDtoList","_this13","fetched","fetchJobExecutionsRelations","_this14","getAllByIndex","dtos","reviveStepExecution","_this15","fetchRelationsAndRevive","sorted","getTime","_this16","executions","latest","dataModel","loadFromDTO","reviveFromDTO","target","mergeWith","dtoValue","_this17","reviveExecutionContext","objValue","srcValue","source","stepDTO","_this18","getLastJobExecutionByInstance","jobExecutionDto","reviveResultData","JobResult","_this19","indexName","_this20","_this21","_this22","tx","_this23","_this24","_this25","iterateKeyCursor","jobByName","saveJobInstance","getJobInstance","generateKey","isRunning","ABANDONED","createJobInstance","_setNewState","createStateSnapshot","all","instanceAndExecutionContext","saveJobExecution","saveStepExecution","SimpleJobRepository","jobInstancesByKey","executionProgress","executionFlags","jobResults","forOwn","ji","ex","_simpleJobRepository","TimeoutJobRepository","valueToResolve","delay","setTimeout","createTimeoutPromise","STARTED","STOPPED","FAILED","EXECUTING","executionListeners","getJobParametersValidator","getJobDataValidator","updateStatus","getResult","updateProgress","listener","doExecute","saveJobResult","update","getJobExecutionFlag","JOB_EXECUTION_FLAG","stop","getJobResultByExecution","handleNextStep","lastExecutedStepExecution","_execution$failureExc","prevStep","prevStepExecution","stepIndex","handleStep","isStopping","getLastStepExecution","lastStepExecution","stepExecutionPartOfExistingJobExecution","currentStepExecution","shouldStart","createStepExecution","isCompleted","isRestart","skipExecution","skipOnRestartIfCompleted","containsKey","addStepExecution","_currentStepExecution","stepStatus","completedSteps","StepExecutionListener","beforeStep","open","determineJobStatus","afterStep","close","engine","_jobWorker","JobInstanceManagerConfig","onJobStarted","onJobCompleted","onJobFailed","onJobStopped","onJobTerminated","onProgress","updateInterval","jobInstanceOrExecution","checkProgress","lastJobExecution","terminated","getProgressPercents","lastUpdateTime","callbacksThisArg","deregisterJobExecutionListener","getProgressFromExecution","forceUpdate","terminate","JobWorker","defaultListener","onError","listeners","Worker","deserializer","fn","thisArg","sendQuery","ruleNames","_idbJobRepository","_recomputeJob","_probabilisticSensitivityAnalysisJob","_timeoutJobRepository","_tornadoDiagramJob","_leagueTableJob","_spiderPlotJob","_payoffsTransformationJob","JobsManagerConfig","jobExecutionListeners","afterJobExecutionPromiseResolves","jobInstancesToTerminate","useWorker","initWorker","initRepository","registerJobs","jobLauncher","serializeData","getJsonReviver","getJsonReplacer","getJobExecutionProgress","saveJobExecutionFlag","removeJobInstance","_arguments","argsDeserializer","addListener","onJobFatalError","sensitivityAnalysisJob","probabilisticSensitivityAnalysisJob","setBatchSize","registerJob","registerExecutionListener","l","promiseResolve","_rules","model","_minMaxRule","_maxMinRule","_minMinRule","_maxMaxRule","currentRuleName","flipPair","addRule","ExpectedValueMaximizationRule","ExpectedValueMinimizationRule","MaxiMinRule","MaxiMaxRule","MiniMinRule","MiniMaxRule","minMax","MinMaxRule","maxMin","MaxMinRule","addFlipPair","minMin","MinMinRule","maxMax","MaxMaxRule","flipped","setDefaultCriterion1Weight","decisionPolicy","trace","time","setPayoffIndex","setDecisionPolicy","computePayoff","computeOptimal","clearDecisionPolicy","computedBaseProbability","rule1","rule2","_objectiveRule","NAME","ObjectiveRule","probabilityToEnter","cValue","computedPayoff","basePayoff","_expectedValueMaximizationRule","_expectedValueMinimizationRule","_maxiMaxRule","_maxiMinRule","_miniMaxRule","_miniMinRule","_multiCriteriaRule","MultiCriteriaRule","bestChildPayoff","bestCount","worstChildPayoff","worstCount","optimalEdge","maxBy","minBy","criterion1Weight","childrenPayoff","selectedIndexes","bestChild","basePayoffs","childCombinedPayoff","baseProbability","sumweight","ep","div","computeCombinedPayoff","combinedPayoff","decisionNode","childrenPayoffs","best","makeDecision","_makeDecision","worstChild","childPayoff","modifyChanceProbability","fieldPath","_operation","FlipSubtree","Operation","isApplicable","grandchildrenNumber","grandchildrenEdgeLabels","childrenEdgeLabelsSet","child","has","trim","ge","rootClone","oldChildrenNumber","oldGrandChildrenNumber","childrenNumber","grandChildrenNumber","callbacksDisabled","childX","x","topY","stepY","removeNode","Point","addNode","j","grandChild","grandChildEdge","divideGrandChildEdgeProbability","_normalizeProbabilitiesAfterFlip","_fireNodeAddedCallback","newProbabilitySum","parseInt","rest","JobExecutingOperation","_flipSubtree","_payoffsTransformation","operations","operationByName","registerOperation","PayoffsTransformation","operation","op","getOperationByName","perform","_jobExecutingOperation","Decision","children","keyProperty","extended","indent","childrenRes","toDecisionString","_decision","optimalForRuleName","collect","decisions","nodeQueue","decisionNodes","shift","cd","prependId","ignoreId","additionalValidator","maxSafeInteger","MAX_SAFE_INTEGER","PayoffValueValidator","ProbabilityValueValidator","_probabilityValueValidator","_payoffValueValidator","probabilityValueValidator","payoffValueValidator","validationResult","ValidationResult","validateNode","addError","setValueValidity","number","isNaN"],"mappings":"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","file":"sd-computations.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.idb = {}));\n}(this, function (exports) { 'use strict';\n\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  function openDb(name, version, upgradeCallback) {\n    var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n    var request = p.request;\n\n    if (request) {\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n    }\n\n    return p.then(function(db) {\n      return new DB(db);\n    });\n  }\n\n  function deleteDb(name) {\n    return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n  }\n\n  exports.openDb = openDb;\n  exports.deleteDb = deleteDb;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","import {Utils, log} from \"sd-utils\";\nimport {DataModel} from \"sd-model\";\nimport {ComputationsManager} from \"./computations-manager\";\nimport {ComputationsManagerConfig} from \"./computations-manager\";\n\n\n\nexport class ComputationsEngineConfig extends ComputationsManagerConfig{\n    logLevel = 'warn';\n    constructor(custom) {\n        super();\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/**\n * Entry point class for standalone computation workers\n */\nexport class ComputationsEngine extends ComputationsManager{\n\n    global = Utils.getGlobalObject();\n    isWorker = Utils.isWorker();\n\n    constructor(config, data){\n        super(config, data);\n\n        if(this.isWorker) {\n            this.jobsManger.registerJobExecutionListener({\n                beforeJob: (jobExecution)=>{\n                    this.reply('beforeJob', jobExecution.getDTO());\n                },\n\n                afterJob: (jobExecution)=>{\n                    this.reply('afterJob', jobExecution.getDTO());\n                }\n            });\n\n            var instance = this;\n            this.queryableFunctions = {\n                runJob: function(jobName, jobParametersValues, dataDTO){\n                    // console.log(jobName, jobParameters, serializedData);\n                    var data = new DataModel(dataDTO);\n                    instance.runJob(jobName, jobParametersValues, data);\n                },\n                executeJob: function(jobExecutionId){\n                    instance.jobsManger.execute(jobExecutionId).catch(e=>{\n                        instance.reply('jobFatalError', jobExecutionId, Utils.getErrorDTO(e));\n                    })\n                },\n                recompute: function(dataDTO, ruleName, evalCode, evalNumeric){\n                    if(ruleName){\n                        instance.objectiveRulesManager.setCurrentRuleByName(ruleName);\n                    }\n                    var allRules = !ruleName;\n                    var data = new DataModel(dataDTO);\n                    instance._checkValidityAndRecomputeObjective(data, allRules, evalCode, evalNumeric)\n                    this.reply('recomputed', data.getDTO());\n                }\n            };\n\n            global.onmessage = function(oEvent) {\n                if (oEvent.data instanceof Object && oEvent.data.hasOwnProperty('queryMethod') && oEvent.data.hasOwnProperty('queryArguments')) {\n                    instance.queryableFunctions[oEvent.data.queryMethod].apply(self, oEvent.data.queryArguments);\n                } else {\n                    instance.defaultReply(oEvent.data);\n                }\n            };\n        }\n    }\n\n\n\n    setConfig(config) {\n        super.setConfig(config);\n        if(this.config.logLevel){\n            this.setLogLevel(this.config.logLevel);\n        }\n\n        return this;\n    }\n\n    setLogLevel(level){\n        log.setLevel(level)\n    }\n\n    defaultReply(message) {\n        this.reply('test', message);\n    }\n\n    reply() {\n        if (arguments.length < 1) {\n            throw new TypeError('reply - not enough arguments');\n        }\n        this.global.postMessage({\n            'queryMethodListener': arguments[0],\n            'queryMethodArguments': Array.prototype.slice.call(arguments, 1)\n        });\n    }\n}\n\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {Utils} from \"sd-utils\";\nimport {ObjectiveRulesManager} from \"./objective/objective-rules-manager\";\nimport {TreeValidator} from \"./validation/tree-validator\";\nimport {OperationsManager} from \"./operations/operations-manager\";\nimport {JobsManager} from \"./jobs/jobs-manager\";\nimport {ExpressionsEvaluator} from \"./expressions-evaluator\";\nimport {JobInstanceManager} from \"./jobs/job-instance-manager\";\nimport {domain as model} from \"sd-model\";\nimport {Policy} from \"./policies/policy\";\nimport {McdmWeightValueValidator} from \"./validation/mcdm-weight-value-validator\";\n\n/** Computation manager configuration object\n * @param custom configuration object to extend\n */\nexport class ComputationsManagerConfig {\n\n    /**\n     * logging level\n     * */\n    logLevel = null;\n\n    /**\n     * default objective rule name\n     * */\n    ruleName = null;\n\n    /**\n     * worker configuration object\n     * */\n    worker = {\n        /**\n         * delegate tree recomputation to worker\n         * */\n        delegateRecomputation: false,\n\n        /**\n         * worker url\n         * */\n        url: null\n    };\n\n    /**\n     * job repository to use, available types: idb, timeout, simple\n    * */\n    jobRepositoryType = 'idb';\n\n    /**\n     * clear repository after init\n     * */\n    clearRepository = false;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/** Computation manager\n* @param {object} config\n* @param {DataModel} data model object\n* */\nexport class ComputationsManager {\n\n    data;\n    expressionEngine;\n    expressionsEvaluator;\n    objectiveRulesManager;\n    operationsManager;\n    jobsManger;\n\n    treeValidator;\n\n    constructor(config, data = null) {\n        this.data = data;\n        this.setConfig(config);\n        this.expressionEngine = new ExpressionEngine();\n        this.expressionsEvaluator = new ExpressionsEvaluator(this.expressionEngine);\n        this.objectiveRulesManager = new ObjectiveRulesManager(this.expressionEngine, this.config.ruleName);\n\n        this.jobsManger = new JobsManager(this.expressionsEvaluator, this.objectiveRulesManager, {\n            workerUrl: this.config.worker.url,\n            repositoryType: this.config.jobRepositoryType,\n            clearRepository: this.config.clearRepository\n        });\n\n        this.operationsManager = new OperationsManager(this.data, this.expressionEngine, new JobsManager(this.expressionsEvaluator, this.objectiveRulesManager, {\n            repositoryType: 'timeout',\n        }));\n\n        this.treeValidator = new TreeValidator(this.expressionEngine);\n        this.mcdmWeightValueValidator = new McdmWeightValueValidator();\n    }\n\n    setConfig(config) {\n        this.config = new ComputationsManagerConfig(config);\n        return this;\n    }\n\n    setData(data){\n        this.data = data;\n        this.operationsManager.setData(data);\n    }\n\n\n    /** Alias function for checkValidityAndRecomputeObjective*/\n    recompute(){\n        return this.checkValidityAndRecomputeObjective(...arguments);\n    }\n\n    /**\n     * Checks validity of data model and recomputes objective rules\n     * @returns promise\n     * @param {boolean} allRules - recompute all objective rules\n     * @param {boolean} evalCode - evaluate code\n     * @param {boolean} evalNumeric - evaluate numeric expressions\n     */\n    checkValidityAndRecomputeObjective(allRules, evalCode = false, evalNumeric = true) {\n        return Promise.resolve().then(()=> {\n            if (this.config.worker.delegateRecomputation) {\n                var params = {\n                    evalCode: evalCode,\n                    evalNumeric: evalNumeric\n                };\n                if (!allRules) {\n                    params.ruleName = this.getCurrentRule().name;\n                }\n                return this.runJob(\"recompute\", params, this.data, false).then((jobExecution)=> {\n                    var d = jobExecution.getData();\n                    this.data.updateFrom(d)\n                })\n            }\n            return this._checkValidityAndRecomputeObjective(this.data, allRules, evalCode, evalNumeric);\n        }).then(()=> {\n            this.updateDisplayValues(this.data);\n        })\n\n    }\n\n    _checkValidityAndRecomputeObjective(data, allRules, evalCode = false, evalNumeric = true) {\n\n        this.objectiveRulesManager.updateDefaultCriterion1Weight(data.defaultCriterion1Weight);\n        data.validationResults = [];\n\n        if (evalCode || evalNumeric) {\n            this.expressionsEvaluator.evalExpressions(data, evalCode, evalNumeric);\n        }\n\n        var weightValid = this.mcdmWeightValueValidator.validate(data.defaultCriterion1Weight);\n        var multiCriteria = this.getCurrentRule().multiCriteria;\n\n\n        data.getRoots().forEach(root=> {\n            var vr = this.treeValidator.validate(data.getAllNodesInSubtree(root));\n            data.validationResults.push(vr);\n            if (vr.isValid() && (!multiCriteria || weightValid)) {\n                this.objectiveRulesManager.recomputeTree(root, allRules);\n            }\n        });\n    }\n\n    /**\n     * @returns {ObjectiveRule} current objective rule\n     * */\n    getCurrentRule() {\n        return this.objectiveRulesManager.currentRule;\n    }\n\n    /**\n     * Sets current objective rule\n     * @param {string} ruleName - name of objective rule\n     * */\n    setCurrentRuleByName(ruleName) {\n        this.config.ruleName = ruleName;\n        return this.objectiveRulesManager.setCurrentRuleByName(ruleName)\n    }\n\n    /**\n     *\n     *  @param {string} jobName\n     *  @returns {Job}\n     * */\n    getJobByName(jobName) {\n        return this.jobsManger.getJobByName(jobName);\n    }\n\n    /**\n     * @returns array of operations applicable to the given object (node or edge)\n     * @param object\n     */\n    operationsForObject(object) {\n        return this.operationsManager.operationsForObject(object);\n    }\n\n\n    /**\n     * Checks validity of data model without recomputation and revalidation\n     * @param {DataModel} data to check\n     */\n\n    isValid(data) {\n        data = data || this.data;\n        return data.validationResults.every(vr=>vr.isValid());\n    }\n    /**\n     * Run job\n     * @param {string} name - job name\n     * @param {object} jobParamsValues - job parameter values object\n     * @param {DataModel} data model\n     * @param {boolean} resolvePromiseAfterJobIsLaunched - immediately resolve promise with still running JobExecution\n     * @returns {Promise} resolving to JobExecution\n     */\n    runJob(name, jobParamsValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        return this.jobsManger.run(name, jobParamsValues, data || this.data, resolvePromiseAfterJobIsLaunched)\n    }\n\n    /**\n     * Run job using JobInstanceManager\n     * @param {string} name - job name\n     * @param {object} jobParamsValues - job parameter values object\n     * @param {JobInstanceManagerConfig} jobInstanceManagerConfig - JobInstanceManager configuration\n     * @returns {Promise} resolving to JobInstanceManager\n     */\n    runJobWithInstanceManager(name, jobParamsValues, jobInstanceManagerConfig) {\n        return this.runJob(name, jobParamsValues).then(je=> {\n            return new JobInstanceManager(this.jobsManger, je, jobInstanceManagerConfig);\n        })\n    }\n\n    performOperation(object, operationName, jobParamsValues){\n        return this.operationsManager.performOperation(object, operationName, jobParamsValues);\n    }\n\n    getObjectiveRules() {\n        return this.objectiveRulesManager.rules;\n    }\n\n    getObjectiveRuleByName(ruleName){\n        return this.objectiveRulesManager.getObjectiveRuleByName(ruleName)\n    }\n\n    isRuleName(ruleName) {\n        return this.objectiveRulesManager.isRuleName(ruleName)\n    }\n\n\n    flipCriteria(data){\n        data = data || this.data;\n        data.reversePayoffs();\n        let tmp = data.weightLowerBound;\n        data.weightLowerBound = this.flip(data.weightUpperBound);\n        data.weightUpperBound = this.flip(tmp);\n        data.defaultCriterion1Weight = this.flip(data.defaultCriterion1Weight);\n        this.objectiveRulesManager.flipRule();\n        return this.checkValidityAndRecomputeObjective(false);\n    }\n\n    flip(a){\n        if(a == Infinity){\n            return 0;\n        }\n\n        if(a == 0){\n            return Infinity;\n        }\n\n        return this.expressionEngine.serialize(ExpressionEngine.divide(1, a))\n    }\n\n    updateDisplayValues(data, policyToDisplay = null) {\n        data = data || this.data;\n        if (policyToDisplay) {\n            return this.displayPolicy(data, policyToDisplay);\n        }\n\n        data.nodes.forEach(n=> {\n            this.updateNodeDisplayValues(n);\n        });\n        data.edges.forEach(e=> {\n            this.updateEdgeDisplayValues(e);\n        })\n    }\n\n    updateNodeDisplayValues(node) {\n        node.$DISPLAY_VALUE_NAMES.forEach(n=>node.displayValue(n, this.objectiveRulesManager.getNodeDisplayValue(node, n)));\n    }\n\n    updateEdgeDisplayValues(e) {\n        e.$DISPLAY_VALUE_NAMES.forEach(n=>e.displayValue(n, this.objectiveRulesManager.getEdgeDisplayValue(e, n)));\n    }\n\n    displayPolicy(policyToDisplay, data) {\n\n\n        data = data || this.data;\n        data.nodes.forEach(n=> {\n            n.clearDisplayValues();\n        });\n        data.edges.forEach(e=> {\n            e.clearDisplayValues();\n        });\n        data.getRoots().forEach((root)=>this.displayPolicyForNode(root, policyToDisplay));\n    }\n\n    displayPolicyForNode(node, policy) {\n        if (node instanceof model.DecisionNode) {\n            var decision = Policy.getDecision(policy, node);\n            //console.log(decision, node, policy);\n            if (decision) {\n                node.displayValue('optimal', true)\n                var childEdge = node.childEdges[decision.decisionValue];\n                childEdge.displayValue('optimal', true)\n                return this.displayPolicyForNode(childEdge.childNode, policy)\n            }\n            return;\n        } else if(node instanceof model.ChanceNode){\n            node.displayValue('optimal', true);\n            node.childEdges.forEach(e=>{\n                e.displayValue('optimal', true);\n                this.displayPolicyForNode(e.childNode, policy)\n            })\n        }else if(node instanceof model.TerminalNode){\n            node.displayValue('optimal', true);\n        }\n\n\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nexport class ComputationsUtils{\n\n    static sequence(min, max, length) {\n        var extent = ExpressionEngine.subtract(max, min);\n        var result = [min];\n        var steps = length - 1;\n        if(!steps){\n            return result;\n        }\n        var step = ExpressionEngine.divide(extent,length - 1);\n        var curr = min;\n        for (var i = 0; i < length - 2; i++) {\n            curr = ExpressionEngine.add(curr, step);\n            result.push(ExpressionEngine.toFloat(curr));\n        }\n        result.push(max);\n        return result;\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {domain as model} from 'sd-model'\nimport {Utils, log} from 'sd-utils'\n\n/*Evaluates code and expressions in trees*/\nexport class ExpressionsEvaluator {\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine = expressionEngine;\n    }\n\n    clear(data){\n        data.nodes.forEach(n=>{\n            n.clearComputedValues();\n        });\n        data.edges.forEach(e=>{\n            e.clearComputedValues();\n        });\n    }\n\n    clearTree(data, root){\n        data.getAllNodesInSubtree(root).forEach(n=>{\n            n.clearComputedValues();\n            n.childEdges.forEach(e=>{\n                e.clearComputedValues();\n            })\n        })\n    }\n\n    evalExpressions(data, evalCode=true, evalNumeric=true, initScopes=false){\n        log.debug('evalExpressions evalCode:'+evalCode+' evalNumeric:'+evalNumeric);\n        if(evalCode){\n            this.evalGlobalCode(data);\n        }\n\n        data.getRoots().forEach(n=>{\n            this.clearTree(data, n);\n            this.evalExpressionsForNode(data, n, evalCode, evalNumeric,initScopes);\n        });\n\n    }\n\n    evalGlobalCode(data){\n        data.clearExpressionScope();\n        data.$codeDirty = false;\n        try{\n            data.$codeError = null;\n            this.expressionEngine.eval(data.code, false, data.expressionScope);\n        }catch (e){\n            data.$codeError = e;\n        }\n    }\n\n    evalPayoff(edge, index = 0) {\n        if (ExpressionEngine.hasAssignmentExpression(edge.payoff[index])) {\n            return null;\n        }\n        return this.expressionEngine.eval(edge.payoff[index], true, edge.parentNode.expressionScope);\n    }\n\n    evalExpressionsForNode(data, node, evalCode=true, evalNumeric=true, initScope=false) {\n        if(!node.expressionScope || initScope || evalCode){\n            this.initScopeForNode(data, node);\n        }\n        if(evalCode){\n            node.$codeDirty = false;\n            if(node.code){\n                try{\n                    node.$codeError = null;\n                    this.expressionEngine.eval(node.code, false, node.expressionScope);\n                }catch (e){\n                    node.$codeError = e;\n                    log.debug(e);\n                }\n            }\n        }\n\n        if(evalNumeric){\n            var scope = node.expressionScope;\n            var probabilitySum=ExpressionEngine.toNumber(0);\n            var hashEdges= [];\n            var invalidProb = false;\n\n            node.childEdges.forEach(e=>{\n                e.payoff.forEach((rawPayoff, payoffIndex)=> {\n                    let path = 'payoff[' + payoffIndex + ']';\n                    if(e.isFieldValid(path, true, false)){\n                        try{\n                            e.computedValue(null, path, this.evalPayoff(e, payoffIndex))\n                        }catch (err){\n                            //   Left empty intentionally\n                        }\n                    }\n                });\n\n\n\n                if(node instanceof model.ChanceNode){\n                    if(ExpressionEngine.isHash(e.probability)){\n                        hashEdges.push(e);\n                        return;\n                    }\n\n                    if(ExpressionEngine.hasAssignmentExpression(e.probability)){ //It should not occur here!\n                        log.warn(\"evalExpressionsForNode hasAssignmentExpression!\", e);\n                        return null;\n                    }\n\n                    if(e.isFieldValid('probability', true, false)){\n                        try{\n                            var prob = this.expressionEngine.eval(e.probability, true, scope);\n                            e.computedValue(null, 'probability', prob);\n                            probabilitySum = ExpressionEngine.add(probabilitySum, prob);\n                        }catch (err){\n                            invalidProb = true;\n                        }\n                    }else{\n                        invalidProb = true;\n                    }\n                }\n\n            });\n\n\n            if(node instanceof model.ChanceNode){\n                var computeHash = hashEdges.length && !invalidProb && (probabilitySum.compare(0) >= 0 && probabilitySum.compare(1) <= 0);\n\n                if(computeHash) {\n                    var hash = ExpressionEngine.divide(ExpressionEngine.subtract(1, probabilitySum), hashEdges.length);\n                    hashEdges.forEach(e=> {\n                        e.computedValue(null, 'probability', hash);\n                    });\n                }\n            }\n\n            node.childEdges.forEach(e=>{\n                this.evalExpressionsForNode(data, e.childNode, evalCode, evalNumeric, initScope);\n            });\n        }\n    }\n\n    initScopeForNode(data, node){\n        var parent = node.$parent;\n        var parentScope = parent?parent.expressionScope : data.expressionScope;\n        node.expressionScope = Utils.cloneDeep(parentScope);\n    }\n}\n","export * from './computations-engine'\nexport * from './computations-manager'\nexport * from './expressions-evaluator'\nexport * from './jobs/index'\n\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\n\nexport class LeagueTableJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"weightLowerBound\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v <= JobParameterDefinition.computeNumberExpression(allVals['weightUpperBound'])\n        }));\n        this.definitions.push(new JobParameterDefinition(\"defaultWeight\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v >= JobParameterDefinition.computeNumberExpression(allVals['weightLowerBound']) && v <= JobParameterDefinition.computeNumberExpression(allVals['weightUpperBound'])\n        }));\n        this.definitions.push(new JobParameterDefinition(\"weightUpperBound\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v >= JobParameterDefinition.computeNumberExpression(allVals['weightLowerBound'])\n        }));\n\n    }\n\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            nameOfCriterion1: 'Cost',\n            nameOfCriterion2: 'Effect',\n            extendedPolicyDescription: true,\n            weightLowerBound: 0,\n            defaultWeight: 0,\n            weightUpperBound: Infinity,\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Policy} from \"../../../policies/policy\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {LeagueTableJobParameters} from \"./league-table-job-parameters\";\n\n\nexport class LeagueTableJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"league-table\", jobRepository, expressionsEvaluator, objectiveRulesManager);\n        this.initSteps();\n    }\n\n    initSteps() {\n        this.calculateStep = new CalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        this.addStep(this.calculateStep);\n    }\n\n    createJobParameters(values) {\n        return new LeagueTableJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders = true) {\n        var result = [];\n        if (withHeaders) {\n            var headers = ['policy_id', 'policy', jobResult.payoffNames[0], jobResult.payoffNames[1], 'dominated_by', 'extended-dominated_by', 'incratio', 'optimal', 'optimal_for_default_weight'];\n            result.push(headers);\n        }\n\n        jobResult.rows.forEach(row => {\n            row.policies.forEach(policy=> {\n                var rowCells = [\n                    row.id,\n                    Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription),\n                    row.payoffs[1],\n                    row.payoffs[0],\n                    row.dominatedBy,\n                    row.extendedDominatedBy === null ? null : row.extendedDominatedBy[0] + ', ' + row.extendedDominatedBy[1],\n                    row.incratio,\n                    row.optimal,\n                    row.optimalForDefaultWeight\n                ];\n                result.push(rowCells);\n            })\n        });\n\n        return result;\n    }\n}\n","import {Step} from \"../../../engine/step\";\nimport {JOB_STATUS} from \"../../../engine/job-status\";\nimport {PoliciesCollector} from \"../../../../policies/policies-collector\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {TreeValidator} from \"../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../policies/policy\";\n\nexport class CalculateStep extends Step {\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var data = stepExecution.getData();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let rule = this.objectiveRulesManager.currentRule;\n        var treeRoot = data.getRoots()[0];\n        var policiesCollector = new PoliciesCollector(treeRoot);\n\n        var policies = policiesCollector.policies;\n\n\n        var payoffCoeffs = this.payoffCoeffs = rule.payoffCoeffs;\n\n        this.expressionsEvaluator.evalExpressions(data);\n        var vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n\n        if (!vr.isValid()) {\n            return stepExecution;\n        }\n\n        var compare = (a, b)=>(-payoffCoeffs[0] *  (b.payoffs[0] - a.payoffs[0])) || (-payoffCoeffs[1] *  (a.payoffs[1] - b.payoffs[1]));\n\n        var rows = policies.map(policy => {\n            this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n            return {\n                policies: [policy],\n                payoffs: treeRoot.computedValue(ruleName, 'payoff').slice(),\n                dominatedBy: null,\n                extendedDominatedBy: null,\n                incratio: null,\n                optimal: false,\n                optimalForDefaultWeight: false\n            }\n        }).sort(compare);\n\n        rows = rows.reduce((previousValue, currentValue, index, array)=>{\n            if(!previousValue.length){\n                return [currentValue]\n            }\n\n            let prev = previousValue[previousValue.length-1];\n            if(compare(prev, currentValue) == 0){\n                prev.policies.push(...currentValue.policies);\n                return previousValue\n            }\n            return previousValue.concat(currentValue)\n        }, []);\n\n        rows.sort((a, b)=>(payoffCoeffs[0] *  (a.payoffs[0] - b.payoffs[0])) || (-payoffCoeffs[1] *   (a.payoffs[1] - b.payoffs[1])));\n        rows.forEach((r, i)=> {\n            r.id = i+1;\n        });\n        // rows.sort(compare);\n        rows.sort((a, b)=>(-payoffCoeffs[0] *  (a.payoffs[0] - b.payoffs[0])) || (-payoffCoeffs[1] *   (a.payoffs[1] - b.payoffs[1])));\n\n        let bestCost = -payoffCoeffs[1] * Infinity,\n            bestCostRow = null;\n\n        let cmp= (a, b) => a > b;\n        if(payoffCoeffs[1]<0){\n            cmp= (a, b) => a < b;\n        }\n\n        rows.forEach((r, i)=> {\n            if (cmp(r.payoffs[1], bestCost)) {\n                bestCost = r.payoffs[1];\n                bestCostRow = r;\n            } else if(bestCostRow) {\n                r.dominatedBy = bestCostRow.id;\n            }\n        });\n\n        cmp= (a, b) => a < b;\n        if(payoffCoeffs[0] > 0 && payoffCoeffs[1] < 0){\n            cmp= (a, b) => a < b;\n        }else if(payoffCoeffs[0] < 0 && payoffCoeffs[1] > 0){\n            cmp= (a, b) => a < b;\n        }else if(payoffCoeffs[1]<0){\n            cmp= (a, b) => a > b;\n        }\n\n        let prev2NotDominated = null;\n\n\n        rows.filter(r=>!r.dominatedBy).sort((a, b)=>(  payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0]))).forEach((r, i, arr)=> {\n            if (!i) {\n                r.incratio = 0;\n                return;\n            }\n\n            let prev = arr[i - 1];\n\n            r.incratio = this.computeICER(r, prev);\n            if (i < 2) {\n                return;\n            }\n\n            if(!prev2NotDominated){\n                prev2NotDominated = arr[i - 2];\n            }\n\n            if(cmp(r.incratio,prev.incratio)){\n                prev.incratio = null;\n                prev.extendedDominatedBy = [prev2NotDominated.id, r.id] ;\n                r.incratio = this.computeICER(r, prev2NotDominated);\n            }else{\n                prev2NotDominated = prev;\n            }\n        });\n\n        let weightLowerBound = params.value(\"weightLowerBound\");\n        let defaultWeight = params.value(\"defaultWeight\");\n        let weightUpperBound = params.value(\"weightUpperBound\");\n\n        //mark optimal for weight in [weightLowerBound, weightUpperBound] and optimal for default Weight\n        let lastLELower = null;\n        let lastLELowerDef = null;\n        rows.slice().filter(r=>!r.dominatedBy && !r.extendedDominatedBy).sort((a, b) => {\n            let sub = a.incratio - b.incratio;\n            return sub ? sub : payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0])\n        }).forEach((row, i, arr)=>{\n\n            if(row.incratio < weightLowerBound){\n                lastLELower  = row;\n            }\n            if(row.incratio < defaultWeight){\n                lastLELowerDef  = row;\n            }\n\n            row.optimal = row.incratio >= weightLowerBound && row.incratio <= weightUpperBound;\n            row.optimalForDefaultWeight = row.incratio == defaultWeight;\n\n        });\n        if(lastLELower){\n            lastLELower.optimal = true;\n        }\n\n        if(lastLELowerDef){\n            lastLELowerDef.optimalForDefaultWeight = true;\n        }\n\n        rows.forEach(row=>{\n            row.payoffs[0] =  ExpressionEngine.toFloat(row.payoffs[0]);\n            row.payoffs[1] =  ExpressionEngine.toFloat(row.payoffs[1]);\n            row.incratio = row.incratio === null ? null : ExpressionEngine.toFloat(row.incratio);\n        });\n\n        jobResult.data = {\n            payoffNames: data.payoffNames.slice(),\n            payoffCoeffs : payoffCoeffs,\n            rows: rows.sort((a, b)=>(a.id - b.id)),\n            weightLowerBound: ExpressionEngine.toFloat(weightLowerBound),\n            defaultWeight: ExpressionEngine.toFloat(defaultWeight),\n            weightUpperBound: ExpressionEngine.toFloat(weightUpperBound)\n        };\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n\n    computeICER(r, prev){\n        let d = ExpressionEngine.subtract(r.payoffs[0], prev.payoffs[0]);\n        let n = ExpressionEngine.subtract(r.payoffs[1], prev.payoffs[1]);\n        if (d == 0){\n            if(n<0){\n                return - Infinity;\n            }\n            return Infinity;\n        }\n        return Math.abs(ExpressionEngine.divide(n, d));\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\nexport class PayoffsTransformationJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"objectId\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"functionName\", PARAMETER_TYPE.STRING).set('required', true));\n        this.definitions.push(new JobParameterDefinition(\"functionBody\", PARAMETER_TYPE.STRING).set('required', true));\n        this.definitions.push(new JobParameterDefinition(\"functionArgumentName\", PARAMETER_TYPE.STRING).set('required', true));\n        this.definitions.push(new JobParameterDefinition(\"makeClone\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            functionName: 'transformPayoff',\n            functionBody: 'log(p)',\n            functionArgumentName: 'p',\n            makeClone: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Step} from \"../../engine/step\";\nimport {JOB_STATUS} from \"../../engine/job-status\";\nimport {TreeValidator} from \"../../../validation/tree-validator\";\n\nimport {PayoffsTransformationJobParameters} from \"./payoffs-transformation-job-parameters\";\nimport {Job} from \"../../engine/job\";\nimport {domain as model} from \"sd-model\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport class PayoffsTransformationJob extends Job {\n\n    static $NAME = 'payoffs-transformation';\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(PayoffsTransformationJob.$NAME, jobRepository);\n        this.isRestartable = false;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(execution) {\n        var data = execution.getData();\n        var params = execution.jobParameters;\n        let functionName = params.value(\"functionName\");\n\n        const root = data.findNodeById(params.value(\"objectId\"));\n\n        let makeClone = params.value(\"makeClone\");\n\n        let rootTarget = makeClone ? data.cloneSubtree(root, true) : root;\n\n\n        rootTarget.code += '\\n' + functionName + '('+ params.value('functionArgumentName') + ') = ' + params.value('functionBody');\n\n        let allNodes = data.getAllNodesInSubtree(rootTarget);\n\n\n        this.processNodePayoff(rootTarget, params);\n\n        if(makeClone){\n            let minY = Number.MAX_VALUE;\n            let maxY = Number.MIN_VALUE;\n            allNodes.forEach(n => {\n                if (n.location.y < minY) {\n                    minY = n.location.y;\n                }\n                if (n.location.y > maxY) {\n                    maxY = n.location.y;\n                }\n\n            });\n\n            let extentY = maxY - minY;\n            let margin = 30;\n            let offset = extentY + margin;\n\n\n            rootTarget.move(0, offset);\n            data.attachSubtree(rootTarget);\n        }\n\n        return execution;\n    }\n\n    processNodePayoff(node, params, parentEdge = null, aggregatedPayoff = [0, 0]){\n        if(node.type === model.TerminalNode.$TYPE){\n            parentEdge.payoff = aggregatedPayoff.map(p => params.value(\"functionName\") + '(' + ExpressionEngine.toNumber(p).toFraction(false) + ')');\n            return;\n        }\n\n        if (parentEdge) {\n            parentEdge.payoff.fill(0);\n        }\n\n\n        node.childEdges.forEach((e) => {\n            this.processNodePayoff(e.childNode, params, e, aggregatedPayoff.map((p,i) => ExpressionEngine.add(p, e.computedBasePayoff(undefined, i))))\n        })\n    }\n\n    createJobParameters(values) {\n        return new PayoffsTransformationJobParameters(values);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\nexport class RecomputeJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING).set('required', false));\n        this.definitions.push(new JobParameterDefinition(\"evalCode\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"evalNumeric\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            ruleName: null, //recompute all rules\n            evalCode: true,\n            evalNumeric: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Step} from \"../../engine/step\";\nimport {JOB_STATUS} from \"../../engine/job-status\";\nimport {TreeValidator} from \"../../../validation/tree-validator\";\nimport {BatchStep} from \"../../engine/batch/batch-step\";\nimport {RecomputeJobParameters} from \"./recompute-job-parameters\";\nimport {Job} from \"../../engine/job\";\n\nexport class RecomputeJob extends Job {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"recompute\", jobRepository);\n        this.isRestartable = false;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(execution) {\n        var data = execution.getData();\n        var params = execution.jobParameters;\n        var ruleName = params.value(\"ruleName\");\n        var allRules = !ruleName;\n        if(ruleName){\n            this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        }\n        this.checkValidityAndRecomputeObjective(data, allRules, params.value(\"evalCode\"), params.value(\"evalNumeric\"))\n        return execution;\n    }\n\n    checkValidityAndRecomputeObjective(data, allRules, evalCode, evalNumeric) {\n        data.validationResults = [];\n\n        if(evalCode||evalNumeric){\n            this.expressionsEvaluator.evalExpressions(data, evalCode, evalNumeric);\n        }\n\n        data.getRoots().forEach(root=> {\n            var vr = this.treeValidator.validate(data.getAllNodesInSubtree(root));\n            data.validationResults.push(vr);\n            if (vr.isValid()) {\n                this.objectiveRulesManager.recomputeTree(root, allRules);\n            }\n        });\n    }\n\n    createJobParameters(values) {\n        return new RecomputeJobParameters(values);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class SensitivityAnalysisJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"min\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"max\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 2),\n            ], 1, Infinity, false,\n            v => v[\"min\"] < v[\"max\"],\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ))\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            extendedPolicyDescription: true,\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {SensitivityAnalysisJobParameters} from \"./sensitivity-analysis-job-parameters\";\nimport {PrepareVariablesStep} from \"./steps/prepare-variables-step\";\nimport {InitPoliciesStep} from \"./steps/init-policies-step\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {Policy} from \"../../../../policies/policy\";\nimport {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\n\nexport class SensitivityAnalysisJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize=5) {\n        super(\"sensitivity-analysis\", jobRepository, expressionsEvaluator, objectiveRulesManager);\n        this.batchSize = 5;\n        this.initSteps();\n    }\n\n    initSteps(){\n        this.addStep(new PrepareVariablesStep(this.jobRepository, this.expressionsEvaluator.expressionEngine));\n        this.addStep(new InitPoliciesStep(this.jobRepository));\n        this.calculateStep = new CalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager, this.batchSize);\n        this.addStep(this.calculateStep);\n    }\n\n    createJobParameters(values) {\n        return new SensitivityAnalysisJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n    setBatchSize(batchSize){\n        this.batchSize = batchSize;\n        this.calculateStep.chunkSize = batchSize;\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n        var result = [];\n        if(withHeaders){\n            var headers = ['policy_number', 'policy'];\n            jobResult.variableNames.forEach(n=>headers.push(n));\n            headers.push('payoff');\n            result.push(headers);\n        }\n\n        var roundVariables = !!jobParameters.values.roundVariables;\n        if(roundVariables){\n            this.roundVariables(jobResult);\n        }\n\n        jobResult.rows.forEach(row => {\n            var policy = jobResult.policies[row.policyIndex];\n            var rowCells = [row.policyIndex+1, Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription)];\n            row.variables.forEach(v=> rowCells.push(v));\n            rowCells.push(row.payoff);\n            result.push(rowCells);\n\n            if(row._variables){ //revert original variables\n                row.variables = row._variables;\n                delete row._variables;\n            }\n        });\n\n        return result;\n    }\n\n    roundVariables(jobResult){\n        var uniqueValues = jobResult.variableNames.map(()=>new Set());\n\n        jobResult.rows.forEach(row => {\n            row._variables = row.variables.slice(); // save original row variables\n            row.variables.forEach((v,i)=> {\n                uniqueValues[i].add(v)\n            });\n        });\n\n        var uniqueValuesNo = uniqueValues.map((s)=>s.size);\n        var maxPrecision = 14;\n        var precision = 2;\n        var notReadyVariablesIndexes = jobResult.variableNames.map((v,i)=>i);\n        while(precision<=maxPrecision && notReadyVariablesIndexes.length){\n            uniqueValues = notReadyVariablesIndexes.map(()=>new Set());\n            jobResult.rows.forEach(row => {\n                notReadyVariablesIndexes.forEach((variableIndex, notReadyIndex)=>{\n\n                    var val = row._variables[variableIndex];\n                    val = Utils.round(val, precision);\n                    uniqueValues[notReadyIndex].add(val);\n\n                    row.variables[variableIndex] = val;\n                })\n            });\n\n            var newReadyIndexes = [];\n            uniqueValues.forEach((uniqueVals, notReadyIndex)=>{\n                var origUniqueCount = uniqueValuesNo[notReadyVariablesIndexes[notReadyIndex]] ;\n                if(origUniqueCount==uniqueVals.size){ //ready in previous iteration\n                    newReadyIndexes.push(notReadyIndex);\n                }\n            });\n            if(newReadyIndexes.length) { //revert values to prev iteration\n                newReadyIndexes.reverse();\n                newReadyIndexes.forEach(notReadyIndex=>{\n                    notReadyVariablesIndexes.splice(notReadyIndex, 1);\n                })\n            }\n            precision++;\n        }\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n\n        if (execution.stepExecutions.length <= 2) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[2].getProgress(execution.stepExecutions[2]);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize) {\n        super(\"calculate_step\", jobRepository, batchSize);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        var jobExecutionContext = stepExecution.getJobExecutionContext();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        var variableValues = jobResult.data.variableValues;\n        var variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n\n\n        if (!jobResult.data.rows) {\n            jobResult.data.rows = [];\n            jobResult.data.variableNames = variableNames;\n        }\n\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        var variableValues = jobResult.data.variableValues;\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n\n    processItem(stepExecution, item) {\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n        var failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        var data = stepExecution.getData();\n        var treeRoot = data.getRoots()[0];\n        var variableNames = stepExecution.executionContext.get(\"variableNames\");\n        var policies = stepExecution.getJobExecutionContext().get(\"policies\");\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n        variableNames.forEach((variableName, i)=> {\n            data.expressionScope[variableName] = item[i];\n        });\n\n        this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n        var vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n\n        var valid = vr.isValid();\n\n        if(!valid && failOnInvalidTree){\n            let errorData = {\n                variables: {}\n            };\n            variableNames.forEach((variableName, i)=> {\n                errorData.variables[variableName] = item[i];\n            });\n            throw new JobComputationException(\"computations\", errorData)\n        }\n\n        var payoffs = [];\n\n        policies.forEach(policy=> {\n            var payoff = 'n/a';\n            if (valid) {\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n            }\n            payoffs.push(payoff);\n        });\n\n        return {\n            policies: policies,\n            variables: item,\n            payoffs: payoffs\n        };\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var extendedPolicyDescription = params.value(\"extendedPolicyDescription\");\n\n        items.forEach(item=> {\n            if (!item) {\n                return;\n            }\n            item.policies.forEach((policy, i)=> {\n                var variables = item.variables.map(v => this.toFloat(v));\n\n                var payoff = item.payoffs[i];\n                var row = {\n                    policyIndex: i,\n                    variables: variables,\n                    payoff: Utils.isString(payoff) ? payoff : this.toFloat(payoff)\n                };\n                jobResult.data.rows.push(row);\n            })\n        })\n    }\n\n    postProcess(stepExecution, jobResult) {\n        delete jobResult.data.variableValues;\n    }\n\n\n    toFloat(v) {\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\n\nexport class InitPoliciesStep extends Step {\n    constructor(jobRepository) {\n        super(\"init_policies\", jobRepository);\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var data = stepExecution.getData();\n        var treeRoot = data.getRoots()[0];\n        var policiesCollector = new PoliciesCollector(treeRoot);\n\n        var policies = policiesCollector.policies;\n        stepExecution.getJobExecutionContext().put(\"policies\", policies);\n\n        if(!jobResult.data){\n            jobResult.data={}\n        }\n\n        jobResult.data.policies = policies;\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class PrepareVariablesStep extends Step {\n    constructor(jobRepository, expressionEngine) {\n        super(\"prepare_variables\", jobRepository);\n        this.expressionEngine = expressionEngine;\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n\n        var variableValues = [];\n        variables.forEach(v=> {\n            variableValues.push(ComputationsUtils.sequence(v.min, v.max, v.length));\n        });\n        variableValues = Utils.cartesianProductOf(variableValues);\n        jobResult.data={\n            variableValues: variableValues\n        };\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class ProbabilisticSensitivityAnalysisJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"numberOfRuns\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v > 0));\n\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"formula\", PARAMETER_TYPE.NUMBER_EXPRESSION)\n            ], 1, Infinity, false,\n            null,\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ))\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            extendedPolicyDescription: true,\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {ProbabilisticSensitivityAnalysisJobParameters} from \"./probabilistic-sensitivity-analysis-job-parameters\";\nimport {InitPoliciesStep} from \"../n-way/steps/init-policies-step\";\nimport {SensitivityAnalysisJob} from \"../n-way/sensitivity-analysis-job\";\nimport {ProbCalculateStep} from \"./steps/prob-calculate-step\";\nimport {ComputePolicyStatsStep} from \"./steps/compute-policy-stats-step\";\n\nexport class ProbabilisticSensitivityAnalysisJob extends SensitivityAnalysisJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize=5) {\n        super(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize);\n        this.name = \"probabilistic-sensitivity-analysis\";\n    }\n\n    initSteps() {\n        this.addStep(new InitPoliciesStep(this.jobRepository));\n        this.calculateStep = new ProbCalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager, this.batchSize);\n        this.addStep(this.calculateStep);\n        this.addStep(new ComputePolicyStatsStep(this.expressionsEvaluator.expressionEngine, this.objectiveRulesManager, this.jobRepository));\n    }\n\n    createJobParameters(values) {\n        return new ProbabilisticSensitivityAnalysisJobParameters(values);\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution) {\n\n        if (execution.stepExecutions.length <= 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[1].getProgress(execution.stepExecutions[1]);\n    }\n}\n","import {log, Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport class ComputePolicyStatsStep extends Step {\n    constructor(expressionEngine, objectiveRulesManager, jobRepository) {\n        super(\"compute_policy_stats\", jobRepository);\n        this.expressionEngine = expressionEngine;\n        this.objectiveRulesManager = objectiveRulesManager;\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var numberOfRuns = params.value(\"numberOfRuns\");\n        var ruleName = params.value(\"ruleName\");\n\n        let rule = this.objectiveRulesManager.ruleByName[ruleName];\n\n\n        var payoffsPerPolicy = jobResult.data.policies.map(()=>[]);\n\n        jobResult.data.rows.forEach(row=> {\n            payoffsPerPolicy[row.policyIndex].push(Utils.isString(row.payoff) ? 0 : row.payoff)\n        });\n\n        log.debug('payoffsPerPolicy', payoffsPerPolicy, jobResult.data.rows.length, rule.maximization);\n\n        jobResult.data.medians = payoffsPerPolicy.map(payoffs=>ExpressionEngine.median(payoffs));\n        jobResult.data.standardDeviations = payoffsPerPolicy.map(payoffs=>ExpressionEngine.std(payoffs));\n\n        if (rule.maximization) {\n            jobResult.data.policyIsBestProbabilities = jobResult.data.policyToHighestPayoffCount.map(v=>ExpressionEngine.toFloat(ExpressionEngine.divide(v, numberOfRuns)));\n        } else {\n            jobResult.data.policyIsBestProbabilities = jobResult.data.policyToLowestPayoffCount.map(v=>ExpressionEngine.toFloat(ExpressionEngine.divide(v, numberOfRuns)));\n        }\n\n        jobResult.data.policyToHighestPayoffCount = jobResult.data.policyToHighestPayoffCount.map(v=>ExpressionEngine.toFloat(v));\n        jobResult.data.policyToLowestPayoffCount = jobResult.data.policyToLowestPayoffCount.map(v=>ExpressionEngine.toFloat(v));\n\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {CalculateStep} from \"../../n-way/steps/calculate-step\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\n\nexport class ProbCalculateStep extends CalculateStep {\n\n    init(stepExecution, jobResult) {\n        var jobExecutionContext = stepExecution.getJobExecutionContext();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        var variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n\n        if(!jobResult.data.rows){\n            jobResult.data.rows = [];\n            jobResult.data.variableNames = variableNames;\n            jobResult.data.expectedValues = Utils.fill(new Array(jobResult.data.policies.length), 0);\n            jobResult.data.policyToHighestPayoffCount = Utils.fill(new Array(jobResult.data.policies.length), 0);\n            jobResult.data.policyToLowestPayoffCount = Utils.fill(new Array(jobResult.data.policies.length), 0);\n        }\n\n        return params.value(\"numberOfRuns\");\n    }\n\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n        var data = stepExecution.getData();\n        var variableValues = [];\n        for(var runIndex=0; runIndex<chunkSize; runIndex++){\n            var singleRunVariableValues = [];\n            var errors = [];\n            variables.forEach(v=> {\n                try{\n                    var evaluated = this.expressionsEvaluator.expressionEngine.eval(v.formula, true, Utils.cloneDeep(data.expressionScope));\n                    singleRunVariableValues.push(ExpressionEngine.toFloat(evaluated));\n                }catch(e){\n                    errors.push({\n                        variable: v,\n                        error: e\n                    });\n                }\n\n            });\n            if(errors.length) {\n                var errorData = {variables: []};\n                errors.forEach(e=>{\n                    errorData.variables[e.variable.name] = e.error.message;\n                });\n                throw new JobComputationException(\"param-computation\", errorData)\n            }\n            variableValues.push(singleRunVariableValues)\n        }\n\n        return variableValues;\n    }\n\n    processItem(stepExecution, item, currentItemCount, jobResult) {\n        var r = super.processItem(stepExecution, item, jobResult);\n\n        var params = stepExecution.getJobParameters();\n        var numberOfRuns = params.value(\"numberOfRuns\");\n        var policies = stepExecution.getJobExecutionContext().get(\"policies\");\n\n        this.updatePolicyStats(r, policies, numberOfRuns, jobResult);\n\n        return r;\n    }\n\n    updatePolicyStats(r, policies, numberOfRuns, jobResult){\n        var highestPayoff = -Infinity;\n        var lowestPayoff = Infinity;\n        var bestPolicyIndexes = [];\n        var worstPolicyIndexes = [];\n\n        var zeroNum = ExpressionEngine.toNumber(0);\n\n        policies.forEach((policy,i)=>{\n            let payoff = r.payoffs[i];\n            if(Utils.isString(payoff)){\n                payoff = zeroNum;\n            }\n            if(payoff < lowestPayoff){\n                lowestPayoff = payoff;\n                worstPolicyIndexes = [i];\n            }else if(payoff.equals(lowestPayoff)){\n                worstPolicyIndexes.push(i)\n            }\n            if(payoff > highestPayoff){\n                highestPayoff = payoff;\n                bestPolicyIndexes = [i]\n            }else if(payoff.equals(highestPayoff)){\n                bestPolicyIndexes.push(i)\n            }\n\n            jobResult.data.expectedValues[i] = ExpressionEngine.add(jobResult.data.expectedValues[i], ExpressionEngine.divide(payoff, numberOfRuns));\n        });\n\n        bestPolicyIndexes.forEach(policyIndex=>{\n            jobResult.data.policyToHighestPayoffCount[policyIndex] = ExpressionEngine.add(jobResult.data.policyToHighestPayoffCount[policyIndex], ExpressionEngine.divide(1, bestPolicyIndexes.length))\n        });\n\n        worstPolicyIndexes.forEach(policyIndex=>{\n            jobResult.data.policyToLowestPayoffCount[policyIndex] = ExpressionEngine.add(jobResult.data.policyToLowestPayoffCount[policyIndex], ExpressionEngine.divide(1, worstPolicyIndexes.length))\n        });\n    }\n\n\n    postProcess(stepExecution, jobResult) {\n        jobResult.data.expectedValues = jobResult.data.expectedValues.map(v=>this.toFloat(v));\n    }\n\n\n    toFloat(v) {\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class SpiderPlotJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"percentageChangeRange\", PARAMETER_TYPE.NUMBER).set(\"singleValueValidator\", v => v > 0 && v <=100));\n        this.definitions.push(new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 0));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n            ], 1, Infinity, false,\n            null,\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {SpiderPlotJobParameters} from \"./spider-plot-job-parameters\";\n\nexport class SpiderPlotJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"spider-plot\", jobRepository);\n        this.addStep(new CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager));\n    }\n\n    createJobParameters(values) {\n        return new SpiderPlotJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n        if (execution.stepExecutions.length < 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[0].getProgress(execution.stepExecutions[0]);\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n\n        let result = [];\n        if(withHeaders){\n            result.push(['variable_name', 'policy_no'].concat(jobResult.percentageRangeValues));\n        }\n\n        jobResult.rows.forEach((row, index) => {\n\n            result.push(...row.payoffs.map((payoffs, policyIndex)=>[\n                row.variableName,\n                policyIndex+1,\n                ...payoffs\n            ]));\n\n        });\n\n        return result;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository, 1);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        let jobExecutionContext = stepExecution.getJobExecutionContext();\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let percentageChangeRange = params.value(\"percentageChangeRange\");\n        let length = params.value(\"length\");\n        let variables = params.value(\"variables\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n        let data = stepExecution.getData();\n\n        let treeRoot = data.getRoots()[0];\n        let payoff = treeRoot.computedValue(ruleName, 'payoff');\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalExpressions(data);\n\n        this.objectiveRulesManager.recomputeTree(treeRoot, false);\n\n        let policiesCollector = new PoliciesCollector(treeRoot, ruleName);\n\n        let defaultValues = {};\n        data.getGlobalVariableNames().forEach(name => {\n            let v = data.expressionScope[name];\n            try {\n                defaultValues[name] = this.toFloat(v);\n            } catch (e) {\n                throw new JobComputationException(\"error computing float value of a variable\", {\n                    name: name,\n                    value: v,\n                })\n            }\n        });\n\n\n        let percentageRangeValues = ComputationsUtils.sequence(-percentageChangeRange, percentageChangeRange, 2*length+1);\n\n        let variableValues = [];\n\n        variables.forEach(v=> {\n            let defVal = defaultValues[v.name];\n            variableValues.push(percentageRangeValues.map(p=> this.toFloat(ExpressionEngine.add(defVal, ExpressionEngine.multiply(ExpressionEngine.divide(p,100), defVal)))));\n        });\n\n\n        if(!jobResult.data){\n            jobResult.data = {\n                variableNames: variableNames,\n                defaultValues: defaultValues,\n                percentageRangeValues: percentageRangeValues,\n                defaultPayoff: this.toFloat(payoff)[0],\n                policies: policiesCollector.policies,\n                rows: []\n            };\n        }\n\n        stepExecution.getJobExecutionContext().put(\"variableValues\", variableValues);\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize) {\n        let variableValues = stepExecution.getJobExecutionContext().get(\"variableValues\");\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n    processItem(stepExecution, item, itemIndex, jobResult) {\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        let data = stepExecution.getData();\n        let treeRoot = data.getRoots()[0];\n        let variableNames = stepExecution.executionContext.get(\"variableNames\");\n        let variableName = variableNames[itemIndex];\n\n\n        let payoffs = jobResult.data.policies.map(policy=>[]);\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n\n\n        item.forEach(variableValue=>{\n\n            data.expressionScope[variableName] = variableValue;\n\n            this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n            let vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n            let valid = vr.isValid();\n\n            if(!valid && failOnInvalidTree){\n                let errorData = {\n                    variables: {}\n                };\n                errorData.variables[variableName] = variableValue;\n\n                throw new JobComputationException(\"computations\", errorData)\n            }\n\n            jobResult.data.policies.forEach((policy, policyIndex)=>{\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                let payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n                payoffs[policyIndex].push(this.toFloat(payoff));\n            });\n\n        });\n\n        return {\n            variableName: variableName,\n            variableIndex: itemIndex,\n            variableValues: item,\n            payoffs: payoffs\n        };\n\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        jobResult.data.rows.push(...items);\n    }\n\n\n    toFloat(v){\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository, 1);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        let jobExecutionContext = stepExecution.getJobExecutionContext();\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let variableValues = jobExecutionContext.get(\"variableValues\");\n        let variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n        let data = stepExecution.getData();\n\n        let treeRoot = data.getRoots()[0];\n        let payoff = treeRoot.computedValue(ruleName, 'payoff');\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalExpressions(data);\n\n        this.objectiveRulesManager.recomputeTree(treeRoot, false);\n\n\n\n        let policiesCollector = new PoliciesCollector(treeRoot, ruleName);\n\n        let defaultValues = {};\n        data.getGlobalVariableNames().forEach(name => {\n            let v = data.expressionScope[name];\n            try {\n                defaultValues[name] = this.toFloat(v);\n            } catch (e) {\n                throw new JobComputationException(\"error computing float value of a variable\", {\n                    name: name,\n                    value: v,\n                })\n            }\n        });\n\n        if(!jobResult.data){\n            jobResult.data = {\n                variableNames: variableNames,\n                defaultValues: defaultValues,\n                variableExtents: variableValues.map(v=>[v[0], v[v.length-1]]),\n                defaultPayoff: this.toFloat(payoff)[0],\n                policies: policiesCollector.policies,\n                rows: []\n            };\n        }\n\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize) {\n        let variableValues = stepExecution.getJobExecutionContext().get(\"variableValues\");\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n    processItem(stepExecution, item, itemIndex, jobResult) {\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        let data = stepExecution.getData();\n        let treeRoot = data.getRoots()[0];\n        let variableNames = stepExecution.executionContext.get(\"variableNames\");\n        let variableName = variableNames[itemIndex];\n\n        let extents = jobResult.data.policies.map(policy=>{\n            return {\n                min: Infinity,\n                max: -Infinity\n            }\n        });\n\n        let values = jobResult.data.policies.map(policy=>{\n            return {\n                min: null,\n                max: null\n            }\n        });\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n\n\n        item.forEach(variableValue=>{\n\n            data.expressionScope[variableName] = variableValue;\n\n            this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n            let vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n            let valid = vr.isValid();\n\n            if(!valid && failOnInvalidTree){\n                let errorData = {\n                    variables: {}\n                };\n                errorData.variables[variableName] = variableValue;\n\n                throw new JobComputationException(\"computations\", errorData)\n            }\n\n            jobResult.data.policies.forEach((policy, policyIndex)=>{\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                let payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n\n                if(payoff < extents[policyIndex].min){\n                    extents[policyIndex].min = payoff;\n                    values[policyIndex].min = variableValue\n                }\n\n                if(payoff > extents[policyIndex].max){\n                    extents[policyIndex].max = payoff;\n                    values[policyIndex].max = variableValue\n                }\n            });\n\n        });\n\n        return {\n            variableName: variableName,\n            variableIndex: itemIndex,\n            extents: extents.map(e=>[this.toFloat(e.min), this.toFloat(e.max)]),\n            extentVariableValues: values.map(v=>[this.toFloat(v.min), this.toFloat(v.max)])\n        };\n\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        jobResult.data.rows.push(...items);\n    }\n\n    postProcess(stepExecution, jobResult) {\n        jobResult.data.rows.sort((a, b)=>(b.extents[0][1]-b.extents[0][0])-(a.extents[0][1]-a.extents[0][0]))\n\n    }\n\n\n    toFloat(v){\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class PrepareVariablesStep extends Step {\n    constructor(jobRepository) {\n        super(\"prepare_variables\", jobRepository);\n    }\n\n    doExecute(stepExecution) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n\n        var variableValues = [];\n        variables.forEach(v=> {\n            variableValues.push(ComputationsUtils.sequence(v.min, v.max, v.length));\n        });\n        stepExecution.getJobExecutionContext().put(\"variableValues\", variableValues);\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class TornadoDiagramJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"min\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"max\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 0),\n            ], 1, Infinity, false,\n            v => v[\"min\"] <= v[\"max\"],\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {PrepareVariablesStep} from \"./steps/prepare-variables-step\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {TornadoDiagramJobParameters} from \"./tornado-diagram-job-parameters\";\n\nexport class TornadoDiagramJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"tornado-diagram\", jobRepository);\n        this.addStep(new PrepareVariablesStep(jobRepository));\n        this.addStep(new CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager));\n    }\n\n    createJobParameters(values) {\n        return new TornadoDiagramJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n\n        if (execution.stepExecutions.length <= 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[1].getProgress(execution.stepExecutions[1]);\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n        let result = [];\n        if(withHeaders){\n            result.push(['variable_name', 'default_var_value', \"min_var_value\", \"max_var_value\", 'default_payoff', \"min_payoff\", \"max_payoff\", \"policy_no\"]);\n        }\n\n\n        jobResult.rows.forEach((row, index) => {\n\n            result.push(...row.extents.map((extent, policyIndex)=>[\n                row.variableName,\n                jobResult.defaultValues[row.variableName],\n                row.extentVariableValues[policyIndex][0],\n                row.extentVariableValues[policyIndex][1],\n                jobResult.defaultPayoff,\n                extent[0],\n                extent[1],\n                policyIndex+1\n            ]));\n\n        });\n\n\n        return result;\n    }\n}\n","import {JOB_STATUS} from \"../job-status\";\nimport {log} from 'sd-utils'\nimport {Step} from \"../step\";\nimport {JobInterruptedException} from \"../exceptions/job-interrupted-exception\";\n\n/*job step that process batch of items*/\nexport class BatchStep extends Step {\n\n    chunkSize;\n    static CURRENT_ITEM_COUNT_PROP = 'batch_step_current_item_count';\n    static TOTAL_ITEM_COUNT_PROP = 'batch_step_total_item_count';\n\n    constructor(name, jobRepository, chunkSize) {\n        super(name, jobRepository);\n        this.chunkSize = chunkSize;\n    }\n\n    /**\n     * Extension point for subclasses to perform step initialization. Should return total item count\n     */\n    init(stepExecution, jobResult) {\n        throw \"BatchStep.init function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to read and return chunk of items to process\n     */\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        throw \"BatchStep.readNextChunk function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to process single item\n     * Must return processed item which will be passed in a chunk to writeChunk function\n     */\n    processItem(stepExecution, item, currentItemCount, jobResult) {\n        throw \"BatchStep.processItem function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to write chunk of items. Not required\n     */\n    writeChunk(stepExecution, items, jobResult) {\n    }\n\n    /**\n     * Extension point for subclasses to perform postprocessing after all items have been processed. Not required\n     */\n    postProcess(stepExecution, jobResult) {\n    }\n\n\n    setTotalItemCount(stepExecution, count) {\n        stepExecution.executionContext.put(BatchStep.TOTAL_ITEM_COUNT_PROP, count);\n    }\n\n    getTotalItemCount(stepExecution) {\n        return stepExecution.executionContext.get(BatchStep.TOTAL_ITEM_COUNT_PROP);\n    }\n\n    setCurrentItemCount(stepExecution, count) {\n        stepExecution.executionContext.put(BatchStep.CURRENT_ITEM_COUNT_PROP, count);\n    }\n\n    getCurrentItemCount(stepExecution) {\n        return stepExecution.executionContext.get(BatchStep.CURRENT_ITEM_COUNT_PROP) || 0;\n    }\n\n\n    doExecute(stepExecution, jobResult) {\n        return Promise.resolve().then(()=> {\n            return this.init(stepExecution, jobResult)\n        }).catch(e=> {\n            log.error(\"Failed to initialize batch step: \" + this.name, e);\n            throw e;\n        }).then(totalItemCount=> {\n            return Promise.resolve().then(()=>{\n                this.setCurrentItemCount(stepExecution, this.getCurrentItemCount(stepExecution));\n                this.setTotalItemCount(stepExecution, totalItemCount);\n                return this.handleNextChunk(stepExecution, jobResult)\n            }).catch(e=> {\n                if(!(e instanceof JobInterruptedException)){\n                    log.error(\"Failed to handle batch step: \" + this.name, e);\n                }\n                throw e;\n            })\n        }).then(()=> {\n            return Promise.resolve().then(()=>{\n                return this.postProcess(stepExecution, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to postProcess batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then(()=> {\n            stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n            return stepExecution;\n        })\n\n    }\n\n    handleNextChunk(stepExecution, jobResult) {\n        var currentItemCount = this.getCurrentItemCount(stepExecution);\n        var totalItemCount = this.getTotalItemCount(stepExecution);\n        var chunkSize = Math.min(this.chunkSize, totalItemCount - currentItemCount);\n        if (currentItemCount >= totalItemCount) {\n            return stepExecution;\n        }\n        return this.checkJobExecutionFlags(stepExecution).then(()=> {\n            // Check if someone is trying to stop us\n            if (stepExecution.terminateOnly) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            return stepExecution\n        }).then(()=> {\n            return Promise.resolve().then(()=>{\n                return this.readNextChunk(stepExecution, currentItemCount, chunkSize, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to read chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            });\n        }).then(chunk=> {\n            return Promise.resolve().then(()=>{\n                return this.processChunk(stepExecution, chunk, currentItemCount, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to process chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then(processedChunk=> {\n            return Promise.resolve().then(()=>{\n                return this.writeChunk(stepExecution, processedChunk, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to write chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then((res)=> {\n            currentItemCount += chunkSize;\n            this.setCurrentItemCount(stepExecution, currentItemCount);\n            return this.updateJobProgress(stepExecution).then(()=> {\n                return this.handleNextChunk(stepExecution, jobResult);\n            });\n        })\n    }\n\n    processChunk(stepExecution, chunk, currentItemCount, jobResult) { //TODO promisify\n        return chunk.map((item, i)=>this.processItem(stepExecution, item, currentItemCount+i, jobResult));\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(stepExecution){\n        return {\n            total: this.getTotalItemCount(stepExecution),\n            current: this.getCurrentItemCount(stepExecution)\n        }\n    }\n\n    updateJobProgress(stepExecution) {\n        var progress = this.jobRepository.getJobByName(stepExecution.jobExecution.jobInstance.jobName).getProgress(stepExecution.jobExecution);\n        return this.jobRepository.updateJobExecutionProgress(stepExecution.jobExecution.id, progress);\n    }\n\n    checkJobExecutionFlags(stepExecution){\n        return this.jobRepository.getJobByName(stepExecution.jobExecution.jobInstance.jobName).checkExecutionFlags(stepExecution.jobExecution);\n    }\n}\n","export class ExtendableError {\n    data;\n    constructor(message, data) {\n        this.message = message;\n        this.data = data;\n        this.name = this.constructor.name;\n    }\n}\n","export * from './extendable-error'\nexport * from './job-data-invalid-exception'\nexport * from './job-execution-already-running-exception'\nexport * from './job-instance-already-complete-exception'\nexport * from './job-interrupted-exception'\nexport * from './job-parameters-invalid-exception'\nexport * from './job-restart-exception'\n\n\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobComputationException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobDataInvalidException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobExecutionAlreadyRunningException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobInstanceAlreadyCompleteException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobInterruptedException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobParametersInvalidException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobRestartException extends ExtendableError {\n}\n","import {Utils} from \"sd-utils\";\nimport {DataModel} from \"sd-model\";\nimport {StepExecution} from \"./step-execution\";\n\nexport class ExecutionContext {\n\n    dirty = false;\n    context = {};\n\n    constructor(context) {\n        if (context) {\n            this.context = Utils.clone(context)\n        }\n    }\n\n    put(key, value) {\n        var prevValue = this.context[key];\n        if (value != null) {\n            var result = this.context[key] = value;\n            this.dirty = prevValue == null || prevValue != null && prevValue != value;\n        }\n        else {\n            delete this.context[key];\n            this.dirty = prevValue != null;\n        }\n    }\n\n    get(key) {\n        return this.context[key];\n    }\n\n    containsKey(key) {\n        return this.context.hasOwnProperty(key);\n    }\n\n    remove(key) {\n        delete this.context[key];\n    }\n\n    setData(data) { //set data model\n        return this.put(\"data\", data);\n    }\n\n    getData() { // get data model\n        return this.get(\"data\");\n    }\n\n\n    getDTO(filteredProperties = [], deepClone = true) {\n        var cloneMethod = Utils.cloneDeepWith;\n        if (!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n\n        let dto = Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if (filteredProperties.indexOf(key) > -1) {\n                return null;\n            }\n\n            if (value instanceof DataModel) {\n                return value.getDTO()\n            }\n\n            if(value && value.$ObjectWithIdAndEditableFields && value.id && this.getData().findById(value.id)){\n                return {\n                    '$ObjectWithIdAndEditableFields': true,\n                    id: value.id\n                }\n            }\n\n            if (value instanceof Error) {\n                return Utils.getErrorDTO(value);\n            }\n\n        }));\n\n        return dto\n    }\n\n}\n","import * as exceptions from './exceptions'\n\nexport {exceptions}\nexport * from './execution-context'\nexport * from './job'\nexport * from './job-execution'\nexport * from './job-execution-flag'\nexport * from './job-execution-listener'\nexport * from './job-instance'\nexport * from './job-key-generator'\nexport * from './job-launcher'\nexport * from './job-parameter-definition'\nexport * from './job-parameters'\nexport * from './job-status'\nexport * from './simple-job'\nexport * from './step'\nexport * from './step-execution'\nexport * from './step-execution-listener'\n\n\n\n\n","export const JOB_EXECUTION_FLAG = {\n    STOP: 'STOP'\n};\n","export class JobExecutionListener {\n    /*Called before a job executes*/\n    beforeJob(jobExecution) {\n\n    }\n\n    /*Called after completion of a job. Called after both successful and failed executions*/\n    afterJob(jobExecution) {\n\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {StepExecution} from \"./step-execution\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\n\n/*domain object representing the execution of a job.*/\nexport class JobExecution {\n    id;\n    jobInstance;\n    jobParameters;\n    stepExecutions = [];\n    status = JOB_STATUS.STARTING;\n    exitStatus = JOB_STATUS.UNKNOWN;\n    executionContext = new ExecutionContext();\n\n    startTime = null;\n    createTime = new Date();\n    endTime = null;\n    lastUpdated = null;\n\n    failureExceptions = [];\n\n    constructor(jobInstance, jobParameters, id) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.jobInstance = jobInstance;\n        this.jobParameters = jobParameters;\n    }\n\n    /**\n     * Register a step execution with the current job execution.\n     * @param stepName the name of the step the new execution is associated with\n     */\n    createStepExecution(stepName) {\n        var stepExecution = new StepExecution(stepName, this);\n        this.stepExecutions.push(stepExecution);\n        return stepExecution;\n    }\n\n    isRunning() {\n        return !this.endTime;\n    }\n\n    /**\n     * Test if this JobExecution has been signalled to\n     * stop.\n     */\n    isStopping() {\n        return this.status === JOB_STATUS.STOPPING;\n    }\n\n    /**\n     * Signal the JobExecution to stop.\n     */\n    stop() {\n        this.stepExecutions.forEach(se=> {\n            se.terminateOnly = true;\n        });\n        this.status = JOB_STATUS.STOPPING;\n    }\n\n    getData() {\n        return this.executionContext.getData();\n    }\n\n    getDTO(filteredProperties = [], deepClone = true) {\n        var cloneMethod = Utils.cloneDeepWith;\n        if (!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        return Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if (filteredProperties.indexOf(key) > -1) {\n                return null;\n            }\n\n            if ([\"jobParameters\", \"executionContext\"].indexOf(key) > -1) {\n                return value.getDTO()\n            }\n            if (value instanceof Error) {\n                return Utils.getErrorDTO(value);\n            }\n\n            if (value instanceof StepExecution) {\n                return value.getDTO([\"jobExecution\"], deepClone)\n            }\n        }))\n    }\n}\n","/* object representing a uniquely identifiable job run. JobInstance can be restarted multiple times in case of execution failure and it's lifecycle ends with first successful execution*/\nexport class JobInstance{\n\n    id;\n    jobName;\n    constructor(id, jobName){\n        this.id = id;\n        this.jobName = jobName;\n    }\n\n}\n","\nexport class JobKeyGenerator {\n    /*Method to generate the unique key used to identify a job instance.*/\n    static generateKey(jobParameters) {\n        var result = \"\";\n        jobParameters.definitions.forEach((d, i)=> {\n            if(d.identifying){\n                result += d.name + \"=\" + jobParameters.values[d.name] + \";\";\n            }\n        });\n        return result;\n    }\n}\n","import {JobRestartException} from \"./exceptions/job-restart-exception\";\nimport {JOB_STATUS} from \"./job-status\";\nimport {Utils, log} from \"sd-utils\";\nimport {JobParametersInvalidException} from \"./exceptions/job-parameters-invalid-exception\";\nimport {JobDataInvalidException} from \"./exceptions/job-data-invalid-exception\";\n\nexport class JobLauncher {\n\n    jobRepository;\n    jobWorker;\n\n    constructor(jobRepository, jobWorker, dataModelSerializer) {\n        this.jobRepository = jobRepository;\n        this.jobWorker = jobWorker;\n        this.dataModelSerializer = dataModelSerializer;\n    }\n\n\n    run(jobOrName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        var job;\n        var jobParameters;\n\n        return Promise.resolve().then(()=> {\n            if (Utils.isString(jobOrName)) {\n                job = this.jobRepository.getJobByName(jobOrName)\n            } else {\n                job = jobOrName;\n            }\n            if (!job) {\n                throw new JobRestartException(\"No such job: \" + jobOrName);\n            }\n\n            jobParameters = job.createJobParameters(jobParametersValues);\n\n            return this.validate(job, jobParameters, data);\n        }).then(valid=>{\n            return this.jobRepository.createJobExecution(job.name, jobParameters, data).then(jobExecution=>{\n\n\n                if(this.jobWorker){\n                    log.debug(\"Job: [\" + job.name + \"] execution [\"+jobExecution.id+\"] delegated to worker\");\n                    this.jobWorker.executeJob(jobExecution.id);\n                    return jobExecution;\n                }\n\n                var executionPromise = this._execute(job, jobExecution);\n                if(resolvePromiseAfterJobIsLaunched){\n                    return jobExecution;\n                }\n                return executionPromise;\n            })\n        })\n    }\n\n    validate(job, jobParameters, data){\n        return this.jobRepository.getLastJobExecution(job.name, jobParameters).then(lastExecution=>{\n            if (lastExecution != null) {\n                if (!job.isRestartable) {\n                    throw new JobRestartException(\"JobInstance already exists and is not restartable\");\n                }\n\n                lastExecution.stepExecutions.forEach(execution=> {\n                    if (execution.status == JOB_STATUS.UNKNOWN) {\n                        throw new JobRestartException(\"Step [\" + execution.stepName + \"] is of status UNKNOWN\");\n                    }\n                });\n            }\n            if (job.jobParametersValidator && !job.jobParametersValidator.validate(jobParameters)) {\n                throw new JobParametersInvalidException(\"Invalid job parameters in jobLauncher.run for job: \"+job.name)\n            }\n\n            if(job.jobDataValidator && !job.jobDataValidator.validate(data)){\n                throw new JobDataInvalidException(\"Invalid job data in jobLauncher.run for job: \"+job.name)\n            }\n\n            return true;\n        })\n    }\n\n    /**Execute previously created job execution*/\n    execute(jobExecutionOrId){\n\n        return Promise.resolve().then(()=>{\n            if(Utils.isString(jobExecutionOrId)){\n                return this.jobRepository.getJobExecutionById(jobExecutionOrId);\n            }\n            return jobExecutionOrId;\n        }).then(jobExecution=>{\n            if(!jobExecution){\n                throw new JobRestartException(\"JobExecution [\" + jobExecutionOrId + \"] is not found\");\n            }\n\n            if (jobExecution.status !== JOB_STATUS.STARTING) {\n                throw new JobRestartException(\"JobExecution [\" + jobExecution.id + \"] already started\");\n            }\n\n            var jobName = jobExecution.jobInstance.jobName;\n            var job = this.jobRepository.getJobByName(jobName);\n            if(!job){\n                throw new JobRestartException(\"No such job: \" + jobName);\n            }\n\n            return  this._execute(job, jobExecution);\n        })\n    }\n\n    _execute(job, jobExecution){\n        var jobName = job.name;\n        log.info(\"Job: [\" + jobName + \"] launched with the following parameters: [\" + jobExecution.jobParameters + \"]\", jobExecution.getData());\n        return job.execute(jobExecution).then(jobExecution=>{\n            log.info(\"Job: [\" + jobName + \"] completed with the following parameters: [\" + jobExecution.jobParameters + \"] and the following status: [\" + jobExecution.status + \"]\");\n            return jobExecution;\n        }).catch(e =>{\n            log.error(\"Job: [\" + jobName + \"] failed unexpectedly and fatally with the following parameters: [\" + jobExecution.jobParameters + \"]\", e);\n            throw e;\n        })\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport const PARAMETER_TYPE = {\n    STRING: 'STRING',\n    DATE: 'DATE',\n    INTEGER: 'INTEGER',\n    NUMBER: 'FLOAT',\n    BOOLEAN: 'BOOLEAN',\n    NUMBER_EXPRESSION: 'NUMBER_EXPRESSION',\n    COMPOSITE: 'COMPOSITE' //composite parameter with nested subparameters\n};\n\nexport class JobParameterDefinition {\n    name;\n    type;\n    nestedParameters = [];\n    minOccurs;\n    maxOccurs;\n    required = true;\n\n    identifying;\n    validator;\n    singleValueValidator;\n\n    constructor(name, typeOrNestedParametersDefinitions, minOccurs = 1, maxOccurs = 1, identifying = false, singleValueValidator = null, validator = null) {\n        this.name = name;\n        if (Utils.isArray(typeOrNestedParametersDefinitions)) {\n            this.type = PARAMETER_TYPE.COMPOSITE;\n            this.nestedParameters = typeOrNestedParametersDefinitions;\n        } else {\n            this.type = typeOrNestedParametersDefinitions;\n        }\n        this.validator = validator;\n        this.singleValueValidator = singleValueValidator;\n        this.identifying = identifying;\n        this.minOccurs = minOccurs;\n        this.maxOccurs = maxOccurs;\n    }\n\n    set(key, val) {\n        this[key] = val;\n        return this;\n    }\n\n    validate(value, allValues) {\n        var isArray = Utils.isArray(value);\n\n        if (this.maxOccurs > 1 && !isArray) {\n            return false;\n        }\n\n        if (!isArray) {\n            return this.validateSingleValue(value, allValues)\n        }\n\n        if (value.length < this.minOccurs || value.length > this.maxOccurs) {\n            return false;\n        }\n\n        if (!value.every(v=>this.validateSingleValue(v, value))) {\n            return false;\n        }\n\n        if (this.validator) {\n            return this.validator(value, allValues);\n        }\n\n        return true;\n    }\n\n    static computeNumberExpression(val){\n        let parsed = parseFloat(val);\n        if(parsed === Infinity || parsed === -Infinity) {\n            return parsed;\n        }\n\n        if(!ExpressionEngine.validate(val, {}, false)){\n            return null\n        }\n\n        return ExpressionEngine.eval(val, true)\n    }\n\n    // allValues - all values on the same level\n    validateSingleValue(value, allValues) {\n\n        if ((!value && value !== 0 && value !== false) && this.minOccurs > 0) {\n            return !this.required\n        }\n\n        if (PARAMETER_TYPE.STRING === this.type && !Utils.isString(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.DATE === this.type && !Utils.isDate(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.INTEGER === this.type && !Utils.isInt(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.NUMBER === this.type && !Utils.isNumber(value)) {\n            return false;\n        }\n\n        if (PARAMETER_TYPE.BOOLEAN === this.type && !Utils.isBoolean(value)) {\n            return false;\n        }\n\n\n        if (PARAMETER_TYPE.NUMBER_EXPRESSION === this.type) {\n            value = JobParameterDefinition.computeNumberExpression(value);\n            if(value === null){\n                return false\n            }\n        }\n\n        if (PARAMETER_TYPE.COMPOSITE === this.type) {\n            if (!Utils.isObject(value)) {\n                return false;\n            }\n            if (!this.nestedParameters.every((nestedDef, i)=>nestedDef.validate(value[nestedDef.name]))) {\n                return false;\n            }\n        }\n\n        if (this.singleValueValidator) {\n            return this.singleValueValidator(value, allValues);\n        }\n\n        return true;\n    }\n\n    value(value){\n        if(PARAMETER_TYPE.NUMBER_EXPRESSION === this.type) {\n            return JobParameterDefinition.computeNumberExpression(value);\n        }\n\n        return value;\n    }\n}\n","import {PARAMETER_TYPE} from \"./job-parameter-definition\";\nimport {Utils} from \"sd-utils\";\n\nexport class JobParameters{\n    definitions = [];\n    values={};\n\n    constructor(values){\n        this.initDefinitions();\n        this.initDefaultValues();\n        if (values) {\n            Utils.deepExtend(this.values, values);\n        }\n    }\n\n    initDefinitions(){\n\n    }\n\n    initDefaultValues(){\n\n    }\n\n    validate(){\n        return this.definitions.every((def, i)=>def.validate(this.values[def.name], this.values));\n    }\n\n    getDefinition(path){\n        var defs =this.definitions;\n        let def = null;\n        if(!path.split().every(name=>{\n                def = Utils.find(defs, d=>d.name == name);\n                if(!def){\n                    return false\n                }\n                defs = def.nestedParameters;\n                return true;\n        })){\n            return null;\n        }\n        return def;\n    }\n\n    /*get or set value by path*/\n    value(path, value){\n        if (arguments.length === 1) {\n            let def = this.getDefinition(path);\n            let val = Utils.get(this.values, path, null);\n            if(def){\n                return def.value(val);\n            }\n            return  val;\n        }\n        Utils.set(this.values, path, value);\n        return value;\n    }\n\n    toString(){\n        var result = \"JobParameters[\";\n\n        this.definitions.forEach((d, i)=> {\n\n            var val = this.values[d.name];\n            // if(Utils.isArray(val)){\n            //     var values = val;\n            //\n            //\n            // }\n            // if(PARAMETER_TYPE.COMPOSITE == d.type){\n            //\n            // }\n\n            result += d.name + \"=\"+val + \";\";\n        });\n        result+=\"]\";\n        return result;\n    }\n\n    getDTO(){\n        return {\n            values: this.values\n        }\n    }\n}\n","import {JobRepository} from \"./job-repository\";\nimport { openDb, deleteDb } from 'idb';\nimport {Utils} from \"sd-utils\";\nimport {JobExecution} from \"../job-execution\";\nimport {JobInstance} from \"../job-instance\";\nimport {StepExecution} from \"../step-execution\";\nimport {ExecutionContext} from \"../execution-context\";\nimport {DataModel} from \"sd-model\";\nimport {log} from \"sd-utils\";\nimport {JobResult} from \"../job-result\";\n\n/* IndexedDB job repository*/\nexport class IdbJobRepository extends JobRepository {\n\n    dbPromise;\n    jobInstanceDao;\n    jobExecutionDao;\n    stepExecutionDao;\n    jobResultDao;\n    jobExecutionProgressDao;\n    jobExecutionFlagDao;\n\n    constructor(expressionsReviver, dbName = 'sd-job-repository', deleteDB = false) {\n        super();\n        this.dbName = dbName;\n        this.expressionsReviver = expressionsReviver;\n        if (deleteDB) {\n            this.deleteDB().then(()=> {\n                this.initDB()\n            }).catch(e=> {\n                log.error(e);\n                this.initDB();\n            })\n        } else {\n            this.initDB()\n        }\n    }\n\n    initDB() {\n        this.dbPromise = openDb(this.dbName, 2, upgradeDB => {\n            // Note: we don't use 'break' in this switch statement,\n            // the fall-through behaviour is what we want.\n            switch (upgradeDB.oldVersion) {\n                case 0:\n                    upgradeDB.createObjectStore('job-instances');\n                    var jobExecutionsOS = upgradeDB.createObjectStore('job-executions');\n                    jobExecutionsOS.createIndex(\"jobInstanceId\", \"jobInstance.id\", {unique: false});\n                    jobExecutionsOS.createIndex(\"createTime\", \"createTime\", {unique: false});\n                    jobExecutionsOS.createIndex(\"status\", \"status\", {unique: false});\n                    upgradeDB.createObjectStore('job-execution-progress');\n                    upgradeDB.createObjectStore('job-execution-flags');\n                    var stepExecutionsOS = upgradeDB.createObjectStore('step-executions');\n                    stepExecutionsOS.createIndex(\"jobExecutionId\", \"jobExecutionId\", {unique: false});\n\n                    var jobResultOS = upgradeDB.createObjectStore('job-results');\n                    jobResultOS.createIndex(\"jobInstanceId\", \"jobInstance.id\", {unique: true});\n                case 1:\n                    upgradeDB.transaction.objectStore('job-instances').createIndex(\"id\", \"id\", {unique: true});\n            }\n\n        });\n\n        this.jobInstanceDao = new ObjectStoreDao('job-instances', this.dbPromise);\n        this.jobExecutionDao = new ObjectStoreDao('job-executions', this.dbPromise);\n        this.jobExecutionProgressDao = new ObjectStoreDao('job-execution-progress', this.dbPromise);\n        this.jobExecutionFlagDao = new ObjectStoreDao('job-execution-flags', this.dbPromise);\n        this.stepExecutionDao = new ObjectStoreDao('step-executions', this.dbPromise);\n        this.jobResultDao = new ObjectStoreDao('job-results', this.dbPromise);\n    }\n\n    deleteDB() {\n        return Promise.resolve().then(_=>deleteDb(this.dbName));\n    }\n\n\n    removeJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        return this.jobInstanceDao.remove(key).then(()=>{\n            this.findJobExecutions(jobInstance, false).then(jobExecutions=>{  //  Not waiting for promise resolves\n                jobExecutions.forEach(this.removeJobExecution, this);\n            });\n\n            this.getJobResultByInstance(jobInstance).then(jobResult=>{\n                return this.removeJobResult(jobResult)\n            })\n        });\n    }\n\n    removeJobExecution(jobExecution){\n        return this.jobExecutionDao.remove(jobExecution.id).then(()=>{\n            return this.findStepExecutions(jobExecution.id, false).then(stepExecutions=>{  // Not waiting for promise resolves\n                stepExecutions.forEach(this.removeStepExecution, this);\n            });\n        });\n    }\n\n    removeStepExecution(stepExecution){\n        return this.stepExecutionDao.remove(stepExecution.id)\n    }\n\n    removeJobResult(jobResult){\n        return this.jobResultDao.remove(jobResult.id);\n    }\n\n\n\n\n    getJobResult(jobResultId, revive = true) {\n        return this.jobResultDao.get(jobResultId).then(dto => dto && revive ? this.reviveJobResult(dto) : dto);\n    }\n\n    getJobResultByInstance(jobInstance, revive = true) {\n        return this.jobResultDao.getByIndex(\"jobInstanceId\", jobInstance.id).then(dto => dto && revive ? this.reviveJobResult(dto) : dto);\n    }\n\n    getJobResultByExecution(jobExecution, revive = true) {\n        return this.getJobResultByInstance(jobExecution.jobInstance, false).then(dto => dto && revive ? this.reviveJobResult(dto, jobExecution) : dto);\n    }\n\n    saveJobResult(jobResult) {\n        let dto = jobResult.getDTO();\n        return this.jobResultDao.set(jobResult.id, dto).then(r=>jobResult);\n    }\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return this.jobInstanceDao.get(key).then(dto=>dto ? this.reviveJobInstance(dto) : dto);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters) {\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        return this.jobInstanceDao.set(key, jobInstance).then(r=>jobInstance);\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution) {\n        var dto = jobExecution.getDTO();\n        var stepExecutionsDTOs = dto.stepExecutions;\n        dto.stepExecutions = null;\n        return this.jobExecutionDao.set(jobExecution.id, dto).then(r=>this.saveStepExecutionsDTOS(stepExecutionsDTOs)).then(r=>jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress) {\n        return this.jobExecutionProgressDao.set(jobExecutionId, progress)\n    }\n\n    getJobExecutionProgress(jobExecutionId) {\n        return this.jobExecutionProgressDao.get(jobExecutionId)\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag) {\n        return this.jobExecutionFlagDao.set(jobExecutionId, flag)\n    }\n\n    getJobExecutionFlag(jobExecutionId) {\n        return this.jobExecutionFlagDao.get(jobExecutionId)\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution) {\n        var dto = stepExecution.getDTO([\"jobExecution\"]);\n        return this.stepExecutionDao.set(stepExecution.id, dto).then(r=>stepExecution);\n    }\n\n    saveStepExecutionsDTOS(stepExecutions, savedExecutions = []) {\n        if (stepExecutions.length <= savedExecutions.length) {\n            return Promise.resolve(savedExecutions);\n        }\n        var stepExecutionDTO = stepExecutions[savedExecutions.length];\n        return this.stepExecutionDao.set(stepExecutionDTO.id, stepExecutionDTO).then(()=> {\n            savedExecutions.push(stepExecutionDTO);\n            return this.saveStepExecutionsDTOS(stepExecutions, savedExecutions);\n        });\n    }\n\n    getJobExecutionById(id) {\n        return this.jobExecutionDao.get(id).then(dto=> {\n            return this.fetchJobExecutionRelations(dto);\n        });\n    }\n\n    fetchJobExecutionRelations(jobExecutionDTO, revive = true) {\n        if (!jobExecutionDTO) {\n            return Promise.resolve(null)\n        }\n        return this.findStepExecutions(jobExecutionDTO.id, false).then(steps=> {\n            jobExecutionDTO.stepExecutions = steps;\n            if (!revive) {\n                return jobExecutionDTO;\n            }\n            return this.reviveJobExecution(jobExecutionDTO);\n        })\n    }\n\n    fetchJobExecutionsRelations(jobExecutionDtoList, revive = true, fetched = []) {\n        if (jobExecutionDtoList.length <= fetched.length) {\n            return Promise.resolve(fetched);\n        }\n        return this.fetchJobExecutionRelations(jobExecutionDtoList[fetched.length], revive).then((jobExecution)=> {\n            fetched.push(jobExecution);\n\n            return this.fetchJobExecutionsRelations(jobExecutionDtoList, revive, fetched);\n        });\n    }\n\n    findStepExecutions(jobExecutionId, revive = true) {\n        return this.stepExecutionDao.getAllByIndex(\"jobExecutionId\", jobExecutionId).then(dtos=> {\n            if (!revive) {\n                return dtos;\n            }\n            return dtos.map(dto=>this.reviveStepExecution(dto));\n        })\n    }\n\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance, fetchRelationsAndRevive = true) {\n        return this.jobExecutionDao.getAllByIndex(\"jobInstanceId\", jobInstance.id).then(values=> {\n            var sorted = values.sort(function (a, b) {\n                return a.createTime.getTime() - b.createTime.getTime()\n            });\n\n            if (!fetchRelationsAndRevive) {\n                return sorted;\n            }\n\n            return this.fetchJobExecutionsRelations(sorted, true)\n        });\n    }\n\n    getLastJobExecutionByInstance(jobInstance, fetchRelationsAndRevive = true) {\n        return this.findJobExecutions(jobInstance, false).then(executions=>{\n            let execution = executions[executions.length - 1];\n            if (!fetchRelationsAndRevive) {\n                return execution;\n            }\n            this.fetchJobExecutionRelations(execution);\n        });\n    }\n\n    getLastStepExecution(jobInstance, stepName) {\n        return this.findJobExecutions(jobInstance).then(jobExecutions=> {\n            var stepExecutions = [];\n            jobExecutions.forEach(jobExecution=>jobExecution.stepExecutions.filter(s=>s.stepName === stepName).forEach((s)=>stepExecutions.push(s)));\n            var latest = null;\n            stepExecutions.forEach(s=> {\n                if (latest == null || latest.startTime.getTime() < s.startTime.getTime()) {\n                    latest = s;\n                }\n            });\n            return latest;\n        })\n    }\n\n    reviveJobInstance(dto) {\n        return new JobInstance(dto.id, dto.jobName);\n    }\n\n    reviveExecutionContext(dto) {\n        let executionContext = new ExecutionContext();\n        executionContext.context = dto.context;\n        let data = executionContext.getData();\n        if (data) {\n            let dataModel = new DataModel();\n            dataModel.loadFromDTO(data, this.expressionsReviver);\n\n            executionContext.setData(null);\n            this.reviveFromDTO(executionContext.context, dto.context, dataModel);\n\n            executionContext.setData(dataModel);\n\n        }\n        return executionContext\n    }\n\n    reviveFromDTO(target, dto, dataModel) {\n        return Utils.mergeWith(target, dto, (value, dtoValue, key)=> {\n            if(dtoValue && dtoValue.$ObjectWithIdAndEditableFields && dtoValue.id){\n                return dataModel.findById(dtoValue.id) || value;\n            }\n        })\n    }\n\n    reviveJobExecution(dto) {\n\n        var job = this.getJobByName(dto.jobInstance.jobName);\n        var jobInstance = this.reviveJobInstance(dto.jobInstance);\n        var jobParameters = job.createJobParameters(dto.jobParameters.values);\n        var jobExecution = new JobExecution(jobInstance, jobParameters, dto.id);\n        var executionContext = this.reviveExecutionContext(dto.executionContext);\n        return Utils.mergeWith(jobExecution, dto, (objValue, srcValue, key, object, source, stack)=> {\n            if (key === \"jobInstance\") {\n                return jobInstance;\n            }\n            if (key === \"executionContext\") {\n                return executionContext;\n            }\n            if (key === \"jobParameters\") {\n                return jobParameters;\n            }\n            if (key === \"jobExecution\") {\n                return jobExecution;\n            }\n\n            if (key === \"stepExecutions\") {\n                return srcValue.map(stepDTO => this.reviveStepExecution(stepDTO, jobExecution));\n            }\n        })\n    }\n\n    reviveStepExecution(dto, jobExecution) {\n        var stepExecution = new StepExecution(dto.stepName, jobExecution, dto.id);\n        var executionContext = this.reviveExecutionContext(dto.executionContext);\n        return Utils.mergeWith(stepExecution, dto, (objValue, srcValue, key, object, source, stack)=> {\n            if (key === \"jobExecution\") {\n                return jobExecution;\n            }\n            if (key === \"executionContext\") {\n                return executionContext;\n            }\n        })\n    }\n\n    reviveJobResult(dto, jobExecution = null) {\n        let job = this.getJobByName(dto.jobInstance.jobName);\n        let jobInstance = this.reviveJobInstance(dto.jobInstance);\n\n        let contextPromise;\n        if (jobExecution != null) {\n            contextPromise = Promise.resolve(jobExecution.executionContext);\n        }else{\n            contextPromise = this.getLastJobExecutionByInstance(jobInstance, false).then(jobExecutionDto => this.reviveExecutionContext(jobExecutionDto.executionContext));\n        }\n\n        return contextPromise.then(executionContext => job.reviveResultData( this.reviveFromDTO({}, dto.data, executionContext.getData()), executionContext)).then(d=>new JobResult(jobInstance, dto.id, d));\n    }\n}\n\n\nclass ObjectStoreDao {\n\n    name;\n    dbPromise;\n\n    constructor(name, dbPromise) {\n        this.name = name;\n        this.dbPromise = dbPromise;\n    }\n\n    get(key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).get(key);\n        });\n    }\n\n    getAllByIndex(indexName, key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).index(indexName).getAll(key)\n        });\n    }\n\n    getByIndex(indexName, key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).index(indexName).get(key)\n        });\n    }\n\n    set(key, val) {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).put(val, key);\n            return tx.complete;\n        });\n    }\n\n    remove(key) {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).delete(key);\n            return tx.complete;\n        });\n    }\n\n    clear() {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).clear();\n            return tx.complete;\n        });\n    }\n\n    keys() {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name);\n            const keys = [];\n            const store = tx.objectStore(this.name);\n\n            // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n            // openKeyCursor isn't supported by Safari, so we fall back\n            (store.iterateKeyCursor || store.iterateCursor).call(store, cursor => {\n                if (!cursor) return;\n                keys.push(cursor.key);\n                cursor.continue();\n            });\n\n            return tx.complete.then(() => keys);\n        });\n    }\n}\n","import {JobKeyGenerator} from \"../job-key-generator\";\nimport {JobInstance} from \"../job-instance\";\nimport {Utils} from \"sd-utils\";\nimport {JobExecution} from \"../job-execution\";\nimport {JobExecutionAlreadyRunningException} from \"../exceptions/job-execution-already-running-exception\";\nimport {JOB_STATUS} from \"../job-status\";\nimport {JobInstanceAlreadyCompleteException} from \"../exceptions/job-instance-already-complete-exception\";\nimport {ExecutionContext} from \"../execution-context\";\nimport {StepExecution} from \"../step-execution\";\nimport {DataModel} from \"sd-model\";\nimport {JobResult} from \"../job-result\";\n\nexport class JobRepository {\n\n    jobByName = {};\n\n    registerJob(job) {\n        this.jobByName[job.name] = job;\n    }\n\n    getJobByName(name) {\n        return this.jobByName[name];\n    }\n\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n       throw \"JobRepository getJobInstance function not implemented!\"\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(key, jobInstance){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    getJobExecutionById(id){\n        throw \"JobRepository.getJobExecutionById function not implemented!\"\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        throw \"JobRepository.getJobExecutionProgress function not implemented!\"\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        throw \"JobRepository.saveJobExecutionFlag function not implemented!\"\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        throw \"JobRepository.getJobExecutionFlag function not implemented!\"\n    }\n\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        throw \"JobRepository.saveStepExecution function not implemented!\"\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        throw \"JobRepository.findJobExecutions function not implemented!\"\n    }\n\n    getJobResult(jobResultId){\n        throw \"JobRepository.getJobResult function not implemented!\"\n    }\n\n    getJobResultByInstance(jobInstance){\n        throw \"JobRepository.getJobResultByInstance function not implemented!\"\n    }\n\n    getJobResultByExecution(jobInstance){\n        throw \"JobRepository.getJobResultByExecution function not implemented!\"\n    }\n\n    saveJobResult(jobResult) {\n        throw \"JobRepository.setJobResult function not implemented!\"\n    }\n\n\n    removeJobInstance(jobInstance, jobParameters){\n        throw \"JobRepository.removeJobInstance function not implemented!\"\n    }\n\n    removeJobExecution(jobExecution){\n        throw \"JobRepository.removeJobExecution function not implemented!\"\n    }\n\n    removeStepExecution(stepExecution){\n        throw \"JobRepository.removeStepExecution function not implemented!\"\n    }\n\n    removeJobResult(jobResult){\n        throw \"JobRepository.removeJobResult function not implemented!\"\n    }\n\n    /*Create a new JobInstance with the name and job parameters provided. return promise*/\n    createJobInstance(jobName, jobParameters) {\n        var jobInstance = new JobInstance(Utils.guid(), jobName);\n        return this.saveJobInstance(jobInstance, jobParameters);\n    }\n\n    /*Check if an instance of this job already exists with the parameters provided.*/\n    isJobInstanceExists(jobName, jobParameters) {\n        return this.getJobInstance(jobName, jobParameters).then(result => !!result).catch(error=>false);\n    }\n\n    generateJobInstanceKey(jobName, jobParameters) {\n        return jobName + \"|\" + JobKeyGenerator.generateKey(jobParameters);\n    }\n\n    /*Create a JobExecution for a given  Job and JobParameters. If matching JobInstance already exists,\n     * the job must be restartable and it's last JobExecution must *not* be\n     * completed. If matching JobInstance does not exist yet it will be  created.*/\n\n    createJobExecution(jobName, jobParameters, data) {\n        return this.getJobInstance(jobName, jobParameters).then(jobInstance=>{\n            if (jobInstance != null) {\n                return this.findJobExecutions(jobInstance).then(executions=>{\n                    executions.forEach(execution=> {\n                        if (execution.isRunning()) {\n                            throw new JobExecutionAlreadyRunningException(\"A job execution for this job is already running: \" + jobInstance.jobName);\n                        }\n                        if (execution.status == JOB_STATUS.COMPLETED || execution.status == JOB_STATUS.ABANDONED) {\n                            throw new JobInstanceAlreadyCompleteException(\n                                \"A job instance already exists and is complete for parameters=\" + jobParameters\n                                + \".  If you want to run this job again, change the parameters.\");\n                        }\n                    });\n\n                    var executionContext = executions[executions.length - 1].executionContext;\n\n                    return [jobInstance, executionContext];\n                })\n            }\n\n            // no job found, create one\n            jobInstance = this.createJobInstance(jobName, jobParameters);\n            var executionContext = new ExecutionContext();\n            var dataModel = new DataModel();\n            dataModel._setNewState(data.createStateSnapshot());\n            executionContext.setData(dataModel);\n            return Promise.all([jobInstance, executionContext]);\n        }).then(instanceAndExecutionContext=>{\n            var jobExecution = new JobExecution(instanceAndExecutionContext[0], jobParameters);\n            jobExecution.executionContext = instanceAndExecutionContext[1];\n            jobExecution.lastUpdated = new Date();\n            return this.saveJobExecution(jobExecution);\n        }).catch(e=>{\n            throw e;\n        })\n    }\n\n    getLastJobExecution(jobName, jobParameters) {\n        return this.getJobInstance(jobName, jobParameters).then((jobInstance)=>{\n            if(!jobInstance){\n                return null;\n            }\n            return this.getLastJobExecutionByInstance(jobInstance);\n        })\n    }\n\n    getLastJobExecutionByInstance(jobInstance){\n        return this.findJobExecutions(jobInstance).then(executions=>executions[executions.length -1]);\n    }\n\n    getLastStepExecution(jobInstance, stepName) {\n        return this.findJobExecutions(jobInstance).then(jobExecutions=>{\n            var stepExecutions=[];\n            jobExecutions.forEach(jobExecution=>jobExecution.stepExecutions.filter(s=>s.stepName === stepName).forEach((s)=>stepExecutions.push(s)));\n            var latest = null;\n            stepExecutions.forEach(s=>{\n                if (latest == null || latest.startTime.getTime() < s.startTime.getTime()) {\n                    latest = s;\n                }\n            });\n            return latest;\n        })\n    }\n\n    addStepExecution(stepExecution) {\n        stepExecution.lastUpdated = new Date();\n        return this.saveStepExecution(stepExecution);\n    }\n\n    update(o){\n        o.lastUpdated = new Date();\n\n        if(o instanceof JobExecution){\n            return this.saveJobExecution(o);\n        }\n\n        if(o instanceof StepExecution){\n            return this.saveStepExecution(o);\n        }\n\n        throw \"Object not updatable: \"+o\n    }\n\n    remove(o){\n\n        if(o instanceof JobExecution){\n            return this.removeJobExecution(o);\n        }\n\n        if(o instanceof StepExecution){\n            return this.removeStepExecution(o);\n        }\n\n        if(o instanceof JobResult){\n            return this.removeJobResult();\n        }\n\n        return Promise.reject(\"Object not removable: \"+o);\n    }\n\n\n    reviveJobInstance(dto) {\n        return dto;\n    }\n\n    reviveExecutionContext(dto) {\n        return dto;\n    }\n\n    reviveJobExecution(dto) {\n        return dto;\n    }\n\n    reviveStepExecution(dto, jobExecution) {\n        return dto;\n    }\n}\n","import {JobRepository} from \"./job-repository\";\nimport {Utils} from \"sd-utils\";\n\nexport class SimpleJobRepository extends JobRepository{\n    jobInstancesByKey = {};\n    jobExecutions = [];\n    stepExecutions = [];\n    executionProgress = {};\n    executionFlags = {};\n    jobResults = [];\n\n    removeJobInstance(jobInstance){\n        Utils.forOwn(this.jobInstancesByKey,  (ji, key)=>{\n            if(ji===jobInstance){\n                delete this.jobInstancesByKey[key]\n            }\n        });\n\n        this.jobExecutions.filter(jobExecution=>jobExecution.jobInstance.id == jobInstance.id).reverse().forEach(this.removeJobExecution, this);\n        this.jobResults.filter(jobResult=>jobResult.jobInstance.id == jobInstance.id).reverse().forEach(this.removeJobResult, this);\n\n        return Promise.resolve();\n    }\n\n    removeJobExecution(jobExecution){\n        let index = this.jobExecutions.indexOf(jobExecution);\n        if(index>-1) {\n            this.jobExecutions.splice(index, 1)\n        }\n\n        this.stepExecutions.filter(stepExecution=>stepExecution.jobExecution.id === jobExecution.id).reverse().forEach(this.removeStepExecution, this);\n        return Promise.resolve();\n    }\n\n    removeStepExecution(stepExecution){\n        let index = this.stepExecutions.indexOf(stepExecution);\n        if(index>-1) {\n            this.stepExecutions.splice(index, 1)\n        }\n        return Promise.resolve();\n    }\n\n    removeJobResult(jobResult){\n        let index = this.jobResults.indexOf(jobResult);\n        if(index>-1) {\n            this.jobResults.splice(index, 1)\n        }\n        return Promise.resolve();\n    }\n\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return Promise.resolve(this.jobInstancesByKey[key]);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        this.jobInstancesByKey[key] = jobInstance;\n        return Promise.resolve(jobInstance)\n    }\n\n    getJobResult(jobResultId){\n        return Promise.resolve(Utils.find(this.jobResults, r=>r.id===jobResultId))\n    }\n\n    getJobResultByInstance(jobInstance){\n        return Promise.resolve(Utils.find(this.jobResults, r=>r.jobInstance.id===jobInstance.id))\n    }\n\n    getJobResultByExecution(jobExecution){\n        return this.getJobResultByInstance(jobExecution.jobInstance);\n    }\n\n    saveJobResult(jobResult) {\n        this.jobResults.push(jobResult);\n        return Promise.resolve(jobResult);\n    }\n\n    getJobExecutionById(id){\n        return Promise.resolve(Utils.find(this.jobExecutions, ex=>ex.id===id))\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        this.jobExecutions.push(jobExecution);\n        return Promise.resolve(jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        this.executionProgress[jobExecutionId] = progress;\n        return Promise.resolve(progress)\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        return Promise.resolve(this.executionProgress[jobExecutionId])\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        this.executionFlags[jobExecutionId] = flag;\n        return Promise.resolve(flag)\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        return Promise.resolve(this.executionFlags[jobExecutionId])\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        this.stepExecutions.push(stepExecution);\n        return Promise.resolve(stepExecution);\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        return Promise.resolve(this.jobExecutions.filter(e=>e.jobInstance.id == jobInstance.id).sort(function (a, b) {\n            return a.createTime.getTime() - b.createTime.getTime()\n        }));\n    }\n\n\n}\n","import {JobRepository} from \"./job-repository\";\nimport {Utils} from \"sd-utils\";\nimport {SimpleJobRepository} from \"./simple-job-repository\";\n\n\n\nexport class TimeoutJobRepository extends SimpleJobRepository{\n\n    createTimeoutPromise(valueToResolve, delay=1){\n        return new Promise(resolve=>{\n            setTimeout(function(){\n                resolve(valueToResolve);\n            }, delay)\n        });\n    }\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return this.createTimeoutPromise(this.jobInstancesByKey[key]);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        this.jobInstancesByKey[key] = jobInstance;\n        return this.createTimeoutPromise(jobInstance);\n    }\n\n    getJobResult(jobResultId){\n        return this.createTimeoutPromise(Utils.find(this.jobResults, r=>r.id===jobResultId));\n    }\n\n    getJobResultByInstance(jobInstance){\n        return this.createTimeoutPromise(Utils.find(this.jobResults, r=>r.jobInstance.id===jobInstance.id));\n    }\n\n    getJobResultByExecution(jobExecution){\n        return this.getJobResultByInstance(jobExecution.jobInstance);\n    }\n\n    saveJobResult(jobResult) {\n        this.jobResults.push(jobResult);\n        return this.createTimeoutPromise(jobResult);\n    }\n\n    getJobExecutionById(id){\n        return this.createTimeoutPromise(Utils.find(this.jobExecutions, ex=>ex.id===id));\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        this.jobExecutions.push(jobExecution);\n        return this.createTimeoutPromise(jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        this.executionProgress[jobExecutionId] = progress;\n        return this.createTimeoutPromise(progress);\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        return this.createTimeoutPromise(this.executionProgress[jobExecutionId]);\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        this.executionFlags[jobExecutionId] = flag;\n        return this.createTimeoutPromise(flag);\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        return this.createTimeoutPromise(this.executionFlags[jobExecutionId]);\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        this.stepExecutions.push(stepExecution);\n        return this.createTimeoutPromise(stepExecution);\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        return this.createTimeoutPromise(this.jobExecutions.filter(e=>e.jobInstance.id == jobInstance.id).sort(function (a, b) {\n            return a.createTime.getTime() - b.createTime.getTime()\n        }));\n    }\n\n    remove(object){ //TODO\n\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {StepExecution} from \"./step-execution\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {JobExecution} from \"./job-execution\";\n\n/*domain object representing the result of a job instance.*/\nexport class JobResult {\n    id;\n    jobInstance;\n    lastUpdated = null;\n\n    data; // job result data - this is not a data model!\n\n    constructor(jobInstance, id, data) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.jobInstance = jobInstance;\n        this.data = data;\n    }\n\n    getDTO(filteredProperties=[], deepClone = true){\n\n        var cloneMethod = Utils.cloneDeepWith;\n        if(!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        let dto = Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if(filteredProperties.indexOf(key)>-1){\n                return null;\n            }\n\n            if(value && value.$ObjectWithIdAndEditableFields && value.id){\n                return {\n                    '$ObjectWithIdAndEditableFields': true,\n                    id: value.id\n                }\n            }\n\n            if(value instanceof Error){\n                return Utils.getErrorDTO(value);\n            }\n        }));\n\n        return dto\n    }\n}\n","export const JOB_STATUS = {\n    COMPLETED: 'COMPLETED',\n    STARTING: 'STARTING',\n    STARTED: 'STARTED',\n    STOPPING: 'STOPPING',\n    STOPPED: 'STOPPED',\n    FAILED: 'FAILED',\n    UNKNOWN: 'UNKNOWN',\n    ABANDONED: 'ABANDONED',\n    EXECUTING: 'EXECUTING' //for exit status only\n};\n","import {log} from 'sd-utils'\nimport {JOB_STATUS} from \"./job-status\";\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\nimport {JobParametersInvalidException} from \"./exceptions/job-parameters-invalid-exception\";\nimport {JobDataInvalidException} from \"./exceptions/job-data-invalid-exception\";\nimport {JOB_EXECUTION_FLAG} from \"./job-execution-flag\";\nimport {JobResult} from \"./job-result\";\n\n/**\n * Base class for jobs\n * A Job is an entity that encapsulates an entire job process ( an abstraction representing the configuration of a job)\n * */\n\nexport class Job {\n\n    id;\n    name;\n    steps = [];\n\n    isRestartable=true;\n    executionListeners = [];\n    jobParametersValidator;\n\n    jobRepository;\n\n    constructor(name, jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        this.name = name;\n        this.jobParametersValidator = this.getJobParametersValidator();\n        this.jobDataValidator = this.getJobDataValidator();\n        this.jobRepository = jobRepository;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n    }\n\n    setJobRepository(jobRepository) {\n        this.jobRepository = jobRepository;\n    }\n\n    execute(execution) {\n        log.debug(\"Job execution starting: \", execution);\n        var jobResult;\n        return this.checkExecutionFlags(execution).then(execution=>{\n\n            if (execution.status === JOB_STATUS.STOPPING) {\n                // The job was already stopped\n                execution.status = JOB_STATUS.STOPPED;\n                execution.exitStatus = JOB_STATUS.COMPLETED;\n                log.debug(\"Job execution was stopped: \" + execution);\n                return execution;\n            }\n\n            if (this.jobParametersValidator && !this.jobParametersValidator.validate(execution.jobParameters)) {\n                throw new JobParametersInvalidException(\"Invalid job parameters in job execute\")\n            }\n\n            if(this.jobDataValidator && !this.jobDataValidator.validate(execution.getData())){\n                throw new JobDataInvalidException(\"Invalid job data in job execute\")\n            }\n\n\n            execution.startTime = new Date();\n            return Promise.all([this.updateStatus(execution, JOB_STATUS.STARTED), this.getResult(execution), this.updateProgress(execution)]).then(res=>{\n                execution=res[0];\n                jobResult = res[1];\n                if(!jobResult) {\n                    jobResult = new JobResult(execution.jobInstance)\n                }\n                this.executionListeners.forEach(listener=>listener.beforeJob(execution));\n\n                return this.doExecute(execution, jobResult);\n            });\n\n        }).then(execution=>{\n            log.debug(\"Job execution complete: \",execution);\n            return execution\n        }).catch(e=>{\n            if (e instanceof JobInterruptedException) {\n                log.info(\"Encountered interruption executing job\", e);\n                execution.status = JOB_STATUS.STOPPED;\n                execution.exitStatus = JOB_STATUS.STOPPED;\n            } else {\n                log.error(\"Encountered fatal error executing job\", e);\n                execution.status = JOB_STATUS.FAILED;\n                execution.exitStatus = JOB_STATUS.FAILED;\n            }\n            execution.failureExceptions.push(e);\n            return execution;\n        }).then(execution=>{\n            if(jobResult){\n                return this.jobRepository.saveJobResult(jobResult).then(()=>execution)\n            }\n            return execution\n        }).catch(e=>{\n            log.error(\"Encountered fatal error saving job results\", e);\n            if(e){\n                execution.failureExceptions.push(e);\n            }\n            execution.status = JOB_STATUS.FAILED;\n            execution.exitStatus = JOB_STATUS.FAILED;\n            return execution;\n        }).then(execution=>{\n            execution.endTime = new Date();\n            return Promise.all([this.jobRepository.update(execution), this.updateProgress(execution)]).then(res=>res[0])\n        }).then(execution=>{\n            try {\n                this.executionListeners.forEach(listener=>listener.afterJob(execution));\n            } catch (e) {\n                log.error(\"Exception encountered in afterStep callback\", e);\n            }\n            return execution;\n        })\n    }\n\n\n    updateStatus(jobExecution, status) {\n        jobExecution.status=status;\n        return this.jobRepository.update(jobExecution)\n    }\n\n    updateProgress(jobExecution){\n        return this.jobRepository.updateJobExecutionProgress(jobExecution.id, this.getProgress(jobExecution));\n    }\n\n    /* Extension point for subclasses allowing them to concentrate on processing logic and ignore listeners, returns promise*/\n    doExecute(execution, jobResult) {\n        throw 'doExecute function not implemented for job: ' + this.name\n    }\n\n    getJobParametersValidator() {\n        return {\n            validate: (params) => params.validate()\n        }\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => true\n        }\n    }\n\n    addStep(step){\n        this.steps.push(step);\n    }\n\n\n    createJobParameters(values){\n        throw 'createJobParameters function not implemented for job: ' + this.name\n    }\n\n    /*Should return progress object with fields:\n    * current\n    * total */\n    getProgress(execution){\n        return {\n            total: 1,\n            current: execution.status === JOB_STATUS.COMPLETED ? 1 : 0\n        }\n    }\n\n    registerExecutionListener(listener){\n        this.executionListeners.push(listener);\n    }\n\n    checkExecutionFlags(execution){\n        return this.jobRepository.getJobExecutionFlag(execution.id).then(flag=>{\n            if(JOB_EXECUTION_FLAG.STOP === flag){\n                execution.stop();\n            }\n            return execution\n        })\n    }\n\n    getResult(execution) {\n        return this.jobRepository.getJobResultByExecution(execution);\n    }\n\n    /* revive job result data (after conversion to dto) if needed*/\n    reviveResultData(data, executionContext) {\n        return data;\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters){\n        throw 'jobResultToCsvRows function not implemented for job: ' + this.name\n    }\n}\n","import {log} from 'sd-utils'\nimport {JOB_STATUS} from \"./job-status\";\nimport {Job} from \"./job\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {Step} from \"./step\";\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\nimport {JobRestartException} from \"./exceptions/job-restart-exception\";\nimport {JOB_EXECUTION_FLAG} from \"./job-execution-flag\";\n\n/* Simple Job that sequentially executes a job by iterating through its list of steps.  Any Step that fails will fail the job.  The job is\n considered complete when all steps have been executed.*/\n\nexport class SimpleJob extends Job {\n\n    constructor(name, jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(name, jobRepository, expressionsEvaluator, objectiveRulesManager)\n    }\n\n    getStep(stepName) {\n        return Utils.find(this.steps, s=>s.name == stepName);\n    }\n\n    doExecute(execution, jobResult) {\n\n        return this.handleNextStep(execution, jobResult).then(lastExecutedStepExecution=>{\n            if (lastExecutedStepExecution != null) {\n                log.debug(\"Updating JobExecution status: \", lastExecutedStepExecution);\n                execution.status = lastExecutedStepExecution.status;\n                execution.exitStatus = lastExecutedStepExecution.exitStatus;\n                execution.failureExceptions.push(...lastExecutedStepExecution.failureExceptions)\n            }\n            return execution;\n        });\n    }\n\n    handleNextStep(jobExecution, jobResult, prevStep=null, prevStepExecution=null){\n        var stepIndex = 0;\n        if(prevStep){\n            stepIndex = this.steps.indexOf(prevStep)+1;\n        }\n        if(stepIndex>=this.steps.length){\n            return Promise.resolve(prevStepExecution)\n        }\n        var step = this.steps[stepIndex];\n        return this.handleStep(step, jobExecution, jobResult).then(stepExecution=>{\n            if(stepExecution.status !== JOB_STATUS.COMPLETED){ // Terminate the job if a step fails\n                return stepExecution;\n            }\n            return this.handleNextStep(jobExecution, jobResult, step, stepExecution);\n        })\n    }\n\n    handleStep(step, jobExecution, jobResult) {\n        var jobInstance = jobExecution.jobInstance;\n        return this.checkExecutionFlags(jobExecution).then(jobExecution=>{\n            if (jobExecution.isStopping()) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            return this.jobRepository.getLastStepExecution(jobInstance, step.name)\n\n        }).then(lastStepExecution=>{\n            if (this.stepExecutionPartOfExistingJobExecution(jobExecution, lastStepExecution)) {\n                // If the last execution of this step was in the same job, it's probably intentional so we want to run it again.\n                log.info(\"Duplicate step detected in execution of job. step: \" + step.name + \" jobName: \", jobInstance.jobName);\n                lastStepExecution = null;\n            }\n\n            var currentStepExecution = lastStepExecution;\n\n            if (!this.shouldStart(currentStepExecution, jobExecution, step)) {\n                return currentStepExecution;\n            }\n\n            currentStepExecution = jobExecution.createStepExecution(step.name);\n\n            var isCompleted = lastStepExecution != null && lastStepExecution.status === JOB_STATUS.COMPLETED;\n            var isRestart = lastStepExecution != null && !isCompleted;\n            var skipExecution = isCompleted && step.skipOnRestartIfCompleted;\n\n            if (isRestart) {\n                currentStepExecution.executionContext = lastStepExecution.executionContext;\n                if (lastStepExecution.executionContext.containsKey(\"executed\")) {\n                    currentStepExecution.executionContext.remove(\"executed\");\n                }\n            }\n            else {\n\n                currentStepExecution.executionContext = new ExecutionContext();\n            }\n            if(skipExecution){\n                currentStepExecution.exitStatus = JOB_STATUS.COMPLETED;\n                currentStepExecution.status = JOB_STATUS.COMPLETED;\n                currentStepExecution.executionContext.put(\"skipped\", true);\n            }\n\n            return this.jobRepository.addStepExecution(currentStepExecution).then((_currentStepExecution)=>{\n                currentStepExecution=_currentStepExecution;\n                if(skipExecution){\n                    log.info(\"Skipping completed step execution: [\" + step.name + \"]\");\n                    return currentStepExecution;\n                }\n                log.info(\"Executing step: [\" + step.name + \"]\");\n                return step.execute(currentStepExecution, jobResult)\n            }).then(()=>{\n                currentStepExecution.executionContext.put(\"executed\", true);\n                return currentStepExecution;\n            }).catch (e => {\n                jobExecution.status = JOB_STATUS.FAILED;\n                return this.jobRepository.update(jobExecution).then(jobExecution=>{throw e})\n            });\n\n        }).then((currentStepExecution)=>{\n            if (currentStepExecution.status == JOB_STATUS.STOPPING\n                || currentStepExecution.status == JOB_STATUS.STOPPED) {\n                // Ensure that the job gets the message that it is stopping\n                jobExecution.status = JOB_STATUS.STOPPING;\n                // throw new Error(\"Job interrupted by step execution\");\n            }\n            return this.updateProgress(jobExecution).then(()=>currentStepExecution);\n        })\n\n    }\n\n    stepExecutionPartOfExistingJobExecution(jobExecution, stepExecution) {\n        return stepExecution != null && stepExecution.jobExecution.id == jobExecution.id\n    }\n\n    shouldStart(lastStepExecution, execution, step) {\n        var stepStatus;\n        if (lastStepExecution == null) {\n            stepStatus = JOB_STATUS.STARTING;\n        }\n        else {\n            stepStatus = lastStepExecution.status;\n        }\n\n        if (stepStatus == JOB_STATUS.UNKNOWN) {\n            throw new JobRestartException(\"Cannot restart step from UNKNOWN status\")\n        }\n\n        return stepStatus != JOB_STATUS.COMPLETED || step.isRestartable;\n    }\n\n    getProgress(execution){\n        var completedSteps = execution.stepExecutions.length;\n        let progress = {\n            total: this.steps.length,\n            current: completedSteps\n        };\n        if(!completedSteps){\n            return progress\n        }\n        if(JOB_STATUS.COMPLETED !== execution.stepExecutions[execution.stepExecutions.length-1].status){\n            progress.current--;\n        }\n\n        return progress;\n    }\n\n    addStep(){\n        if(arguments.length===1){\n            return super.addStep(arguments[0])\n        }\n        var step = new Step(arguments[0], this.jobRepository);\n        step.doExecute = arguments[1];\n        return super.addStep(step);\n    }\n\n}\n","export class StepExecutionListener {\n    /*Called before a step executes*/\n    beforeStep(jobExecution) {\n\n    }\n\n    /*Called after completion of a step. Called after both successful and failed executions*/\n    afterStep(jobExecution) {\n\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {JOB_STATUS} from \"./job-status\";\nimport {JobExecution} from \"./job-execution\";\n\n/*\n representation of the execution of a step\n */\nexport class StepExecution {\n    id;\n    stepName;\n    jobExecution;\n\n    status = JOB_STATUS.STARTING;\n    exitStatus = JOB_STATUS.EXECUTING;\n    executionContext = new ExecutionContext(); //execution context for single step level,\n\n    startTime = new Date();\n    endTime = null;\n    lastUpdated = null;\n\n    terminateOnly = false; //flag to indicate that an execution should halt\n    failureExceptions = [];\n\n    constructor(stepName, jobExecution, id) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.stepName = stepName;\n        this.jobExecution = jobExecution;\n        this.jobExecutionId = jobExecution.id;\n    }\n\n    getJobParameters(){\n        return this.jobExecution.jobParameters;\n    }\n\n    getJobExecutionContext(){\n        return this.jobExecution.executionContext;\n    }\n\n    getData(){\n        return this.jobExecution.getData();\n    }\n\n    getDTO(filteredProperties=[], deepClone = true){\n\n        var cloneMethod = Utils.cloneDeepWith;\n        if(!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        return Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if(filteredProperties.indexOf(key)>-1){\n                return null;\n            }\n            if([\"executionContext\"].indexOf(key)>-1){\n                return value.getDTO()\n            }\n            if(value instanceof Error){\n                return Utils.getErrorDTO(value);\n            }\n\n            if (value instanceof JobExecution) {\n                return value.getDTO([\"stepExecutions\"], deepClone)\n            }\n        }))\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {log} from 'sd-utils'\n\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\n/*domain object representing the configuration of a job step*/\nexport class Step {\n\n    id;\n    name;\n    isRestartable = true;\n    skipOnRestartIfCompleted=true;\n    steps = [];\n    executionListeners = [];\n\n    jobRepository;\n\n    constructor(name, jobRepository) {\n        this.name = name;\n        this.jobRepository = jobRepository;\n    }\n\n    setJobRepository(jobRepository) {\n        this.jobRepository = jobRepository;\n    }\n\n    /*Process the step and assign progress and status meta information to the StepExecution provided*/\n    execute(stepExecution, jobResult) {\n        log.debug(\"Executing step: name=\" + this.name);\n        stepExecution.startTime = new Date();\n        stepExecution.status = JOB_STATUS.STARTED;\n        var exitStatus;\n        return this.jobRepository.update(stepExecution).then(stepExecution=>{\n            exitStatus = JOB_STATUS.EXECUTING;\n\n            this.executionListeners.forEach(listener=>listener.beforeStep(stepExecution));\n            this.open(stepExecution.executionContext);\n\n            return this.doExecute(stepExecution, jobResult)\n        }).then(_stepExecution=>{\n            stepExecution = _stepExecution;\n            exitStatus = stepExecution.exitStatus;\n\n            // Check if someone is trying to stop us\n            if (stepExecution.terminateOnly) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            // Need to upgrade here not set, in case the execution was stopped\n            stepExecution.status = JOB_STATUS.COMPLETED;\n            log.debug(\"Step execution success: name=\" + this.name);\n            return stepExecution\n        }).catch(e=>{\n            stepExecution.status = this.determineJobStatus(e);\n            exitStatus = stepExecution.status;\n            stepExecution.failureExceptions.push(e);\n\n            if (stepExecution.status == JOB_STATUS.STOPPED) {\n                log.info(\"Encountered interruption executing step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n            else {\n                log.error(\"Encountered an error executing step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n            return stepExecution;\n        }).then(stepExecution=>{\n            try {\n                stepExecution.exitStatus = exitStatus;\n                this.executionListeners.forEach(listener=>listener.afterStep(stepExecution));\n            }\n            catch (e) {\n                log.error(\"Exception in afterStep callback in step \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n\n            stepExecution.endTime = new Date();\n            stepExecution.exitStatus = exitStatus;\n\n\n            return this.jobRepository.update(stepExecution)\n        }).then(stepExecution=>{\n            try {\n                this.close(stepExecution.executionContext);\n            }\n            catch (e) {\n                log.error(\"Exception while closing step execution resources in step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n                stepExecution.failureExceptions.push(e);\n            }\n\n            try {\n                this.close(stepExecution.executionContext);\n            }\n            catch (e) {\n                log.error(\"Exception while closing step execution resources in step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n                stepExecution.failureExceptions.push(e);\n            }\n\n            // doExecutionRelease();\n\n            log.debug(\"Step execution complete: \" + stepExecution.id);\n            return stepExecution;\n        });\n\n    }\n\n    determineJobStatus(e) {\n        if (e instanceof JobInterruptedException) {\n            return JOB_STATUS.STOPPED;\n        }\n        else {\n            return JOB_STATUS.FAILED;\n        }\n    }\n\n    /**\n     * Extension point for subclasses to execute business logic. Subclasses should set the exitStatus on the\n     * StepExecution before returning. Must return stepExecution\n     */\n    doExecute(stepExecution, jobResult) {\n    }\n\n    /**\n     * Extension point for subclasses to provide callbacks to their collaborators at the beginning of a step, to open or\n     * acquire resources. Does nothing by default.\n     */\n    open(executionContext) {\n    }\n\n    /**\n     * Extension point for subclasses to provide callbacks to their collaborators at the end of a step (right at the end\n     * of the finally block), to close or release resources. Does nothing by default.\n     */\n    close(executionContext) {\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(stepExecution){\n        return {\n            total: 1,\n            current: stepExecution.status === JOB_STATUS.COMPLETED ? 1 : 0\n        }\n    }\n}\n","import * as engine from './engine/index'\n\nexport {engine}\nexport * from './jobs-manager'\nexport * from './job-worker'\n\n\n\n","import {JobExecutionListener} from \"./engine/job-execution-listener\";\nimport {JOB_STATUS} from \"./engine/job-status\";\nimport {JobInstance} from \"./engine/job-instance\";\nimport {Utils, log} from \"sd-utils\";\n\n\nexport class JobInstanceManagerConfig {\n    onJobStarted = () => {};\n    onJobCompleted = result => {};\n    onJobFailed = errors => {};\n    onJobStopped = () => {};\n    onJobTerminated = () => {};\n    onProgress = (progress) => {};\n    callbacksThisArg;\n    updateInterval = 100;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/*convenience class for managing and tracking job instance progress*/\nexport class JobInstanceManager extends JobExecutionListener {\n\n    jobsManger;\n    jobInstance;\n    config;\n\n    lastJobExecution;\n    lastUpdateTime;\n    progress = null;\n\n    constructor(jobsManger, jobInstanceOrExecution, config) {\n        super();\n        this.config = new JobInstanceManagerConfig(config);\n        this.jobsManger = jobsManger;\n        if (jobInstanceOrExecution instanceof JobInstance) {\n            this.jobInstance = jobInstanceOrExecution;\n            this.getLastJobExecution().then(je=> {\n                this.checkProgress();\n            })\n        } else {\n            this.lastJobExecution = jobInstanceOrExecution;\n            this.jobInstance = this.lastJobExecution.jobInstance;\n            this.checkProgress();\n        }\n        if (this.lastJobExecution && !this.lastJobExecution.isRunning()) {\n            this.afterJob(this.lastJobExecution);\n            return;\n        }\n        jobsManger.registerJobExecutionListener(this);\n    }\n\n    checkProgress() {\n\n        var self = this;\n        if (this.terminated || !this.lastJobExecution.isRunning() || this.getProgressPercents(this.progress) === 100) {\n            return;\n        }\n        this.jobsManger.getProgress(this.lastJobExecution).then(progress=> {\n            this.lastUpdateTime = new Date();\n            if (progress) {\n                this.progress = progress;\n                this.config.onProgress.call(this.config.callbacksThisArg || this, progress);\n            }\n\n            setTimeout(function () {\n                self.checkProgress();\n            }, this.config.updateInterval)\n        })\n    }\n\n    beforeJob(jobExecution) {\n        if (jobExecution.jobInstance.id !== this.jobInstance.id) {\n            return;\n        }\n\n        this.lastJobExecution = jobExecution;\n        this.config.onJobStarted.call(this.config.callbacksThisArg || this);\n    }\n\n    getProgressPercents(progress) {\n        if (!progress) {\n            return 0;\n        }\n        return progress.current * 100 / progress.total;\n    }\n\n    getProgressFromExecution(jobExecution) {\n        var job = this.jobsManger.getJobByName(jobExecution.jobInstance.jobName);\n        return job.getProgress(jobExecution);\n    }\n\n    afterJob(jobExecution) {\n        if (jobExecution.jobInstance.id !== this.jobInstance.id) {\n            return;\n        }\n        this.lastJobExecution = jobExecution;\n        if (JOB_STATUS.COMPLETED === jobExecution.status) {\n            this.jobsManger.deregisterJobExecutionListener(this);\n            this.progress = this.getProgressFromExecution(jobExecution);\n            this.config.onProgress.call(this.config.callbacksThisArg || this, this.progress);\n            this.jobsManger.getResult(jobExecution).then(result=> {\n                this.config.onJobCompleted.call(this.config.callbacksThisArg || this, result.data);\n            }).catch(e=> {\n                log.error(e);\n            })\n\n\n        } else if (JOB_STATUS.FAILED === jobExecution.status) {\n            this.config.onJobFailed.call(this.config.callbacksThisArg || this, jobExecution.failureExceptions);\n\n        } else if (JOB_STATUS.STOPPED === jobExecution.status) {\n            this.config.onJobStopped.call(this.config.callbacksThisArg || this);\n        }\n    }\n\n    getLastJobExecution(forceUpdate = false) {\n        if (!this.lastJobExecution || forceUpdate) {\n            return this.jobsManger.jobRepository.getLastJobExecutionByInstance(this.jobInstance).then(je=> {\n                this.lastJobExecution = je;\n                return je;\n            });\n        }\n        return Promise.resolve(this.lastJobExecution);\n    }\n\n    stop() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.stop(this.lastJobExecution)\n        })\n    }\n\n    resume() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.run(this.jobInstance.jobName, this.lastJobExecution.jobParameters.values, this.lastJobExecution.getData()).then(je=> {\n                this.lastJobExecution = je;\n                this.checkProgress();\n                return true;\n            }).catch(e=> {\n                log.error(e);\n                return false;\n            })\n        })\n    }\n\n    terminate() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.terminate(this.jobInstance).then(()=> {\n                this.terminated = true;\n                this.config.onJobTerminated.call(this.config.callbacksThisArg || this, this.lastJobExecution);\n                this.jobsManger.deregisterJobExecutionListener(this);\n\n                return this.lastJobExecution;\n            })\n        }).catch(e=> {\n            log.error(e);\n            return false;\n        })\n    }\n\n}\n","export class JobWorker{\n\n    worker;\n    listeners = {};\n    defaultListener;\n\n    constructor(url, defaultListener, onError){\n        var instance = this;\n        this.worker = new Worker(url);\n        this.defaultListener = defaultListener || function() {};\n        if (onError) {this.worker.onerror = onError;}\n\n        this.worker.onmessage = function(event) {\n            if (event.data instanceof Object &&\n                event.data.hasOwnProperty('queryMethodListener') && event.data.hasOwnProperty('queryMethodArguments')) {\n                var listener = instance.listeners[event.data.queryMethodListener];\n                var args = event.data.queryMethodArguments;\n                if(listener.deserializer){\n                    args = listener.deserializer(args);\n                }\n                listener.fn.apply(listener.thisArg, args);\n            } else {\n                this.defaultListener.call(instance, event.data);\n            }\n        }\n\n    }\n\n    sendQuery() {\n        if (arguments.length < 1) {\n            throw new TypeError('JobWorker.sendQuery takes at least one argument');\n        }\n        this.worker.postMessage({\n            'queryMethod': arguments[0],\n            'queryArguments': Array.prototype.slice.call(arguments, 1)\n        });\n    }\n\n    runJob(jobName, jobParametersValues, dataDTO){\n        this.sendQuery('runJob', jobName, jobParametersValues, dataDTO)\n    }\n\n    executeJob(jobExecutionId){\n        this.sendQuery('executeJob', jobExecutionId)\n    }\n\n    recompute(dataDTO, ruleNames, evalCode, evalNumeric){\n        this.sendQuery('recompute', dataDTO, ruleNames, evalCode, evalNumeric)\n    }\n\n    postMessage(message) {\n        this.worker.postMessage(message);\n    }\n\n    terminate() {\n        this.worker.terminate();\n    }\n\n    addListener(name, listener, thisArg, deserializer) {\n        this.listeners[name] = {\n            fn: listener,\n            thisArg: thisArg || this,\n            deserializer: deserializer\n        };\n    }\n\n    removeListener(name) {\n        delete this.listeners[name];\n    }\n}\n","import {Utils, log} from \"sd-utils\";\nimport {SensitivityAnalysisJob} from \"./configurations/sensitivity-analysis/n-way/sensitivity-analysis-job\";\nimport {JobLauncher} from \"./engine/job-launcher\";\nimport {JobWorker} from \"./job-worker\";\nimport {JobExecutionListener} from \"./engine/job-execution-listener\";\nimport {JobParameters} from \"./engine/job-parameters\";\nimport {IdbJobRepository} from \"./engine/job-repository/idb-job-repository\";\nimport {JOB_EXECUTION_FLAG} from \"./engine/job-execution-flag\";\nimport {RecomputeJob} from \"./configurations/recompute/recompute-job\";\nimport {ProbabilisticSensitivityAnalysisJob} from \"./configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job\";\nimport {TimeoutJobRepository} from \"./engine/job-repository/timeout-job-repository\";\nimport {TornadoDiagramJob} from \"./configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job\";\nimport {JOB_STATUS} from \"./engine/job-status\";\nimport {SimpleJobRepository} from \"./engine/job-repository/simple-job-repository\";\nimport {LeagueTableJob} from \"./configurations/league-table/league-table-job\";\nimport {SpiderPlotJob} from \"./configurations/sensitivity-analysis/spider-plot/spider-plot-job\";\nimport {PayoffsTransformationJob} from \"./configurations/payoffs-transformation/payoffs-transformation-job\";\n\n\nexport class JobsManagerConfig {\n\n    workerUrl = null;\n    repositoryType = 'idb';\n    clearRepository = false;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\nexport class JobsManager extends JobExecutionListener {\n\n\n    useWorker;\n    expressionsEvaluator;\n    objectiveRulesManager;\n    jobWorker;\n\n    jobRepository;\n    jobLauncher;\n\n    jobExecutionListeners = [];\n\n    afterJobExecutionPromiseResolves = {};\n    jobInstancesToTerminate = {};\n\n    constructor(expressionsEvaluator, objectiveRulesManager, config) {\n        super();\n        this.setConfig(config);\n        this.expressionEngine = expressionsEvaluator.expressionEngine;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n\n\n        this.useWorker = !!this.config.workerUrl;\n        if (this.useWorker) {\n            this.initWorker(this.config.workerUrl);\n        }\n\n        this.initRepository();\n\n        this.registerJobs();\n\n\n\n        this.jobLauncher = new JobLauncher(this.jobRepository, this.jobWorker, (data)=>this.serializeData(data));\n    }\n\n    setConfig(config) {\n        this.config = new JobsManagerConfig(config);\n        return this;\n    }\n\n    initRepository() {\n        switch (this.config.repositoryType){\n            case 'idb':\n                this.jobRepository = new IdbJobRepository(this.expressionEngine.getJsonReviver(), 'sd-job-repository', this.config.clearRepository);\n                break;\n            case 'timeout':\n                this.jobRepository = new TimeoutJobRepository(this.expressionEngine.getJsonReviver());\n                break;\n            case 'simple':\n                this.jobRepository = new SimpleJobRepository(this.expressionEngine.getJsonReviver());\n                break;\n            default:\n                log.error('JobsManager configuration error! Unknown repository type: '+this.config.repositoryType+'. Using default: idb');\n                this.config.repositoryType = 'idb';\n                this.initRepository()\n        }\n    }\n\n    serializeData(data) {\n        return data.serialize(true, false, false, this.expressionEngine.getJsonReplacer());\n    }\n\n    getProgress(jobExecutionOrId) {\n        var id = jobExecutionOrId;\n        if (!Utils.isString(jobExecutionOrId)) {\n            id = jobExecutionOrId.id\n        }\n        return this.jobRepository.getJobExecutionProgress(id);\n    }\n\n    getResult(jobInstanceOrExecution) {\n        let jobInstance = jobInstanceOrExecution;\n        let jobExecution = null;\n        if(jobInstanceOrExecution.jobInstance){\n            jobExecution = jobInstanceOrExecution;\n            jobInstance = jobExecution.jobInstance;\n        }\n\n        return this.jobRepository.getJobResultByInstance(jobInstance);\n    }\n\n    run(jobName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        return this.jobLauncher.run(jobName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched).then(jobExecution=> {\n            if (resolvePromiseAfterJobIsLaunched || !jobExecution.isRunning()) {\n                return jobExecution;\n            }\n            //job was delegated to worker and is still running\n\n            return new Promise((resolve, reject)=> {\n                this.afterJobExecutionPromiseResolves[jobExecution.id] = resolve;\n            });\n        });\n    }\n\n    execute(jobExecutionOrId) {\n        return this.jobLauncher.execute(jobExecutionOrId);\n    }\n\n    stop(jobExecutionOrId) {\n        var id = jobExecutionOrId;\n        if (!Utils.isString(jobExecutionOrId)) {\n            id = jobExecutionOrId.id\n        }\n\n        return this.jobRepository.getJobExecutionById(id).then(jobExecution=> {\n            if (!jobExecution) {\n                log.error(\"Job Execution not found: \" + jobExecutionOrId);\n                return null;\n            }\n            if (!jobExecution.isRunning()) {\n                log.warn(\"Job Execution not running, status: \" + jobExecution.status + \", endTime: \" + jobExecution.endTime);\n                return jobExecution;\n            }\n\n            return this.jobRepository.saveJobExecutionFlag(jobExecution.id, JOB_EXECUTION_FLAG.STOP).then(()=>jobExecution);\n        });\n    }\n\n    /*stop job execution if running and delete job instance from repository*/\n    terminate(jobInstance) {\n        return this.jobRepository.getLastJobExecutionByInstance(jobInstance).then(jobExecution=> {\n            if (jobExecution) {\n                if(jobExecution.isRunning()){\n                    return this.jobRepository.saveJobExecutionFlag(jobExecution.id, JOB_EXECUTION_FLAG.STOP).then(()=>jobExecution);\n                }else{\n                    return this.jobRepository.removeJobInstance(jobInstance, jobExecution.jobParameters);\n                }\n            }\n        }).then(()=>{\n            this.jobInstancesToTerminate[jobInstance.id]=jobInstance;\n        })\n    }\n\n    getJobByName(jobName) {\n        return this.jobRepository.getJobByName(jobName);\n    }\n\n\n    createJobParameters(jobName, jobParametersValues) {\n        var job = this.jobRepository.getJobByName(jobName);\n        return job.createJobParameters(jobParametersValues);\n    }\n\n\n    /*Returns a promise*/\n    getLastJobExecution(jobName, jobParameters) {\n        if (this.useWorker) {\n            return this.jobWorker;\n        }\n        if (!(jobParameters instanceof JobParameters)) {\n            jobParameters = this.createJobParameters(jobParameters)\n        }\n        return this.jobRepository.getLastJobExecution(jobName, jobParameters);\n    }\n\n    initWorker(workerUrl) {\n        this.jobWorker = new JobWorker(workerUrl, ()=>{\n            log.error('error in worker', arguments);\n        });\n        var argsDeserializer = (args)=> {\n            return [this.jobRepository.reviveJobExecution(args[0])]\n        };\n\n        this.jobWorker.addListener(\"beforeJob\", this.beforeJob, this, argsDeserializer);\n        this.jobWorker.addListener(\"afterJob\", this.afterJob, this, argsDeserializer);\n        this.jobWorker.addListener(\"jobFatalError\", this.onJobFatalError, this);\n    }\n\n    registerJobs() {\n\n        let sensitivityAnalysisJob = new SensitivityAnalysisJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        let probabilisticSensitivityAnalysisJob = new ProbabilisticSensitivityAnalysisJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        if(!Utils.isWorker()){\n            sensitivityAnalysisJob.setBatchSize(1);\n            probabilisticSensitivityAnalysisJob.setBatchSize(1);\n        }\n\n        this.registerJob(sensitivityAnalysisJob);\n        this.registerJob(new TornadoDiagramJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(probabilisticSensitivityAnalysisJob);\n        this.registerJob(new RecomputeJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new LeagueTableJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new SpiderPlotJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new PayoffsTransformationJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n    }\n\n    registerJob(job) {\n        this.jobRepository.registerJob(job);\n        job.registerExecutionListener(this)\n    }\n\n    registerJobExecutionListener(listener) {\n        this.jobExecutionListeners.push(listener);\n    }\n\n    deregisterJobExecutionListener(listener) {\n        var index = this.jobExecutionListeners.indexOf(listener);\n        if (index > -1) {\n            this.jobExecutionListeners.splice(index, 1)\n        }\n    }\n\n    beforeJob(jobExecution) {\n        log.debug(\"beforeJob\", this.useWorker, jobExecution);\n        this.jobExecutionListeners.forEach(l=>l.beforeJob(jobExecution));\n    }\n\n    afterJob(jobExecution) {\n        log.debug(\"afterJob\", this.useWorker, jobExecution);\n        this.jobExecutionListeners.forEach(l=>l.afterJob(jobExecution));\n        var promiseResolve = this.afterJobExecutionPromiseResolves[jobExecution.id];\n        if (promiseResolve) {\n            promiseResolve(jobExecution)\n        }\n\n        if(this.jobInstancesToTerminate[jobExecution.jobInstance.id]){\n            this.jobRepository.removeJobInstance(jobExecution.jobInstance, jobExecution.jobParameters);\n        }\n    }\n\n    onJobFatalError(jobExecutionId, error){\n        var promiseResolve = this.afterJobExecutionPromiseResolves[jobExecutionId];\n        if (promiseResolve) {\n            this.jobRepository.getJobExecutionById(jobExecutionId).then(jobExecution=>{\n                jobExecution.status = JOB_STATUS.FAILED;\n                if(error){\n                    jobExecution.failureExceptions.push(error);\n                }\n\n                return this.jobRepository.saveJobExecution(jobExecution).then(()=>{\n                    promiseResolve(jobExecution);\n                })\n            }).catch(e=>{\n                log.error(e);\n            })\n\n        }\n        log.debug('onJobFatalError', jobExecutionId, error);\n    }\n\n\n}\n","import {\n    ExpectedValueMaximizationRule,\n    ExpectedValueMinimizationRule,\n    MaxiMinRule,\n    MaxiMaxRule,\n    MiniMinRule,\n    MiniMaxRule\n} from \"./rules\";\nimport {log} from \"sd-utils\";\nimport * as model from \"sd-model\";\nimport {MinMaxRule} from \"./rules/min-max-rule\";\nimport {MaxMinRule} from \"./rules/max-min-rule\";\nimport {MinMinRule} from \"./rules/min-min-rule\";\nimport {MaxMaxRule} from \"./rules/max-max-rule\";\n\nexport class ObjectiveRulesManager{\n\n    expressionEngine;\n    currentRule;\n    ruleByName = {};\n    rules = [];\n\n\n    flipPair = {};\n    payoffIndex = 0;\n\n    constructor(expressionEngine, currentRuleName) {\n        this.expressionEngine = expressionEngine;\n        this.addRule(new ExpectedValueMaximizationRule(expressionEngine));\n        this.addRule(new ExpectedValueMinimizationRule(expressionEngine));\n        this.addRule(new MaxiMinRule(expressionEngine));\n        this.addRule(new MaxiMaxRule(expressionEngine));\n        this.addRule(new MiniMinRule(expressionEngine));\n        this.addRule(new MiniMaxRule(expressionEngine));\n\n        let minMax = new MinMaxRule(expressionEngine);\n        this.addRule(minMax);\n        let maxMin = new MaxMinRule(expressionEngine);\n        this.addRule(maxMin);\n        this.addFlipPair(minMax, maxMin);\n\n        let minMin = new MinMinRule(expressionEngine);\n        this.addRule(minMin);\n        let maxMax = new MaxMaxRule(expressionEngine);\n        this.addRule(maxMax);\n\n\n        if (currentRuleName) {\n            this.currentRule = this.ruleByName[currentRuleName];\n        } else {\n            this.currentRule = this.rules[0];\n        }\n\n    }\n\n\n    setPayoffIndex(payoffIndex){\n        this.payoffIndex = payoffIndex || 0;\n    }\n\n    addRule(rule){\n        this.ruleByName[rule.name]=rule;\n        this.rules.push(rule);\n    }\n\n    isRuleName(ruleName){\n         return !!this.ruleByName[ruleName]\n    }\n\n    setCurrentRuleByName(ruleName){\n        this.currentRule = this.ruleByName[ruleName];\n    }\n\n    getObjectiveRuleByName(ruleName){\n        return this.ruleByName[ruleName];\n    }\n\n    flipRule(){\n        var flipped = this.flipPair[this.currentRule.name];\n        if(flipped){\n            this.currentRule = flipped;\n        }\n    }\n\n    updateDefaultCriterion1Weight(defaultCriterion1Weight){\n        this.rules.filter(r=>r.multiCriteria).forEach(r=>r.setDefaultCriterion1Weight(defaultCriterion1Weight));\n    }\n\n    recompute(dataModel, allRules, decisionPolicy=null){\n\n        var startTime = new Date().getTime();\n        log.trace('recomputing rules, all: '+allRules);\n\n        dataModel.getRoots().forEach(n=>{\n            this.recomputeTree(n, allRules, decisionPolicy);\n        });\n\n        var time  = (new Date().getTime() - startTime/1000);\n        log.trace('recomputation took '+time+'s');\n\n        return this;\n    }\n\n    recomputeTree(root, allRules, decisionPolicy=null){\n        log.trace('recomputing rules for tree ...', root);\n\n        var startTime = new Date().getTime();\n\n        var rules  = [this.currentRule];\n        if(allRules){\n            rules = this.rules;\n        }\n\n        rules.forEach(rule=> {\n            rule.setPayoffIndex(this.payoffIndex);\n            rule.setDecisionPolicy(decisionPolicy);\n            rule.computePayoff(root);\n            rule.computeOptimal(root);\n            rule.clearDecisionPolicy();\n        });\n\n        var time  = (new Date().getTime() - startTime)/1000;\n        log.trace('recomputation took '+time+'s');\n\n        return this;\n    }\n\n\n    getNodeDisplayValue(node, name) {\n        return node.computedValue(this.currentRule.name, name)\n\n    }\n\n    getEdgeDisplayValue(e, name){\n        if(name==='probability'){\n            if(e.parentNode instanceof model.domain.DecisionNode){\n                return e.computedValue(this.currentRule.name, 'probability');\n            }\n            if(e.parentNode instanceof model.domain.ChanceNode){\n                return e.computedBaseProbability();\n            }\n            return null;\n        }\n        if(name==='payoff'){\n            if(this.currentRule.multiCriteria){\n                return e.computedValue(null, 'payoff');\n            }else{\n                return e.computedValue(null, 'payoff[' +this.payoffIndex + ']');\n            }\n\n        }\n        if(name==='optimal'){\n            return e.computedValue(this.currentRule.name, 'optimal')\n        }\n    }\n\n    addFlipPair(rule1, rule2) {\n        this.flipPair[rule1.name] = rule2;\n        this.flipPair[rule2.name] = rule1;\n    }\n\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from 'sd-utils'\n\n/*expected value maximization rule*/\nexport class ExpectedValueMaximizationRule extends ObjectiveRule{\n\n    static NAME = 'expected-value-maximization';\n\n    constructor(expressionEngine){\n        super(ExpectedValueMaximizationRule.NAME, true, expressionEngine);\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff=0, probabilityToEnter=1){\n        this.cValue(node, 'optimal', true);\n        if(node instanceof model.TerminalNode){\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=>{\n            if ( this.subtract(this.computedPayoff(node),payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode) ) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e,'probability')));\n            }else{\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*expected value minimization rule*/\nexport class ExpectedValueMinimizationRule extends ObjectiveRule{\n\n    static NAME = 'expected-value-minimization';\n\n    constructor(expressionEngine){\n        super(ExpectedValueMinimizationRule.NAME, false, expressionEngine);\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff=0, probabilityToEnter=1){\n        this.cValue(node, 'optimal', true);\n        if(node instanceof model.TerminalNode){\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=>{\n            if ( this.subtract(this.computedPayoff(node),payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode) ) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e,'probability')));\n            }else{\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","export * from './objective-rule'\nexport * from './expected-value-maximization-rule'\nexport * from './expected-value-minimization-rule'\nexport * from './maxi-max-rule'\nexport * from './maxi-min-rule'\nexport * from './mini-max-rule'\nexport * from './mini-min-rule'\n\n\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MaxMaxRule extends MultiCriteriaRule{\n\n    static NAME = 'max-max';\n\n    constructor(expressionEngine){\n        super(MaxMaxRule.NAME, [1, 1], expressionEngine);\n    }\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MaxMinRule extends MultiCriteriaRule{\n\n    static NAME = 'max-min';\n\n    constructor(expressionEngine){\n        super(MaxMinRule.NAME, [1, -1], expressionEngine);\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*maxi-max rule*/\nexport class MaxiMaxRule extends ObjectiveRule{\n\n    static NAME = 'maxi-max';\n\n    constructor(expressionEngine){\n        super(MaxiMaxRule.NAME, true, expressionEngine);\n    }\n\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)<bestChildPayoff ? 0.0 : (1.0/bestCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.maxBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*maxi-min rule*/\nexport class MaxiMinRule extends ObjectiveRule{\n\n    static NAME = 'maxi-min';\n\n    constructor(expressionEngine){\n        super(MaxiMinRule.NAME, true, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)>worstChildPayoff ? 0.0 : (1.0/worstCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.minBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MinMaxRule extends MultiCriteriaRule{\n\n    static NAME = 'min-max';\n\n    constructor(expressionEngine){\n        super(MinMaxRule.NAME, [-1, 1], expressionEngine);\n    }\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MinMinRule extends MultiCriteriaRule{\n\n    static NAME = 'min-min';\n\n    constructor(expressionEngine){\n        super(MinMinRule.NAME, [-1, -1], expressionEngine);\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*mini-max rule*/\nexport class MiniMaxRule extends ObjectiveRule{\n\n    static NAME = 'mini-max';\n\n    constructor(expressionEngine){\n        super(MiniMaxRule.NAME, false, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)<bestChildPayoff ? 0.0 : (1.0/bestCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.maxBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*mini-min rule*/\nexport class MiniMinRule extends ObjectiveRule{\n\n    static NAME = 'mini-min';\n\n    constructor(expressionEngine){\n        super(MiniMinRule.NAME, false, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)>worstChildPayoff ? 0.0 : (1.0/worstCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.minBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from \"sd-model\";\nimport {ObjectiveRule} from \"./objective-rule\";\nimport {Policy} from \"../../policies/policy\";\n\n\nexport class MultiCriteriaRule extends ObjectiveRule {\n\n    criterion1Weight = 1;\n    payoffCoeffs = [1, -1];\n\n    constructor(name, payoffCoeffs, expressionEngine) {\n        super(name, true, expressionEngine, true);\n        this.payoffCoeffs = payoffCoeffs;\n\n    }\n\n    setDefaultCriterion1Weight(criterion1Weight) {\n        this.criterion1Weight = criterion1Weight;\n    }\n\n    // payoff - parent edge payoff, aggregatedPayoff - aggregated payoff along path\n    computePayoff(node, payoff = [0, 0], aggregatedPayoff = [0, 0]) {\n        var childrenPayoff = [0, 0];\n        if (node.childEdges.length) {\n            if (node instanceof model.DecisionNode) {\n\n                var selectedIndexes = [];\n                var bestChild = -Infinity;\n\n                node.childEdges.forEach((e, i)=> {\n                    let basePayoffs = [this.basePayoff(e, 0), this.basePayoff(e, 1)];\n                    var childPayoff = this.computePayoff(e.childNode, basePayoffs, [this.add(basePayoffs[0], aggregatedPayoff[0]), this.add(basePayoffs[1], aggregatedPayoff[1])]);\n                    var childCombinedPayoff = this.cValue(e.childNode, 'combinedPayoff');\n                    if (childCombinedPayoff > bestChild) {\n                        bestChild = childCombinedPayoff;\n                        selectedIndexes = [i];\n                    } else if (bestChild.equals(childCombinedPayoff)) {\n                        selectedIndexes.push(i);\n                    }\n                });\n\n                if (this.decisionPolicy) {\n                    selectedIndexes = [];\n                    var decision = Policy.getDecision(this.decisionPolicy, node);\n                    if (decision) {\n                        selectedIndexes = [decision.decisionValue];\n                    }\n\n                }\n\n                node.childEdges.forEach((e, i)=> {\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', selectedIndexes.indexOf(i) < 0 ? 0.0 : 1.0);\n                });\n            } else {\n                node.childEdges.forEach(e=> {\n                    let basePayoffs = [this.basePayoff(e, 0), this.basePayoff(e, 1)];\n                    this.computePayoff(e.childNode, basePayoffs, [this.add(basePayoffs[0], aggregatedPayoff[0]), this.add(basePayoffs[1], aggregatedPayoff[1])]);\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', this.baseProbability(e));\n                });\n            }\n\n            var sumweight = 0;\n            node.childEdges.forEach(e=> {\n                sumweight = this.add(sumweight, this.cValue(e, 'probability'));\n            });\n\n            if (sumweight > 0) {\n                node.childEdges.forEach(e=> {\n                    childrenPayoff.forEach((p, i)=> {\n                        let ep = this.cValue(e.childNode, 'payoff[' + i + ']');\n                        childrenPayoff[i] = this.add(p, this.multiply(this.cValue(e, 'probability'), ep).div(sumweight))\n                    });\n                });\n            }\n\n\n        }\n        payoff.forEach((p, i)=> {\n            payoff[i] = this.add(p, childrenPayoff[i]);\n        });\n\n        this.clearComputedValues(node);\n\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'aggregatedPayoff', aggregatedPayoff);\n            this.cValue(node, 'probabilityToEnter', 0); //initial value\n        } else {\n            this.cValue(node, 'childrenPayoff', childrenPayoff);\n        }\n\n        this.cValue(node, 'combinedPayoff', this.computeCombinedPayoff(payoff));\n\n        return this.cValue(node, 'payoff', payoff);\n    }\n\n    computeCombinedPayoff(payoff){\n        // [criterion 1 coeff]*[criterion 1]*[weight]+[criterion 2 coeff]*[criterion 2]\n        if (this.criterion1Weight === Infinity) {\n            return this.multiply(this.payoffCoeffs[0], payoff[0]);\n        }\n        return this.add(this.multiply(this.payoffCoeffs[0], this.multiply(this.criterion1Weight, payoff[0])), this.multiply(this.payoffCoeffs[1], payoff[1]));\n    }\n\n    //  combinedPayoff - parent edge combinedPayoff\n    computeOptimal(node, combinedPayoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=> {\n            if (this.subtract(this.cValue(node, 'combinedPayoff'), combinedPayoff).equals(this.cValue(e.childNode, 'combinedPayoff')) || !(node instanceof model.DecisionNode)) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.computeCombinedPayoff([this.basePayoff(e, 0), this.basePayoff(e, 1)]), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {domain as model} from \"sd-model\";\nimport {Policy} from \"../../policies/policy\";\n\n/*Base class for objective rules*/\nexport class ObjectiveRule {\n    name;\n    expressionEngine;\n\n    decisionPolicy;\n    maximization;\n\n    payoffIndex = 0;\n    multiCriteria = false;\n\n    constructor(name, maximization, expressionEngine, multiCriteria=false) {\n        this.name = name;\n        this.maximization = maximization;\n        this.expressionEngine = expressionEngine;\n        this.multiCriteria = multiCriteria;\n    }\n\n    setDecisionPolicy(decisionPolicy) {\n        this.decisionPolicy = decisionPolicy;\n    }\n\n    setPayoffIndex(payoffIndex) {\n        this.payoffIndex = payoffIndex;\n    }\n\n    clearDecisionPolicy() {\n        this.decisionPolicy = null;\n    }\n\n    // should return array of selected children indexes\n    makeDecision(decisionNode, childrenPayoffs) {\n        var best;\n        if (this.maximization) {\n            best = this.max(...childrenPayoffs);\n        } else {\n            best = this.min(...childrenPayoffs);\n        }\n        var selectedIndexes = [];\n        childrenPayoffs.forEach((p, i)=> {\n            if (ExpressionEngine.compare(best, p) == 0) {\n                selectedIndexes.push(i);\n            }\n        });\n        return selectedIndexes;\n    }\n\n    _makeDecision(decisionNode, childrenPayoffs) {\n        if (this.decisionPolicy) {\n            var decision = Policy.getDecision(this.decisionPolicy, decisionNode);\n            if (decision) {\n                return [decision.decisionValue];\n            }\n            return [];\n        }\n        return this.makeDecision(decisionNode, childrenPayoffs);\n    }\n\n    // extension point for changing computed probability of edges in a chance node\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount) {\n\n    }\n\n    // payoff - parent edge payoff, aggregatedPayoff - aggregated payoff along path\n    computePayoff(node, payoff = 0, aggregatedPayoff = 0) {\n        var childrenPayoff = 0;\n        if (node.childEdges.length) {\n            if (node instanceof model.DecisionNode) {\n\n                var selectedIndexes = this._makeDecision(node, node.childEdges.map(e=>this.computePayoff(e.childNode, this.basePayoff(e), this.add(this.basePayoff(e), aggregatedPayoff))));\n                node.childEdges.forEach((e, i)=> {\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', selectedIndexes.indexOf(i) < 0 ? 0.0 : 1.0);\n                });\n\n            } else {\n                var bestChild = -Infinity;\n                var bestCount = 1;\n                var worstChild = Infinity;\n                var worstCount = 1;\n\n                node.childEdges.forEach(e=> {\n                    var childPayoff = this.computePayoff(e.childNode, this.basePayoff(e), this.add(this.basePayoff(e), aggregatedPayoff));\n                    if (childPayoff < worstChild) {\n                        worstChild = childPayoff;\n                        worstCount = 1;\n                    } else if (childPayoff.equals(worstChild)) {\n                        worstCount++\n                    }\n                    if (childPayoff > bestChild) {\n                        bestChild = childPayoff;\n                        bestCount = 1;\n                    } else if (childPayoff.equals(bestChild)) {\n                        bestCount++\n                    }\n\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', this.baseProbability(e));\n                });\n                this.modifyChanceProbability(node.childEdges, bestChild, bestCount, worstChild, worstCount);\n            }\n\n            var sumweight = 0;\n            node.childEdges.forEach(e=> {\n                sumweight = this.add(sumweight, this.cValue(e, 'probability'));\n            });\n\n            // console.log(payoff,node.childEdges,'sumweight',sumweight);\n            if (sumweight > 0) {\n                node.childEdges.forEach(e=> {\n                    childrenPayoff = this.add(childrenPayoff, this.multiply(this.cValue(e, 'probability'), this.computedPayoff(e.childNode)).div(sumweight));\n                });\n            }\n\n\n        }\n\n        payoff = this.add(payoff, childrenPayoff);\n        this.clearComputedValues(node);\n\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'aggregatedPayoff'+ '[' + this.payoffIndex + ']', aggregatedPayoff);\n            this.cValue(node, 'probabilityToEnter', 0); //initial value\n        } else {\n            this.cValue(node, 'childrenPayoff' + '[' + this.payoffIndex + ']', childrenPayoff);\n        }\n\n        return this.computedPayoff(node, payoff);\n    }\n\n    // koloruje optymalne ścieżki\n    computeOptimal(node) {\n        throw 'computeOptimal function not implemented for rule: ' + this.name\n    }\n\n    /* get or set computed payoff*/\n    computedPayoff(node, value){\n        return this.cValue(node, 'payoff[' + this.payoffIndex + ']', value)\n    }\n\n    /*Get or set object's computed value for current rule*/\n    cValue(object, fieldPath, value) {\n        // if(fieldPath.trim() === 'payoff'){\n        //     fieldPath += '[' + this.payoffIndex + ']';\n        // }\n\n        return object.computedValue(this.name, fieldPath, value);\n    }\n\n    baseProbability(edge) {\n        return edge.computedBaseProbability();\n    }\n\n    basePayoff(edge, payoffIndex) {\n        return edge.computedBasePayoff(undefined, payoffIndex || this.payoffIndex);\n    }\n\n    clearComputedValues(object) {\n        object.clearComputedValues(this.name);\n    }\n\n    add(a, b) {\n        return ExpressionEngine.add(a, b)\n    }\n\n    subtract(a, b) {\n        return ExpressionEngine.subtract(a, b)\n    }\n\n    divide(a, b) {\n        return ExpressionEngine.divide(a, b)\n    }\n\n    multiply(a, b) {\n        return ExpressionEngine.multiply(a, b)\n    }\n\n    max() {\n        return ExpressionEngine.max(...arguments)\n    }\n\n    min() {\n        return ExpressionEngine.min(...arguments)\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ExpressionEngine} from 'sd-expression-engine'\nimport {log} from 'sd-utils'\nimport {Operation} from \"./operation\";\nimport {TreeValidator} from \"../validation/tree-validator\";\n\n/*Subtree flipping operation*/\nexport class FlipSubtree extends Operation{\n\n    static $NAME = 'flipSubtree';\n    data;\n    expressionEngine;\n\n    constructor(data, expressionEngine) {\n        super(FlipSubtree.$NAME);\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.treeValidator = new TreeValidator(expressionEngine);\n    }\n\n    isApplicable(object){\n        return object instanceof model.ChanceNode\n    }\n\n    canPerform(node) {\n        if (!this.isApplicable(node)) {\n            return false;\n        }\n\n        if (!this.treeValidator.validate(this.data.getAllNodesInSubtree(node)).isValid()) { //check if the whole subtree is proper\n            return false;\n        }\n\n        if (node.childEdges.length < 1) {\n            return false;\n        }\n\n\n        var grandchildrenNumber = null;\n        var grandchildrenEdgeLabels = [];\n        var childrenEdgeLabelsSet = new Set();\n        var grandchildrenEdgeLabelsSet;\n        if (!node.childEdges.every(e=> {\n\n                var child = e.childNode;\n                if (!(child instanceof model.ChanceNode)) {\n                    return false;\n                }\n\n                if (childrenEdgeLabelsSet.has(e.name.trim())) { // edge labels should be unique\n                    return false;\n                }\n                childrenEdgeLabelsSet.add(e.name.trim());\n\n                if (grandchildrenNumber === null) {\n                    grandchildrenNumber = child.childEdges.length;\n                    if (grandchildrenNumber < 1) {\n                        return false;\n                    }\n                    child.childEdges.forEach(ge=> {\n                        grandchildrenEdgeLabels.push(ge.name.trim());\n                    });\n\n                    grandchildrenEdgeLabelsSet = new Set(grandchildrenEdgeLabels);\n\n                    if (grandchildrenEdgeLabelsSet.size !== grandchildrenEdgeLabels.length) { //grandchildren edge labels should be unique\n                        return false;\n                    }\n\n                    return true;\n                }\n\n                if (child.childEdges.length != grandchildrenNumber) {\n                    return false;\n                }\n\n                if (!child.childEdges.every((ge, i)=>grandchildrenEdgeLabels[i] === ge.name.trim())) {\n                    return false;\n                }\n\n                return true;\n\n            })) {\n\n            return false;\n        }\n\n        return true;\n    }\n\n    perform(root) {\n\n        var rootClone = this.data.cloneSubtree(root, true);\n        var oldChildrenNumber = root.childEdges.length;\n        var oldGrandChildrenNumber = root.childEdges[0].childNode.childEdges.length;\n\n        var childrenNumber = oldGrandChildrenNumber;\n        var grandChildrenNumber = oldChildrenNumber;\n\n        var callbacksDisabled = this.data.callbacksDisabled;\n        this.data.callbacksDisabled = true;\n\n\n        var childX = root.childEdges[0].childNode.location.x;\n        var topY = root.childEdges[0].childNode.childEdges[0].childNode.location.y;\n        var bottomY = root.childEdges[oldChildrenNumber - 1].childNode.childEdges[oldGrandChildrenNumber - 1].childNode.location.y;\n\n        var extentY = bottomY - topY;\n        var stepY = extentY / (childrenNumber + 1);\n\n        root.childEdges.slice().forEach(e=> this.data.removeNode(e.childNode));\n\n\n        for (var i = 0; i < childrenNumber; i++) {\n            var child = new model.ChanceNode(new model.Point(childX, topY + (i + 1) * stepY));\n            var edge = this.data.addNode(child, root);\n            edge.name = rootClone.childEdges[0].childNode.childEdges[i].name;\n\n            edge.probability = 0;\n\n            for (var j = 0; j < grandChildrenNumber; j++) {\n                var grandChild = rootClone.childEdges[j].childNode.childEdges[i].childNode;\n\n\n                var grandChildEdge = this.data.attachSubtree(grandChild, child);\n                grandChildEdge.name = rootClone.childEdges[j].name;\n                grandChildEdge.payoff = [\n                    ExpressionEngine.add(rootClone.childEdges[j].computedBasePayoff(undefined, 0), rootClone.childEdges[j].childNode.childEdges[i].computedBasePayoff(undefined, 0)),\n                    ExpressionEngine.add(rootClone.childEdges[j].computedBasePayoff(undefined, 1), rootClone.childEdges[j].childNode.childEdges[i].computedBasePayoff(undefined, 1)),\n                ];\n\n                grandChildEdge.probability = ExpressionEngine.multiply(rootClone.childEdges[j].computedBaseProbability(), rootClone.childEdges[j].childNode.childEdges[i].computedBaseProbability());\n                edge.probability = ExpressionEngine.add(edge.probability, grandChildEdge.probability);\n            }\n\n            var divideGrandChildEdgeProbability = p => ExpressionEngine.divide(p, edge.probability);\n            if (edge.probability.equals(0)) {\n                var prob = ExpressionEngine.divide(1, grandChildrenNumber);\n                divideGrandChildEdgeProbability = p => prob;\n            }\n\n            var probabilitySum = 0.0;\n            child.childEdges.forEach(grandChildEdge=> {\n                grandChildEdge.probability = divideGrandChildEdgeProbability(grandChildEdge.probability);\n                probabilitySum = ExpressionEngine.add(probabilitySum, grandChildEdge.probability);\n                grandChildEdge.probability = this.expressionEngine.serialize(grandChildEdge.probability)\n            });\n\n            this._normalizeProbabilitiesAfterFlip(child.childEdges, probabilitySum);\n            edge.probability = this.expressionEngine.serialize(edge.probability)\n        }\n        this._normalizeProbabilitiesAfterFlip(root.childEdges);\n\n\n        this.data.callbacksDisabled = callbacksDisabled;\n        this.data._fireNodeAddedCallback();\n    }\n\n    _normalizeProbabilitiesAfterFlip(childEdges, probabilitySum){\n        if(!probabilitySum){\n            probabilitySum = 0.0;\n            childEdges.forEach(e=> {\n                probabilitySum = ExpressionEngine.add(probabilitySum, e.probability);\n            });\n        }\n        if (!probabilitySum.equals(1)) {\n            log.info('Sum of the probabilities in child nodes is not equal to 1 : ', probabilitySum);\n            var newProbabilitySum = 0.0;\n            var cf = 1000000000000; //10^12\n            var prec = 12;\n            childEdges.forEach(e=> {\n                e.probability = parseInt(ExpressionEngine.round(e.probability, prec) * cf);\n                newProbabilitySum = newProbabilitySum + e.probability;\n            });\n            var rest = cf - newProbabilitySum;\n            log.info('Normalizing with rounding to precision: ' + prec, rest);\n            childEdges[0].probability = ExpressionEngine.add(rest, childEdges[0].probability);\n            newProbabilitySum = 0.0;\n            childEdges.forEach(e=> {\n                e.probability = this.expressionEngine.serialize(ExpressionEngine.divide(parseInt(e.probability), cf))\n            })\n        }\n    }\n}\n","\n\n\n/*Base class for complex operations executing a job*/\nimport {Operation} from \"./operation\";\n\nexport class JobExecutingOperation extends Operation{\n\n\n    jobName; //Job name if this operation executes a job\n\n    constructor(name, jobName = null){\n        super(name);\n\n        this.name = name;\n        this.jobName = jobName;\n    }\n\n\n    //check if can perform operation for applicable object\n    canPerform(object, params){\n\n        throw 'canPerform function not implemented for operation: '+this.name\n    }\n\n    //Performed in job by operations manager\n    perform(object, params, ){\n\n    }\n\n\n    postProcess(object, params){\n\n    }\n\n\n}\n","\n\n\n/*Base class for complex operations on tree structure*/\nexport class Operation{\n\n    name;\n\n    constructor(name){\n        this.name = name;\n    }\n\n    //check if operation is potentially applicable for object\n    isApplicable(object){\n        throw 'isApplicable function not implemented for operation: '+this.name\n    }\n\n    //check if can perform operation for applicable object\n    canPerform(object){\n        throw 'canPerform function not implemented for operation: '+this.name\n    }\n\n    perform(object, params){\n        throw 'perform function not implemented for operation: '+this.name\n    }\n\n\n}\n","import {FlipSubtree} from \"./flip-subtree\";\nimport {PayoffsTransformation} from \"./payoffs-transformation.js\";\n\n\nexport class OperationsManager {\n\n    operations = [];\n    operationByName = {};\n\n    constructor(data, expressionEngine, jobsManger){\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.jobsManger = jobsManger;\n        this.registerOperation(new FlipSubtree(data, expressionEngine));\n        this.registerOperation(new PayoffsTransformation(data, expressionEngine));\n    }\n\n    registerOperation(operation){\n        this.operations.push(operation);\n        this.operationByName[operation.name] = operation;\n    }\n\n\n    getOperationByName(name){\n        return this.operationByName[name];\n    }\n\n    operationsForObject(object){\n        return this.operations.filter(op=>op.isApplicable(object))\n    }\n\n    setData(data){\n        this.data = data;\n        this.operations.forEach(o => o.data = data)\n    }\n\n    performOperation(object, operationName, jobParamsValues){\n\n        let operation = this.getOperationByName(operationName);\n\n        if(!operation.jobName){\n            return Promise.resolve(operation.perform(object, jobParamsValues))\n        }\n\n        jobParamsValues['objectId'] = object.id;\n\n        return this.jobsManger.run(operation.jobName, jobParamsValues, this.data, false).then((jobExecution)=> {\n\n            const d = jobExecution.getData();\n            this.data.nodes = d.nodes;\n            this.data.edges = d.edges;\n            this.data.code = d.code;\n\n            operation.postProcess(object, jobParamsValues);\n\n            return true;\n        })\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {TreeValidator} from \"../validation/tree-validator\";\nimport {JobExecutingOperation} from \"./job-executing-operation\";\nimport {PayoffsTransformationJob} from \"../jobs/configurations/payoffs-transformation/payoffs-transformation-job\";\n\n\nexport class PayoffsTransformation extends JobExecutingOperation {\n\n    static $NAME = 'payoffsTransformation';\n\n    data;\n    expressionEngine;\n\n    constructor(data, expressionEngine) {\n        super(PayoffsTransformation.$NAME, PayoffsTransformationJob.$NAME);\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.treeValidator = new TreeValidator(expressionEngine);\n    }\n\n    isApplicable(object){\n        return object instanceof model.ChanceNode || object instanceof model.DecisionNode\n    }\n\n    canPerform(node) {\n        if (!this.isApplicable(node)) {\n            return false;\n        }\n\n        if (!this.treeValidator.validate(this.data.getAllNodesInSubtree(node)).isValid()) { //check if the whole subtree is proper\n            return false;\n        }\n\n        return !node.$parent && node.childEdges.length > 0;\n    }\n\n}\n","\nexport class Decision{\n    node;\n    decisionValue; //index of  selected edge\n    children = [];\n    key;\n\n    constructor(node, decisionValue) {\n        this.node = node;\n        this.decisionValue = decisionValue;\n        this.key = Decision.generateKey(this);\n    }\n\n    static generateKey(decision, keyProperty='id'){\n        var e = decision.node.childEdges[decision.decisionValue];\n        var key = decision.node[keyProperty]+\":\"+(e[keyProperty]? e[keyProperty] : decision.decisionValue+1);\n        return key.replace(/\\n/g, ' ');\n    }\n\n    addDecision(node, decisionValue){\n        var decision = new Decision(node, decisionValue);\n        this.children.push(decision);\n        this.key = Decision.generateKey(this);\n        return decision;\n    }\n\n    getDecision(decisionNode){\n        return Decision.getDecision(this, decisionNode)\n    }\n\n    static getDecision(decision, decisionNode){\n        if(decision.node===decisionNode || decision.node.id === decisionNode.id){\n            return decision;\n        }\n        for(var i=0; i<decision.children.length; i++){\n            var d = Decision.getDecision(decision.children[i], decisionNode);\n            if(d){\n                return d;\n            }\n        }\n    }\n\n    static toDecisionString(decision, extended=false, keyProperty='name', indent = ''){\n\n        var res = Decision.generateKey(decision, keyProperty);\n        var childrenRes = \"\";\n\n        decision.children.forEach(d=>{\n            if(childrenRes){\n                if(extended){\n                    childrenRes += '\\n'+indent;\n                }else{\n                    childrenRes += \", \"\n                }\n\n            }\n            childrenRes += Decision.toDecisionString(d,extended,keyProperty, indent+'\\t')\n        });\n        if(decision.children.length){\n            if(extended){\n                childrenRes =  '\\n'+indent +childrenRes;\n            }else{\n                childrenRes = \" - (\" + childrenRes + \")\";\n            }\n\n\n\n        }\n\n        return res+childrenRes;\n    }\n\n    toDecisionString(indent=false){\n        return Decision.toDecisionString(this, indent)\n    }\n}\n","import {Policy} from \"./policy\";\nimport {domain as model} from 'sd-model'\nimport {Utils} from 'sd-utils'\nimport {Decision} from \"./decision\";\n\nexport class PoliciesCollector{\n    policies = [];\n    ruleName=false;\n\n    constructor(root, optimalForRuleName){\n        this.ruleName = optimalForRuleName;\n        this.collect(root).forEach((decisions,i)=>{\n            this.policies.push(new Policy(\"#\"+(i+1), decisions));\n        });\n        if(this.policies.length===1){\n            this.policies[0].id = \"default\"\n        }\n    }\n\n    collect(root){\n        var nodeQueue = [root];\n        var node;\n        var decisionNodes = [];\n        while(nodeQueue.length){\n            node = nodeQueue.shift();\n\n            if(this.ruleName && !node.computedValue(this.ruleName, 'optimal')){\n                continue;\n            }\n\n            if(node instanceof model.DecisionNode){\n                decisionNodes.push(node);\n                continue;\n            }\n\n            node.childEdges.forEach((edge, i)=>{\n                nodeQueue.push(edge.childNode)\n            })\n        }\n\n        return Utils.cartesianProductOf(decisionNodes.map((decisionNode)=>{\n            var decisions= [];\n            decisionNode.childEdges.forEach((edge, i)=>{\n\n                if(this.ruleName && !edge.computedValue(this.ruleName, 'optimal')){\n                    return;\n                }\n\n                var childDecisions = this.collect(edge.childNode); //all possible child decisions (cartesian)\n                childDecisions.forEach(cd=>{\n                    var decision = new Decision(decisionNode, i);\n                    decisions.push(decision);\n                    decision.children = cd;\n                })\n\n            });\n            return decisions;\n        }));\n    }\n\n}\n","import {Decision} from \"./decision\";\n\nexport class Policy{\n    id;\n    decisions = [];\n\n    constructor(id, decisions){\n        this.id = id;\n        this.decisions = decisions || [];\n        this.key = Policy.generateKey(this);\n    }\n\n    addDecision(node, decisionValue){\n        var decision = new Decision(node, decisionValue);\n        this.decisions .push(decision);\n        this.key = Policy.generateKey(this);\n        return decision;\n    }\n\n    static generateKey(policy){\n        var key = \"\";\n        policy.decisions.forEach(d=>key+=(key? \"&\": \"\")+d.key);\n        return key;\n    }\n\n    equals(policy, ignoreId=true){\n        if(this.key != policy.key){\n            return false;\n        }\n\n        return ignoreId || this.id === policy.id;\n    }\n\n    getDecision(decisionNode){\n        return Policy.getDecision(this, decisionNode);\n    }\n\n    static getDecision(policy, decisionNode){\n        for(var i=0; i<policy.decisions.length; i++){\n            var decision = Decision.getDecision(policy.decisions[i], decisionNode);\n            if(decision){\n                return decision;\n            }\n        }\n        return null;\n    }\n\n    static toPolicyString(policy, extended=false, prependId=false){\n\n        var res = \"\";\n        policy.decisions.forEach(d=>{\n            if(res){\n                if(extended){\n                    res += \"\\n\"\n                }else{\n                    res += \", \"\n                }\n\n\n            }\n            res += Decision.toDecisionString(d, extended, 'name', '\\t');\n        });\n        if(prependId && policy.id!==undefined){\n            return policy.id+\" \"+res;\n        }\n        return res;\n    }\n\n\n    toPolicyString(indent=false){\n        return Policy.toPolicyString(this, indent)\n    }\n\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n\nexport class McdmWeightValueValidator{\n\n    additionalValidator = null;\n\n    constructor(additionalValidator){\n        this.additionalValidator = additionalValidator;\n    }\n\n    validate(value){\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        let parsed = parseFloat(value);\n        if(parsed !== Infinity && !ExpressionEngine.validate(value, {}, false)){\n            return false\n        }\n\n        value = ExpressionEngine.toNumber(value);\n        var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991; // Number.MAX_SAFE_INTEGER is undefined in IE\n        if(ExpressionEngine.compare(value, 0) < 0 || (value !== Infinity && ExpressionEngine.compare(value, maxSafeInteger)> 0)){\n            return false;\n        }\n\n        if(this.additionalValidator) {\n            return this.additionalValidator(ExpressionEngine.toNumber(value))\n        }\n\n        return true;\n    }\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n/*Computed base value validator*/\nexport class PayoffValueValidator{\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine=expressionEngine;\n    }\n\n    validate(value){\n\n\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        value = ExpressionEngine.toNumber(value);\n        var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991; // Number.MAX_SAFE_INTEGER in undefined in IE\n        return ExpressionEngine.compare(value, -maxSafeInteger) >= 0 && ExpressionEngine.compare(value, maxSafeInteger) <= 0;\n    }\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n/*Computed base value validator*/\nexport class ProbabilityValueValidator{\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine=expressionEngine;\n    }\n\n    validate(value, edge){\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        var value = ExpressionEngine.toNumber(value);\n        return value.compare(0) >= 0 && value.compare(1) <= 0;\n    }\n\n}\n","import {domain as model, ValidationResult} from \"sd-model\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {ProbabilityValueValidator} from \"./probability-value-validator\";\nimport {PayoffValueValidator} from \"./payoff-value-validator\";\n\nexport class TreeValidator {\n\n    expressionEngine;\n\n    constructor(expressionEngine) {\n        this.expressionEngine = expressionEngine;\n        this.probabilityValueValidator = new ProbabilityValueValidator(expressionEngine);\n        this.payoffValueValidator = new PayoffValueValidator(expressionEngine);\n    }\n\n    validate(nodes) {\n\n        var validationResult = new ValidationResult();\n\n        nodes.forEach(n=> {\n            this.validateNode(n, validationResult);\n        });\n\n        return validationResult;\n    }\n\n    validateNode(node, validationResult = new ValidationResult()) {\n\n        if (node instanceof model.TerminalNode) {\n            return;\n        }\n        if (!node.childEdges.length) {\n            validationResult.addError('incompletePath', node)\n        }\n\n        var probabilitySum = ExpressionEngine.toNumber(0);\n        var withHash = false;\n        node.childEdges.forEach((e, i)=> {\n            e.setValueValidity('probability', true);\n\n            if (node instanceof model.ChanceNode) {\n                var probability = e.computedBaseProbability();\n                if (!this.probabilityValueValidator.validate(probability)) {\n                    if (!ExpressionEngine.isHash(e.probability)) {\n                        validationResult.addError({name: 'invalidProbability', data: {'number': i + 1}}, node);\n                        e.setValueValidity('probability', false);\n                    }\n\n                } else {\n                    probabilitySum = ExpressionEngine.add(probabilitySum, probability);\n                }\n            }\n\n            e.payoff.forEach((rawPayoff, payoffIndex)=> {\n                var path = 'payoff[' + payoffIndex + ']';\n                e.setValueValidity(path, true);\n                var payoff = e.computedBasePayoff(undefined, payoffIndex);\n                if (!this.payoffValueValidator.validate(payoff)) {\n                    validationResult.addError({name: 'invalidPayoff', data: {'number': i + 1}}, node);\n                    e.setValueValidity(path, false);\n                }\n            })\n\n\n        });\n        if (node instanceof model.ChanceNode) {\n            if (isNaN(probabilitySum) || !probabilitySum.equals(1)) {\n                validationResult.addError('probabilityDoNotSumUpTo1', node);\n            }\n        }\n\n\n        return validationResult;\n    }\n}\n","export * from './src/index'\n"]}