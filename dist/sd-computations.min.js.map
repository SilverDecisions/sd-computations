{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","src/computations-engine.js","src/computations-manager.js","src/computations-utils.js","src/expressions-evaluator.js","src/index.js","src/jobs/configurations/league-table/league-table-job-parameters.js","src/jobs/configurations/league-table/league-table-job.js","src/jobs/configurations/league-table/steps/calculate-step.js","src/jobs/configurations/recompute/recompute-job-parameters.js","src/jobs/configurations/recompute/recompute-job.js","src/jobs/configurations/sensitivity-analysis/n-way/sensitivity-analysis-job-parameters.js","src/jobs/configurations/sensitivity-analysis/n-way/sensitivity-analysis-job.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/init-policies-step.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/prepare-variables-step.js","src/jobs/configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job-parameters.js","src/jobs/configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job.js","src/jobs/configurations/sensitivity-analysis/probabilistic/steps/compute-policy-stats-step.js","src/jobs/configurations/sensitivity-analysis/probabilistic/steps/prob-calculate-step.js","src/jobs/configurations/sensitivity-analysis/spider-plot/spider-plot-job-parameters.js","src/jobs/configurations/sensitivity-analysis/spider-plot/spider-plot-job.js","src/jobs/configurations/sensitivity-analysis/spider-plot/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/steps/prepare-variables-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job-parameters.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job.js","src/jobs/engine/batch/batch-step.js","src/jobs/engine/exceptions/extendable-error.js","src/jobs/engine/exceptions/index.js","src/jobs/engine/exceptions/job-computation-exception.js","src/jobs/engine/exceptions/job-data-invalid-exception.js","src/jobs/engine/exceptions/job-execution-already-running-exception.js","src/jobs/engine/exceptions/job-instance-already-complete-exception.js","src/jobs/engine/exceptions/job-interrupted-exception.js","src/jobs/engine/exceptions/job-parameters-invalid-exception.js","src/jobs/engine/exceptions/job-restart-exception.js","src/jobs/engine/execution-context.js","src/jobs/engine/index.js","src/jobs/engine/job-execution-flag.js","src/jobs/engine/job-execution-listener.js","src/jobs/engine/job-execution.js","src/jobs/engine/job-instance.js","src/jobs/engine/job-key-generator.js","src/jobs/engine/job-launcher.js","src/jobs/engine/job-parameter-definition.js","src/jobs/engine/job-parameters.js","src/jobs/engine/job-repository/idb-job-repository.js","src/jobs/engine/job-repository/job-repository.js","src/jobs/engine/job-repository/simple-job-repository.js","src/jobs/engine/job-repository/timeout-job-repository.js","src/jobs/engine/job-result.js","src/jobs/engine/job-status.js","src/jobs/engine/job.js","src/jobs/engine/simple-job.js","src/jobs/engine/step-execution-listener.js","src/jobs/engine/step-execution.js","src/jobs/engine/step.js","src/jobs/index.js","src/jobs/job-instance-manager.js","src/jobs/job-worker.js","src/jobs/jobs-manager.js","src/objective/objective-rules-manager.js","src/objective/rules/expected-value-maximization-rule.js","src/objective/rules/expected-value-minimization-rule.js","src/objective/rules/index.js","src/objective/rules/max-max-rule.js","src/objective/rules/max-min-rule.js","src/objective/rules/maxi-max-rule.js","src/objective/rules/maxi-min-rule.js","src/objective/rules/min-max-rule.js","src/objective/rules/min-min-rule.js","src/objective/rules/mini-max-rule.js","src/objective/rules/mini-min-rule.js","src/objective/rules/multi-criteria-rule.js","src/objective/rules/objective-rule.js","src/operations/flip-subtree.js","src/operations/operation.js","src/operations/operations-manager.js","src/policies/decision.js","src/policies/policies-collector.js","src/policies/policy.js","src/validation/mcdm-weight-value-validator.js","src/validation/payoff-value-validator.js","src/validation/probability-value-validator.js","src/validation/tree-validator.js","index.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","1","module","toArray","arr","Array","prototype","slice","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","p","apply","then","promisifyCursorRequestCall","value","Cursor","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","replace","callback","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","exp","open","name","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","default","self","idb","_sdUtils","_sdModel","_computationsManager","ComputationsEngineConfig","_ComputationsManagerC","custom","logLevel","deepExtend","_this","ComputationsEngine","_ComputationsManager","config","data","global","Utils","getGlobalObject","isWorker","_this2","jobsManger","registerJobExecutionListener","jobExecution","reply","getDTO","queryableFunctions","jobName","jobParametersValues","dataDTO","DataModel","runJob","jobExecutionId","execute","catch","getErrorDTO","ruleName","evalCode","evalNumeric","objectiveRulesManager","setCurrentRuleByName","allRules","_checkValidityAndRecomputeObjective","onmessage","oEvent","hasOwnProperty","queryMethod","queryArguments","defaultReply","setLogLevel","level","setLevel","message","TypeError","postMessage","_sdExpressionEngine","_objectiveRulesManager","_treeValidator","_operationsManager","_jobsManager","_expressionsEvaluator","_jobInstanceManager","_policy","_mcdmWeightValueValidator","ComputationsManagerConfig","worker","jobRepositoryType","clearRepository","ComputationsManager","setConfig","expressionEngine","ExpressionEngine","expressionsEvaluator","ExpressionsEvaluator","ObjectiveRulesManager","operationsManager","OperationsManager","JobsManager","url","treeValidator","TreeValidator","mcdmWeightValueValidator","McdmWeightValueValidator","setData","checkValidityAndRecomputeObjective","delegateRecomputation","params","getCurrentRule","d","getData","updateFrom","updateDisplayValues","updateDefaultCriterion1Weight","defaultCriterion1Weight","validationResults","evalExpressions","weightValid","validate","multiCriteria","getRoots","root","vr","getAllNodesInSubtree","isValid","recomputeTree","currentRule","getJobByName","object","operationsForObject","every","jobParamsValues","resolvePromiseAfterJobIsLaunched","run","jobInstanceManagerConfig","je","JobInstanceManager","_this3","rules","getObjectiveRuleByName","isRuleName","reversePayoffs","tmp","weightLowerBound","flip","weightUpperBound","flipRule","Infinity","serialize","divide","policyToDisplay","displayPolicy","nodes","updateNodeDisplayValues","edges","updateEdgeDisplayValues","node","$DISPLAY_VALUE_NAMES","displayValue","_this5","getNodeDisplayValue","_this6","getEdgeDisplayValue","clearDisplayValues","_this7","displayPolicyForNode","policy","domain","DecisionNode","decision","Policy","getDecision","childEdge","childEdges","decisionValue","childNode","ChanceNode","TerminalNode","ComputationsUtils","min","max","extent","subtract","step","curr","add","toFloat","clearComputedValues","initScopes","debug","evalGlobalCode","clearTree","evalExpressionsForNode","clearExpressionScope","$codeDirty","$codeError","eval","expressionScope","edge","hasAssignmentExpression","payoff","parentNode","initScope","initScopeForNode","scope","probabilitySum","toNumber","hashEdges","invalidProb","rawPayoff","payoffIndex","path","isFieldValid","computedValue","evalPayoff","err","isHash","probability","warn","prob","compare","hash","parent","$parent","parentScope","cloneDeep","keys","_computationsEngine","key","_jobParameters","_jobParameterDefinition","LeagueTableJobParameters","_JobParameters","definitions","JobParameterDefinition","PARAMETER_TYPE","STRING","BOOLEAN","NUMBER_EXPRESSION","v","allVals","computeNumberExpression","values","guid","_simpleJob","_calculateStep","_leagueTableJobParameters","LeagueTableJob","_SimpleJob","jobRepository","initSteps","calculateStep","CalculateStep","addStep","jobResult","jobParameters","headers","payoffNames","rows","row","policies","rowCells","id","toPolicyString","extendedPolicyDescription","payoffs","dominatedBy","extendedDominatedBy","incratio","optimal","optimalForDefaultWeight","_step","_jobStatus","_policiesCollector","_Step","stepExecution","getJobParameters","rule","treeRoot","PoliciesCollector","payoffCoeffs","b","map","sort","reduce","previousValue","currentValue","array","prev","_prev$policies","_toConsumableArray","concat","bestCost","bestCostRow","cmp","prev2NotDominated","filter","computeICER","defaultWeight","lastLELower","lastLELowerDef","sub","exitStatus","JOB_STATUS","COMPLETED","Math","abs","RecomputeJobParameters","_recomputeJobParameters","_job","RecomputeJob","_Job","isRestartable","execution","SensitivityAnalysisJobParameters","NUMBER","INTEGER","isUnique","_sensitivityAnalysisJobParameters","_prepareVariablesStep","_initPoliciesStep","SensitivityAnalysisJob","batchSize","PrepareVariablesStep","InitPoliciesStep","chunkSize","variableNames","roundVariables","policyIndex","variables","_variables","uniqueValues","Set","uniqueValuesNo","size","precision","notReadyVariablesIndexes","variableIndex","notReadyIndex","round","newReadyIndexes","uniqueVals","reverse","splice","stepExecutions","steps","getProgress","_batchStep","_jobComputationException","_BatchStep","getJobExecutionContext","variableValues","executionContext","put","startIndex","item","failOnInvalidTree","clear","variableName","valid","errorData","JobComputationException","isString","_computationsUtils","sequence","cartesianProductOf","ProbabilisticSensitivityAnalysisJobParameters","_probabilisticSensitivityAnalysisJobParameters","_sensitivityAnalysisJob","_probCalculateStep","_computePolicyStatsStep","ProbabilisticSensitivityAnalysisJob","_SensitivityAnalysisJ","ProbCalculateStep","ComputePolicyStatsStep","numberOfRuns","ruleByName","payoffsPerPolicy","maximization","medians","median","standardDeviations","std","policyIsBestProbabilities","policyToHighestPayoffCount","policyToLowestPayoffCount","_CalculateStep","expectedValues","fill","runIndex","singleRunVariableValues","errors","evaluated","formula","variable","currentItemCount","_get","__proto__","getPrototypeOf","updatePolicyStats","highestPayoff","lowestPayoff","bestPolicyIndexes","worstPolicyIndexes","zeroNum","equals","SpiderPlotJobParameters","_spiderPlotJobParameters","SpiderPlotJob","percentageRangeValues","percentageChangeRange","policiesCollector","defaultValues","forOwn","k","defVal","multiply","itemIndex","variableValue","_jobResult$data$rows","jobExecutionContext","extents","TornadoDiagramJobParameters","_tornadoDiagramJobParameters","TornadoDiagramJob","extentVariableValues","defaultPayoff","_jobInterruptedException","BatchStep","TOTAL_ITEM_COUNT_PROP","CURRENT_ITEM_COUNT_PROP","init","totalItemCount","setCurrentItemCount","getCurrentItemCount","setTotalItemCount","handleNextChunk","JobInterruptedException","postProcess","getTotalItemCount","checkJobExecutionFlags","terminateOnly","readNextChunk","chunk","processChunk","processedChunk","writeChunk","res","updateJobProgress","_this4","processItem","progress","jobInstance","updateJobExecutionProgress","checkExecutionFlags","ExtendableError","constructor","_extendableError","_jobDataInvalidException","_jobExecutionAlreadyRunningException","_jobInstanceAlreadyCompleteException","_jobParametersInvalidException","_jobRestartException","_ExtendableError","JobDataInvalidException","JobExecutionAlreadyRunningException","JobInstanceAlreadyCompleteException","JobParametersInvalidException","JobRestartException","ExecutionContext","context","dirty","clone","prevValue","dto","_executionContext","_jobExecution","_jobExecutionFlag","_jobExecutionListener","_jobInstance","_jobKeyGenerator","_jobLauncher","_stepExecution","_stepExecutionListener","exceptions","_interopRequireWildcard","JOB_EXECUTION_FLAG","JobExecutionListener","JobExecution","status","STARTING","UNKNOWN","startTime","createTime","Date","endTime","lastUpdated","failureExceptions","stepName","StepExecution","STOPPING","se","filteredProperties","deepClone","cloneMethod","cloneDeepWith","cloneWith","assign","stack","indexOf","JobInstance","JobKeyGenerator","identifying","JobLauncher","jobWorker","dataModelSerializer","jobOrName","job","createJobParameters","createJobExecution","executeJob","executionPromise","_execute","getLastJobExecution","lastExecution","jobParametersValidator","jobDataValidator","jobExecutionOrId","getJobExecutionById","info","typeOrNestedParametersDefinitions","minOccurs","maxOccurs","singleValueValidator","validator","nestedParameters","required","isArray","type","COMPOSITE","allValues","validateSingleValue","DATE","isDate","isInt","isNumber","isBoolean","isObject","nestedDef","_value","parsed","parseFloat","JobParameters","initDefinitions","initDefaultValues","def","defs","split","find","getDefinition","_jobRepository","ObjectStoreDao","IdbJobRepository","_JobRepository","expressionsReviver","dbName","deleteDB","initDB","dbPromise","_idb2","upgradeDB","jobExecutionsOS","unique","jobInstanceDao","jobExecutionDao","jobExecutionProgressDao","jobExecutionFlagDao","stepExecutionDao","jobResultDao","_","generateJobInstanceKey","remove","findJobExecutions","jobExecutions","removeJobExecution","getJobResultByInstance","removeJobResult","findStepExecutions","removeStepExecution","jobResultId","getByIndex","reviveJobInstance","stepExecutionsDTOs","saveStepExecutionsDTOS","flag","savedExecutions","stepExecutionDTO","_this8","fetchJobExecutionRelations","jobExecutionDTO","revive","_this9","reviveJobExecution","jobExecutionDtoList","fetched","_this10","fetchJobExecutionsRelations","getAllByIndex","dtos","_this11","reviveStepExecution","fetchRelationsAndRevive","sorted","getTime","_this12","executions","_this13","latest","dataModel","loadFromDTO","reviveExecutionContext","mergeWith","objValue","srcValue","source","stepDTO","_this14","_this15","indexName","_this16","_this17","tx","_this18","_this19","_this20","_this21","iterateKeyCursor","_jobResult","JobRepository","jobByName","saveJobInstance","getJobInstance","generateKey","isRunning","ABANDONED","createJobInstance","_setNewState","createStateSnapshot","all","instanceAndExecutionContext","saveJobExecution","getLastJobExecutionByInstance","saveStepExecution","JobResult","SimpleJobRepository","jobInstancesByKey","executionProgress","executionFlags","jobResults","_temp","_possibleConstructorReturn","_ret","ji","ex","_simpleJobRepository","TimeoutJobRepository","_SimpleJobRepository","valueToResolve","delay","createTimeoutPromise","Job","executionListeners","getJobParametersValidator","getJobDataValidator","STOPPED","updateStatus","STARTED","getResult","updateProgress","listener","beforeJob","doExecute","FAILED","saveJobResult","update","afterJob","getJobExecutionFlag","STOP","stop","SimpleJob","handleNextStep","lastExecutedStepExecution","_execution$failureExc","prevStep","prevStepExecution","stepIndex","handleStep","isStopping","getLastStepExecution","lastStepExecution","stepExecutionPartOfExistingJobExecution","currentStepExecution","shouldStart","createStepExecution","isCompleted","isRestart","skipExecution","skipOnRestartIfCompleted","containsKey","addStepExecution","_currentStepExecution","stepStatus","completedSteps","current","Step","StepExecutionListener","EXECUTING","beforeStep","determineJobStatus","afterStep","close","_jobWorker","engine","JobInstanceManagerConfig","onJobStarted","onJobCompleted","onJobFailed","onJobStopped","onJobTerminated","onProgress","updateInterval","_JobExecutionListener","jobInstanceOrExecution","checkProgress","lastJobExecution","terminated","getProgressPercents","lastUpdateTime","callbacksThisArg","total","deregisterJobExecutionListener","getProgressFromExecution","forceUpdate","terminate","JobWorker","defaultListener","onError","listeners","Worker","queryMethodListener","queryMethodArguments","deserializer","fn","thisArg","sendQuery","ruleNames","_idbJobRepository","_recomputeJob","_probabilisticSensitivityAnalysisJob","_timeoutJobRepository","_tornadoDiagramJob","_leagueTableJob","_spiderPlotJob","JobsManagerConfig","workerUrl","repositoryType","jobExecutionListeners","afterJobExecutionPromiseResolves","jobInstancesToTerminate","useWorker","initWorker","initRepository","registerJobs","jobLauncher","serializeData","getJsonReviver","getJsonReplacer","getJobExecutionProgress","saveJobExecutionFlag","removeJobInstance","_arguments","argsDeserializer","addListener","onJobFatalError","sensitivityAnalysisJob","probabilisticSensitivityAnalysisJob","setBatchSize","registerJob","registerExecutionListener","promiseResolve","_rules","model","_minMaxRule","_maxMinRule","_minMinRule","_maxMaxRule","currentRuleName","flipPair","addRule","ExpectedValueMaximizationRule","ExpectedValueMinimizationRule","MaxiMinRule","MaxiMaxRule","MiniMinRule","MiniMaxRule","minMax","MinMaxRule","maxMin","MaxMinRule","addFlipPair","minMin","MinMinRule","maxMax","MaxMaxRule","flipped","setDefaultCriterion1Weight","decisionPolicy","trace","time","setPayoffIndex","setDecisionPolicy","computePayoff","computeOptimal","clearDecisionPolicy","computedBaseProbability","rule1","rule2","_objectiveRule","_ObjectiveRule","NAME","probabilityToEnter","cValue","computedPayoff","basePayoff","_expectedValueMaximizationRule","_expectedValueMinimizationRule","_maxiMaxRule","_maxiMinRule","_miniMaxRule","_miniMinRule","_multiCriteriaRule","_MultiCriteriaRule","bestChildPayoff","bestCount","worstChildPayoff","worstCount","optimalEdge","maxBy","minBy","MultiCriteriaRule","criterion1Weight","aggregatedPayoff","childrenPayoff","selectedIndexes","bestChild","basePayoffs","childCombinedPayoff","baseProbability","sumweight","ep","div","computeCombinedPayoff","combinedPayoff","ObjectiveRule","decisionNode","childrenPayoffs","best","makeDecision","_makeDecision","worstChild","childPayoff","modifyChanceProbability","fieldPath","computedBasePayoff","_operation","FlipSubtree","_Operation","$NAME","isApplicable","grandchildrenEdgeLabelsSet","grandchildrenNumber","grandchildrenEdgeLabels","childrenEdgeLabelsSet","child","has","trim","ge","rootClone","cloneSubtree","oldChildrenNumber","oldGrandChildrenNumber","childrenNumber","grandChildrenNumber","callbacksDisabled","childX","location","x","topY","y","stepY","removeNode","Point","addNode","j","grandChild","grandChildEdge","attachSubtree","divideGrandChildEdgeProbability","_normalizeProbabilitiesAfterFlip","_fireNodeAddedCallback","newProbabilitySum","parseInt","rest","Operation","_flipSubtree","operations","operationByName","registerOperation","operation","op","Decision","children","indent","toDecisionString","keyProperty","$id","extended","childrenRes","_decision","optimalForRuleName","collect","decisions","nodeQueue","decisionNodes","shift","cd","ignoreId","prependId","additionalValidator","maxSafeInteger","Number","MAX_SAFE_INTEGER","PayoffValueValidator","ProbabilityValueValidator","_probabilityValueValidator","_payoffValueValidator","probabilityValueValidator","payoffValueValidator","validationResult","ValidationResult","validateNode","addError","setValueValidity","number","isNaN"],"mappings":"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","file":"sd-computations.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","import {Utils, log} from \"sd-utils\";\nimport {DataModel} from \"sd-model\";\nimport {ComputationsManager} from \"./computations-manager\";\nimport {ComputationsManagerConfig} from \"./computations-manager\";\n\n\n\nexport class ComputationsEngineConfig extends ComputationsManagerConfig{\n    logLevel = 'warn';\n    constructor(custom) {\n        super();\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/**\n * Entry point class for standalone computation workers\n */\nexport class ComputationsEngine extends ComputationsManager{\n\n    global = Utils.getGlobalObject();\n    isWorker = Utils.isWorker();\n\n    constructor(config, data){\n        super(config, data);\n\n        if(this.isWorker) {\n            this.jobsManger.registerJobExecutionListener({\n                beforeJob: (jobExecution)=>{\n                    this.reply('beforeJob', jobExecution.getDTO());\n                },\n\n                afterJob: (jobExecution)=>{\n                    this.reply('afterJob', jobExecution.getDTO());\n                }\n            });\n\n            var instance = this;\n            this.queryableFunctions = {\n                runJob: function(jobName, jobParametersValues, dataDTO){\n                    // console.log(jobName, jobParameters, serializedData);\n                    var data = new DataModel(dataDTO);\n                    instance.runJob(jobName, jobParametersValues, data);\n                },\n                executeJob: function(jobExecutionId){\n                    instance.jobsManger.execute(jobExecutionId).catch(e=>{\n                        instance.reply('jobFatalError', jobExecutionId, Utils.getErrorDTO(e));\n                    })\n                },\n                recompute: function(dataDTO, ruleName, evalCode, evalNumeric){\n                    if(ruleName){\n                        instance.objectiveRulesManager.setCurrentRuleByName(ruleName);\n                    }\n                    var allRules = !ruleName;\n                    var data = new DataModel(dataDTO);\n                    instance._checkValidityAndRecomputeObjective(data, allRules, evalCode, evalNumeric)\n                    this.reply('recomputed', data.getDTO());\n                }\n            };\n\n            global.onmessage = function(oEvent) {\n                if (oEvent.data instanceof Object && oEvent.data.hasOwnProperty('queryMethod') && oEvent.data.hasOwnProperty('queryArguments')) {\n                    instance.queryableFunctions[oEvent.data.queryMethod].apply(self, oEvent.data.queryArguments);\n                } else {\n                    instance.defaultReply(oEvent.data);\n                }\n            };\n        }\n    }\n\n\n\n    setConfig(config) {\n        super.setConfig(config);\n        if(this.config.logLevel){\n            this.setLogLevel(this.config.logLevel);\n        }\n\n        return this;\n    }\n\n    setLogLevel(level){\n        log.setLevel(level)\n    }\n\n    defaultReply(message) {\n        this.reply('test', message);\n    }\n\n    reply() {\n        if (arguments.length < 1) {\n            throw new TypeError('reply - not enough arguments');\n        }\n        this.global.postMessage({\n            'queryMethodListener': arguments[0],\n            'queryMethodArguments': Array.prototype.slice.call(arguments, 1)\n        });\n    }\n}\n\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {Utils} from \"sd-utils\";\nimport {ObjectiveRulesManager} from \"./objective/objective-rules-manager\";\nimport {TreeValidator} from \"./validation/tree-validator\";\nimport {OperationsManager} from \"./operations/operations-manager\";\nimport {JobsManager} from \"./jobs/jobs-manager\";\nimport {ExpressionsEvaluator} from \"./expressions-evaluator\";\nimport {JobInstanceManager} from \"./jobs/job-instance-manager\";\nimport {domain as model} from \"sd-model\";\nimport {Policy} from \"./policies/policy\";\nimport {McdmWeightValueValidator} from \"./validation/mcdm-weight-value-validator\";\n\n/** Computation manager configuration object\n * @param custom configuration object to extend\n */\nexport class ComputationsManagerConfig {\n\n    /**\n     * logging level\n     * */\n    logLevel = null;\n\n    /**\n     * default objective rule name\n     * */\n    ruleName = null;\n\n    /**\n     * worker configuration object\n     * */\n    worker = {\n        /**\n         * delegate tree recomputation to worker\n         * */\n        delegateRecomputation: false,\n\n        /**\n         * worker url\n         * */\n        url: null\n    };\n\n    /**\n     * job repository to use, available types: idb, timeout, simple\n    * */\n    jobRepositoryType = 'idb';\n\n    /**\n     * clear repository after init\n     * */\n    clearRepository = false;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/** Computation manager\n* @param {object} config\n* @param {DataModel} data model object\n* */\nexport class ComputationsManager {\n\n    data;\n    expressionEngine;\n    expressionsEvaluator;\n    objectiveRulesManager;\n    operationsManager;\n    jobsManger;\n\n    treeValidator;\n\n    constructor(config, data = null) {\n        this.data = data;\n        this.setConfig(config);\n        this.expressionEngine = new ExpressionEngine();\n        this.expressionsEvaluator = new ExpressionsEvaluator(this.expressionEngine);\n        this.objectiveRulesManager = new ObjectiveRulesManager(this.expressionEngine, this.config.ruleName);\n        this.operationsManager = new OperationsManager(this.data, this.expressionEngine);\n        this.jobsManger = new JobsManager(this.expressionsEvaluator, this.objectiveRulesManager, {\n            workerUrl: this.config.worker.url,\n            repositoryType: this.config.jobRepositoryType,\n            clearRepository: this.config.clearRepository\n        });\n        this.treeValidator = new TreeValidator(this.expressionEngine);\n        this.mcdmWeightValueValidator = new McdmWeightValueValidator();\n    }\n\n    setConfig(config) {\n        this.config = new ComputationsManagerConfig(config);\n        return this;\n    }\n\n    setData(data){\n        this.data = data;\n        this.operationsManager.setData(data);\n    }\n\n\n    /** Alias function for checkValidityAndRecomputeObjective*/\n    recompute(){\n        return this.checkValidityAndRecomputeObjective(...arguments);\n    }\n\n    /**\n     * Checks validity of data model and recomputes objective rules\n     * @returns promise\n     * @param {boolean} allRules - recompute all objective rules\n     * @param {boolean} evalCode - evaluate code\n     * @param {boolean} evalNumeric - evaluate numeric expressions\n     */\n    checkValidityAndRecomputeObjective(allRules, evalCode = false, evalNumeric = true) {\n        return Promise.resolve().then(()=> {\n            if (this.config.worker.delegateRecomputation) {\n                var params = {\n                    evalCode: evalCode,\n                    evalNumeric: evalNumeric\n                };\n                if (!allRules) {\n                    params.ruleName = this.getCurrentRule().name;\n                }\n                return this.runJob(\"recompute\", params, this.data, false).then((jobExecution)=> {\n                    var d = jobExecution.getData();\n                    this.data.updateFrom(d)\n                })\n            }\n            return this._checkValidityAndRecomputeObjective(this.data, allRules, evalCode, evalNumeric);\n        }).then(()=> {\n            this.updateDisplayValues(this.data);\n        })\n\n    }\n\n    _checkValidityAndRecomputeObjective(data, allRules, evalCode = false, evalNumeric = true) {\n\n        this.objectiveRulesManager.updateDefaultCriterion1Weight(data.defaultCriterion1Weight);\n        data.validationResults = [];\n\n        if (evalCode || evalNumeric) {\n            this.expressionsEvaluator.evalExpressions(data, evalCode, evalNumeric);\n        }\n\n        var weightValid = this.mcdmWeightValueValidator.validate(data.defaultCriterion1Weight);\n        var multiCriteria = this.getCurrentRule().multiCriteria;\n\n\n        data.getRoots().forEach(root=> {\n            var vr = this.treeValidator.validate(data.getAllNodesInSubtree(root));\n            data.validationResults.push(vr);\n            if (vr.isValid() && (!multiCriteria || weightValid)) {\n                this.objectiveRulesManager.recomputeTree(root, allRules);\n            }\n        });\n    }\n\n    /**\n     * @returns {ObjectiveRule} current objective rule\n     * */\n    getCurrentRule() {\n        return this.objectiveRulesManager.currentRule;\n    }\n\n    /**\n     * Sets current objective rule\n     * @param {string} ruleName - name of objective rule\n     * */\n    setCurrentRuleByName(ruleName) {\n        this.config.ruleName = ruleName;\n        return this.objectiveRulesManager.setCurrentRuleByName(ruleName)\n    }\n\n    /**\n     *\n     *  @param {string} jobName\n     *  @returns {Job}\n     * */\n    getJobByName(jobName) {\n        return this.jobsManger.getJobByName(jobName);\n    }\n\n    /**\n     * @returns array of operations applicable to the given object (node or edge)\n     * @param object\n     */\n    operationsForObject(object) {\n        return this.operationsManager.operationsForObject(object);\n    }\n\n\n    /**\n     * Checks validity of data model without recomputation and revalidation\n     * @param {DataModel} data to check\n     */\n\n    isValid(data) {\n        var data = data || this.data;\n        return data.validationResults.every(vr=>vr.isValid());\n    }\n    /**\n     * Run job\n     * @param {string} name - job name\n     * @param {object} jobParamsValues - job parameter values object\n     * @param {DataModel} data model\n     * @param {boolean} resolvePromiseAfterJobIsLaunched - immediately resolve promise with still running JobExecution\n     * @returns {Promise} resolving to JobExecution\n     */\n    runJob(name, jobParamsValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        return this.jobsManger.run(name, jobParamsValues, data || this.data, resolvePromiseAfterJobIsLaunched)\n    }\n\n    /**\n     * Run job using JobInstanceManager\n     * @param {string} name - job name\n     * @param {object} jobParamsValues - job parameter values object\n     * @param {JobInstanceManagerConfig} jobInstanceManagerConfig - JobInstanceManager configuration\n     * @returns {Promise} resolving to JobInstanceManager\n     */\n    runJobWithInstanceManager(name, jobParamsValues, jobInstanceManagerConfig) {\n        return this.runJob(name, jobParamsValues).then(je=> {\n            return new JobInstanceManager(this.jobsManger, je, jobInstanceManagerConfig);\n        })\n    }\n\n    getObjectiveRules() {\n        return this.objectiveRulesManager.rules;\n    }\n\n    getObjectiveRuleByName(ruleName){\n        return this.objectiveRulesManager.getObjectiveRuleByName(ruleName)\n    }\n\n    isRuleName(ruleName) {\n        return this.objectiveRulesManager.isRuleName(ruleName)\n    }\n\n\n    flipCriteria(data){\n        data = data || this.data;\n        data.reversePayoffs();\n        let tmp = data.weightLowerBound;\n        data.weightLowerBound = this.flip(data.weightUpperBound);\n        data.weightUpperBound = this.flip(tmp);\n        data.defaultCriterion1Weight = this.flip(data.defaultCriterion1Weight);\n        this.objectiveRulesManager.flipRule();\n        return this.checkValidityAndRecomputeObjective(false);\n    }\n\n    flip(a){\n        if(a == Infinity){\n            return 0;\n        }\n\n        if(a == 0){\n            return Infinity;\n        }\n\n        return this.expressionEngine.serialize(ExpressionEngine.divide(1, a))\n    }\n\n    updateDisplayValues(data, policyToDisplay = null) {\n        data = data || this.data;\n        if (policyToDisplay) {\n            return this.displayPolicy(data, policyToDisplay);\n        }\n\n        data.nodes.forEach(n=> {\n            this.updateNodeDisplayValues(n);\n        });\n        data.edges.forEach(e=> {\n            this.updateEdgeDisplayValues(e);\n        })\n    }\n\n    updateNodeDisplayValues(node) {\n        node.$DISPLAY_VALUE_NAMES.forEach(n=>node.displayValue(n, this.objectiveRulesManager.getNodeDisplayValue(node, n)));\n    }\n\n    updateEdgeDisplayValues(e) {\n        e.$DISPLAY_VALUE_NAMES.forEach(n=>e.displayValue(n, this.objectiveRulesManager.getEdgeDisplayValue(e, n)));\n    }\n\n    displayPolicy(policyToDisplay, data) {\n\n\n        data = data || this.data;\n        data.nodes.forEach(n=> {\n            n.clearDisplayValues();\n        });\n        data.edges.forEach(e=> {\n            e.clearDisplayValues();\n        });\n        data.getRoots().forEach((root)=>this.displayPolicyForNode(root, policyToDisplay));\n    }\n\n    displayPolicyForNode(node, policy) {\n        if (node instanceof model.DecisionNode) {\n            var decision = Policy.getDecision(policy, node);\n            //console.log(decision, node, policy);\n            if (decision) {\n                node.displayValue('optimal', true)\n                var childEdge = node.childEdges[decision.decisionValue];\n                childEdge.displayValue('optimal', true)\n                return this.displayPolicyForNode(childEdge.childNode, policy)\n            }\n            return;\n        } else if(node instanceof model.ChanceNode){\n            node.displayValue('optimal', true);\n            node.childEdges.forEach(e=>{\n                e.displayValue('optimal', true);\n                this.displayPolicyForNode(e.childNode, policy)\n            })\n        }else if(node instanceof model.TerminalNode){\n            node.displayValue('optimal', true);\n        }\n\n\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nexport class ComputationsUtils{\n\n    static sequence(min, max, length) {\n        var extent = ExpressionEngine.subtract(max, min);\n        var result = [min];\n        var steps = length - 1;\n        if(!steps){\n            return result;\n        }\n        var step = ExpressionEngine.divide(extent,length - 1);\n        var curr = min;\n        for (var i = 0; i < length - 2; i++) {\n            curr = ExpressionEngine.add(curr, step);\n            result.push(ExpressionEngine.toFloat(curr));\n        }\n        result.push(max);\n        return result;\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {domain as model} from 'sd-model'\nimport {Utils, log} from 'sd-utils'\n\n/*Evaluates code and expressions in trees*/\nexport class ExpressionsEvaluator {\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine = expressionEngine;\n    }\n\n    clear(data){\n        data.nodes.forEach(n=>{\n            n.clearComputedValues();\n        });\n        data.edges.forEach(e=>{\n            e.clearComputedValues();\n        });\n    }\n\n    clearTree(data, root){\n        data.getAllNodesInSubtree(root).forEach(n=>{\n            n.clearComputedValues();\n            n.childEdges.forEach(e=>{\n                e.clearComputedValues();\n            })\n        })\n    }\n\n    evalExpressions(data, evalCode=true, evalNumeric=true, initScopes=false){\n        log.debug('evalExpressions evalCode:'+evalCode+' evalNumeric:'+evalNumeric);\n        if(evalCode){\n            this.evalGlobalCode(data);\n        }\n\n        data.getRoots().forEach(n=>{\n            this.clearTree(data, n);\n            this.evalExpressionsForNode(data, n, evalCode, evalNumeric,initScopes);\n        });\n\n    }\n\n    evalGlobalCode(data){\n        data.clearExpressionScope();\n        data.$codeDirty = false;\n        try{\n            data.$codeError = null;\n            this.expressionEngine.eval(data.code, false, data.expressionScope);\n        }catch (e){\n            data.$codeError = e;\n        }\n    }\n\n    evalPayoff(edge, index = 0) {\n        if (ExpressionEngine.hasAssignmentExpression(edge.payoff[index])) {\n            return null;\n        }\n        return this.expressionEngine.eval(edge.payoff[index], true, edge.parentNode.expressionScope);\n    }\n\n    evalExpressionsForNode(data, node, evalCode=true, evalNumeric=true, initScope=false) {\n        if(!node.expressionScope || initScope || evalCode){\n            this.initScopeForNode(data, node);\n        }\n        if(evalCode){\n            node.$codeDirty = false;\n            if(node.code){\n                try{\n                    node.$codeError = null;\n                    this.expressionEngine.eval(node.code, false, node.expressionScope);\n                }catch (e){\n                    node.$codeError = e;\n                    log.debug(e);\n                }\n            }\n        }\n\n        if(evalNumeric){\n            var scope = node.expressionScope;\n            var probabilitySum=ExpressionEngine.toNumber(0);\n            var hashEdges= [];\n            var invalidProb = false;\n\n            node.childEdges.forEach(e=>{\n                e.payoff.forEach((rawPayoff, payoffIndex)=> {\n                    let path = 'payoff[' + payoffIndex + ']';\n                    if(e.isFieldValid(path, true, false)){\n                        try{\n                            e.computedValue(null, path, this.evalPayoff(e, payoffIndex))\n                        }catch (err){\n                            //   Left empty intentionally\n                        }\n                    }\n                });\n\n\n\n                if(node instanceof model.ChanceNode){\n                    if(ExpressionEngine.isHash(e.probability)){\n                        hashEdges.push(e);\n                        return;\n                    }\n\n                    if(ExpressionEngine.hasAssignmentExpression(e.probability)){ //It should not occur here!\n                        log.warn(\"evalExpressionsForNode hasAssignmentExpression!\", e);\n                        return null;\n                    }\n\n                    if(e.isFieldValid('probability', true, false)){\n                        try{\n                            var prob = this.expressionEngine.eval(e.probability, true, scope);\n                            e.computedValue(null, 'probability', prob);\n                            probabilitySum = ExpressionEngine.add(probabilitySum, prob);\n                        }catch (err){\n                            invalidProb = true;\n                        }\n                    }else{\n                        invalidProb = true;\n                    }\n                }\n\n            });\n\n\n            if(node instanceof model.ChanceNode){\n                var computeHash = hashEdges.length && !invalidProb && (probabilitySum.compare(0) >= 0 && probabilitySum.compare(1) <= 0);\n\n                if(computeHash) {\n                    var hash = ExpressionEngine.divide(ExpressionEngine.subtract(1, probabilitySum), hashEdges.length);\n                    hashEdges.forEach(e=> {\n                        e.computedValue(null, 'probability', hash);\n                    });\n                }\n            }\n\n            node.childEdges.forEach(e=>{\n                this.evalExpressionsForNode(data, e.childNode, evalCode, evalNumeric, initScope);\n            });\n        }\n    }\n\n    initScopeForNode(data, node){\n        var parent = node.$parent;\n        var parentScope = parent?parent.expressionScope : data.expressionScope;\n        node.expressionScope = Utils.cloneDeep(parentScope);\n    }\n}\n","export * from './computations-engine'\nexport * from './computations-manager'\nexport * from './expressions-evaluator'\nexport * from './jobs/index'\n\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\n\nexport class LeagueTableJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"weightLowerBound\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v <= JobParameterDefinition.computeNumberExpression(allVals['weightUpperBound'])\n        }));\n        this.definitions.push(new JobParameterDefinition(\"defaultWeight\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v >= JobParameterDefinition.computeNumberExpression(allVals['weightLowerBound']) && v <= JobParameterDefinition.computeNumberExpression(allVals['weightUpperBound'])\n        }));\n        this.definitions.push(new JobParameterDefinition(\"weightUpperBound\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v >= JobParameterDefinition.computeNumberExpression(allVals['weightLowerBound'])\n        }));\n\n    }\n\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            nameOfCriterion1: 'Cost',\n            nameOfCriterion2: 'Effect',\n            extendedPolicyDescription: true,\n            weightLowerBound: 0,\n            defaultWeight: 0,\n            weightUpperBound: Infinity,\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Policy} from \"../../../policies/policy\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {LeagueTableJobParameters} from \"./league-table-job-parameters\";\n\n\nexport class LeagueTableJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"league-table\", jobRepository, expressionsEvaluator, objectiveRulesManager);\n        this.initSteps();\n    }\n\n    initSteps() {\n        this.calculateStep = new CalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        this.addStep(this.calculateStep);\n    }\n\n    createJobParameters(values) {\n        return new LeagueTableJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders = true) {\n        var result = [];\n        if (withHeaders) {\n            var headers = ['policy_id', 'policy', jobResult.payoffNames[0], jobResult.payoffNames[1], 'dominated_by', 'extended-dominated_by', 'incratio', 'optimal', 'optimal_for_default_weight'];\n            result.push(headers);\n        }\n\n        jobResult.rows.forEach(row => {\n            row.policies.forEach(policy=> {\n                var rowCells = [\n                    row.id,\n                    Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription),\n                    row.payoffs[1],\n                    row.payoffs[0],\n                    row.dominatedBy,\n                    row.extendedDominatedBy === null ? null : row.extendedDominatedBy[0] + ', ' + row.extendedDominatedBy[1],\n                    row.incratio,\n                    row.optimal,\n                    row.optimalForDefaultWeight\n                ];\n                result.push(rowCells);\n            })\n        });\n\n        return result;\n    }\n}\n","import {Step} from \"../../../engine/step\";\nimport {JOB_STATUS} from \"../../../engine/job-status\";\nimport {PoliciesCollector} from \"../../../../policies/policies-collector\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {TreeValidator} from \"../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../policies/policy\";\n\nexport class CalculateStep extends Step {\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var data = stepExecution.getData();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let rule = this.objectiveRulesManager.currentRule;\n        var treeRoot = data.getRoots()[0];\n        var policiesCollector = new PoliciesCollector(treeRoot);\n\n        var policies = policiesCollector.policies;\n\n\n        var payoffCoeffs = this.payoffCoeffs = rule.payoffCoeffs;\n\n        this.expressionsEvaluator.evalExpressions(data);\n        var vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n\n        if (!vr.isValid()) {\n            return stepExecution;\n        }\n\n        var compare = (a, b)=>(-payoffCoeffs[0] *  (b.payoffs[0] - a.payoffs[0])) || (-payoffCoeffs[1] *  (a.payoffs[1] - b.payoffs[1]));\n\n        var rows = policies.map(policy => {\n            this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n            return {\n                policies: [policy],\n                payoffs: treeRoot.computedValue(ruleName, 'payoff').slice(),\n                dominatedBy: null,\n                extendedDominatedBy: null,\n                incratio: null,\n                optimal: false,\n                optimalForDefaultWeight: false\n            }\n        }).sort(compare);\n\n        rows = rows.reduce((previousValue, currentValue, index, array)=>{\n            if(!previousValue.length){\n                return [currentValue]\n            }\n\n            let prev = previousValue[previousValue.length-1];\n            if(compare(prev, currentValue) == 0){\n                prev.policies.push(...currentValue.policies);\n                return previousValue\n            }\n            return previousValue.concat(currentValue)\n        }, []);\n\n        rows.sort((a, b)=>(payoffCoeffs[0] *  (a.payoffs[0] - b.payoffs[0])) || (-payoffCoeffs[1] *   (a.payoffs[1] - b.payoffs[1])));\n        rows.forEach((r, i)=> {\n            r.id = i+1;\n        });\n        // rows.sort(compare);\n        rows.sort((a, b)=>(-payoffCoeffs[0] *  (a.payoffs[0] - b.payoffs[0])) || (-payoffCoeffs[1] *   (a.payoffs[1] - b.payoffs[1])));\n\n        let bestCost = -payoffCoeffs[1] * Infinity,\n            bestCostRow = null;\n\n        let cmp= (a, b) => a > b;\n        if(payoffCoeffs[1]<0){\n            cmp= (a, b) => a < b;\n        }\n\n        rows.forEach((r, i)=> {\n            if (cmp(r.payoffs[1], bestCost)) {\n                bestCost = r.payoffs[1];\n                bestCostRow = r;\n            } else if(bestCostRow) {\n                r.dominatedBy = bestCostRow.id;\n            }\n        });\n\n        cmp= (a, b) => a < b;\n        if(payoffCoeffs[0] > 0 && payoffCoeffs[1] < 0){\n            cmp= (a, b) => a < b;\n        }else if(payoffCoeffs[0] < 0 && payoffCoeffs[1] > 0){\n            cmp= (a, b) => a < b;\n        }else if(payoffCoeffs[1]<0){\n            cmp= (a, b) => a > b;\n        }\n\n        let prev2NotDominated = null;\n\n\n        rows.filter(r=>!r.dominatedBy).sort((a, b)=>(  payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0]))).forEach((r, i, arr)=> {\n            if (!i) {\n                r.incratio = 0;\n                return;\n            }\n\n            let prev = arr[i - 1];\n\n            r.incratio = this.computeICER(r, prev);\n            if (i < 2) {\n                return;\n            }\n\n            if(!prev2NotDominated){\n                prev2NotDominated = arr[i - 2];\n            }\n\n            if(cmp(r.incratio,prev.incratio)){\n                prev.incratio = null;\n                prev.extendedDominatedBy = [prev2NotDominated.id, r.id] ;\n                r.incratio = this.computeICER(r, prev2NotDominated);\n            }else{\n                prev2NotDominated = prev;\n            }\n        });\n\n        let weightLowerBound = params.value(\"weightLowerBound\");\n        let defaultWeight = params.value(\"defaultWeight\");\n        let weightUpperBound = params.value(\"weightUpperBound\");\n\n        //mark optimal for weight in [weightLowerBound, weightUpperBound] and optimal for default Weight\n        let lastLELower = null;\n        let lastLELowerDef = null;\n        rows.slice().filter(r=>!r.dominatedBy && !r.extendedDominatedBy).sort((a, b) => {\n            let sub = a.incratio - b.incratio;\n            return sub ? sub : payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0])\n        }).forEach((row, i, arr)=>{\n\n            if(row.incratio < weightLowerBound){\n                lastLELower  = row;\n            }\n            if(row.incratio < defaultWeight){\n                lastLELowerDef  = row;\n            }\n\n            row.optimal = row.incratio >= weightLowerBound && row.incratio <= weightUpperBound;\n            row.optimalForDefaultWeight = row.incratio == defaultWeight;\n\n        });\n        if(lastLELower){\n            lastLELower.optimal = true;\n        }\n\n        if(lastLELowerDef){\n            lastLELowerDef.optimalForDefaultWeight = true;\n        }\n\n        rows.forEach(row=>{\n            row.payoffs[0] =  ExpressionEngine.toFloat(row.payoffs[0]);\n            row.payoffs[1] =  ExpressionEngine.toFloat(row.payoffs[1]);\n            row.incratio = row.incratio === null ? null : ExpressionEngine.toFloat(row.incratio);\n        });\n\n        jobResult.data = {\n            payoffNames: data.payoffNames.slice(),\n            payoffCoeffs : payoffCoeffs,\n            rows: rows.sort((a, b)=>(a.id - b.id)),\n            weightLowerBound: ExpressionEngine.toFloat(weightLowerBound),\n            defaultWeight: ExpressionEngine.toFloat(defaultWeight),\n            weightUpperBound: ExpressionEngine.toFloat(weightUpperBound)\n        };\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n\n    computeICER(r, prev){\n        let d = ExpressionEngine.subtract(r.payoffs[0], prev.payoffs[0]);\n        let n = ExpressionEngine.subtract(r.payoffs[1], prev.payoffs[1]);\n        if (d == 0){\n            if(n<0){\n                return - Infinity;\n            }\n            return Infinity;\n        }\n        return Math.abs(ExpressionEngine.divide(n, d));\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\nexport class RecomputeJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING).set('required', false));\n        this.definitions.push(new JobParameterDefinition(\"evalCode\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"evalNumeric\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            ruleName: null, //recompute all rules\n            evalCode: true,\n            evalNumeric: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Step} from \"../../engine/step\";\nimport {JOB_STATUS} from \"../../engine/job-status\";\nimport {TreeValidator} from \"../../../validation/tree-validator\";\nimport {BatchStep} from \"../../engine/batch/batch-step\";\nimport {RecomputeJobParameters} from \"./recompute-job-parameters\";\nimport {Job} from \"../../engine/job\";\n\nexport class RecomputeJob extends Job {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"recompute\", jobRepository);\n        this.isRestartable = false;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(execution) {\n        var data = execution.getData();\n        var params = execution.jobParameters;\n        var ruleName = params.value(\"ruleName\");\n        var allRules = !ruleName;\n        if(ruleName){\n            this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        }\n        this.checkValidityAndRecomputeObjective(data, allRules, params.value(\"evalCode\"), params.value(\"evalNumeric\"))\n        return execution;\n    }\n\n    checkValidityAndRecomputeObjective(data, allRules, evalCode, evalNumeric) {\n        data.validationResults = [];\n\n        if(evalCode||evalNumeric){\n            this.expressionsEvaluator.evalExpressions(data, evalCode, evalNumeric);\n        }\n\n        data.getRoots().forEach(root=> {\n            var vr = this.treeValidator.validate(data.getAllNodesInSubtree(root));\n            data.validationResults.push(vr);\n            if (vr.isValid()) {\n                this.objectiveRulesManager.recomputeTree(root, allRules);\n            }\n        });\n    }\n\n    createJobParameters(values) {\n        return new RecomputeJobParameters(values);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class SensitivityAnalysisJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"min\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"max\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 2),\n            ], 1, Infinity, false,\n            v => v[\"min\"] < v[\"max\"],\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ))\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            extendedPolicyDescription: true,\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {SensitivityAnalysisJobParameters} from \"./sensitivity-analysis-job-parameters\";\nimport {PrepareVariablesStep} from \"./steps/prepare-variables-step\";\nimport {InitPoliciesStep} from \"./steps/init-policies-step\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {Policy} from \"../../../../policies/policy\";\nimport {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\n\nexport class SensitivityAnalysisJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize=5) {\n        super(\"sensitivity-analysis\", jobRepository, expressionsEvaluator, objectiveRulesManager);\n        this.batchSize = 5;\n        this.initSteps();\n    }\n\n    initSteps(){\n        this.addStep(new PrepareVariablesStep(this.jobRepository, this.expressionsEvaluator.expressionEngine));\n        this.addStep(new InitPoliciesStep(this.jobRepository));\n        this.calculateStep = new CalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager, this.batchSize);\n        this.addStep(this.calculateStep);\n    }\n\n    createJobParameters(values) {\n        return new SensitivityAnalysisJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n    setBatchSize(batchSize){\n        this.batchSize = batchSize;\n        this.calculateStep.chunkSize = batchSize;\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n        var result = [];\n        if(withHeaders){\n            var headers = ['policy_number', 'policy'];\n            jobResult.variableNames.forEach(n=>headers.push(n));\n            headers.push('payoff');\n            result.push(headers);\n        }\n\n        var roundVariables = !!jobParameters.values.roundVariables;\n        if(roundVariables){\n            this.roundVariables(jobResult);\n        }\n\n        jobResult.rows.forEach(row => {\n            var policy = jobResult.policies[row.policyIndex];\n            var rowCells = [row.policyIndex+1, Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription)];\n            row.variables.forEach(v=> rowCells.push(v));\n            rowCells.push(row.payoff);\n            result.push(rowCells);\n\n            if(row._variables){ //revert original variables\n                row.variables = row._variables;\n                delete row._variables;\n            }\n        });\n\n        return result;\n    }\n\n    roundVariables(jobResult){\n        var uniqueValues = jobResult.variableNames.map(()=>new Set());\n\n        jobResult.rows.forEach(row => {\n            row._variables = row.variables.slice(); // save original row variables\n            row.variables.forEach((v,i)=> {\n                uniqueValues[i].add(v)\n            });\n        });\n\n        var uniqueValuesNo = uniqueValues.map((s)=>s.size);\n        var maxPrecision = 14;\n        var precision = 2;\n        var notReadyVariablesIndexes = jobResult.variableNames.map((v,i)=>i);\n        while(precision<=maxPrecision && notReadyVariablesIndexes.length){\n            uniqueValues = notReadyVariablesIndexes.map(()=>new Set());\n            jobResult.rows.forEach(row => {\n                notReadyVariablesIndexes.forEach((variableIndex, notReadyIndex)=>{\n\n                    var val = row._variables[variableIndex];\n                    val = Utils.round(val, precision);\n                    uniqueValues[notReadyIndex].add(val);\n\n                    row.variables[variableIndex] = val;\n                })\n            });\n\n            var newReadyIndexes = [];\n            uniqueValues.forEach((uniqueVals, notReadyIndex)=>{\n                var origUniqueCount = uniqueValuesNo[notReadyVariablesIndexes[notReadyIndex]] ;\n                if(origUniqueCount==uniqueVals.size){ //ready in previous iteration\n                    newReadyIndexes.push(notReadyIndex);\n                }\n            });\n            if(newReadyIndexes.length) { //revert values to prev iteration\n                newReadyIndexes.reverse();\n                newReadyIndexes.forEach(notReadyIndex=>{\n                    notReadyVariablesIndexes.splice(notReadyIndex, 1);\n                })\n            }\n            precision++;\n        }\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n\n        if (execution.stepExecutions.length <= 2) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[2].getProgress(execution.stepExecutions[2]);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize) {\n        super(\"calculate_step\", jobRepository, batchSize);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        var jobExecutionContext = stepExecution.getJobExecutionContext();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        var variableValues = jobResult.data.variableValues;\n        var variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n\n\n        if (!jobResult.data.rows) {\n            jobResult.data.rows = [];\n            jobResult.data.variableNames = variableNames;\n        }\n\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        var variableValues = jobResult.data.variableValues;\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n\n    processItem(stepExecution, item) {\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n        var failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        var data = stepExecution.getData();\n        var treeRoot = data.getRoots()[0];\n        var variableNames = stepExecution.executionContext.get(\"variableNames\");\n        var policies = stepExecution.getJobExecutionContext().get(\"policies\");\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n        variableNames.forEach((variableName, i)=> {\n            data.expressionScope[variableName] = item[i];\n        });\n\n        this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n        var vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n\n        var valid = vr.isValid();\n\n        if(!valid && failOnInvalidTree){\n            let errorData = {\n                variables: {}\n            };\n            variableNames.forEach((variableName, i)=> {\n                errorData.variables[variableName] = item[i];\n            });\n            throw new JobComputationException(\"computations\", errorData)\n        }\n\n        var payoffs = [];\n\n        policies.forEach(policy=> {\n            var payoff = 'n/a';\n            if (valid) {\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n            }\n            payoffs.push(payoff);\n        });\n\n        return {\n            policies: policies,\n            variables: item,\n            payoffs: payoffs\n        };\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var extendedPolicyDescription = params.value(\"extendedPolicyDescription\");\n\n        items.forEach(item=> {\n            if (!item) {\n                return;\n            }\n            item.policies.forEach((policy, i)=> {\n                var variables = item.variables.map(v => this.toFloat(v));\n\n                var payoff = item.payoffs[i];\n                var row = {\n                    policyIndex: i,\n                    variables: variables,\n                    payoff: Utils.isString(payoff) ? payoff : this.toFloat(payoff)\n                };\n                jobResult.data.rows.push(row);\n            })\n        })\n    }\n\n    postProcess(stepExecution, jobResult) {\n        delete jobResult.data.variableValues;\n    }\n\n\n    toFloat(v) {\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\n\nexport class InitPoliciesStep extends Step {\n    constructor(jobRepository) {\n        super(\"init_policies\", jobRepository);\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var data = stepExecution.getData();\n        var treeRoot = data.getRoots()[0];\n        var policiesCollector = new PoliciesCollector(treeRoot);\n\n        var policies = policiesCollector.policies;\n        stepExecution.getJobExecutionContext().put(\"policies\", policies);\n\n        if(!jobResult.data){\n            jobResult.data={}\n        }\n\n        jobResult.data.policies = policies;\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class PrepareVariablesStep extends Step {\n    constructor(jobRepository, expressionEngine) {\n        super(\"prepare_variables\", jobRepository);\n        this.expressionEngine = expressionEngine;\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n\n        var variableValues = [];\n        variables.forEach(v=> {\n            variableValues.push(ComputationsUtils.sequence(v.min, v.max, v.length));\n        });\n        variableValues = Utils.cartesianProductOf(variableValues);\n        jobResult.data={\n            variableValues: variableValues\n        };\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class ProbabilisticSensitivityAnalysisJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"numberOfRuns\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v > 0));\n\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"formula\", PARAMETER_TYPE.NUMBER_EXPRESSION)\n            ], 1, Infinity, false,\n            null,\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ))\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            extendedPolicyDescription: true,\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {ProbabilisticSensitivityAnalysisJobParameters} from \"./probabilistic-sensitivity-analysis-job-parameters\";\nimport {InitPoliciesStep} from \"../n-way/steps/init-policies-step\";\nimport {SensitivityAnalysisJob} from \"../n-way/sensitivity-analysis-job\";\nimport {ProbCalculateStep} from \"./steps/prob-calculate-step\";\nimport {ComputePolicyStatsStep} from \"./steps/compute-policy-stats-step\";\n\nexport class ProbabilisticSensitivityAnalysisJob extends SensitivityAnalysisJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize=5) {\n        super(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize);\n        this.name = \"probabilistic-sensitivity-analysis\";\n    }\n\n    initSteps() {\n        this.addStep(new InitPoliciesStep(this.jobRepository));\n        this.calculateStep = new ProbCalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager, this.batchSize);\n        this.addStep(this.calculateStep);\n        this.addStep(new ComputePolicyStatsStep(this.expressionsEvaluator.expressionEngine, this.objectiveRulesManager, this.jobRepository));\n    }\n\n    createJobParameters(values) {\n        return new ProbabilisticSensitivityAnalysisJobParameters(values);\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution) {\n\n        if (execution.stepExecutions.length <= 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[1].getProgress(execution.stepExecutions[1]);\n    }\n}\n","import {log, Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport class ComputePolicyStatsStep extends Step {\n    constructor(expressionEngine, objectiveRulesManager, jobRepository) {\n        super(\"compute_policy_stats\", jobRepository);\n        this.expressionEngine = expressionEngine;\n        this.objectiveRulesManager = objectiveRulesManager;\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var numberOfRuns = params.value(\"numberOfRuns\");\n        var ruleName = params.value(\"ruleName\");\n\n        let rule = this.objectiveRulesManager.ruleByName[ruleName];\n\n\n        var payoffsPerPolicy = jobResult.data.policies.map(()=>[]);\n\n        jobResult.data.rows.forEach(row=> {\n            payoffsPerPolicy[row.policyIndex].push(Utils.isString(row.payoff) ? 0 : row.payoff)\n        });\n\n        log.debug('payoffsPerPolicy', payoffsPerPolicy, jobResult.data.rows.length, rule.maximization);\n\n        jobResult.data.medians = payoffsPerPolicy.map(payoffs=>ExpressionEngine.median(payoffs));\n        jobResult.data.standardDeviations = payoffsPerPolicy.map(payoffs=>ExpressionEngine.std(payoffs));\n\n        if (rule.maximization) {\n            jobResult.data.policyIsBestProbabilities = jobResult.data.policyToHighestPayoffCount.map(v=>ExpressionEngine.toFloat(ExpressionEngine.divide(v, numberOfRuns)));\n        } else {\n            jobResult.data.policyIsBestProbabilities = jobResult.data.policyToLowestPayoffCount.map(v=>ExpressionEngine.toFloat(ExpressionEngine.divide(v, numberOfRuns)));\n        }\n\n        jobResult.data.policyToHighestPayoffCount = jobResult.data.policyToHighestPayoffCount.map(v=>ExpressionEngine.toFloat(v));\n        jobResult.data.policyToLowestPayoffCount = jobResult.data.policyToLowestPayoffCount.map(v=>ExpressionEngine.toFloat(v));\n\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {CalculateStep} from \"../../n-way/steps/calculate-step\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\n\nexport class ProbCalculateStep extends CalculateStep {\n\n    init(stepExecution, jobResult) {\n        var jobExecutionContext = stepExecution.getJobExecutionContext();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        var variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n\n        if(!jobResult.data.rows){\n            jobResult.data.rows = [];\n            jobResult.data.variableNames = variableNames;\n            jobResult.data.expectedValues = Utils.fill(new Array(jobResult.data.policies.length), 0);\n            jobResult.data.policyToHighestPayoffCount = Utils.fill(new Array(jobResult.data.policies.length), 0);\n            jobResult.data.policyToLowestPayoffCount = Utils.fill(new Array(jobResult.data.policies.length), 0);\n        }\n\n        return params.value(\"numberOfRuns\");\n    }\n\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n        var data = stepExecution.getData();\n        var variableValues = [];\n        for(var runIndex=0; runIndex<chunkSize; runIndex++){\n            var singleRunVariableValues = [];\n            var errors = [];\n            variables.forEach(v=> {\n                try{\n                    var evaluated = this.expressionsEvaluator.expressionEngine.eval(v.formula, true, Utils.cloneDeep(data.expressionScope));\n                    singleRunVariableValues.push(ExpressionEngine.toFloat(evaluated));\n                }catch(e){\n                    errors.push({\n                        variable: v,\n                        error: e\n                    });\n                }\n\n            });\n            if(errors.length) {\n                var errorData = {variables: []};\n                errors.forEach(e=>{\n                    errorData.variables[e.variable.name] = e.error.message;\n                });\n                throw new JobComputationException(\"param-computation\", errorData)\n            }\n            variableValues.push(singleRunVariableValues)\n        }\n\n        return variableValues;\n    }\n\n    processItem(stepExecution, item, currentItemCount, jobResult) {\n        var r = super.processItem(stepExecution, item, jobResult);\n\n        var params = stepExecution.getJobParameters();\n        var numberOfRuns = params.value(\"numberOfRuns\");\n        var policies = stepExecution.getJobExecutionContext().get(\"policies\");\n\n        this.updatePolicyStats(r, policies, numberOfRuns, jobResult);\n\n        return r;\n    }\n\n    updatePolicyStats(r, policies, numberOfRuns, jobResult){\n        var highestPayoff = -Infinity;\n        var lowestPayoff = Infinity;\n        var bestPolicyIndexes = [];\n        var worstPolicyIndexes = [];\n\n        var zeroNum = ExpressionEngine.toNumber(0);\n\n        policies.forEach((policy,i)=>{\n            let payoff = r.payoffs[i];\n            if(Utils.isString(payoff)){\n                payoff = zeroNum;\n            }\n            if(payoff < lowestPayoff){\n                lowestPayoff = payoff;\n                worstPolicyIndexes = [i];\n            }else if(payoff.equals(lowestPayoff)){\n                worstPolicyIndexes.push(i)\n            }\n            if(payoff > highestPayoff){\n                highestPayoff = payoff;\n                bestPolicyIndexes = [i]\n            }else if(payoff.equals(highestPayoff)){\n                bestPolicyIndexes.push(i)\n            }\n\n            jobResult.data.expectedValues[i] = ExpressionEngine.add(jobResult.data.expectedValues[i], ExpressionEngine.divide(payoff, numberOfRuns));\n        });\n\n        bestPolicyIndexes.forEach(policyIndex=>{\n            jobResult.data.policyToHighestPayoffCount[policyIndex] = ExpressionEngine.add(jobResult.data.policyToHighestPayoffCount[policyIndex], ExpressionEngine.divide(1, bestPolicyIndexes.length))\n        });\n\n        worstPolicyIndexes.forEach(policyIndex=>{\n            jobResult.data.policyToLowestPayoffCount[policyIndex] = ExpressionEngine.add(jobResult.data.policyToLowestPayoffCount[policyIndex], ExpressionEngine.divide(1, worstPolicyIndexes.length))\n        });\n    }\n\n\n    postProcess(stepExecution, jobResult) {\n        jobResult.data.expectedValues = jobResult.data.expectedValues.map(v=>this.toFloat(v));\n    }\n\n\n    toFloat(v) {\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class SpiderPlotJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"percentageChangeRange\", PARAMETER_TYPE.NUMBER).set(\"singleValueValidator\", v => v > 0 && v <=100));\n        this.definitions.push(new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 0));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n            ], 1, Infinity, false,\n            null,\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {SpiderPlotJobParameters} from \"./spider-plot-job-parameters\";\n\nexport class SpiderPlotJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"spider-plot\", jobRepository);\n        this.addStep(new CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager));\n    }\n\n    createJobParameters(values) {\n        return new SpiderPlotJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n        if (execution.stepExecutions.length < 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[0].getProgress(execution.stepExecutions[0]);\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n\n        let result = [];\n        if(withHeaders){\n            result.push(['variable_name', 'policy_no'].concat(jobResult.percentageRangeValues));\n        }\n\n        jobResult.rows.forEach((row, index) => {\n\n            result.push(...row.payoffs.map((payoffs, policyIndex)=>[\n                row.variableName,\n                policyIndex+1,\n                ...payoffs\n            ]));\n\n        });\n\n        return result;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository, 1);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        let jobExecutionContext = stepExecution.getJobExecutionContext();\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let percentageChangeRange = params.value(\"percentageChangeRange\");\n        let length = params.value(\"length\");\n        let variables = params.value(\"variables\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n        let data = stepExecution.getData();\n\n        let treeRoot = data.getRoots()[0];\n        let payoff = treeRoot.computedValue(ruleName, 'payoff');\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalExpressions(data);\n\n        this.objectiveRulesManager.recomputeTree(treeRoot, false);\n\n        let policiesCollector = new PoliciesCollector(treeRoot, ruleName);\n\n        let defaultValues = {};\n        Utils.forOwn(data.expressionScope, (v,k)=>{\n            defaultValues[k]=this.toFloat(v);\n        });\n\n\n        let percentageRangeValues = ComputationsUtils.sequence(-percentageChangeRange, percentageChangeRange, 2*length+1);\n\n        let variableValues = [];\n\n        variables.forEach(v=> {\n            let defVal = defaultValues[v.name];\n            variableValues.push(percentageRangeValues.map(p=> this.toFloat(ExpressionEngine.add(defVal, ExpressionEngine.multiply(ExpressionEngine.divide(p,100), defVal)))));\n        });\n\n\n        if(!jobResult.data){\n            jobResult.data = {\n                variableNames: variableNames,\n                defaultValues: defaultValues,\n                percentageRangeValues: percentageRangeValues,\n                defaultPayoff: this.toFloat(payoff)[0],\n                policies: policiesCollector.policies,\n                rows: []\n            };\n        }\n\n        stepExecution.getJobExecutionContext().put(\"variableValues\", variableValues);\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize) {\n        let variableValues = stepExecution.getJobExecutionContext().get(\"variableValues\");\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n    processItem(stepExecution, item, itemIndex, jobResult) {\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        let data = stepExecution.getData();\n        let treeRoot = data.getRoots()[0];\n        let variableNames = stepExecution.executionContext.get(\"variableNames\");\n        let variableName = variableNames[itemIndex];\n\n\n        let payoffs = jobResult.data.policies.map(policy=>[]);\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n\n\n        item.forEach(variableValue=>{\n\n            data.expressionScope[variableName] = variableValue;\n\n            this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n            let vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n            let valid = vr.isValid();\n\n            if(!valid && failOnInvalidTree){\n                let errorData = {\n                    variables: {}\n                };\n                errorData.variables[variableName] = variableValue;\n\n                throw new JobComputationException(\"computations\", errorData)\n            }\n\n            jobResult.data.policies.forEach((policy, policyIndex)=>{\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                let payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n                payoffs[policyIndex].push(this.toFloat(payoff));\n            });\n\n        });\n\n        return {\n            variableName: variableName,\n            variableIndex: itemIndex,\n            variableValues: item,\n            payoffs: payoffs\n        };\n\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        jobResult.data.rows.push(...items);\n    }\n\n\n    toFloat(v){\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository, 1);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        let jobExecutionContext = stepExecution.getJobExecutionContext();\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let variableValues = jobExecutionContext.get(\"variableValues\");\n        let variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n        let data = stepExecution.getData();\n\n        let treeRoot = data.getRoots()[0];\n        let payoff = treeRoot.computedValue(ruleName, 'payoff');\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalExpressions(data);\n\n        this.objectiveRulesManager.recomputeTree(treeRoot, false);\n\n\n\n        let policiesCollector = new PoliciesCollector(treeRoot, ruleName);\n\n        let defaultValues = {};\n        Utils.forOwn(data.expressionScope, (v,k)=>{\n            defaultValues[k]=this.toFloat(v);\n        });\n\n        if(!jobResult.data){\n            jobResult.data = {\n                variableNames: variableNames,\n                defaultValues: defaultValues,\n                variableExtents: variableValues.map(v=>[v[0], v[v.length-1]]),\n                defaultPayoff: this.toFloat(payoff)[0],\n                policies: policiesCollector.policies,\n                rows: []\n            };\n        }\n\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize) {\n        let variableValues = stepExecution.getJobExecutionContext().get(\"variableValues\");\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n    processItem(stepExecution, item, itemIndex, jobResult) {\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        let data = stepExecution.getData();\n        let treeRoot = data.getRoots()[0];\n        let variableNames = stepExecution.executionContext.get(\"variableNames\");\n        let variableName = variableNames[itemIndex];\n\n        let extents = jobResult.data.policies.map(policy=>{\n            return {\n                min: Infinity,\n                max: -Infinity\n            }\n        });\n\n        let values = jobResult.data.policies.map(policy=>{\n            return {\n                min: null,\n                max: null\n            }\n        });\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n\n\n        item.forEach(variableValue=>{\n\n            data.expressionScope[variableName] = variableValue;\n\n            this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n            let vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n            let valid = vr.isValid();\n\n            if(!valid && failOnInvalidTree){\n                let errorData = {\n                    variables: {}\n                };\n                errorData.variables[variableName] = variableValue;\n\n                throw new JobComputationException(\"computations\", errorData)\n            }\n\n            jobResult.data.policies.forEach((policy, policyIndex)=>{\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                let payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n\n                if(payoff < extents[policyIndex].min){\n                    extents[policyIndex].min = payoff;\n                    values[policyIndex].min = variableValue\n                }\n\n                if(payoff > extents[policyIndex].max){\n                    extents[policyIndex].max = payoff;\n                    values[policyIndex].max = variableValue\n                }\n            });\n\n        });\n\n        return {\n            variableName: variableName,\n            variableIndex: itemIndex,\n            extents: extents.map(e=>[this.toFloat(e.min), this.toFloat(e.max)]),\n            extentVariableValues: values.map(v=>[this.toFloat(v.min), this.toFloat(v.max)])\n        };\n\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        jobResult.data.rows.push(...items);\n    }\n\n    postProcess(stepExecution, jobResult) {\n        jobResult.data.rows.sort((a, b)=>(b.extents[0][1]-b.extents[0][0])-(a.extents[0][1]-a.extents[0][0]))\n\n    }\n\n\n    toFloat(v){\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class PrepareVariablesStep extends Step {\n    constructor(jobRepository) {\n        super(\"prepare_variables\", jobRepository);\n    }\n\n    doExecute(stepExecution) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n\n        var variableValues = [];\n        variables.forEach(v=> {\n            variableValues.push(ComputationsUtils.sequence(v.min, v.max, v.length));\n        });\n        stepExecution.getJobExecutionContext().put(\"variableValues\", variableValues);\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class TornadoDiagramJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"min\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"max\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 0),\n            ], 1, Infinity, false,\n            v => v[\"min\"] <= v[\"max\"],\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {PrepareVariablesStep} from \"./steps/prepare-variables-step\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {TornadoDiagramJobParameters} from \"./tornado-diagram-job-parameters\";\n\nexport class TornadoDiagramJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"tornado-diagram\", jobRepository);\n        this.addStep(new PrepareVariablesStep(jobRepository));\n        this.addStep(new CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager));\n    }\n\n    createJobParameters(values) {\n        return new TornadoDiagramJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n\n        if (execution.stepExecutions.length <= 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[1].getProgress(execution.stepExecutions[1]);\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n        let result = [];\n        if(withHeaders){\n            result.push(['variable_name', 'default_var_value', \"min_var_value\", \"max_var_value\", 'default_payoff', \"min_payoff\", \"max_payoff\", \"policy_no\"]);\n        }\n\n\n        jobResult.rows.forEach((row, index) => {\n\n            result.push(...row.extents.map((extent, policyIndex)=>[\n                row.variableName,\n                jobResult.defaultValues[row.variableName],\n                row.extentVariableValues[policyIndex][0],\n                row.extentVariableValues[policyIndex][1],\n                jobResult.defaultPayoff,\n                extent[0],\n                extent[1],\n                policyIndex+1\n            ]));\n\n        });\n\n\n        return result;\n    }\n}\n","import {JOB_STATUS} from \"../job-status\";\nimport {log} from 'sd-utils'\nimport {Step} from \"../step\";\nimport {JobInterruptedException} from \"../exceptions/job-interrupted-exception\";\n\n/*job step that process batch of items*/\nexport class BatchStep extends Step {\n\n    chunkSize;\n    static CURRENT_ITEM_COUNT_PROP = 'batch_step_current_item_count';\n    static TOTAL_ITEM_COUNT_PROP = 'batch_step_total_item_count';\n\n    constructor(name, jobRepository, chunkSize) {\n        super(name, jobRepository);\n        this.chunkSize = chunkSize;\n    }\n\n    /**\n     * Extension point for subclasses to perform step initialization. Should return total item count\n     */\n    init(stepExecution, jobResult) {\n        throw \"BatchStep.init function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to read and return chunk of items to process\n     */\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        throw \"BatchStep.readNextChunk function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to process single item\n     * Must return processed item which will be passed in a chunk to writeChunk function\n     */\n    processItem(stepExecution, item, currentItemCount, jobResult) {\n        throw \"BatchStep.processItem function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to write chunk of items. Not required\n     */\n    writeChunk(stepExecution, items, jobResult) {\n    }\n\n    /**\n     * Extension point for subclasses to perform postprocessing after all items have been processed. Not required\n     */\n    postProcess(stepExecution, jobResult) {\n    }\n\n\n    setTotalItemCount(stepExecution, count) {\n        stepExecution.executionContext.put(BatchStep.TOTAL_ITEM_COUNT_PROP, count);\n    }\n\n    getTotalItemCount(stepExecution) {\n        return stepExecution.executionContext.get(BatchStep.TOTAL_ITEM_COUNT_PROP);\n    }\n\n    setCurrentItemCount(stepExecution, count) {\n        stepExecution.executionContext.put(BatchStep.CURRENT_ITEM_COUNT_PROP, count);\n    }\n\n    getCurrentItemCount(stepExecution) {\n        return stepExecution.executionContext.get(BatchStep.CURRENT_ITEM_COUNT_PROP) || 0;\n    }\n\n\n    doExecute(stepExecution, jobResult) {\n        return Promise.resolve().then(()=> {\n            return this.init(stepExecution, jobResult)\n        }).catch(e=> {\n            log.error(\"Failed to initialize batch step: \" + this.name, e);\n            throw e;\n        }).then(totalItemCount=> {\n            return Promise.resolve().then(()=>{\n                this.setCurrentItemCount(stepExecution, this.getCurrentItemCount(stepExecution));\n                this.setTotalItemCount(stepExecution, totalItemCount);\n                return this.handleNextChunk(stepExecution, jobResult)\n            }).catch(e=> {\n                if(!(e instanceof JobInterruptedException)){\n                    log.error(\"Failed to handle batch step: \" + this.name, e);\n                }\n                throw e;\n            })\n        }).then(()=> {\n            return Promise.resolve().then(()=>{\n                return this.postProcess(stepExecution, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to postProcess batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then(()=> {\n            stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n            return stepExecution;\n        })\n\n    }\n\n    handleNextChunk(stepExecution, jobResult) {\n        var currentItemCount = this.getCurrentItemCount(stepExecution);\n        var totalItemCount = this.getTotalItemCount(stepExecution);\n        var chunkSize = Math.min(this.chunkSize, totalItemCount - currentItemCount);\n        if (currentItemCount >= totalItemCount) {\n            return stepExecution;\n        }\n        return this.checkJobExecutionFlags(stepExecution).then(()=> {\n            // Check if someone is trying to stop us\n            if (stepExecution.terminateOnly) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            return stepExecution\n        }).then(()=> {\n            return Promise.resolve().then(()=>{\n                return this.readNextChunk(stepExecution, currentItemCount, chunkSize, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to read chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            });\n        }).then(chunk=> {\n            return Promise.resolve().then(()=>{\n                return this.processChunk(stepExecution, chunk, currentItemCount, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to process chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then(processedChunk=> {\n            return Promise.resolve().then(()=>{\n                return this.writeChunk(stepExecution, processedChunk, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to write chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then((res)=> {\n            currentItemCount += chunkSize;\n            this.setCurrentItemCount(stepExecution, currentItemCount);\n            return this.updateJobProgress(stepExecution).then(()=> {\n                return this.handleNextChunk(stepExecution, jobResult);\n            });\n        })\n    }\n\n    processChunk(stepExecution, chunk, currentItemCount, jobResult) { //TODO promisify\n        return chunk.map((item, i)=>this.processItem(stepExecution, item, currentItemCount+i, jobResult));\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(stepExecution){\n        return {\n            total: this.getTotalItemCount(stepExecution),\n            current: this.getCurrentItemCount(stepExecution)\n        }\n    }\n\n    updateJobProgress(stepExecution) {\n        var progress = this.jobRepository.getJobByName(stepExecution.jobExecution.jobInstance.jobName).getProgress(stepExecution.jobExecution);\n        return this.jobRepository.updateJobExecutionProgress(stepExecution.jobExecution.id, progress);\n    }\n\n    checkJobExecutionFlags(stepExecution){\n        return this.jobRepository.getJobByName(stepExecution.jobExecution.jobInstance.jobName).checkExecutionFlags(stepExecution.jobExecution);\n    }\n}\n","export class ExtendableError {\n    data;\n    constructor(message, data) {\n        this.message = message;\n        this.data = data;\n        this.name = this.constructor.name;\n    }\n}\n","export * from './extendable-error'\nexport * from './job-data-invalid-exception'\nexport * from './job-execution-already-running-exception'\nexport * from './job-instance-already-complete-exception'\nexport * from './job-interrupted-exception'\nexport * from './job-parameters-invalid-exception'\nexport * from './job-restart-exception'\n\n\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobComputationException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobDataInvalidException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobExecutionAlreadyRunningException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobInstanceAlreadyCompleteException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobInterruptedException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobParametersInvalidException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobRestartException extends ExtendableError {\n}\n","import {Utils} from \"sd-utils\";\n\nexport class ExecutionContext {\n\n    dirty = false;\n    context = {};\n\n    constructor(context) {\n        if (context) {\n            this.context = Utils.clone(context)\n        }\n    }\n\n    put(key, value) {\n        var prevValue = this.context[key];\n        if (value != null) {\n            var result = this.context[key] = value;\n            this.dirty = prevValue == null || prevValue != null && prevValue != value;\n        }\n        else {\n            delete this.context[key];\n            this.dirty = prevValue != null;\n        }\n    }\n\n    get(key) {\n        return this.context[key];\n    }\n\n    containsKey(key) {\n        return this.context.hasOwnProperty(key);\n    }\n\n    remove(key) {\n        delete this.context[key];\n    }\n\n    setData(data) { //set data model\n        return this.put(\"data\", data);\n    }\n\n    getData() { // get data model\n        return this.get(\"data\");\n    }\n\n    getDTO() {\n        var dto = Utils.cloneDeep(this);\n        var data = this.getData();\n        if (data) {\n            data = data.getDTO();\n            dto.context[\"data\"] = data;\n        }\n        return dto;\n    }\n\n}\n","import * as exceptions from './exceptions'\n\nexport {exceptions}\nexport * from './execution-context'\nexport * from './job'\nexport * from './job-execution'\nexport * from './job-execution-flag'\nexport * from './job-execution-listener'\nexport * from './job-instance'\nexport * from './job-key-generator'\nexport * from './job-launcher'\nexport * from './job-parameter-definition'\nexport * from './job-parameters'\nexport * from './job-status'\nexport * from './simple-job'\nexport * from './step'\nexport * from './step-execution'\nexport * from './step-execution-listener'\n\n\n\n\n","export const JOB_EXECUTION_FLAG = {\n    STOP: 'STOP'\n};\n","export class JobExecutionListener {\n    /*Called before a job executes*/\n    beforeJob(jobExecution) {\n\n    }\n\n    /*Called after completion of a job. Called after both successful and failed executions*/\n    afterJob(jobExecution) {\n\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {StepExecution} from \"./step-execution\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\n\n/*domain object representing the execution of a job.*/\nexport class JobExecution {\n    id;\n    jobInstance;\n    jobParameters;\n    stepExecutions = [];\n    status = JOB_STATUS.STARTING;\n    exitStatus = JOB_STATUS.UNKNOWN;\n    executionContext = new ExecutionContext();\n\n    startTime = null;\n    createTime = new Date();\n    endTime = null;\n    lastUpdated = null;\n\n    failureExceptions = [];\n\n    constructor(jobInstance, jobParameters, id) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.jobInstance = jobInstance;\n        this.jobParameters = jobParameters;\n    }\n\n    /**\n     * Register a step execution with the current job execution.\n     * @param stepName the name of the step the new execution is associated with\n     */\n    createStepExecution(stepName) {\n        var stepExecution = new StepExecution(stepName, this);\n        this.stepExecutions.push(stepExecution);\n        return stepExecution;\n    }\n\n    isRunning() {\n        return !this.endTime;\n    }\n\n    /**\n     * Test if this JobExecution has been signalled to\n     * stop.\n     */\n    isStopping() {\n        return this.status === JOB_STATUS.STOPPING;\n    }\n\n    /**\n     * Signal the JobExecution to stop.\n     */\n    stop() {\n        this.stepExecutions.forEach(se=> {\n            se.terminateOnly = true;\n        });\n        this.status = JOB_STATUS.STOPPING;\n    }\n\n    getData() {\n        return this.executionContext.getData();\n    }\n\n    getDTO(filteredProperties = [], deepClone = true) {\n        var cloneMethod = Utils.cloneDeepWith;\n        if (!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        return Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if (filteredProperties.indexOf(key) > -1) {\n                return null;\n            }\n\n            if ([\"jobParameters\", \"executionContext\"].indexOf(key) > -1) {\n                return value.getDTO()\n            }\n            if (value instanceof Error) {\n                return Utils.getErrorDTO(value);\n            }\n\n            if (value instanceof StepExecution) {\n                return value.getDTO([\"jobExecution\"], deepClone)\n            }\n        }))\n    }\n}\n","/* object representing a uniquely identifiable job run. JobInstance can be restarted multiple times in case of execution failure and it's lifecycle ends with first successful execution*/\nexport class JobInstance{\n\n    id;\n    jobName;\n    constructor(id, jobName){\n        this.id = id;\n        this.jobName = jobName;\n    }\n\n}\n","\nexport class JobKeyGenerator {\n    /*Method to generate the unique key used to identify a job instance.*/\n    static generateKey(jobParameters) {\n        var result = \"\";\n        jobParameters.definitions.forEach((d, i)=> {\n            if(d.identifying){\n                result += d.name + \"=\" + jobParameters.values[d.name] + \";\";\n            }\n        });\n        return result;\n    }\n}\n","import {JobRestartException} from \"./exceptions/job-restart-exception\";\nimport {JOB_STATUS} from \"./job-status\";\nimport {Utils, log} from \"sd-utils\";\nimport {JobParametersInvalidException} from \"./exceptions/job-parameters-invalid-exception\";\nimport {JobDataInvalidException} from \"./exceptions/job-data-invalid-exception\";\n\nexport class JobLauncher {\n\n    jobRepository;\n    jobWorker;\n\n    constructor(jobRepository, jobWorker, dataModelSerializer) {\n        this.jobRepository = jobRepository;\n        this.jobWorker = jobWorker;\n        this.dataModelSerializer = dataModelSerializer;\n    }\n\n\n    run(jobOrName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        var job;\n        var jobParameters;\n\n        return Promise.resolve().then(()=> {\n            if (Utils.isString(jobOrName)) {\n                job = this.jobRepository.getJobByName(jobOrName)\n            } else {\n                job = jobOrName;\n            }\n            if (!job) {\n                throw new JobRestartException(\"No such job: \" + jobOrName);\n            }\n\n            jobParameters = job.createJobParameters(jobParametersValues);\n\n            return this.validate(job, jobParameters, data);\n        }).then(valid=>{\n            return this.jobRepository.createJobExecution(job.name, jobParameters, data).then(jobExecution=>{\n\n\n                if(this.jobWorker){\n                    log.debug(\"Job: [\" + job.name + \"] execution [\"+jobExecution.id+\"] delegated to worker\");\n                    this.jobWorker.executeJob(jobExecution.id);\n                    return jobExecution;\n                }\n\n                var executionPromise = this._execute(job, jobExecution);\n                if(resolvePromiseAfterJobIsLaunched){\n                    return jobExecution;\n                }\n                return executionPromise;\n            })\n        })\n    }\n\n    validate(job, jobParameters, data){\n        return this.jobRepository.getLastJobExecution(job.name, jobParameters).then(lastExecution=>{\n            if (lastExecution != null) {\n                if (!job.isRestartable) {\n                    throw new JobRestartException(\"JobInstance already exists and is not restartable\");\n                }\n\n                lastExecution.stepExecutions.forEach(execution=> {\n                    if (execution.status == JOB_STATUS.UNKNOWN) {\n                        throw new JobRestartException(\"Step [\" + execution.stepName + \"] is of status UNKNOWN\");\n                    }\n                });\n            }\n            if (job.jobParametersValidator && !job.jobParametersValidator.validate(jobParameters)) {\n                throw new JobParametersInvalidException(\"Invalid job parameters in jobLauncher.run for job: \"+job.name)\n            }\n\n            if(job.jobDataValidator && !job.jobDataValidator.validate(data)){\n                throw new JobDataInvalidException(\"Invalid job data in jobLauncher.run for job: \"+job.name)\n            }\n\n            return true;\n        })\n    }\n\n    /**Execute previously created job execution*/\n    execute(jobExecutionOrId){\n\n        return Promise.resolve().then(()=>{\n            if(Utils.isString(jobExecutionOrId)){\n                return this.jobRepository.getJobExecutionById(jobExecutionOrId);\n            }\n            return jobExecutionOrId;\n        }).then(jobExecution=>{\n            if(!jobExecution){\n                throw new JobRestartException(\"JobExecution [\" + jobExecutionOrId + \"] is not found\");\n            }\n\n            if (jobExecution.status !== JOB_STATUS.STARTING) {\n                throw new JobRestartException(\"JobExecution [\" + jobExecution.id + \"] already started\");\n            }\n\n            var jobName = jobExecution.jobInstance.jobName;\n            var job = this.jobRepository.getJobByName(jobName);\n            if(!job){\n                throw new JobRestartException(\"No such job: \" + jobName);\n            }\n\n            return  this._execute(job, jobExecution);\n        })\n    }\n\n    _execute(job, jobExecution){\n        var jobName = job.name;\n        log.info(\"Job: [\" + jobName + \"] launched with the following parameters: [\" + jobExecution.jobParameters + \"]\", jobExecution.getData());\n        return job.execute(jobExecution).then(jobExecution=>{\n            log.info(\"Job: [\" + jobName + \"] completed with the following parameters: [\" + jobExecution.jobParameters + \"] and the following status: [\" + jobExecution.status + \"]\");\n            return jobExecution;\n        }).catch(e =>{\n            log.error(\"Job: [\" + jobName + \"] failed unexpectedly and fatally with the following parameters: [\" + jobExecution.jobParameters + \"]\", e);\n            throw e;\n        })\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport const PARAMETER_TYPE = {\n    STRING: 'STRING',\n    DATE: 'DATE',\n    INTEGER: 'INTEGER',\n    NUMBER: 'FLOAT',\n    BOOLEAN: 'BOOLEAN',\n    NUMBER_EXPRESSION: 'NUMBER_EXPRESSION',\n    COMPOSITE: 'COMPOSITE' //composite parameter with nested subparameters\n};\n\nexport class JobParameterDefinition {\n    name;\n    type;\n    nestedParameters = [];\n    minOccurs;\n    maxOccurs;\n    required = true;\n\n    identifying;\n    validator;\n    singleValueValidator;\n\n    constructor(name, typeOrNestedParametersDefinitions, minOccurs = 1, maxOccurs = 1, identifying = false, singleValueValidator = null, validator = null) {\n        this.name = name;\n        if (Utils.isArray(typeOrNestedParametersDefinitions)) {\n            this.type = PARAMETER_TYPE.COMPOSITE;\n            this.nestedParameters = typeOrNestedParametersDefinitions;\n        } else {\n            this.type = typeOrNestedParametersDefinitions;\n        }\n        this.validator = validator;\n        this.singleValueValidator = singleValueValidator;\n        this.identifying = identifying;\n        this.minOccurs = minOccurs;\n        this.maxOccurs = maxOccurs;\n    }\n\n    set(key, val) {\n        this[key] = val;\n        return this;\n    }\n\n    validate(value, allValues) {\n        var isArray = Utils.isArray(value);\n\n        if (this.maxOccurs > 1 && !isArray) {\n            return false;\n        }\n\n        if (!isArray) {\n            return this.validateSingleValue(value, allValues)\n        }\n\n        if (value.length < this.minOccurs || value.length > this.maxOccurs) {\n            return false;\n        }\n\n        if (!value.every(v=>this.validateSingleValue(v, value))) {\n            return false;\n        }\n\n        if (this.validator) {\n            return this.validator(value, allValues);\n        }\n\n        return true;\n    }\n\n    static computeNumberExpression(val){\n        let parsed = parseFloat(val);\n        if(parsed === Infinity || parsed === -Infinity) {\n            return parsed;\n        }\n\n        if(!ExpressionEngine.validate(val, {}, false)){\n            return null\n        }\n\n        return ExpressionEngine.eval(val, true)\n    }\n\n    // allValues - all values on the same level\n    validateSingleValue(value, allValues) {\n\n        if ((!value && value !== 0 && value !== false) && this.minOccurs > 0) {\n            return !this.required\n        }\n\n        if (PARAMETER_TYPE.STRING === this.type && !Utils.isString(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.DATE === this.type && !Utils.isDate(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.INTEGER === this.type && !Utils.isInt(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.NUMBER === this.type && !Utils.isNumber(value)) {\n            return false;\n        }\n\n        if (PARAMETER_TYPE.BOOLEAN === this.type && !Utils.isBoolean(value)) {\n            return false;\n        }\n\n\n        if (PARAMETER_TYPE.NUMBER_EXPRESSION === this.type) {\n            value = JobParameterDefinition.computeNumberExpression(value);\n            if(value === null){\n                return false\n            }\n        }\n\n        if (PARAMETER_TYPE.COMPOSITE === this.type) {\n            if (!Utils.isObject(value)) {\n                return false;\n            }\n            if (!this.nestedParameters.every((nestedDef, i)=>nestedDef.validate(value[nestedDef.name]))) {\n                return false;\n            }\n        }\n\n        if (this.singleValueValidator) {\n            return this.singleValueValidator(value, allValues);\n        }\n\n        return true;\n    }\n\n    value(value){\n        if(PARAMETER_TYPE.NUMBER_EXPRESSION === this.type) {\n            return JobParameterDefinition.computeNumberExpression(value);\n        }\n\n        return value;\n    }\n}\n","import {PARAMETER_TYPE} from \"./job-parameter-definition\";\nimport {Utils} from \"sd-utils\";\n\nexport class JobParameters{\n    definitions = [];\n    values={};\n\n    constructor(values){\n        this.initDefinitions();\n        this.initDefaultValues();\n        if (values) {\n            Utils.deepExtend(this.values, values);\n        }\n    }\n\n    initDefinitions(){\n\n    }\n\n    initDefaultValues(){\n\n    }\n\n    validate(){\n        return this.definitions.every((def, i)=>def.validate(this.values[def.name], this.values));\n    }\n\n    getDefinition(path){\n        var defs =this.definitions;\n        let def = null;\n        if(!path.split().every(name=>{\n                def = Utils.find(defs, d=>d.name == name);\n                if(!def){\n                    return false\n                }\n                defs = def.nestedParameters;\n                return true;\n        })){\n            return null;\n        }\n        return def;\n    }\n\n    /*get or set value by path*/\n    value(path, value){\n        if (arguments.length === 1) {\n            let def = this.getDefinition(path);\n            let val = Utils.get(this.values, path, null);\n            if(def){\n                return def.value(val);\n            }\n            return  val;\n        }\n        Utils.set(this.values, path, value);\n        return value;\n    }\n\n    toString(){\n        var result = \"JobParameters[\";\n\n        this.definitions.forEach((d, i)=> {\n\n            var val = this.values[d.name];\n            // if(Utils.isArray(val)){\n            //     var values = val;\n            //\n            //\n            // }\n            // if(PARAMETER_TYPE.COMPOSITE == d.type){\n            //\n            // }\n\n            result += d.name + \"=\"+val + \";\";\n        });\n        result+=\"]\";\n        return result;\n    }\n\n    getDTO(){\n        return {\n            values: this.values\n        }\n    }\n}\n","import {JobRepository} from \"./job-repository\";\nimport {default as idb} from \"idb\";\nimport {Utils} from \"sd-utils\";\nimport {JobExecution} from \"../job-execution\";\nimport {JobInstance} from \"../job-instance\";\nimport {StepExecution} from \"../step-execution\";\nimport {ExecutionContext} from \"../execution-context\";\nimport {DataModel} from \"sd-model\";\nimport {log} from \"sd-utils\";\n\n/* IndexedDB job repository*/\nexport class IdbJobRepository extends JobRepository {\n\n    dbPromise;\n    jobInstanceDao;\n    jobExecutionDao;\n    stepExecutionDao;\n    jobResultDao;\n    jobExecutionProgressDao;\n    jobExecutionFlagDao;\n\n    constructor(expressionsReviver, dbName = 'sd-job-repository', deleteDB = false) {\n        super();\n        this.dbName = dbName;\n        this.expressionsReviver = expressionsReviver;\n        if (deleteDB) {\n            this.deleteDB().then(()=> {\n                this.initDB()\n            }).catch(e=> {\n                log.error(e);\n                this.initDB();\n            })\n        } else {\n            this.initDB()\n        }\n    }\n\n    initDB() {\n        this.dbPromise = idb.open(this.dbName, 2, upgradeDB => {\n            // Note: we don't use 'break' in this switch statement,\n            // the fall-through behaviour is what we want.\n            switch (upgradeDB.oldVersion) {\n                case 0:\n                    upgradeDB.createObjectStore('job-instances');\n                    var jobExecutionsOS = upgradeDB.createObjectStore('job-executions');\n                    jobExecutionsOS.createIndex(\"jobInstanceId\", \"jobInstance.id\", {unique: false});\n                    jobExecutionsOS.createIndex(\"createTime\", \"createTime\", {unique: false});\n                    jobExecutionsOS.createIndex(\"status\", \"status\", {unique: false});\n                    upgradeDB.createObjectStore('job-execution-progress');\n                    upgradeDB.createObjectStore('job-execution-flags');\n                    var stepExecutionsOS = upgradeDB.createObjectStore('step-executions');\n                    stepExecutionsOS.createIndex(\"jobExecutionId\", \"jobExecutionId\", {unique: false});\n\n                    var jobResultOS = upgradeDB.createObjectStore('job-results');\n                    jobResultOS.createIndex(\"jobInstanceId\", \"jobInstance.id\", {unique: true});\n                case 1:\n                    upgradeDB.transaction.objectStore('job-instances').createIndex(\"id\", \"id\", {unique: true});\n            }\n\n        });\n\n        this.jobInstanceDao = new ObjectStoreDao('job-instances', this.dbPromise);\n        this.jobExecutionDao = new ObjectStoreDao('job-executions', this.dbPromise);\n        this.jobExecutionProgressDao = new ObjectStoreDao('job-execution-progress', this.dbPromise);\n        this.jobExecutionFlagDao = new ObjectStoreDao('job-execution-flags', this.dbPromise);\n        this.stepExecutionDao = new ObjectStoreDao('step-executions', this.dbPromise);\n        this.jobResultDao = new ObjectStoreDao('job-results', this.dbPromise);\n    }\n\n    deleteDB() {\n        return Promise.resolve().then(_=>idb.delete(this.dbName));\n    }\n\n\n    removeJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        return this.jobInstanceDao.remove(key).then(()=>{\n            this.findJobExecutions(jobInstance, false).then(jobExecutions=>{  //  Not waiting for promise resolves\n                jobExecutions.forEach(this.removeJobExecution, this);\n            });\n\n            this.getJobResultByInstance(jobInstance).then(jobResult=>{\n                return this.removeJobResult(jobResult)\n            })\n        });\n    }\n\n    removeJobExecution(jobExecution){\n        return this.jobExecutionDao.remove(jobExecution.id).then(()=>{\n            return this.findStepExecutions(jobExecution.id, false).then(stepExecutions=>{  // Not waiting for promise resolves\n                stepExecutions.forEach(this.removeStepExecution, this);\n            });\n        });\n    }\n\n    removeStepExecution(stepExecution){\n        return this.stepExecutionDao.remove(stepExecution.id)\n    }\n\n    removeJobResult(jobResult){\n        return this.jobResultDao.remove(jobResult.id);\n    }\n\n\n\n\n    getJobResult(jobResultId) {\n        return this.jobResultDao.get(jobResultId);\n    }\n\n    getJobResultByInstance(jobInstance) {\n        return this.jobResultDao.getByIndex(\"jobInstanceId\", jobInstance.id);\n    }\n\n    saveJobResult(jobResult) {\n        return this.jobResultDao.set(jobResult.id, jobResult).then(r=>jobResult);\n    }\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return this.jobInstanceDao.get(key).then(dto=>dto ? this.reviveJobInstance(dto) : dto);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters) {\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        return this.jobInstanceDao.set(key, jobInstance).then(r=>jobInstance);\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution) {\n        var dto = jobExecution.getDTO();\n        var stepExecutionsDTOs = dto.stepExecutions;\n        dto.stepExecutions = null;\n        return this.jobExecutionDao.set(jobExecution.id, dto).then(r=>this.saveStepExecutionsDTOS(stepExecutionsDTOs)).then(r=>jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress) {\n        return this.jobExecutionProgressDao.set(jobExecutionId, progress)\n    }\n\n    getJobExecutionProgress(jobExecutionId) {\n        return this.jobExecutionProgressDao.get(jobExecutionId)\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag) {\n        return this.jobExecutionFlagDao.set(jobExecutionId, flag)\n    }\n\n    getJobExecutionFlag(jobExecutionId) {\n        return this.jobExecutionFlagDao.get(jobExecutionId)\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution) {\n        var dto = stepExecution.getDTO([\"jobExecution\"]);\n        return this.stepExecutionDao.set(stepExecution.id, dto).then(r=>stepExecution);\n    }\n\n    saveStepExecutionsDTOS(stepExecutions, savedExecutions = []) {\n        if (stepExecutions.length <= savedExecutions.length) {\n            return Promise.resolve(savedExecutions);\n        }\n        var stepExecutionDTO = stepExecutions[savedExecutions.length];\n        return this.stepExecutionDao.set(stepExecutionDTO.id, stepExecutionDTO).then(()=> {\n            savedExecutions.push(stepExecutionDTO);\n            return this.saveStepExecutionsDTOS(stepExecutions, savedExecutions);\n        });\n    }\n\n    getJobExecutionById(id) {\n        return this.jobExecutionDao.get(id).then(dto=> {\n            return this.fetchJobExecutionRelations(dto);\n        });\n    }\n\n    fetchJobExecutionRelations(jobExecutionDTO, revive = true) {\n        if (!jobExecutionDTO) {\n            return Promise.resolve(null)\n        }\n        return this.findStepExecutions(jobExecutionDTO.id, false).then(steps=> {\n            jobExecutionDTO.stepExecutions = steps;\n            if (!revive) {\n                return jobExecutionDTO;\n            }\n            return this.reviveJobExecution(jobExecutionDTO);\n        })\n    }\n\n    fetchJobExecutionsRelations(jobExecutionDtoList, revive = true, fetched = []) {\n        if (jobExecutionDtoList.length <= fetched.length) {\n            return Promise.resolve(fetched);\n        }\n        return this.fetchJobExecutionRelations(jobExecutionDtoList[fetched.length], revive).then((jobExecution)=> {\n            fetched.push(jobExecution);\n\n            return this.fetchJobExecutionsRelations(jobExecutionDtoList, revive, fetched);\n        });\n    }\n\n    findStepExecutions(jobExecutionId, revive = true) {\n        return this.stepExecutionDao.getAllByIndex(\"jobExecutionId\", jobExecutionId).then(dtos=> {\n            if (!revive) {\n                return dtos;\n            }\n            return dtos.map(dto=>this.reviveStepExecution(dto));\n        })\n    }\n\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance, fetchRelationsAndRevive = true) {\n        return this.jobExecutionDao.getAllByIndex(\"jobInstanceId\", jobInstance.id).then(values=> {\n            var sorted = values.sort(function (a, b) {\n                return a.createTime.getTime() - b.createTime.getTime()\n            });\n\n            if (!fetchRelationsAndRevive) {\n                return sorted;\n            }\n\n            return this.fetchJobExecutionsRelations(sorted, true)\n        });\n    }\n\n    getLastJobExecutionByInstance(jobInstance) {\n        return this.findJobExecutions(jobInstance, false).then(executions=>this.fetchJobExecutionRelations(executions[executions.length - 1]));\n    }\n\n    getLastStepExecution(jobInstance, stepName) {\n        return this.findJobExecutions(jobInstance).then(jobExecutions=> {\n            var stepExecutions = [];\n            jobExecutions.forEach(jobExecution=>jobExecution.stepExecutions.filter(s=>s.stepName === stepName).forEach((s)=>stepExecutions.push(s)));\n            var latest = null;\n            stepExecutions.forEach(s=> {\n                if (latest == null || latest.startTime.getTime() < s.startTime.getTime()) {\n                    latest = s;\n                }\n            });\n            return latest;\n        })\n    }\n\n    reviveJobInstance(dto) {\n        return new JobInstance(dto.id, dto.jobName);\n    }\n\n    reviveExecutionContext(dto) {\n        var executionContext = new ExecutionContext();\n        executionContext.context = dto.context;\n        var data = executionContext.getData();\n        if (data) {\n            var dataModel = new DataModel();\n            dataModel.loadFromDTO(data, this.expressionsReviver);\n            executionContext.setData(dataModel);\n        }\n        return executionContext\n    }\n\n    reviveJobExecution(dto) {\n\n        var job = this.getJobByName(dto.jobInstance.jobName);\n        var jobInstance = this.reviveJobInstance(dto.jobInstance);\n        var jobParameters = job.createJobParameters(dto.jobParameters.values);\n        var jobExecution = new JobExecution(jobInstance, jobParameters, dto.id);\n        var executionContext = this.reviveExecutionContext(dto.executionContext);\n        return Utils.mergeWith(jobExecution, dto, (objValue, srcValue, key, object, source, stack)=> {\n            if (key === \"jobInstance\") {\n                return jobInstance;\n            }\n            if (key === \"executionContext\") {\n                return executionContext;\n            }\n            if (key === \"jobParameters\") {\n                return jobParameters;\n            }\n            if (key === \"jobExecution\") {\n                return jobExecution;\n            }\n\n            if (key === \"stepExecutions\") {\n                return srcValue.map(stepDTO => this.reviveStepExecution(stepDTO, jobExecution));\n            }\n        })\n    }\n\n    reviveStepExecution(dto, jobExecution) {\n        var stepExecution = new StepExecution(dto.stepName, jobExecution, dto.id);\n        var executionContext = this.reviveExecutionContext(dto.executionContext);\n        return Utils.mergeWith(stepExecution, dto, (objValue, srcValue, key, object, source, stack)=> {\n            if (key === \"jobExecution\") {\n                return jobExecution;\n            }\n            if (key === \"executionContext\") {\n                return executionContext;\n            }\n        })\n    }\n}\n\n\nclass ObjectStoreDao {\n\n    name;\n    dbPromise;\n\n    constructor(name, dbPromise) {\n        this.name = name;\n        this.dbPromise = dbPromise;\n    }\n\n    get(key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).get(key);\n        });\n    }\n\n    getAllByIndex(indexName, key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).index(indexName).getAll(key)\n        });\n    }\n\n    getByIndex(indexName, key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).index(indexName).get(key)\n        });\n    }\n\n    set(key, val) {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).put(val, key);\n            return tx.complete;\n        });\n    }\n\n    remove(key) {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).delete(key);\n            return tx.complete;\n        });\n    }\n\n    clear() {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).clear();\n            return tx.complete;\n        });\n    }\n\n    keys() {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name);\n            const keys = [];\n            const store = tx.objectStore(this.name);\n\n            // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n            // openKeyCursor isn't supported by Safari, so we fall back\n            (store.iterateKeyCursor || store.iterateCursor).call(store, cursor => {\n                if (!cursor) return;\n                keys.push(cursor.key);\n                cursor.continue();\n            });\n\n            return tx.complete.then(() => keys);\n        });\n    }\n}\n","import {JobKeyGenerator} from \"../job-key-generator\";\nimport {JobInstance} from \"../job-instance\";\nimport {Utils} from \"sd-utils\";\nimport {JobExecution} from \"../job-execution\";\nimport {JobExecutionAlreadyRunningException} from \"../exceptions/job-execution-already-running-exception\";\nimport {JOB_STATUS} from \"../job-status\";\nimport {JobInstanceAlreadyCompleteException} from \"../exceptions/job-instance-already-complete-exception\";\nimport {ExecutionContext} from \"../execution-context\";\nimport {StepExecution} from \"../step-execution\";\nimport {DataModel} from \"sd-model\";\nimport {JobResult} from \"../job-result\";\n\nexport class JobRepository {\n\n    jobByName = {};\n\n    registerJob(job) {\n        this.jobByName[job.name] = job;\n    }\n\n    getJobByName(name) {\n        return this.jobByName[name];\n    }\n\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n       throw \"JobRepository getJobInstance function not implemented!\"\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(key, jobInstance){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    getJobExecutionById(id){\n        throw \"JobRepository.getJobExecutionById function not implemented!\"\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        throw \"JobRepository.getJobExecutionProgress function not implemented!\"\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        throw \"JobRepository.saveJobExecutionFlag function not implemented!\"\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        throw \"JobRepository.getJobExecutionFlag function not implemented!\"\n    }\n\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        throw \"JobRepository.saveStepExecution function not implemented!\"\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        throw \"JobRepository.findJobExecutions function not implemented!\"\n    }\n\n    getJobResult(jobResultId){\n        throw \"JobRepository.getJobResult function not implemented!\"\n    }\n\n    getJobResultByInstance(jobInstance){\n        throw \"JobRepository.getJobResultByInstance function not implemented!\"\n    }\n\n    saveJobResult(jobResult) {\n        throw \"JobRepository.setJobResult function not implemented!\"\n    }\n\n\n    removeJobInstance(jobInstance, jobParameters){\n        throw \"JobRepository.removeJobInstance function not implemented!\"\n    }\n\n    removeJobExecution(jobExecution){\n        throw \"JobRepository.removeJobExecution function not implemented!\"\n    }\n\n    removeStepExecution(stepExecution){\n        throw \"JobRepository.removeStepExecution function not implemented!\"\n    }\n\n    removeJobResult(jobResult){\n        throw \"JobRepository.removeJobResult function not implemented!\"\n    }\n\n    /*Create a new JobInstance with the name and job parameters provided. return promise*/\n    createJobInstance(jobName, jobParameters) {\n        var jobInstance = new JobInstance(Utils.guid(), jobName);\n        return this.saveJobInstance(jobInstance, jobParameters);\n    }\n\n    /*Check if an instance of this job already exists with the parameters provided.*/\n    isJobInstanceExists(jobName, jobParameters) {\n        return this.getJobInstance(jobName, jobParameters).then(result => !!result).catch(error=>false);\n    }\n\n    generateJobInstanceKey(jobName, jobParameters) {\n        return jobName + \"|\" + JobKeyGenerator.generateKey(jobParameters);\n    }\n\n    /*Create a JobExecution for a given  Job and JobParameters. If matching JobInstance already exists,\n     * the job must be restartable and it's last JobExecution must *not* be\n     * completed. If matching JobInstance does not exist yet it will be  created.*/\n\n    createJobExecution(jobName, jobParameters, data) {\n        return this.getJobInstance(jobName, jobParameters).then(jobInstance=>{\n            if (jobInstance != null) {\n                return this.findJobExecutions(jobInstance).then(executions=>{\n                    executions.forEach(execution=> {\n                        if (execution.isRunning()) {\n                            throw new JobExecutionAlreadyRunningException(\"A job execution for this job is already running: \" + jobInstance.jobName);\n                        }\n                        if (execution.status == JOB_STATUS.COMPLETED || execution.status == JOB_STATUS.ABANDONED) {\n                            throw new JobInstanceAlreadyCompleteException(\n                                \"A job instance already exists and is complete for parameters=\" + jobParameters\n                                + \".  If you want to run this job again, change the parameters.\");\n                        }\n                    });\n\n                    var executionContext = executions[executions.length - 1].executionContext;\n\n                    return [jobInstance, executionContext];\n                })\n            }\n\n            // no job found, create one\n            jobInstance = this.createJobInstance(jobName, jobParameters);\n            var executionContext = new ExecutionContext();\n            var dataModel = new DataModel();\n            dataModel._setNewState(data.createStateSnapshot());\n            executionContext.setData(dataModel);\n            return Promise.all([jobInstance, executionContext]);\n        }).then(instanceAndExecutionContext=>{\n            var jobExecution = new JobExecution(instanceAndExecutionContext[0], jobParameters);\n            jobExecution.executionContext = instanceAndExecutionContext[1];\n            jobExecution.lastUpdated = new Date();\n            return this.saveJobExecution(jobExecution);\n        }).catch(e=>{\n            throw e;\n        })\n    }\n\n    getLastJobExecution(jobName, jobParameters) {\n        return this.getJobInstance(jobName, jobParameters).then((jobInstance)=>{\n            if(!jobInstance){\n                return null;\n            }\n            return this.getLastJobExecutionByInstance(jobInstance);\n        })\n    }\n\n    getLastJobExecutionByInstance(jobInstance){\n        return this.findJobExecutions(jobInstance).then(executions=>executions[executions.length -1]);\n    }\n\n    getLastStepExecution(jobInstance, stepName) {\n        return this.findJobExecutions(jobInstance).then(jobExecutions=>{\n            var stepExecutions=[];\n            jobExecutions.forEach(jobExecution=>jobExecution.stepExecutions.filter(s=>s.stepName === stepName).forEach((s)=>stepExecutions.push(s)));\n            var latest = null;\n            stepExecutions.forEach(s=>{\n                if (latest == null || latest.startTime.getTime() < s.startTime.getTime()) {\n                    latest = s;\n                }\n            });\n            return latest;\n        })\n    }\n\n    addStepExecution(stepExecution) {\n        stepExecution.lastUpdated = new Date();\n        return this.saveStepExecution(stepExecution);\n    }\n\n    update(o){\n        o.lastUpdated = new Date();\n\n        if(o instanceof JobExecution){\n            return this.saveJobExecution(o);\n        }\n\n        if(o instanceof StepExecution){\n            return this.saveStepExecution(o);\n        }\n\n        throw \"Object not updatable: \"+o\n    }\n\n    remove(o){\n\n        if(o instanceof JobExecution){\n            return this.removeJobExecution(o);\n        }\n\n        if(o instanceof StepExecution){\n            return this.removeStepExecution(o);\n        }\n\n        if(o instanceof JobResult){\n            return this.removeJobResult();\n        }\n\n        return Promise.reject(\"Object not removable: \"+o);\n    }\n\n\n    reviveJobInstance(dto) {\n        return dto;\n    }\n\n    reviveExecutionContext(dto) {\n        return dto;\n    }\n\n    reviveJobExecution(dto) {\n        return dto;\n    }\n\n    reviveStepExecution(dto, jobExecution) {\n        return dto;\n    }\n}\n","import {JobRepository} from \"./job-repository\";\nimport {Utils} from \"sd-utils\";\n\nexport class SimpleJobRepository extends JobRepository{\n    jobInstancesByKey = {};\n    jobExecutions = [];\n    stepExecutions = [];\n    executionProgress = {};\n    executionFlags = {};\n    jobResults = [];\n\n    removeJobInstance(jobInstance){\n        Utils.forOwn(this.jobInstancesByKey,  (ji, key)=>{\n            if(ji===jobInstance){\n                delete this.jobInstancesByKey[key]\n            }\n        });\n\n        this.jobExecutions.filter(jobExecution=>jobExecution.jobInstance.id == jobInstance.id).reverse().forEach(this.removeJobExecution, this);\n        this.jobResults.filter(jobResult=>jobResult.jobInstance.id == jobInstance.id).reverse().forEach(this.removeJobResult, this);\n\n        return Promise.resolve();\n    }\n\n    removeJobExecution(jobExecution){\n        let index = this.jobExecutions.indexOf(jobExecution);\n        if(index>-1) {\n            this.jobExecutions.splice(index, 1)\n        }\n\n        this.stepExecutions.filter(stepExecution=>stepExecution.jobExecution.id === jobExecution.id).reverse().forEach(this.removeStepExecution, this);\n        return Promise.resolve();\n    }\n\n    removeStepExecution(stepExecution){\n        let index = this.stepExecutions.indexOf(stepExecution);\n        if(index>-1) {\n            this.stepExecutions.splice(index, 1)\n        }\n        return Promise.resolve();\n    }\n\n    removeJobResult(jobResult){\n        let index = this.jobResults.indexOf(jobResult);\n        if(index>-1) {\n            this.jobResults.splice(index, 1)\n        }\n        return Promise.resolve();\n    }\n\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return Promise.resolve(this.jobInstancesByKey[key]);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        this.jobInstancesByKey[key] = jobInstance;\n        return Promise.resolve(jobInstance)\n    }\n\n    getJobResult(jobResultId){\n        return Promise.resolve(Utils.find(this.jobResults, r=>r.id===jobResultId))\n    }\n\n    getJobResultByInstance(jobInstance){\n        return Promise.resolve(Utils.find(this.jobResults, r=>r.jobInstance.id===jobInstance.id))\n    }\n\n    saveJobResult(jobResult) {\n        this.jobResults.push(jobResult);\n        return Promise.resolve(jobResult);\n    }\n\n    getJobExecutionById(id){\n        return Promise.resolve(Utils.find(this.jobExecutions, ex=>ex.id===id))\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        this.jobExecutions.push(jobExecution);\n        return Promise.resolve(jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        this.executionProgress[jobExecutionId] = progress;\n        return Promise.resolve(progress)\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        return Promise.resolve(this.executionProgress[jobExecutionId])\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        this.executionFlags[jobExecutionId] = flag;\n        return Promise.resolve(flag)\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        return Promise.resolve(this.executionFlags[jobExecutionId])\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        this.stepExecutions.push(stepExecution);\n        return Promise.resolve(stepExecution);\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        return Promise.resolve(this.jobExecutions.filter(e=>e.jobInstance.id == jobInstance.id).sort(function (a, b) {\n            return a.createTime.getTime() - b.createTime.getTime()\n        }));\n    }\n\n\n}\n","import {JobRepository} from \"./job-repository\";\nimport {Utils} from \"sd-utils\";\nimport {SimpleJobRepository} from \"./simple-job-repository\";\n\n\n\nexport class TimeoutJobRepository extends SimpleJobRepository{\n\n    createTimeoutPromise(valueToResolve, delay=1){\n        return new Promise(resolve=>{\n            setTimeout(function(){\n                resolve(valueToResolve);\n            }, delay)\n        });\n    }\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return this.createTimeoutPromise(this.jobInstancesByKey[key]);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        this.jobInstancesByKey[key] = jobInstance;\n        return this.createTimeoutPromise(jobInstance);\n    }\n\n    getJobResult(jobResultId){\n        return this.createTimeoutPromise(Utils.find(this.jobResults, r=>r.id===jobResultId));\n    }\n\n    getJobResultByInstance(jobInstance){\n        return this.createTimeoutPromise(Utils.find(this.jobResults, r=>r.jobInstance.id===jobInstance.id));\n    }\n\n    saveJobResult(jobResult) {\n        this.jobResults.push(jobResult);\n        return this.createTimeoutPromise(jobResult);\n    }\n\n    getJobExecutionById(id){\n        return this.createTimeoutPromise(Utils.find(this.jobExecutions, ex=>ex.id===id));\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        this.jobExecutions.push(jobExecution);\n        return this.createTimeoutPromise(jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        this.executionProgress[jobExecutionId] = progress;\n        return this.createTimeoutPromise(progress);\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        return this.createTimeoutPromise(this.executionProgress[jobExecutionId]);\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        this.executionFlags[jobExecutionId] = flag;\n        return this.createTimeoutPromise(flag);\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        return this.createTimeoutPromise(this.executionFlags[jobExecutionId]);\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        this.stepExecutions.push(stepExecution);\n        return this.createTimeoutPromise(stepExecution);\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        return this.createTimeoutPromise(this.jobExecutions.filter(e=>e.jobInstance.id == jobInstance.id).sort(function (a, b) {\n            return a.createTime.getTime() - b.createTime.getTime()\n        }));\n    }\n\n    remove(object){ //TODO\n\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {StepExecution} from \"./step-execution\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\n\n/*domain object representing the result of a job instance.*/\nexport class JobResult {\n    id;\n    jobInstance;\n    lastUpdated = null;\n\n    data;\n\n    constructor(jobInstance, id) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.jobInstance = jobInstance;\n    }\n}\n","export const JOB_STATUS = {\n    COMPLETED: 'COMPLETED',\n    STARTING: 'STARTING',\n    STARTED: 'STARTED',\n    STOPPING: 'STOPPING',\n    STOPPED: 'STOPPED',\n    FAILED: 'FAILED',\n    UNKNOWN: 'UNKNOWN',\n    ABANDONED: 'ABANDONED',\n    EXECUTING: 'EXECUTING' //for exit status only\n};\n","import {log} from 'sd-utils'\nimport {JOB_STATUS} from \"./job-status\";\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\nimport {JobParametersInvalidException} from \"./exceptions/job-parameters-invalid-exception\";\nimport {JobDataInvalidException} from \"./exceptions/job-data-invalid-exception\";\nimport {JOB_EXECUTION_FLAG} from \"./job-execution-flag\";\nimport {JobResult} from \"./job-result\";\n\n/**\n * Base class for jobs\n * A Job is an entity that encapsulates an entire job process ( an abstraction representing the configuration of a job)\n * */\n\nexport class Job {\n\n    id;\n    name;\n    steps = [];\n\n    isRestartable=true;\n    executionListeners = [];\n    jobParametersValidator;\n\n    jobRepository;\n\n    constructor(name, jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        this.name = name;\n        this.jobParametersValidator = this.getJobParametersValidator();\n        this.jobDataValidator = this.getJobDataValidator();\n        this.jobRepository = jobRepository;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n    }\n\n    setJobRepository(jobRepository) {\n        this.jobRepository = jobRepository;\n    }\n\n    execute(execution) {\n        log.debug(\"Job execution starting: \", execution);\n        var jobResult;\n        return this.checkExecutionFlags(execution).then(execution=>{\n\n            if (execution.status === JOB_STATUS.STOPPING) {\n                // The job was already stopped\n                execution.status = JOB_STATUS.STOPPED;\n                execution.exitStatus = JOB_STATUS.COMPLETED;\n                log.debug(\"Job execution was stopped: \" + execution);\n                return execution;\n            }\n\n            if (this.jobParametersValidator && !this.jobParametersValidator.validate(execution.jobParameters)) {\n                throw new JobParametersInvalidException(\"Invalid job parameters in job execute\")\n            }\n\n            if(this.jobDataValidator && !this.jobDataValidator.validate(execution.getData())){\n                throw new JobDataInvalidException(\"Invalid job data in job execute\")\n            }\n\n\n            execution.startTime = new Date();\n            return Promise.all([this.updateStatus(execution, JOB_STATUS.STARTED), this.getResult(execution), this.updateProgress(execution)]).then(res=>{\n                execution=res[0];\n                jobResult = res[1];\n                if(!jobResult) {\n                    jobResult = new JobResult(execution.jobInstance)\n                }\n                this.executionListeners.forEach(listener=>listener.beforeJob(execution));\n\n                return this.doExecute(execution, jobResult);\n            });\n\n        }).then(execution=>{\n            log.debug(\"Job execution complete: \",execution);\n            return execution\n        }).catch(e=>{\n            if (e instanceof JobInterruptedException) {\n                log.info(\"Encountered interruption executing job\", e);\n                execution.status = JOB_STATUS.STOPPED;\n                execution.exitStatus = JOB_STATUS.STOPPED;\n            } else {\n                log.error(\"Encountered fatal error executing job\", e);\n                execution.status = JOB_STATUS.FAILED;\n                execution.exitStatus = JOB_STATUS.FAILED;\n            }\n            execution.failureExceptions.push(e);\n            return execution;\n        }).then(execution=>{\n            if(jobResult){\n                return this.jobRepository.saveJobResult(jobResult).then(()=>execution)\n            }\n            return execution\n        }).catch(e=>{\n            log.error(\"Encountered fatal error saving job results\", e);\n            if(e){\n                execution.failureExceptions.push(e);\n            }\n            execution.status = JOB_STATUS.FAILED;\n            execution.exitStatus = JOB_STATUS.FAILED;\n            return execution;\n        }).then(execution=>{\n            execution.endTime = new Date();\n            return Promise.all([this.jobRepository.update(execution), this.updateProgress(execution)]).then(res=>res[0])\n        }).then(execution=>{\n            try {\n                this.executionListeners.forEach(listener=>listener.afterJob(execution));\n            } catch (e) {\n                log.error(\"Exception encountered in afterStep callback\", e);\n            }\n            return execution;\n        })\n    }\n\n\n    updateStatus(jobExecution, status) {\n        jobExecution.status=status;\n        return this.jobRepository.update(jobExecution)\n    }\n\n    updateProgress(jobExecution){\n        return this.jobRepository.updateJobExecutionProgress(jobExecution.id, this.getProgress(jobExecution));\n    }\n\n    /* Extension point for subclasses allowing them to concentrate on processing logic and ignore listeners, returns promise*/\n    doExecute(execution, jobResult) {\n        throw 'doExecute function not implemented for job: ' + this.name\n    }\n\n    getJobParametersValidator() {\n        return {\n            validate: (params) => params.validate()\n        }\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => true\n        }\n    }\n\n    addStep(step){\n        this.steps.push(step);\n    }\n\n\n    createJobParameters(values){\n        throw 'createJobParameters function not implemented for job: ' + this.name\n    }\n\n    /*Should return progress object with fields:\n    * current\n    * total */\n    getProgress(execution){\n        return {\n            total: 1,\n            current: execution.status === JOB_STATUS.COMPLETED ? 1 : 0\n        }\n    }\n\n    registerExecutionListener(listener){\n        this.executionListeners.push(listener);\n    }\n\n    checkExecutionFlags(execution){\n        return this.jobRepository.getJobExecutionFlag(execution.id).then(flag=>{\n            if(JOB_EXECUTION_FLAG.STOP === flag){\n                execution.stop();\n            }\n            return execution\n        })\n    }\n\n    getResult(execution) {\n        return this.jobRepository.getJobResultByInstance(execution.jobInstance);\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters){\n        throw 'jobResultToCsvRows function not implemented for job: ' + this.name\n    }\n}\n","import {log} from 'sd-utils'\nimport {JOB_STATUS} from \"./job-status\";\nimport {Job} from \"./job\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {Step} from \"./step\";\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\nimport {JobRestartException} from \"./exceptions/job-restart-exception\";\nimport {JOB_EXECUTION_FLAG} from \"./job-execution-flag\";\n\n/* Simple Job that sequentially executes a job by iterating through its list of steps.  Any Step that fails will fail the job.  The job is\n considered complete when all steps have been executed.*/\n\nexport class SimpleJob extends Job {\n\n    constructor(name, jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(name, jobRepository, expressionsEvaluator, objectiveRulesManager)\n    }\n\n    getStep(stepName) {\n        return Utils.find(this.steps, s=>s.name == stepName);\n    }\n\n    doExecute(execution, jobResult) {\n\n        return this.handleNextStep(execution, jobResult).then(lastExecutedStepExecution=>{\n            if (lastExecutedStepExecution != null) {\n                log.debug(\"Updating JobExecution status: \", lastExecutedStepExecution);\n                execution.status = lastExecutedStepExecution.status;\n                execution.exitStatus = lastExecutedStepExecution.exitStatus;\n                execution.failureExceptions.push(...lastExecutedStepExecution.failureExceptions)\n            }\n            return execution;\n        });\n    }\n\n    handleNextStep(jobExecution, jobResult, prevStep=null, prevStepExecution=null){\n        var stepIndex = 0;\n        if(prevStep){\n            stepIndex = this.steps.indexOf(prevStep)+1;\n        }\n        if(stepIndex>=this.steps.length){\n            return Promise.resolve(prevStepExecution)\n        }\n        var step = this.steps[stepIndex];\n        return this.handleStep(step, jobExecution, jobResult).then(stepExecution=>{\n            if(stepExecution.status !== JOB_STATUS.COMPLETED){ // Terminate the job if a step fails\n                return stepExecution;\n            }\n            return this.handleNextStep(jobExecution, jobResult, step, stepExecution);\n        })\n    }\n\n    handleStep(step, jobExecution, jobResult) {\n        var jobInstance = jobExecution.jobInstance;\n        return this.checkExecutionFlags(jobExecution).then(jobExecution=>{\n            if (jobExecution.isStopping()) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            return this.jobRepository.getLastStepExecution(jobInstance, step.name)\n\n        }).then(lastStepExecution=>{\n            if (this.stepExecutionPartOfExistingJobExecution(jobExecution, lastStepExecution)) {\n                // If the last execution of this step was in the same job, it's probably intentional so we want to run it again.\n                log.info(\"Duplicate step detected in execution of job. step: \" + step.name + \" jobName: \", jobInstance.jobName);\n                lastStepExecution = null;\n            }\n\n            var currentStepExecution = lastStepExecution;\n\n            if (!this.shouldStart(currentStepExecution, jobExecution, step)) {\n                return currentStepExecution;\n            }\n\n            currentStepExecution = jobExecution.createStepExecution(step.name);\n\n            var isCompleted = lastStepExecution != null && lastStepExecution.status === JOB_STATUS.COMPLETED;\n            var isRestart = lastStepExecution != null && !isCompleted;\n            var skipExecution = isCompleted && step.skipOnRestartIfCompleted;\n\n            if (isRestart) {\n                currentStepExecution.executionContext = lastStepExecution.executionContext;\n                if (lastStepExecution.executionContext.containsKey(\"executed\")) {\n                    currentStepExecution.executionContext.remove(\"executed\");\n                }\n            }\n            else {\n\n                currentStepExecution.executionContext = new ExecutionContext();\n            }\n            if(skipExecution){\n                currentStepExecution.exitStatus = JOB_STATUS.COMPLETED;\n                currentStepExecution.status = JOB_STATUS.COMPLETED;\n                currentStepExecution.executionContext.put(\"skipped\", true);\n            }\n\n            return this.jobRepository.addStepExecution(currentStepExecution).then((_currentStepExecution)=>{\n                currentStepExecution=_currentStepExecution;\n                if(skipExecution){\n                    log.info(\"Skipping completed step execution: [\" + step.name + \"]\");\n                    return currentStepExecution;\n                }\n                log.info(\"Executing step: [\" + step.name + \"]\");\n                return step.execute(currentStepExecution, jobResult)\n            }).then(()=>{\n                currentStepExecution.executionContext.put(\"executed\", true);\n                return currentStepExecution;\n            }).catch (e => {\n                jobExecution.status = JOB_STATUS.FAILED;\n                return this.jobRepository.update(jobExecution).then(jobExecution=>{throw e})\n            });\n\n        }).then((currentStepExecution)=>{\n            if (currentStepExecution.status == JOB_STATUS.STOPPING\n                || currentStepExecution.status == JOB_STATUS.STOPPED) {\n                // Ensure that the job gets the message that it is stopping\n                jobExecution.status = JOB_STATUS.STOPPING;\n                // throw new Error(\"Job interrupted by step execution\");\n            }\n            return this.updateProgress(jobExecution).then(()=>currentStepExecution);\n        })\n\n    }\n\n    stepExecutionPartOfExistingJobExecution(jobExecution, stepExecution) {\n        return stepExecution != null && stepExecution.jobExecution.id == jobExecution.id\n    }\n\n    shouldStart(lastStepExecution, execution, step) {\n        var stepStatus;\n        if (lastStepExecution == null) {\n            stepStatus = JOB_STATUS.STARTING;\n        }\n        else {\n            stepStatus = lastStepExecution.status;\n        }\n\n        if (stepStatus == JOB_STATUS.UNKNOWN) {\n            throw new JobRestartException(\"Cannot restart step from UNKNOWN status\")\n        }\n\n        return stepStatus != JOB_STATUS.COMPLETED || step.isRestartable;\n    }\n\n    getProgress(execution){\n        var completedSteps = execution.stepExecutions.length;\n        let progress = {\n            total: this.steps.length,\n            current: completedSteps\n        };\n        if(!completedSteps){\n            return progress\n        }\n        if(JOB_STATUS.COMPLETED !== execution.stepExecutions[execution.stepExecutions.length-1].status){\n            progress.current--;\n        }\n\n        return progress;\n    }\n\n    addStep(){\n        if(arguments.length===1){\n            return super.addStep(arguments[0])\n        }\n        var step = new Step(arguments[0], this.jobRepository);\n        step.doExecute = arguments[1];\n        return super.addStep(step);\n    }\n\n}\n","export class StepExecutionListener {\n    /*Called before a step executes*/\n    beforeStep(jobExecution) {\n\n    }\n\n    /*Called after completion of a step. Called after both successful and failed executions*/\n    afterStep(jobExecution) {\n\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {JOB_STATUS} from \"./job-status\";\nimport {JobExecution} from \"./job-execution\";\n\n/*\n representation of the execution of a step\n */\nexport class StepExecution {\n    id;\n    stepName;\n    jobExecution;\n\n    status = JOB_STATUS.STARTING;\n    exitStatus = JOB_STATUS.EXECUTING;\n    executionContext = new ExecutionContext(); //execution context for single step level,\n\n    startTime = new Date();\n    endTime = null;\n    lastUpdated = null;\n\n    terminateOnly = false; //flag to indicate that an execution should halt\n    failureExceptions = [];\n\n    constructor(stepName, jobExecution, id) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.stepName = stepName;\n        this.jobExecution = jobExecution;\n        this.jobExecutionId = jobExecution.id;\n    }\n\n    getJobParameters(){\n        return this.jobExecution.jobParameters;\n    }\n\n    getJobExecutionContext(){\n        return this.jobExecution.executionContext;\n    }\n\n    getData(){\n        return this.jobExecution.getData();\n    }\n\n    getDTO(filteredProperties=[], deepClone = true){\n\n        var cloneMethod = Utils.cloneDeepWith;\n        if(!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        return Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if(filteredProperties.indexOf(key)>-1){\n                return null;\n            }\n            if([\"executionContext\"].indexOf(key)>-1){\n                return value.getDTO()\n            }\n            if(value instanceof Error){\n                return Utils.getErrorDTO(value);\n            }\n\n            if (value instanceof JobExecution) {\n                return value.getDTO([\"stepExecutions\"], deepClone)\n            }\n        }))\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {log} from 'sd-utils'\n\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\n/*domain object representing the configuration of a job step*/\nexport class Step {\n\n    id;\n    name;\n    isRestartable = true;\n    skipOnRestartIfCompleted=true;\n    steps = [];\n    executionListeners = [];\n\n    jobRepository;\n\n    constructor(name, jobRepository) {\n        this.name = name;\n        this.jobRepository = jobRepository;\n    }\n\n    setJobRepository(jobRepository) {\n        this.jobRepository = jobRepository;\n    }\n\n    /*Process the step and assign progress and status meta information to the StepExecution provided*/\n    execute(stepExecution, jobResult) {\n        log.debug(\"Executing step: name=\" + this.name);\n        stepExecution.startTime = new Date();\n        stepExecution.status = JOB_STATUS.STARTED;\n        var exitStatus;\n        return this.jobRepository.update(stepExecution).then(stepExecution=>{\n            exitStatus = JOB_STATUS.EXECUTING;\n\n            this.executionListeners.forEach(listener=>listener.beforeStep(stepExecution));\n            this.open(stepExecution.executionContext);\n\n            return this.doExecute(stepExecution, jobResult)\n        }).then(_stepExecution=>{\n            stepExecution = _stepExecution;\n            exitStatus = stepExecution.exitStatus;\n\n            // Check if someone is trying to stop us\n            if (stepExecution.terminateOnly) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            // Need to upgrade here not set, in case the execution was stopped\n            stepExecution.status = JOB_STATUS.COMPLETED;\n            log.debug(\"Step execution success: name=\" + this.name);\n            return stepExecution\n        }).catch(e=>{\n            stepExecution.status = this.determineJobStatus(e);\n            exitStatus = stepExecution.status;\n            stepExecution.failureExceptions.push(e);\n\n            if (stepExecution.status == JOB_STATUS.STOPPED) {\n                log.info(\"Encountered interruption executing step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n            else {\n                log.error(\"Encountered an error executing step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n            return stepExecution;\n        }).then(stepExecution=>{\n            try {\n                stepExecution.exitStatus = exitStatus;\n                this.executionListeners.forEach(listener=>listener.afterStep(stepExecution));\n            }\n            catch (e) {\n                log.error(\"Exception in afterStep callback in step \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n\n            stepExecution.endTime = new Date();\n            stepExecution.exitStatus = exitStatus;\n\n\n            return this.jobRepository.update(stepExecution)\n        }).then(stepExecution=>{\n            try {\n                this.close(stepExecution.executionContext);\n            }\n            catch (e) {\n                log.error(\"Exception while closing step execution resources in step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n                stepExecution.failureExceptions.push(e);\n            }\n\n            try {\n                this.close(stepExecution.executionContext);\n            }\n            catch (e) {\n                log.error(\"Exception while closing step execution resources in step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n                stepExecution.failureExceptions.push(e);\n            }\n\n            // doExecutionRelease();\n\n            log.debug(\"Step execution complete: \" + stepExecution.id);\n            return stepExecution;\n        });\n\n    }\n\n    determineJobStatus(e) {\n        if (e instanceof JobInterruptedException) {\n            return JOB_STATUS.STOPPED;\n        }\n        else {\n            return JOB_STATUS.FAILED;\n        }\n    }\n\n    /**\n     * Extension point for subclasses to execute business logic. Subclasses should set the exitStatus on the\n     * StepExecution before returning. Must return stepExecution\n     */\n    doExecute(stepExecution, jobResult) {\n    }\n\n    /**\n     * Extension point for subclasses to provide callbacks to their collaborators at the beginning of a step, to open or\n     * acquire resources. Does nothing by default.\n     */\n    open(executionContext) {\n    }\n\n    /**\n     * Extension point for subclasses to provide callbacks to their collaborators at the end of a step (right at the end\n     * of the finally block), to close or release resources. Does nothing by default.\n     */\n    close(executionContext) {\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(stepExecution){\n        return {\n            total: 1,\n            current: stepExecution.status === JOB_STATUS.COMPLETED ? 1 : 0\n        }\n    }\n}\n","import * as engine from './engine/index'\n\nexport {engine}\nexport * from './jobs-manager'\nexport * from './job-worker'\n\n\n\n","import {JobExecutionListener} from \"./engine/job-execution-listener\";\nimport {JOB_STATUS} from \"./engine/job-status\";\nimport {JobInstance} from \"./engine/job-instance\";\nimport {Utils, log} from \"sd-utils\";\n\n\nexport class JobInstanceManagerConfig {\n    onJobStarted = () => {};\n    onJobCompleted = result => {};\n    onJobFailed = errors => {};\n    onJobStopped = () => {};\n    onJobTerminated = () => {};\n    onProgress = (progress) => {};\n    callbacksThisArg;\n    updateInterval = 100;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/*convenience class for managing and tracking job instance progress*/\nexport class JobInstanceManager extends JobExecutionListener {\n\n    jobsManger;\n    jobInstance;\n    config;\n\n    lastJobExecution;\n    lastUpdateTime;\n    progress = null;\n\n    constructor(jobsManger, jobInstanceOrExecution, config) {\n        super();\n        this.config = new JobInstanceManagerConfig(config);\n        this.jobsManger = jobsManger;\n        if (jobInstanceOrExecution instanceof JobInstance) {\n            this.jobInstance = jobInstanceOrExecution;\n            this.getLastJobExecution().then(je=> {\n                this.checkProgress();\n            })\n        } else {\n            this.lastJobExecution = jobInstanceOrExecution;\n            this.jobInstance = this.lastJobExecution.jobInstance;\n            this.checkProgress();\n        }\n        if (this.lastJobExecution && !this.lastJobExecution.isRunning()) {\n            this.afterJob(this.lastJobExecution);\n            return;\n        }\n        jobsManger.registerJobExecutionListener(this);\n    }\n\n    checkProgress() {\n\n        var self = this;\n        if (this.terminated || !this.lastJobExecution.isRunning() || this.getProgressPercents(this.progress) === 100) {\n            return;\n        }\n        this.jobsManger.getProgress(this.lastJobExecution).then(progress=> {\n            this.lastUpdateTime = new Date();\n            if (progress) {\n                this.progress = progress;\n                this.config.onProgress.call(this.config.callbacksThisArg || this, progress);\n            }\n\n            setTimeout(function () {\n                self.checkProgress();\n            }, this.config.updateInterval)\n        })\n    }\n\n    beforeJob(jobExecution) {\n        if (jobExecution.jobInstance.id !== this.jobInstance.id) {\n            return;\n        }\n\n        this.lastJobExecution = jobExecution;\n        this.config.onJobStarted.call(this.config.callbacksThisArg || this);\n    }\n\n    getProgressPercents(progress) {\n        if (!progress) {\n            return 0;\n        }\n        return progress.current * 100 / progress.total;\n    }\n\n    getProgressFromExecution(jobExecution) {\n        var job = this.jobsManger.getJobByName(jobExecution.jobInstance.jobName);\n        return job.getProgress(jobExecution);\n    }\n\n    afterJob(jobExecution) {\n        if (jobExecution.jobInstance.id !== this.jobInstance.id) {\n            return;\n        }\n        this.lastJobExecution = jobExecution;\n        if (JOB_STATUS.COMPLETED === jobExecution.status) {\n            this.jobsManger.deregisterJobExecutionListener(this);\n            this.progress = this.getProgressFromExecution(jobExecution);\n            this.config.onProgress.call(this.config.callbacksThisArg || this, this.progress);\n            this.jobsManger.getResult(jobExecution.jobInstance).then(result=> {\n                this.config.onJobCompleted.call(this.config.callbacksThisArg || this, result.data);\n            }).catch(e=> {\n                log.error(e);\n            })\n\n\n        } else if (JOB_STATUS.FAILED === jobExecution.status) {\n            this.config.onJobFailed.call(this.config.callbacksThisArg || this, jobExecution.failureExceptions);\n\n        } else if (JOB_STATUS.STOPPED === jobExecution.status) {\n            this.config.onJobStopped.call(this.config.callbacksThisArg || this);\n        }\n    }\n\n    getLastJobExecution(forceUpdate = false) {\n        if (!this.lastJobExecution || forceUpdate) {\n            return this.jobsManger.jobRepository.getLastJobExecutionByInstance(this.jobInstance).then(je=> {\n                this.lastJobExecution = je;\n                return je;\n            });\n        }\n        return Promise.resolve(this.lastJobExecution);\n    }\n\n    stop() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.stop(this.lastJobExecution)\n        })\n    }\n\n    resume() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.run(this.jobInstance.jobName, this.lastJobExecution.jobParameters.values, this.lastJobExecution.getData()).then(je=> {\n                this.lastJobExecution = je;\n                this.checkProgress();\n                return true;\n            }).catch(e=> {\n                log.error(e);\n                return false;\n            })\n        })\n    }\n\n    terminate() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.terminate(this.jobInstance).then(()=> {\n                this.terminated = true;\n                this.config.onJobTerminated.call(this.config.callbacksThisArg || this, this.lastJobExecution);\n                this.jobsManger.deregisterJobExecutionListener(this);\n\n                return this.lastJobExecution;\n            })\n        }).catch(e=> {\n            log.error(e);\n            return false;\n        })\n    }\n\n}\n","export class JobWorker{\n\n    worker;\n    listeners = {};\n    defaultListener;\n\n    constructor(url, defaultListener, onError){\n        var instance = this;\n        this.worker = new Worker(url);\n        this.defaultListener = defaultListener || function() {};\n        if (onError) {this.worker.onerror = onError;}\n\n        this.worker.onmessage = function(event) {\n            if (event.data instanceof Object &&\n                event.data.hasOwnProperty('queryMethodListener') && event.data.hasOwnProperty('queryMethodArguments')) {\n                var listener = instance.listeners[event.data.queryMethodListener];\n                var args = event.data.queryMethodArguments;\n                if(listener.deserializer){\n                    args = listener.deserializer(args);\n                }\n                listener.fn.apply(listener.thisArg, args);\n            } else {\n                this.defaultListener.call(instance, event.data);\n            }\n        }\n\n    }\n\n    sendQuery() {\n        if (arguments.length < 1) {\n            throw new TypeError('JobWorker.sendQuery takes at least one argument');\n        }\n        this.worker.postMessage({\n            'queryMethod': arguments[0],\n            'queryArguments': Array.prototype.slice.call(arguments, 1)\n        });\n    }\n\n    runJob(jobName, jobParametersValues, dataDTO){\n        this.sendQuery('runJob', jobName, jobParametersValues, dataDTO)\n    }\n\n    executeJob(jobExecutionId){\n        this.sendQuery('executeJob', jobExecutionId)\n    }\n\n    recompute(dataDTO, ruleNames, evalCode, evalNumeric){\n        this.sendQuery('recompute', dataDTO, ruleNames, evalCode, evalNumeric)\n    }\n\n    postMessage(message) {\n        this.worker.postMessage(message);\n    }\n\n    terminate() {\n        this.worker.terminate();\n    }\n\n    addListener(name, listener, thisArg, deserializer) {\n        this.listeners[name] = {\n            fn: listener,\n            thisArg: thisArg || this,\n            deserializer: deserializer\n        };\n    }\n\n    removeListener(name) {\n        delete this.listeners[name];\n    }\n}\n","import {Utils, log} from \"sd-utils\";\nimport {SensitivityAnalysisJob} from \"./configurations/sensitivity-analysis/n-way/sensitivity-analysis-job\";\nimport {JobLauncher} from \"./engine/job-launcher\";\nimport {JobWorker} from \"./job-worker\";\nimport {JobExecutionListener} from \"./engine/job-execution-listener\";\nimport {JobParameters} from \"./engine/job-parameters\";\nimport {IdbJobRepository} from \"./engine/job-repository/idb-job-repository\";\nimport {JOB_EXECUTION_FLAG} from \"./engine/job-execution-flag\";\nimport {RecomputeJob} from \"./configurations/recompute/recompute-job\";\nimport {ProbabilisticSensitivityAnalysisJob} from \"./configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job\";\nimport {TimeoutJobRepository} from \"./engine/job-repository/timeout-job-repository\";\nimport {TornadoDiagramJob} from \"./configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job\";\nimport {JOB_STATUS} from \"./engine/job-status\";\nimport {SimpleJobRepository} from \"./engine/job-repository/simple-job-repository\";\nimport {LeagueTableJob} from \"./configurations/league-table/league-table-job\";\nimport {SpiderPlotJob} from \"./configurations/sensitivity-analysis/spider-plot/spider-plot-job\";\n\n\nexport class JobsManagerConfig {\n\n    workerUrl = null;\n    repositoryType = 'idb';\n    clearRepository = false;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\nexport class JobsManager extends JobExecutionListener {\n\n\n    useWorker;\n    expressionsEvaluator;\n    objectiveRulesManager;\n    jobWorker;\n\n    jobRepository;\n    jobLauncher;\n\n    jobExecutionListeners = [];\n\n    afterJobExecutionPromiseResolves = {};\n    jobInstancesToTerminate = {};\n\n    constructor(expressionsEvaluator, objectiveRulesManager, config) {\n        super();\n        this.setConfig(config);\n        this.expressionEngine = expressionsEvaluator.expressionEngine;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n\n\n        this.useWorker = !!this.config.workerUrl;\n        if (this.useWorker) {\n            this.initWorker(this.config.workerUrl);\n        }\n\n        this.initRepository();\n\n        this.registerJobs();\n\n\n\n        this.jobLauncher = new JobLauncher(this.jobRepository, this.jobWorker, (data)=>this.serializeData(data));\n    }\n\n    setConfig(config) {\n        this.config = new JobsManagerConfig(config);\n        return this;\n    }\n\n    initRepository() {\n        switch (this.config.repositoryType){\n            case 'idb':\n                this.jobRepository = new IdbJobRepository(this.expressionEngine.getJsonReviver(), 'sd-job-repository', this.config.clearRepository);\n                break;\n            case 'timeout':\n                this.jobRepository = new TimeoutJobRepository(this.expressionEngine.getJsonReviver());\n                break;\n            case 'simple':\n                this.jobRepository = new SimpleJobRepository(this.expressionEngine.getJsonReviver());\n                break;\n            default:\n                log.error('JobsManager configuration error! Unknown repository type: '+this.config.repositoryType+'. Using default: idb');\n                this.config.repositoryType = 'idb';\n                this.initRepository()\n        }\n    }\n\n    serializeData(data) {\n        return data.serialize(true, false, false, this.expressionEngine.getJsonReplacer());\n    }\n\n    getProgress(jobExecutionOrId) {\n        var id = jobExecutionOrId;\n        if (!Utils.isString(jobExecutionOrId)) {\n            id = jobExecutionOrId.id\n        }\n        return this.jobRepository.getJobExecutionProgress(id);\n    }\n\n    getResult(jobInstance) {\n        return this.jobRepository.getJobResultByInstance(jobInstance);\n    }\n\n    run(jobName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        return this.jobLauncher.run(jobName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched).then(jobExecution=> {\n            if (resolvePromiseAfterJobIsLaunched || !jobExecution.isRunning()) {\n                return jobExecution;\n            }\n            //job was delegated to worker and is still running\n\n            return new Promise((resolve, reject)=> {\n                this.afterJobExecutionPromiseResolves[jobExecution.id] = resolve;\n            });\n        });\n    }\n\n    execute(jobExecutionOrId) {\n        return this.jobLauncher.execute(jobExecutionOrId);\n    }\n\n    stop(jobExecutionOrId) {\n        var id = jobExecutionOrId;\n        if (!Utils.isString(jobExecutionOrId)) {\n            id = jobExecutionOrId.id\n        }\n\n        return this.jobRepository.getJobExecutionById(id).then(jobExecution=> {\n            if (!jobExecution) {\n                log.error(\"Job Execution not found: \" + jobExecutionOrId);\n                return null;\n            }\n            if (!jobExecution.isRunning()) {\n                log.warn(\"Job Execution not running, status: \" + jobExecution.status + \", endTime: \" + jobExecution.endTime);\n                return jobExecution;\n            }\n\n            return this.jobRepository.saveJobExecutionFlag(jobExecution.id, JOB_EXECUTION_FLAG.STOP).then(()=>jobExecution);\n        });\n    }\n\n    /*stop job execution if running and delete job instance from repository*/\n    terminate(jobInstance) {\n        return this.jobRepository.getLastJobExecutionByInstance(jobInstance).then(jobExecution=> {\n            if (jobExecution) {\n                if(jobExecution.isRunning()){\n                    return this.jobRepository.saveJobExecutionFlag(jobExecution.id, JOB_EXECUTION_FLAG.STOP).then(()=>jobExecution);\n                }else{\n                    return this.jobRepository.removeJobInstance(jobInstance, jobExecution.jobParameters);\n                }\n            }\n        }).then(()=>{\n            this.jobInstancesToTerminate[jobInstance.id]=jobInstance;\n        })\n    }\n\n    getJobByName(jobName) {\n        return this.jobRepository.getJobByName(jobName);\n    }\n\n\n    createJobParameters(jobName, jobParametersValues) {\n        var job = this.jobRepository.getJobByName(jobName);\n        return job.createJobParameters(jobParametersValues);\n    }\n\n\n    /*Returns a promise*/\n    getLastJobExecution(jobName, jobParameters) {\n        if (this.useWorker) {\n            return this.jobWorker;\n        }\n        if (!(jobParameters instanceof JobParameters)) {\n            jobParameters = this.createJobParameters(jobParameters)\n        }\n        return this.jobRepository.getLastJobExecution(jobName, jobParameters);\n    }\n\n    initWorker(workerUrl) {\n        this.jobWorker = new JobWorker(workerUrl, ()=>{\n            log.error('error in worker', arguments);\n        });\n        var argsDeserializer = (args)=> {\n            return [this.jobRepository.reviveJobExecution(args[0])]\n        };\n\n        this.jobWorker.addListener(\"beforeJob\", this.beforeJob, this, argsDeserializer);\n        this.jobWorker.addListener(\"afterJob\", this.afterJob, this, argsDeserializer);\n        this.jobWorker.addListener(\"jobFatalError\", this.onJobFatalError, this);\n    }\n\n    registerJobs() {\n\n        let sensitivityAnalysisJob = new SensitivityAnalysisJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        let probabilisticSensitivityAnalysisJob = new ProbabilisticSensitivityAnalysisJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        if(!Utils.isWorker()){\n            sensitivityAnalysisJob.setBatchSize(1);\n            probabilisticSensitivityAnalysisJob.setBatchSize(1);\n        }\n\n        this.registerJob(sensitivityAnalysisJob);\n        this.registerJob(new TornadoDiagramJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(probabilisticSensitivityAnalysisJob);\n        this.registerJob(new RecomputeJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new LeagueTableJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new SpiderPlotJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n    }\n\n    registerJob(job) {\n        this.jobRepository.registerJob(job);\n        job.registerExecutionListener(this)\n    }\n\n    registerJobExecutionListener(listener) {\n        this.jobExecutionListeners.push(listener);\n    }\n\n    deregisterJobExecutionListener(listener) {\n        var index = this.jobExecutionListeners.indexOf(listener);\n        if (index > -1) {\n            this.jobExecutionListeners.splice(index, 1)\n        }\n    }\n\n    beforeJob(jobExecution) {\n        log.debug(\"beforeJob\", this.useWorker, jobExecution);\n        this.jobExecutionListeners.forEach(l=>l.beforeJob(jobExecution));\n    }\n\n    afterJob(jobExecution) {\n        log.debug(\"afterJob\", this.useWorker, jobExecution);\n        this.jobExecutionListeners.forEach(l=>l.afterJob(jobExecution));\n        var promiseResolve = this.afterJobExecutionPromiseResolves[jobExecution.id];\n        if (promiseResolve) {\n            promiseResolve(jobExecution)\n        }\n\n        if(this.jobInstancesToTerminate[jobExecution.jobInstance.id]){\n            this.jobRepository.removeJobInstance(jobExecution.jobInstance, jobExecution.jobParameters);\n        }\n    }\n\n    onJobFatalError(jobExecutionId, error){\n        var promiseResolve = this.afterJobExecutionPromiseResolves[jobExecutionId];\n        if (promiseResolve) {\n            this.jobRepository.getJobExecutionById(jobExecutionId).then(jobExecution=>{\n                jobExecution.status = JOB_STATUS.FAILED;\n                if(error){\n                    jobExecution.failureExceptions.push(error);\n                }\n\n                return this.jobRepository.saveJobExecution(jobExecution).then(()=>{\n                    promiseResolve(jobExecution);\n                })\n            }).catch(e=>{\n                log.error(e);\n            })\n\n        }\n        log.debug('onJobFatalError', jobExecutionId, error);\n    }\n\n\n}\n","import {\n    ExpectedValueMaximizationRule,\n    ExpectedValueMinimizationRule,\n    MaxiMinRule,\n    MaxiMaxRule,\n    MiniMinRule,\n    MiniMaxRule\n} from \"./rules\";\nimport {log} from \"sd-utils\";\nimport * as model from \"sd-model\";\nimport {MinMaxRule} from \"./rules/min-max-rule\";\nimport {MaxMinRule} from \"./rules/max-min-rule\";\nimport {MinMinRule} from \"./rules/min-min-rule\";\nimport {MaxMaxRule} from \"./rules/max-max-rule\";\n\nexport class ObjectiveRulesManager{\n\n    expressionEngine;\n    currentRule;\n    ruleByName = {};\n    rules = [];\n\n\n    flipPair = {};\n    payoffIndex = 0;\n\n    constructor(expressionEngine, currentRuleName) {\n        this.expressionEngine = expressionEngine;\n        this.addRule(new ExpectedValueMaximizationRule(expressionEngine));\n        this.addRule(new ExpectedValueMinimizationRule(expressionEngine));\n        this.addRule(new MaxiMinRule(expressionEngine));\n        this.addRule(new MaxiMaxRule(expressionEngine));\n        this.addRule(new MiniMinRule(expressionEngine));\n        this.addRule(new MiniMaxRule(expressionEngine));\n\n        let minMax = new MinMaxRule(expressionEngine);\n        this.addRule(minMax);\n        let maxMin = new MaxMinRule(expressionEngine);\n        this.addRule(maxMin);\n        this.addFlipPair(minMax, maxMin);\n\n        let minMin = new MinMinRule(expressionEngine);\n        this.addRule(minMin);\n        let maxMax = new MaxMaxRule(expressionEngine);\n        this.addRule(maxMax);\n\n\n        if (currentRuleName) {\n            this.currentRule = this.ruleByName[currentRuleName];\n        } else {\n            this.currentRule = this.rules[0];\n        }\n\n    }\n\n\n    setPayoffIndex(payoffIndex){\n        this.payoffIndex = payoffIndex || 0;\n    }\n\n    addRule(rule){\n        this.ruleByName[rule.name]=rule;\n        this.rules.push(rule);\n    }\n\n    isRuleName(ruleName){\n         return !!this.ruleByName[ruleName]\n    }\n\n    setCurrentRuleByName(ruleName){\n        this.currentRule = this.ruleByName[ruleName];\n    }\n\n    getObjectiveRuleByName(ruleName){\n        return this.ruleByName[ruleName];\n    }\n\n    flipRule(){\n        var flipped = this.flipPair[this.currentRule.name];\n        if(flipped){\n            this.currentRule = flipped;\n        }\n    }\n\n    updateDefaultCriterion1Weight(defaultCriterion1Weight){\n        this.rules.filter(r=>r.multiCriteria).forEach(r=>r.setDefaultCriterion1Weight(defaultCriterion1Weight));\n    }\n\n    recompute(dataModel, allRules, decisionPolicy=null){\n\n        var startTime = new Date().getTime();\n        log.trace('recomputing rules, all: '+allRules);\n\n        dataModel.getRoots().forEach(n=>{\n            this.recomputeTree(n, allRules, decisionPolicy);\n        });\n\n        var time  = (new Date().getTime() - startTime/1000);\n        log.trace('recomputation took '+time+'s');\n\n        return this;\n    }\n\n    recomputeTree(root, allRules, decisionPolicy=null){\n        log.trace('recomputing rules for tree ...', root);\n\n        var startTime = new Date().getTime();\n\n        var rules  = [this.currentRule];\n        if(allRules){\n            rules = this.rules;\n        }\n\n        rules.forEach(rule=> {\n            rule.setPayoffIndex(this.payoffIndex);\n            rule.setDecisionPolicy(decisionPolicy);\n            rule.computePayoff(root);\n            rule.computeOptimal(root);\n            rule.clearDecisionPolicy();\n        });\n\n        var time  = (new Date().getTime() - startTime)/1000;\n        log.trace('recomputation took '+time+'s');\n\n        return this;\n    }\n\n\n    getNodeDisplayValue(node, name) {\n        return node.computedValue(this.currentRule.name, name)\n\n    }\n\n    getEdgeDisplayValue(e, name){\n        if(name==='probability'){\n            if(e.parentNode instanceof model.domain.DecisionNode){\n                return e.computedValue(this.currentRule.name, 'probability');\n            }\n            if(e.parentNode instanceof model.domain.ChanceNode){\n                return e.computedBaseProbability();\n            }\n            return null;\n        }\n        if(name==='payoff'){\n            if(this.currentRule.multiCriteria){\n                return e.computedValue(null, 'payoff');\n            }else{\n                return e.computedValue(null, 'payoff[' +this.payoffIndex + ']');\n            }\n\n        }\n        if(name==='optimal'){\n            return e.computedValue(this.currentRule.name, 'optimal')\n        }\n    }\n\n    addFlipPair(rule1, rule2) {\n        this.flipPair[rule1.name] = rule2;\n        this.flipPair[rule2.name] = rule1;\n    }\n\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from 'sd-utils'\n\n/*expected value maximization rule*/\nexport class ExpectedValueMaximizationRule extends ObjectiveRule{\n\n    static NAME = 'expected-value-maximization';\n\n    constructor(expressionEngine){\n        super(ExpectedValueMaximizationRule.NAME, true, expressionEngine);\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff=0, probabilityToEnter=1){\n        this.cValue(node, 'optimal', true);\n        if(node instanceof model.TerminalNode){\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=>{\n            if ( this.subtract(this.computedPayoff(node),payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode) ) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e,'probability')));\n            }else{\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*expected value minimization rule*/\nexport class ExpectedValueMinimizationRule extends ObjectiveRule{\n\n    static NAME = 'expected-value-minimization';\n\n    constructor(expressionEngine){\n        super(ExpectedValueMinimizationRule.NAME, false, expressionEngine);\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff=0, probabilityToEnter=1){\n        this.cValue(node, 'optimal', true);\n        if(node instanceof model.TerminalNode){\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=>{\n            if ( this.subtract(this.computedPayoff(node),payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode) ) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e,'probability')));\n            }else{\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","export * from './objective-rule'\nexport * from './expected-value-maximization-rule'\nexport * from './expected-value-minimization-rule'\nexport * from './maxi-max-rule'\nexport * from './maxi-min-rule'\nexport * from './mini-max-rule'\nexport * from './mini-min-rule'\n\n\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MaxMaxRule extends MultiCriteriaRule{\n\n    static NAME = 'max-max';\n\n    constructor(expressionEngine){\n        super(MaxMaxRule.NAME, [1, 1], expressionEngine);\n    }\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MaxMinRule extends MultiCriteriaRule{\n\n    static NAME = 'max-min';\n\n    constructor(expressionEngine){\n        super(MaxMinRule.NAME, [1, -1], expressionEngine);\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*maxi-max rule*/\nexport class MaxiMaxRule extends ObjectiveRule{\n\n    static NAME = 'maxi-max';\n\n    constructor(expressionEngine){\n        super(MaxiMaxRule.NAME, true, expressionEngine);\n    }\n\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)<bestChildPayoff ? 0.0 : (1.0/bestCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.maxBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*maxi-min rule*/\nexport class MaxiMinRule extends ObjectiveRule{\n\n    static NAME = 'maxi-min';\n\n    constructor(expressionEngine){\n        super(MaxiMinRule.NAME, true, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)>worstChildPayoff ? 0.0 : (1.0/worstCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.minBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MinMaxRule extends MultiCriteriaRule{\n\n    static NAME = 'min-max';\n\n    constructor(expressionEngine){\n        super(MinMaxRule.NAME, [-1, 1], expressionEngine);\n    }\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MinMinRule extends MultiCriteriaRule{\n\n    static NAME = 'min-min';\n\n    constructor(expressionEngine){\n        super(MinMinRule.NAME, [-1, -1], expressionEngine);\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*mini-max rule*/\nexport class MiniMaxRule extends ObjectiveRule{\n\n    static NAME = 'mini-max';\n\n    constructor(expressionEngine){\n        super(MiniMaxRule.NAME, false, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)<bestChildPayoff ? 0.0 : (1.0/bestCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.maxBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*mini-min rule*/\nexport class MiniMinRule extends ObjectiveRule{\n\n    static NAME = 'mini-min';\n\n    constructor(expressionEngine){\n        super(MiniMinRule.NAME, false, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)>worstChildPayoff ? 0.0 : (1.0/worstCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.minBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from \"sd-model\";\nimport {ObjectiveRule} from \"./objective-rule\";\nimport {Policy} from \"../../policies/policy\";\n\n\nexport class MultiCriteriaRule extends ObjectiveRule {\n\n    criterion1Weight = 1;\n    payoffCoeffs = [1, -1];\n\n    constructor(name, payoffCoeffs, expressionEngine) {\n        super(name, true, expressionEngine, true);\n        this.payoffCoeffs = payoffCoeffs;\n\n    }\n\n    setDefaultCriterion1Weight(criterion1Weight) {\n        this.criterion1Weight = criterion1Weight;\n    }\n\n    // payoff - parent edge payoff, aggregatedPayoff - aggregated payoff along path\n    computePayoff(node, payoff = [0, 0], aggregatedPayoff = [0, 0]) {\n        var childrenPayoff = [0, 0];\n        if (node.childEdges.length) {\n            if (node instanceof model.DecisionNode) {\n\n                var selectedIndexes = [];\n                var bestChild = -Infinity;\n\n                node.childEdges.forEach((e, i)=> {\n                    let basePayoffs = [this.basePayoff(e, 0), this.basePayoff(e, 1)];\n                    var childPayoff = this.computePayoff(e.childNode, basePayoffs, [this.add(basePayoffs[0], aggregatedPayoff[0]), this.add(basePayoffs[1], aggregatedPayoff[1])]);\n                    var childCombinedPayoff = this.cValue(e.childNode, 'combinedPayoff');\n                    if (childCombinedPayoff > bestChild) {\n                        bestChild = childCombinedPayoff;\n                        selectedIndexes = [i];\n                    } else if (bestChild.equals(childCombinedPayoff)) {\n                        selectedIndexes.push(i);\n                    }\n                });\n\n                if (this.decisionPolicy) {\n                    selectedIndexes = [];\n                    var decision = Policy.getDecision(this.decisionPolicy, node);\n                    if (decision) {\n                        selectedIndexes = [decision.decisionValue];\n                    }\n\n                }\n\n                node.childEdges.forEach((e, i)=> {\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', selectedIndexes.indexOf(i) < 0 ? 0.0 : 1.0);\n                });\n            } else {\n                node.childEdges.forEach(e=> {\n                    let basePayoffs = [this.basePayoff(e, 0), this.basePayoff(e, 1)];\n                    this.computePayoff(e.childNode, basePayoffs, [this.add(basePayoffs[0], aggregatedPayoff[0]), this.add(basePayoffs[1], aggregatedPayoff[1])]);\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', this.baseProbability(e));\n                });\n            }\n\n            var sumweight = 0;\n            node.childEdges.forEach(e=> {\n                sumweight = this.add(sumweight, this.cValue(e, 'probability'));\n            });\n\n            if (sumweight > 0) {\n                node.childEdges.forEach(e=> {\n                    childrenPayoff.forEach((p, i)=> {\n                        let ep = this.cValue(e.childNode, 'payoff[' + i + ']');\n                        childrenPayoff[i] = this.add(p, this.multiply(this.cValue(e, 'probability'), ep).div(sumweight))\n                    });\n                });\n            }\n\n\n        }\n        payoff.forEach((p, i)=> {\n            payoff[i] = this.add(p, childrenPayoff[i]);\n        });\n\n        this.clearComputedValues(node);\n\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'aggregatedPayoff', aggregatedPayoff);\n            this.cValue(node, 'probabilityToEnter', 0); //initial value\n        } else {\n            this.cValue(node, 'childrenPayoff', childrenPayoff);\n        }\n\n        this.cValue(node, 'combinedPayoff', this.computeCombinedPayoff(payoff));\n\n        return this.cValue(node, 'payoff', payoff);\n    }\n\n    computeCombinedPayoff(payoff){\n        // [criterion 1 coeff]*[criterion 1]*[weight]+[criterion 2 coeff]*[criterion 2]\n        if (this.criterion1Weight === Infinity) {\n            return this.multiply(this.payoffCoeffs[0], payoff[0]);\n        }\n        return this.add(this.multiply(this.payoffCoeffs[0], this.multiply(this.criterion1Weight, payoff[0])), this.multiply(this.payoffCoeffs[1], payoff[1]));\n    }\n\n    //  combinedPayoff - parent edge combinedPayoff\n    computeOptimal(node, combinedPayoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=> {\n            if (this.subtract(this.cValue(node, 'combinedPayoff'), combinedPayoff).equals(this.cValue(e.childNode, 'combinedPayoff')) || !(node instanceof model.DecisionNode)) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.computeCombinedPayoff([this.basePayoff(e, 0), this.basePayoff(e, 1)]), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {domain as model} from \"sd-model\";\nimport {Policy} from \"../../policies/policy\";\n\n/*Base class for objective rules*/\nexport class ObjectiveRule {\n    name;\n    expressionEngine;\n\n    decisionPolicy;\n    maximization;\n\n    payoffIndex = 0;\n    multiCriteria = false;\n\n    constructor(name, maximization, expressionEngine, multiCriteria=false) {\n        this.name = name;\n        this.maximization = maximization;\n        this.expressionEngine = expressionEngine;\n        this.multiCriteria = multiCriteria;\n    }\n\n    setDecisionPolicy(decisionPolicy) {\n        this.decisionPolicy = decisionPolicy;\n    }\n\n    setPayoffIndex(payoffIndex) {\n        this.payoffIndex = payoffIndex;\n    }\n\n    clearDecisionPolicy() {\n        this.decisionPolicy = null;\n    }\n\n    // should return array of selected children indexes\n    makeDecision(decisionNode, childrenPayoffs) {\n        var best;\n        if (this.maximization) {\n            best = this.max(...childrenPayoffs);\n        } else {\n            best = this.min(...childrenPayoffs);\n        }\n        var selectedIndexes = [];\n        childrenPayoffs.forEach((p, i)=> {\n            if (ExpressionEngine.compare(best, p) == 0) {\n                selectedIndexes.push(i);\n            }\n        });\n        return selectedIndexes;\n    }\n\n    _makeDecision(decisionNode, childrenPayoffs) {\n        if (this.decisionPolicy) {\n            var decision = Policy.getDecision(this.decisionPolicy, decisionNode);\n            if (decision) {\n                return [decision.decisionValue];\n            }\n            return [];\n        }\n        return this.makeDecision(decisionNode, childrenPayoffs);\n    }\n\n    // extension point for changing computed probability of edges in a chance node\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount) {\n\n    }\n\n    // payoff - parent edge payoff, aggregatedPayoff - aggregated payoff along path\n    computePayoff(node, payoff = 0, aggregatedPayoff = 0) {\n        var childrenPayoff = 0;\n        if (node.childEdges.length) {\n            if (node instanceof model.DecisionNode) {\n\n                var selectedIndexes = this._makeDecision(node, node.childEdges.map(e=>this.computePayoff(e.childNode, this.basePayoff(e), this.add(this.basePayoff(e), aggregatedPayoff))));\n                node.childEdges.forEach((e, i)=> {\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', selectedIndexes.indexOf(i) < 0 ? 0.0 : 1.0);\n                });\n\n            } else {\n                var bestChild = -Infinity;\n                var bestCount = 1;\n                var worstChild = Infinity;\n                var worstCount = 1;\n\n                node.childEdges.forEach(e=> {\n                    var childPayoff = this.computePayoff(e.childNode, this.basePayoff(e), this.add(this.basePayoff(e), aggregatedPayoff));\n                    if (childPayoff < worstChild) {\n                        worstChild = childPayoff;\n                        worstCount = 1;\n                    } else if (childPayoff.equals(worstChild)) {\n                        worstCount++\n                    }\n                    if (childPayoff > bestChild) {\n                        bestChild = childPayoff;\n                        bestCount = 1;\n                    } else if (childPayoff.equals(bestChild)) {\n                        bestCount++\n                    }\n\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', this.baseProbability(e));\n                });\n                this.modifyChanceProbability(node.childEdges, bestChild, bestCount, worstChild, worstCount);\n            }\n\n            var sumweight = 0;\n            node.childEdges.forEach(e=> {\n                sumweight = this.add(sumweight, this.cValue(e, 'probability'));\n            });\n\n            // console.log(payoff,node.childEdges,'sumweight',sumweight);\n            if (sumweight > 0) {\n                node.childEdges.forEach(e=> {\n                    childrenPayoff = this.add(childrenPayoff, this.multiply(this.cValue(e, 'probability'), this.computedPayoff(e.childNode)).div(sumweight));\n                });\n            }\n\n\n        }\n\n        payoff = this.add(payoff, childrenPayoff);\n        this.clearComputedValues(node);\n\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'aggregatedPayoff'+ '[' + this.payoffIndex + ']', aggregatedPayoff);\n            this.cValue(node, 'probabilityToEnter', 0); //initial value\n        } else {\n            this.cValue(node, 'childrenPayoff' + '[' + this.payoffIndex + ']', childrenPayoff);\n        }\n\n        return this.computedPayoff(node, payoff);\n    }\n\n    // koloruje optymalne ścieżki\n    computeOptimal(node) {\n        throw 'computeOptimal function not implemented for rule: ' + this.name\n    }\n\n    /* get or set computed payoff*/\n    computedPayoff(node, value){\n        return this.cValue(node, 'payoff[' + this.payoffIndex + ']', value)\n    }\n\n    /*Get or set object's computed value for current rule*/\n    cValue(object, fieldPath, value) {\n        // if(fieldPath.trim() === 'payoff'){\n        //     fieldPath += '[' + this.payoffIndex + ']';\n        // }\n\n        return object.computedValue(this.name, fieldPath, value);\n    }\n\n    baseProbability(edge) {\n        return edge.computedBaseProbability();\n    }\n\n    basePayoff(edge, payoffIndex) {\n        return edge.computedBasePayoff(undefined, payoffIndex || this.payoffIndex);\n    }\n\n    clearComputedValues(object) {\n        object.clearComputedValues(this.name);\n    }\n\n    add(a, b) {\n        return ExpressionEngine.add(a, b)\n    }\n\n    subtract(a, b) {\n        return ExpressionEngine.subtract(a, b)\n    }\n\n    divide(a, b) {\n        return ExpressionEngine.divide(a, b)\n    }\n\n    multiply(a, b) {\n        return ExpressionEngine.multiply(a, b)\n    }\n\n    max() {\n        return ExpressionEngine.max(...arguments)\n    }\n\n    min() {\n        return ExpressionEngine.min(...arguments)\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ExpressionEngine} from 'sd-expression-engine'\nimport {log} from 'sd-utils'\nimport {Operation} from \"./operation\";\nimport {TreeValidator} from \"../validation/tree-validator\";\n\n/*Subtree flipping operation*/\nexport class FlipSubtree extends Operation{\n\n    static $NAME = 'flipSubtree';\n    data;\n    expressionEngine;\n\n    constructor(data, expressionEngine) {\n        super(FlipSubtree.$NAME);\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.treeValidator = new TreeValidator(expressionEngine);\n    }\n\n    isApplicable(object){\n        return object instanceof model.ChanceNode\n    }\n\n    canPerform(node) {\n        if (!this.isApplicable(node)) {\n            return false;\n        }\n\n        if (!this.treeValidator.validate(this.data.getAllNodesInSubtree(node)).isValid()) { //check if the whole subtree is proper\n            return false;\n        }\n\n        if (node.childEdges.length < 1) {\n            return false;\n        }\n\n\n        var grandchildrenNumber = null;\n        var grandchildrenEdgeLabels = [];\n        var childrenEdgeLabelsSet = new Set();\n        var grandchildrenEdgeLabelsSet;\n        if (!node.childEdges.every(e=> {\n\n                var child = e.childNode;\n                if (!(child instanceof model.ChanceNode)) {\n                    return false;\n                }\n\n                if (childrenEdgeLabelsSet.has(e.name.trim())) { // edge labels should be unique\n                    return false;\n                }\n                childrenEdgeLabelsSet.add(e.name.trim());\n\n                if (grandchildrenNumber === null) {\n                    grandchildrenNumber = child.childEdges.length;\n                    if (grandchildrenNumber < 1) {\n                        return false;\n                    }\n                    child.childEdges.forEach(ge=> {\n                        grandchildrenEdgeLabels.push(ge.name.trim());\n                    });\n\n                    grandchildrenEdgeLabelsSet = new Set(grandchildrenEdgeLabels);\n\n                    if (grandchildrenEdgeLabelsSet.size !== grandchildrenEdgeLabels.length) { //grandchildren edge labels should be unique\n                        return false;\n                    }\n\n                    return true;\n                }\n\n                if (child.childEdges.length != grandchildrenNumber) {\n                    return false;\n                }\n\n                if (!child.childEdges.every((ge, i)=>grandchildrenEdgeLabels[i] === ge.name.trim())) {\n                    return false;\n                }\n\n                return true;\n\n            })) {\n\n            return false;\n        }\n\n        return true;\n    }\n\n    perform(root) {\n\n        var rootClone = this.data.cloneSubtree(root, true);\n        var oldChildrenNumber = root.childEdges.length;\n        var oldGrandChildrenNumber = root.childEdges[0].childNode.childEdges.length;\n\n        var childrenNumber = oldGrandChildrenNumber;\n        var grandChildrenNumber = oldChildrenNumber;\n\n        var callbacksDisabled = this.data.callbacksDisabled;\n        this.data.callbacksDisabled = true;\n\n\n        var childX = root.childEdges[0].childNode.location.x;\n        var topY = root.childEdges[0].childNode.childEdges[0].childNode.location.y;\n        var bottomY = root.childEdges[oldChildrenNumber - 1].childNode.childEdges[oldGrandChildrenNumber - 1].childNode.location.y;\n\n        var extentY = bottomY - topY;\n        var stepY = extentY / (childrenNumber + 1);\n\n        root.childEdges.slice().forEach(e=> this.data.removeNode(e.childNode));\n\n\n        for (var i = 0; i < childrenNumber; i++) {\n            var child = new model.ChanceNode(new model.Point(childX, topY + (i + 1) * stepY));\n            var edge = this.data.addNode(child, root);\n            edge.name = rootClone.childEdges[0].childNode.childEdges[i].name;\n\n            edge.probability = 0;\n\n            for (var j = 0; j < grandChildrenNumber; j++) {\n                var grandChild = rootClone.childEdges[j].childNode.childEdges[i].childNode;\n\n\n                var grandChildEdge = this.data.attachSubtree(grandChild, child);\n                grandChildEdge.name = rootClone.childEdges[j].name;\n                grandChildEdge.payoff = [\n                    ExpressionEngine.add(rootClone.childEdges[j].computedBasePayoff(undefined, 0), rootClone.childEdges[j].childNode.childEdges[i].computedBasePayoff(undefined, 0)),\n                    ExpressionEngine.add(rootClone.childEdges[j].computedBasePayoff(undefined, 1), rootClone.childEdges[j].childNode.childEdges[i].computedBasePayoff(undefined, 1)),\n                ];\n\n                grandChildEdge.probability = ExpressionEngine.multiply(rootClone.childEdges[j].computedBaseProbability(), rootClone.childEdges[j].childNode.childEdges[i].computedBaseProbability());\n                edge.probability = ExpressionEngine.add(edge.probability, grandChildEdge.probability);\n            }\n\n            var divideGrandChildEdgeProbability = p => ExpressionEngine.divide(p, edge.probability);\n            if (edge.probability.equals(0)) {\n                var prob = ExpressionEngine.divide(1, grandChildrenNumber);\n                divideGrandChildEdgeProbability = p => prob;\n            }\n\n            var probabilitySum = 0.0;\n            child.childEdges.forEach(grandChildEdge=> {\n                grandChildEdge.probability = divideGrandChildEdgeProbability(grandChildEdge.probability);\n                probabilitySum = ExpressionEngine.add(probabilitySum, grandChildEdge.probability);\n                grandChildEdge.probability = this.expressionEngine.serialize(grandChildEdge.probability)\n            });\n\n            this._normalizeProbabilitiesAfterFlip(child.childEdges, probabilitySum);\n            edge.probability = this.expressionEngine.serialize(edge.probability)\n        }\n        this._normalizeProbabilitiesAfterFlip(root.childEdges);\n\n\n        this.data.callbacksDisabled = callbacksDisabled;\n        this.data._fireNodeAddedCallback();\n    }\n\n    _normalizeProbabilitiesAfterFlip(childEdges, probabilitySum){\n        if(!probabilitySum){\n            probabilitySum = 0.0;\n            childEdges.forEach(e=> {\n                probabilitySum = ExpressionEngine.add(probabilitySum, e.probability);\n            });\n        }\n        if (!probabilitySum.equals(1)) {\n            log.info('Sum of the probabilities in child nodes is not equal to 1 : ', probabilitySum);\n            var newProbabilitySum = 0.0;\n            var cf = 1000000000000; //10^12\n            var prec = 12;\n            childEdges.forEach(e=> {\n                e.probability = parseInt(ExpressionEngine.round(e.probability, prec) * cf);\n                newProbabilitySum = newProbabilitySum + e.probability;\n            });\n            var rest = cf - newProbabilitySum;\n            log.info('Normalizing with rounding to precision: ' + prec, rest);\n            childEdges[0].probability = ExpressionEngine.add(rest, childEdges[0].probability);\n            newProbabilitySum = 0.0;\n            childEdges.forEach(e=> {\n                e.probability = this.expressionEngine.serialize(ExpressionEngine.divide(parseInt(e.probability), cf))\n            })\n        }\n    }\n}\n","\n/*Base class for complex operations on tree structure*/\nexport class Operation{\n\n    name;\n\n    constructor(name){\n        this.name = name;\n    }\n\n    //check if operation is potentially applicable for object\n    isApplicable(){\n        throw 'isApplicable function not implemented for operation: '+this.name\n    }\n\n    //check if can perform operation for applicable object\n    canPerform(object){\n        throw 'canPerform function not implemented for operation: '+this.name\n    }\n\n    perform(object){\n        throw 'perform function not implemented for operation: '+this.name\n    }\n\n\n}\n","import {FlipSubtree} from \"./flip-subtree\";\n\n\nexport class OperationsManager {\n\n    operations = [];\n    operationByName = {};\n\n    constructor(data, expressionEngine){\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.registerOperation(new FlipSubtree(data, expressionEngine));\n    }\n\n    registerOperation(operation){\n        this.operations.push(operation);\n        this.operationByName[operation.name] = operation;\n    }\n\n\n    getOperationByName(name){\n        return this.operationByName[name];\n    }\n\n    operationsForObject(object){\n        return this.operations.filter(op=>op.isApplicable(object))\n    }\n\n    setData(data){\n        this.data = data;\n        this.operations.forEach(o => o.data = data)\n    }\n}\n","\nexport class Decision{\n    node;\n    decisionValue; //index of  selected edge\n    children = [];\n    key;\n\n    constructor(node, decisionValue) {\n        this.node = node;\n        this.decisionValue = decisionValue;\n        this.key = Decision.generateKey(this);\n    }\n\n    static generateKey(decision, keyProperty='$id'){\n        var e = decision.node.childEdges[decision.decisionValue];\n        var key = decision.node[keyProperty]+\":\"+(e[keyProperty]? e[keyProperty] : decision.decisionValue+1);\n        return key.replace(/\\n/g, ' ');\n    }\n\n    addDecision(node, decisionValue){\n        var decision = new Decision(node, decisionValue);\n        this.children.push(decision);\n        this.key = Decision.generateKey(this);\n        return decision;\n    }\n\n    getDecision(decisionNode){\n        return Decision.getDecision(this, decisionNode)\n    }\n\n    static getDecision(decision, decisionNode){\n        if(decision.node===decisionNode || decision.node.$id === decisionNode.$id){\n            return decision;\n        }\n        for(var i=0; i<decision.children.length; i++){\n            var d = Decision.getDecision(decision.children[i], decisionNode);\n            if(d){\n                return d;\n            }\n        }\n    }\n\n    static toDecisionString(decision, extended=false, keyProperty='name', indent = ''){\n\n        var res = Decision.generateKey(decision, keyProperty);\n        var childrenRes = \"\";\n\n        decision.children.forEach(d=>{\n            if(childrenRes){\n                if(extended){\n                    childrenRes += '\\n'+indent;\n                }else{\n                    childrenRes += \", \"\n                }\n\n            }\n            childrenRes += Decision.toDecisionString(d,extended,keyProperty, indent+'\\t')\n        });\n        if(decision.children.length){\n            if(extended){\n                childrenRes =  '\\n'+indent +childrenRes;\n            }else{\n                childrenRes = \" - (\" + childrenRes + \")\";\n            }\n\n\n\n        }\n\n        return res+childrenRes;\n    }\n\n    toDecisionString(indent=false){\n        return Decision.toDecisionString(this, indent)\n    }\n}\n","import {Policy} from \"./policy\";\nimport {domain as model} from 'sd-model'\nimport {Utils} from 'sd-utils'\nimport {Decision} from \"./decision\";\n\nexport class PoliciesCollector{\n    policies = [];\n    ruleName=false;\n\n    constructor(root, optimalForRuleName){\n        this.ruleName = optimalForRuleName;\n        this.collect(root).forEach((decisions,i)=>{\n            this.policies.push(new Policy(\"#\"+(i+1), decisions));\n        });\n        if(this.policies.length===1){\n            this.policies[0].id = \"default\"\n        }\n    }\n\n    collect(root){\n        var nodeQueue = [root];\n        var node;\n        var decisionNodes = [];\n        while(nodeQueue.length){\n            node = nodeQueue.shift();\n\n            if(this.ruleName && !node.computedValue(this.ruleName, 'optimal')){\n                continue;\n            }\n\n            if(node instanceof model.DecisionNode){\n                decisionNodes.push(node);\n                continue;\n            }\n\n            node.childEdges.forEach((edge, i)=>{\n                nodeQueue.push(edge.childNode)\n            })\n        }\n\n        return Utils.cartesianProductOf(decisionNodes.map((decisionNode)=>{\n            var decisions= [];\n            decisionNode.childEdges.forEach((edge, i)=>{\n\n                if(this.ruleName && !edge.computedValue(this.ruleName, 'optimal')){\n                    return;\n                }\n\n                var childDecisions = this.collect(edge.childNode); //all possible child decisions (cartesian)\n                childDecisions.forEach(cd=>{\n                    var decision = new Decision(decisionNode, i);\n                    decisions.push(decision);\n                    decision.children = cd;\n                })\n\n            });\n            return decisions;\n        }));\n    }\n\n}\n","import {Decision} from \"./decision\";\n\nexport class Policy{\n    id;\n    decisions = [];\n\n    constructor(id, decisions){\n        this.id = id;\n        this.decisions = decisions || [];\n        this.key = Policy.generateKey(this);\n    }\n\n    addDecision(node, decisionValue){\n        var decision = new Decision(node, decisionValue);\n        this.decisions .push(decision);\n        this.key = Policy.generateKey(this);\n        return decision;\n    }\n\n    static generateKey(policy){\n        var key = \"\";\n        policy.decisions.forEach(d=>key+=(key? \"&\": \"\")+d.key);\n        return key;\n    }\n\n    equals(policy, ignoreId=true){\n        if(this.key != policy.key){\n            return false;\n        }\n\n        return ignoreId || this.id === policy.id;\n    }\n\n    getDecision(decisionNode){\n        return Policy.getDecision(this, decisionNode);\n    }\n\n    static getDecision(policy, decisionNode){\n        for(var i=0; i<policy.decisions.length; i++){\n            var decision = Decision.getDecision(policy.decisions[i], decisionNode);\n            if(decision){\n                return decision;\n            }\n        }\n        return null;\n    }\n\n    static toPolicyString(policy, extended=false, prependId=false){\n\n        var res = \"\";\n        policy.decisions.forEach(d=>{\n            if(res){\n                if(extended){\n                    res += \"\\n\"\n                }else{\n                    res += \", \"\n                }\n\n\n            }\n            res += Decision.toDecisionString(d, extended, 'name', '\\t');\n        });\n        if(prependId && policy.id!==undefined){\n            return policy.id+\" \"+res;\n        }\n        return res;\n    }\n\n\n    toPolicyString(indent=false){\n        return Policy.toPolicyString(this, indent)\n    }\n\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n\nexport class McdmWeightValueValidator{\n\n    additionalValidator = null;\n\n    constructor(additionalValidator){\n        this.additionalValidator = additionalValidator;\n    }\n\n    validate(value){\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        let parsed = parseFloat(value);\n        if(parsed !== Infinity && !ExpressionEngine.validate(value, {}, false)){\n            return false\n        }\n\n        value = ExpressionEngine.toNumber(value);\n        var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991; // Number.MAX_SAFE_INTEGER is undefined in IE\n        if(ExpressionEngine.compare(value, 0) < 0 || (value !== Infinity && ExpressionEngine.compare(value, maxSafeInteger)> 0)){\n            return false;\n        }\n\n        if(this.additionalValidator) {\n            return this.additionalValidator(ExpressionEngine.toNumber(value))\n        }\n\n        return true;\n    }\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n/*Computed base value validator*/\nexport class PayoffValueValidator{\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine=expressionEngine;\n    }\n\n    validate(value){\n\n\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        value = ExpressionEngine.toNumber(value);\n        var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991; // Number.MAX_SAFE_INTEGER in undefined in IE\n        return ExpressionEngine.compare(value, -maxSafeInteger) >= 0 && ExpressionEngine.compare(value, maxSafeInteger) <= 0;\n    }\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n/*Computed base value validator*/\nexport class ProbabilityValueValidator{\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine=expressionEngine;\n    }\n\n    validate(value, edge){\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        var value = ExpressionEngine.toNumber(value);\n        return value.compare(0) >= 0 && value.compare(1) <= 0;\n    }\n\n}\n","import {domain as model, ValidationResult} from \"sd-model\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {ProbabilityValueValidator} from \"./probability-value-validator\";\nimport {PayoffValueValidator} from \"./payoff-value-validator\";\n\nexport class TreeValidator {\n\n    expressionEngine;\n\n    constructor(expressionEngine) {\n        this.expressionEngine = expressionEngine;\n        this.probabilityValueValidator = new ProbabilityValueValidator(expressionEngine);\n        this.payoffValueValidator = new PayoffValueValidator(expressionEngine);\n    }\n\n    validate(nodes) {\n\n        var validationResult = new ValidationResult();\n\n        nodes.forEach(n=> {\n            this.validateNode(n, validationResult);\n        });\n\n        return validationResult;\n    }\n\n    validateNode(node, validationResult = new ValidationResult()) {\n\n        if (node instanceof model.TerminalNode) {\n            return;\n        }\n        if (!node.childEdges.length) {\n            validationResult.addError('incompletePath', node)\n        }\n\n        var probabilitySum = ExpressionEngine.toNumber(0);\n        var withHash = false;\n        node.childEdges.forEach((e, i)=> {\n            e.setValueValidity('probability', true);\n\n            if (node instanceof model.ChanceNode) {\n                var probability = e.computedBaseProbability();\n                if (!this.probabilityValueValidator.validate(probability)) {\n                    if (!ExpressionEngine.isHash(e.probability)) {\n                        validationResult.addError({name: 'invalidProbability', data: {'number': i + 1}}, node);\n                        e.setValueValidity('probability', false);\n                    }\n\n                } else {\n                    probabilitySum = ExpressionEngine.add(probabilitySum, probability);\n                }\n            }\n\n            e.payoff.forEach((rawPayoff, payoffIndex)=> {\n                var path = 'payoff[' + payoffIndex + ']';\n                e.setValueValidity(path, true);\n                var payoff = e.computedBasePayoff(undefined, payoffIndex);\n                if (!this.payoffValueValidator.validate(payoff)) {\n                    validationResult.addError({name: 'invalidPayoff', data: {'number': i + 1}}, node);\n                    e.setValueValidity(path, false);\n                }\n            })\n\n\n        });\n        if (node instanceof model.ChanceNode) {\n            if (isNaN(probabilitySum) || !probabilitySum.equals(1)) {\n                validationResult.addError('probabilityDoNotSumUpTo1', node);\n            }\n        }\n\n\n        return validationResult;\n    }\n}\n","export * from './src/index'\n"]}