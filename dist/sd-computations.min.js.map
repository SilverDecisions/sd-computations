{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/build/idb.js","src/computations-engine.js","src/computations-manager.js","src/computations-utils.js","src/expressions-evaluator.js","src/index.js","src/jobs/configurations/league-table/league-table-job-parameters.js","src/jobs/configurations/league-table/league-table-job.js","src/jobs/configurations/league-table/steps/calculate-step.js","src/jobs/configurations/payoffs-transformation/payoffs-transformation-job-parameters.js","src/jobs/configurations/payoffs-transformation/payoffs-transformation-job.js","src/jobs/configurations/recompute/recompute-job-parameters.js","src/jobs/configurations/recompute/recompute-job.js","src/jobs/configurations/sensitivity-analysis/n-way/sensitivity-analysis-job-parameters.js","src/jobs/configurations/sensitivity-analysis/n-way/sensitivity-analysis-job.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/init-policies-step.js","src/jobs/configurations/sensitivity-analysis/n-way/steps/prepare-variables-step.js","src/jobs/configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job-parameters.js","src/jobs/configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job.js","src/jobs/configurations/sensitivity-analysis/probabilistic/steps/compute-policy-stats-step.js","src/jobs/configurations/sensitivity-analysis/probabilistic/steps/prob-calculate-step.js","src/jobs/configurations/sensitivity-analysis/spider-plot/spider-plot-job-parameters.js","src/jobs/configurations/sensitivity-analysis/spider-plot/spider-plot-job.js","src/jobs/configurations/sensitivity-analysis/spider-plot/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/steps/calculate-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/steps/prepare-variables-step.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job-parameters.js","src/jobs/configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job.js","src/jobs/engine/batch/batch-step.js","src/jobs/engine/exceptions/extendable-error.js","src/jobs/engine/exceptions/index.js","src/jobs/engine/exceptions/job-computation-exception.js","src/jobs/engine/exceptions/job-data-invalid-exception.js","src/jobs/engine/exceptions/job-execution-already-running-exception.js","src/jobs/engine/exceptions/job-instance-already-complete-exception.js","src/jobs/engine/exceptions/job-interrupted-exception.js","src/jobs/engine/exceptions/job-parameters-invalid-exception.js","src/jobs/engine/exceptions/job-restart-exception.js","src/jobs/engine/execution-context.js","src/jobs/engine/index.js","src/jobs/engine/job-execution-flag.js","src/jobs/engine/job-execution-listener.js","src/jobs/engine/job-execution.js","src/jobs/engine/job-instance.js","src/jobs/engine/job-key-generator.js","src/jobs/engine/job-launcher.js","src/jobs/engine/job-parameter-definition.js","src/jobs/engine/job-parameters.js","src/jobs/engine/job-repository/idb-job-repository.js","src/jobs/engine/job-repository/job-repository.js","src/jobs/engine/job-repository/simple-job-repository.js","src/jobs/engine/job-repository/timeout-job-repository.js","src/jobs/engine/job-result.js","src/jobs/engine/job-status.js","src/jobs/engine/job.js","src/jobs/engine/simple-job.js","src/jobs/engine/step-execution-listener.js","src/jobs/engine/step-execution.js","src/jobs/engine/step.js","src/jobs/index.js","src/jobs/job-instance-manager.js","src/jobs/job-worker.js","src/jobs/jobs-manager.js","src/objective/objective-rules-manager.js","src/objective/rules/expected-value-maximization-rule.js","src/objective/rules/expected-value-minimization-rule.js","src/objective/rules/index.js","src/objective/rules/max-max-rule.js","src/objective/rules/max-min-rule.js","src/objective/rules/maxi-max-rule.js","src/objective/rules/maxi-min-rule.js","src/objective/rules/min-max-rule.js","src/objective/rules/min-min-rule.js","src/objective/rules/mini-max-rule.js","src/objective/rules/mini-min-rule.js","src/objective/rules/multi-criteria-rule.js","src/objective/rules/objective-rule.js","src/operations/flip-subtree.js","src/operations/job-executing-operation.js","src/operations/operation.js","src/operations/operations-manager.js","src/operations/payoffs-transformation.js","src/policies/decision.js","src/policies/policies-collector.js","src/policies/policy.js","src/validation/mcdm-weight-value-validator.js","src/validation/payoff-value-validator.js","src/validation/probability-value-validator.js","src/validation/tree-validator.js","index.js"],"names":["require","r","e","n","t","o","i","f","c","u","a","Error","code","p","exports","call","length","1","module","global","factory","this","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","apply","then","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","replace","arr","Array","slice","callback","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","openDb","name","version","upgradeCallback","indexedDB","onupgradeneeded","event","deleteDb","define","amd","self","idb","_sdUtils","_sdModel","_computationsManager","ComputationsEngineConfig","ComputationsManagerConfig","custom","_this","_classCallCheck","_super","logLevel","Utils","deepExtend","_assertThisInitialized","ComputationsEngine","ComputationsManager","config","data","_this2","_super2","getGlobalObject","isWorker","jobsManger","registerJobExecutionListener","beforeJob","jobExecution","reply","getDTO","afterJob","queryableFunctions","runJob","jobName","jobParametersValues","dataDTO","DataModel","executeJob","jobExecutionId","execute","getErrorDTO","recompute","ruleName","evalCode","evalNumeric","objectiveRulesManager","setCurrentRuleByName","allRules","_checkValidityAndRecomputeObjective","onmessage","oEvent","hasOwnProperty","queryMethod","queryArguments","defaultReply","_get","_getPrototypeOf","setLogLevel","level","log","setLevel","message","TypeError","postMessage","queryMethodListener","queryMethodArguments","_sdExpressionEngine","_objectiveRulesManager","_treeValidator","_operationsManager","_jobsManager","_expressionsEvaluator","_jobInstanceManager","_policy","_mcdmWeightValueValidator","worker","delegateRecomputation","url","jobRepositoryType","clearRepository","setConfig","expressionEngine","ExpressionEngine","expressionsEvaluator","ExpressionsEvaluator","ObjectiveRulesManager","JobsManager","workerUrl","repositoryType","operationsManager","OperationsManager","treeValidator","TreeValidator","mcdmWeightValueValidator","McdmWeightValueValidator","setData","checkValidityAndRecomputeObjective","params","getCurrentRule","d","getData","updateFrom","updateDisplayValues","updateDefaultCriterion1Weight","defaultCriterion1Weight","validationResults","evalExpressions","weightValid","validate","multiCriteria","getRoots","root","vr","getAllNodesInSubtree","isValid","recomputeTree","currentRule","getJobByName","object","operationsForObject","every","jobParamsValues","resolvePromiseAfterJobIsLaunched","run","jobInstanceManagerConfig","_this3","je","JobInstanceManager","operationName","performOperation","rules","getObjectiveRuleByName","isRuleName","reversePayoffs","tmp","weightLowerBound","flip","weightUpperBound","flipRule","Infinity","serialize","divide","_this4","policyToDisplay","displayPolicy","nodes","updateNodeDisplayValues","edges","updateEdgeDisplayValues","node","_this5","$DISPLAY_VALUE_NAMES","displayValue","getNodeDisplayValue","_this6","getEdgeDisplayValue","_this7","clearDisplayValues","displayPolicyForNode","policy","_this8","domain","DecisionNode","decision","Policy","getDecision","childEdge","childEdges","decisionValue","childNode","ChanceNode","TerminalNode","ComputationsUtils","min","max","extent","subtract","step","curr","add","toFloat","clearComputedValues","initScopes","debug","evalGlobalCode","clearTree","evalExpressionsForNode","clearExpressionScope","$codeDirty","$codeError","eval","expressionScope","edge","hasAssignmentExpression","payoff","parentNode","initScope","initScopeForNode","scope","probabilitySum","toNumber","hashEdges","invalidProb","rawPayoff","payoffIndex","path","isFieldValid","computedValue","evalPayoff","err","isHash","probability","warn","prob","compare","hash","parent","$parent","parentScope","cloneDeep","_computationsEngine","keys","key","enumerable","_jobParameters","_jobParameterDefinition","LeagueTableJobParameters","JobParameters","definitions","JobParameterDefinition","PARAMETER_TYPE","STRING","BOOLEAN","NUMBER_EXPRESSION","v","allVals","computeNumberExpression","values","id","guid","nameOfCriterion1","nameOfCriterion2","extendedPolicyDescription","defaultWeight","_simpleJob","_calculateStep","_leagueTableJobParameters","LeagueTableJob","SimpleJob","jobRepository","initSteps","calculateStep","CalculateStep","addStep","jobResult","jobParameters","withHeaders","headers","payoffNames","rows","row","policies","rowCells","toPolicyString","payoffs","dominatedBy","extendedDominatedBy","incratio","optimal","optimalForDefaultWeight","_step","_jobStatus","_policiesCollector","Step","stepExecution","getJobParameters","rule","treeRoot","PoliciesCollector","payoffCoeffs","b","map","sort","reduce","previousValue","currentValue","array","_prev$policies","prev","concat","_toConsumableArray","bestCost","bestCostRow","cmp","prev2NotDominated","filter","computeICER","lastLELower","lastLELowerDef","sub","exitStatus","JOB_STATUS","COMPLETED","Math","abs","PayoffsTransformationJobParameters","functionName","functionBody","functionArgumentName","makeClone","_payoffsTransformationJobParameters","_job","PayoffsTransformationJob","Job","$NAME","isRestartable","execution","findNodeById","rootTarget","cloneSubtree","allNodes","processNodePayoff","minY","Number","MAX_VALUE","maxY","MIN_VALUE","location","y","offset","move","attachSubtree","parentEdge","aggregatedPayoff","type","$TYPE","fill","computedBasePayoff","toFraction","RecomputeJobParameters","_recomputeJobParameters","RecomputeJob","SensitivityAnalysisJobParameters","NUMBER","INTEGER","isUnique","failOnInvalidTree","_sensitivityAnalysisJobParameters","_prepareVariablesStep","_initPoliciesStep","SensitivityAnalysisJob","batchSize","PrepareVariablesStep","InitPoliciesStep","chunkSize","variableNames","roundVariables","policyIndex","variables","_variables","uniqueValues","Set","uniqueValuesNo","s","size","precision","notReadyVariablesIndexes","variableIndex","notReadyIndex","round","newReadyIndexes","uniqueVals","reverse","splice","stepExecutions","total","current","steps","getProgress","_batchStep","_jobComputationException","BatchStep","getJobExecutionContext","variableValues","executionContext","put","startIndex","item","clear","variableName","valid","errorData","JobComputationException","isString","_computationsUtils","sequence","cartesianProductOf","ProbabilisticSensitivityAnalysisJobParameters","_probabilisticSensitivityAnalysisJobParameters","_sensitivityAnalysisJob","_probCalculateStep","_computePolicyStatsStep","ProbabilisticSensitivityAnalysisJob","ProbCalculateStep","ComputePolicyStatsStep","numberOfRuns","ruleByName","payoffsPerPolicy","maximization","medians","median","standardDeviations","std","policyIsBestProbabilities","policyToHighestPayoffCount","policyToLowestPayoffCount","expectedValues","runIndex","singleRunVariableValues","errors","evaluated","formula","variable","currentItemCount","updatePolicyStats","highestPayoff","lowestPayoff","bestPolicyIndexes","worstPolicyIndexes","zeroNum","equals","SpiderPlotJobParameters","_spiderPlotJobParameters","SpiderPlotJob","percentageRangeValues","percentageChangeRange","policiesCollector","defaultValues","getGlobalVariableNames","defVal","multiply","defaultPayoff","itemIndex","variableValue","_jobResult$data$rows","jobExecutionContext","variableExtents","extents","extentVariableValues","TornadoDiagramJobParameters","_tornadoDiagramJobParameters","TornadoDiagramJob","_jobInterruptedException","TOTAL_ITEM_COUNT_PROP","CURRENT_ITEM_COUNT_PROP","init","totalItemCount","setCurrentItemCount","getCurrentItemCount","setTotalItemCount","handleNextChunk","JobInterruptedException","postProcess","getTotalItemCount","checkJobExecutionFlags","terminateOnly","readNextChunk","chunk","processChunk","processedChunk","writeChunk","res","updateJobProgress","processItem","progress","jobInstance","updateJobExecutionProgress","checkExecutionFlags","ExtendableError","constructor","_extendableError","_jobDataInvalidException","_jobExecutionAlreadyRunningException","_jobInstanceAlreadyCompleteException","_jobParametersInvalidException","_jobRestartException","JobDataInvalidException","JobExecutionAlreadyRunningException","JobInstanceAlreadyCompleteException","JobParametersInvalidException","JobRestartException","ExecutionContext","context","dirty","clone","prevValue","filteredProperties","deepClone","cloneMethod","cloneDeepWith","cloneWith","assign","stack","indexOf","$ObjectWithIdAndEditableFields","findById","exceptions","_interopRequireWildcard","_executionContext","_exportNames","_jobExecution","_jobExecutionFlag","_jobExecutionListener","_jobInstance","_jobKeyGenerator","_jobLauncher","_stepExecution","_stepExecutionListener","STOP","JobExecutionListener","JobExecution","status","STARTING","UNKNOWN","startTime","createTime","Date","endTime","lastUpdated","failureExceptions","stepName","StepExecution","STOPPING","se","JobInstance","JobKeyGenerator","identifying","JobLauncher","jobWorker","dataModelSerializer","jobOrName","job","createJobParameters","createJobExecution","executionPromise","_execute","getLastJobExecution","lastExecution","jobParametersValidator","jobDataValidator","jobExecutionOrId","getJobExecutionById","info","DATE","COMPOSITE","typeOrNestedParametersDefinitions","minOccurs","maxOccurs","singleValueValidator","validator","nestedParameters","required","isArray","parsed","parseFloat","allValues","validateSingleValue","isDate","isInt","isNumber","isBoolean","isObject","nestedDef","_value","initDefinitions","initDefaultValues","def","defs","split","find","getDefinition","_jobRepository","_idb","_jobResult","IdbJobRepository","JobRepository","expressionsReviver","dbName","deleteDB","initDB","dbPromise","upgradeDB","jobExecutionsOS","unique","jobInstanceDao","ObjectStoreDao","jobExecutionDao","jobExecutionProgressDao","jobExecutionFlagDao","stepExecutionDao","jobResultDao","_","generateJobInstanceKey","remove","findJobExecutions","jobExecutions","removeJobExecution","getJobResultByInstance","removeJobResult","findStepExecutions","removeStepExecution","jobResultId","revive","dto","reviveJobResult","getByIndex","reviveJobInstance","_this9","stepExecutionsDTOs","saveStepExecutionsDTOS","flag","_this10","savedExecutions","stepExecutionDTO","_this11","fetchJobExecutionRelations","jobExecutionDTO","_this12","reviveJobExecution","jobExecutionDtoList","_this13","fetched","fetchJobExecutionsRelations","_this14","getAllByIndex","dtos","reviveStepExecution","_this15","fetchRelationsAndRevive","sorted","getTime","_this16","executions","latest","dataModel","loadFromDTO","reviveFromDTO","target","mergeWith","dtoValue","_this17","reviveExecutionContext","objValue","srcValue","source","stepDTO","_this18","getLastJobExecutionByInstance","jobExecutionDto","reviveResultData","JobResult","_this19","indexName","_this20","_this21","_this22","tx","_this23","_this24","_this25","iterateKeyCursor","jobByName","saveJobInstance","getJobInstance","generateKey","isRunning","ABANDONED","createJobInstance","_setNewState","createStateSnapshot","all","instanceAndExecutionContext","saveJobExecution","saveStepExecution","SimpleJobRepository","jobInstancesByKey","executionProgress","executionFlags","jobResults","forOwn","ji","ex","_simpleJobRepository","TimeoutJobRepository","valueToResolve","delay","setTimeout","createTimeoutPromise","STARTED","STOPPED","FAILED","EXECUTING","executionListeners","getJobParametersValidator","getJobDataValidator","updateStatus","getResult","updateProgress","listener","doExecute","saveJobResult","update","getJobExecutionFlag","JOB_EXECUTION_FLAG","stop","getJobResultByExecution","handleNextStep","lastExecutedStepExecution","_execution$failureExc","prevStep","prevStepExecution","stepIndex","handleStep","isStopping","getLastStepExecution","lastStepExecution","stepExecutionPartOfExistingJobExecution","currentStepExecution","shouldStart","createStepExecution","isCompleted","isRestart","skipExecution","skipOnRestartIfCompleted","containsKey","addStepExecution","_currentStepExecution","stepStatus","completedSteps","StepExecutionListener","beforeStep","open","determineJobStatus","afterStep","close","engine","_jobWorker","JobInstanceManagerConfig","onJobStarted","onJobCompleted","onJobFailed","onJobStopped","onJobTerminated","onProgress","updateInterval","jobInstanceOrExecution","checkProgress","lastJobExecution","_possibleConstructorReturn","terminated","getProgressPercents","lastUpdateTime","callbacksThisArg","deregisterJobExecutionListener","getProgressFromExecution","forceUpdate","terminate","JobWorker","defaultListener","onError","listeners","Worker","deserializer","fn","thisArg","sendQuery","ruleNames","_idbJobRepository","_recomputeJob","_probabilisticSensitivityAnalysisJob","_timeoutJobRepository","_tornadoDiagramJob","_leagueTableJob","_spiderPlotJob","_payoffsTransformationJob","JobsManagerConfig","jobExecutionListeners","afterJobExecutionPromiseResolves","jobInstancesToTerminate","useWorker","initWorker","initRepository","registerJobs","jobLauncher","serializeData","getJsonReviver","getJsonReplacer","getJobExecutionProgress","saveJobExecutionFlag","removeJobInstance","_arguments","argsDeserializer","addListener","onJobFatalError","sensitivityAnalysisJob","probabilisticSensitivityAnalysisJob","setBatchSize","registerJob","registerExecutionListener","l","promiseResolve","_rules","model","_minMaxRule","_maxMinRule","_minMinRule","_maxMaxRule","currentRuleName","flipPair","addRule","ExpectedValueMaximizationRule","ExpectedValueMinimizationRule","MaxiMinRule","MaxiMaxRule","MiniMinRule","MiniMaxRule","minMax","MinMaxRule","maxMin","MaxMinRule","addFlipPair","minMin","MinMinRule","maxMax","MaxMaxRule","flipped","setDefaultCriterion1Weight","decisionPolicy","trace","time","setPayoffIndex","setDecisionPolicy","computePayoff","computeOptimal","clearDecisionPolicy","computedBaseProbability","rule1","rule2","_objectiveRule","ObjectiveRule","NAME","probabilityToEnter","cValue","computedPayoff","basePayoff","_expectedValueMaximizationRule","_expectedValueMinimizationRule","_maxiMaxRule","_maxiMinRule","_miniMaxRule","_miniMinRule","_multiCriteriaRule","MultiCriteriaRule","bestChildPayoff","bestCount","worstChildPayoff","worstCount","optimalEdge","maxBy","minBy","criterion1Weight","childrenPayoff","selectedIndexes","bestChild","basePayoffs","childCombinedPayoff","baseProbability","sumweight","ep","div","computeCombinedPayoff","combinedPayoff","decisionNode","childrenPayoffs","best","makeDecision","_makeDecision","worstChild","childPayoff","modifyChanceProbability","fieldPath","_operation","FlipSubtree","Operation","isApplicable","grandchildrenNumber","grandchildrenEdgeLabels","childrenEdgeLabelsSet","child","has","trim","ge","rootClone","oldChildrenNumber","oldGrandChildrenNumber","childrenNumber","grandChildrenNumber","callbacksDisabled","childX","x","topY","stepY","removeNode","Point","addNode","j","grandChild","grandChildEdge","divideGrandChildEdgeProbability","_normalizeProbabilitiesAfterFlip","_fireNodeAddedCallback","newProbabilitySum","parseInt","rest","JobExecutingOperation","_flipSubtree","_payoffsTransformation","operations","operationByName","registerOperation","PayoffsTransformation","operation","op","getOperationByName","perform","_jobExecutingOperation","Decision","children","keyProperty","extended","indent","childrenRes","toDecisionString","_decision","optimalForRuleName","collect","decisions","nodeQueue","decisionNodes","shift","cd","prependId","ignoreId","additionalValidator","maxSafeInteger","MAX_SAFE_INTEGER","PayoffValueValidator","ProbabilityValueValidator","_probabilityValueValidator","_payoffValueValidator","probabilityValueValidator","payoffValueValidator","validationResult","ValidationResult","validateNode","addError","setValueValidity","number","isNaN"],"mappings":"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","file":"sd-computations.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.idb = {}));\n}(this, function (exports) { 'use strict';\n\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  function openDb(name, version, upgradeCallback) {\n    var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n    var request = p.request;\n\n    if (request) {\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n    }\n\n    return p.then(function(db) {\n      return new DB(db);\n    });\n  }\n\n  function deleteDb(name) {\n    return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n  }\n\n  exports.openDb = openDb;\n  exports.deleteDb = deleteDb;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","import {Utils, log} from \"sd-utils\";\nimport {DataModel} from \"sd-model\";\nimport {ComputationsManager} from \"./computations-manager\";\nimport {ComputationsManagerConfig} from \"./computations-manager\";\n\n\n\nexport class ComputationsEngineConfig extends ComputationsManagerConfig{\n    logLevel = 'warn';\n    constructor(custom) {\n        super();\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/**\n * Entry point class for standalone computation workers\n */\nexport class ComputationsEngine extends ComputationsManager{\n\n    global = Utils.getGlobalObject();\n    isWorker = Utils.isWorker();\n\n    constructor(config, data){\n        super(config, data);\n\n        if(this.isWorker) {\n            this.jobsManger.registerJobExecutionListener({\n                beforeJob: (jobExecution)=>{\n                    this.reply('beforeJob', jobExecution.getDTO());\n                },\n\n                afterJob: (jobExecution)=>{\n                    this.reply('afterJob', jobExecution.getDTO());\n                }\n            });\n\n            var instance = this;\n            this.queryableFunctions = {\n                runJob: function(jobName, jobParametersValues, dataDTO){\n                    // console.log(jobName, jobParameters, serializedData);\n                    var data = new DataModel(dataDTO);\n                    instance.runJob(jobName, jobParametersValues, data);\n                },\n                executeJob: function(jobExecutionId){\n                    instance.jobsManger.execute(jobExecutionId).catch(e=>{\n                        instance.reply('jobFatalError', jobExecutionId, Utils.getErrorDTO(e));\n                    })\n                },\n                recompute: function(dataDTO, ruleName, evalCode, evalNumeric){\n                    if(ruleName){\n                        instance.objectiveRulesManager.setCurrentRuleByName(ruleName);\n                    }\n                    var allRules = !ruleName;\n                    var data = new DataModel(dataDTO);\n                    instance._checkValidityAndRecomputeObjective(data, allRules, evalCode, evalNumeric)\n                    this.reply('recomputed', data.getDTO());\n                }\n            };\n\n            global.onmessage = function(oEvent) {\n                if (oEvent.data instanceof Object && oEvent.data.hasOwnProperty('queryMethod') && oEvent.data.hasOwnProperty('queryArguments')) {\n                    instance.queryableFunctions[oEvent.data.queryMethod].apply(self, oEvent.data.queryArguments);\n                } else {\n                    instance.defaultReply(oEvent.data);\n                }\n            };\n        }\n    }\n\n\n\n    setConfig(config) {\n        super.setConfig(config);\n        if(this.config.logLevel){\n            this.setLogLevel(this.config.logLevel);\n        }\n\n        return this;\n    }\n\n    setLogLevel(level){\n        log.setLevel(level)\n    }\n\n    defaultReply(message) {\n        this.reply('test', message);\n    }\n\n    reply() {\n        if (arguments.length < 1) {\n            throw new TypeError('reply - not enough arguments');\n        }\n        this.global.postMessage({\n            'queryMethodListener': arguments[0],\n            'queryMethodArguments': Array.prototype.slice.call(arguments, 1)\n        });\n    }\n}\n\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {Utils} from \"sd-utils\";\nimport {ObjectiveRulesManager} from \"./objective/objective-rules-manager\";\nimport {TreeValidator} from \"./validation/tree-validator\";\nimport {OperationsManager} from \"./operations/operations-manager\";\nimport {JobsManager} from \"./jobs/jobs-manager\";\nimport {ExpressionsEvaluator} from \"./expressions-evaluator\";\nimport {JobInstanceManager} from \"./jobs/job-instance-manager\";\nimport {domain as model} from \"sd-model\";\nimport {Policy} from \"./policies/policy\";\nimport {McdmWeightValueValidator} from \"./validation/mcdm-weight-value-validator\";\n\n/** Computation manager configuration object\n * @param custom configuration object to extend\n */\nexport class ComputationsManagerConfig {\n\n    /**\n     * logging level\n     * */\n    logLevel = null;\n\n    /**\n     * default objective rule name\n     * */\n    ruleName = null;\n\n    /**\n     * worker configuration object\n     * */\n    worker = {\n        /**\n         * delegate tree recomputation to worker\n         * */\n        delegateRecomputation: false,\n\n        /**\n         * worker url\n         * */\n        url: null\n    };\n\n    /**\n     * job repository to use, available types: idb, timeout, simple\n    * */\n    jobRepositoryType = 'idb';\n\n    /**\n     * clear repository after init\n     * */\n    clearRepository = false;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/** Computation manager\n* @param {object} config\n* @param {DataModel} data model object\n* */\nexport class ComputationsManager {\n\n    data;\n    expressionEngine;\n    expressionsEvaluator;\n    objectiveRulesManager;\n    operationsManager;\n    jobsManger;\n\n    treeValidator;\n\n    constructor(config, data = null) {\n        this.data = data;\n        this.setConfig(config);\n        this.expressionEngine = new ExpressionEngine();\n        this.expressionsEvaluator = new ExpressionsEvaluator(this.expressionEngine);\n        this.objectiveRulesManager = new ObjectiveRulesManager(this.expressionEngine, this.config.ruleName);\n\n        this.jobsManger = new JobsManager(this.expressionsEvaluator, this.objectiveRulesManager, {\n            workerUrl: this.config.worker.url,\n            repositoryType: this.config.jobRepositoryType,\n            clearRepository: this.config.clearRepository\n        });\n\n        this.operationsManager = new OperationsManager(this.data, this.expressionEngine, new JobsManager(this.expressionsEvaluator, this.objectiveRulesManager, {\n            repositoryType: 'timeout',\n        }));\n\n        this.treeValidator = new TreeValidator(this.expressionEngine);\n        this.mcdmWeightValueValidator = new McdmWeightValueValidator();\n    }\n\n    setConfig(config) {\n        this.config = new ComputationsManagerConfig(config);\n        return this;\n    }\n\n    setData(data){\n        this.data = data;\n        this.operationsManager.setData(data);\n    }\n\n\n    /** Alias function for checkValidityAndRecomputeObjective*/\n    recompute(){\n        return this.checkValidityAndRecomputeObjective(...arguments);\n    }\n\n    /**\n     * Checks validity of data model and recomputes objective rules\n     * @returns promise\n     * @param {boolean} allRules - recompute all objective rules\n     * @param {boolean} evalCode - evaluate code\n     * @param {boolean} evalNumeric - evaluate numeric expressions\n     */\n    checkValidityAndRecomputeObjective(allRules, evalCode = false, evalNumeric = true) {\n        return Promise.resolve().then(()=> {\n            if (this.config.worker.delegateRecomputation) {\n                var params = {\n                    evalCode: evalCode,\n                    evalNumeric: evalNumeric\n                };\n                if (!allRules) {\n                    params.ruleName = this.getCurrentRule().name;\n                }\n                return this.runJob(\"recompute\", params, this.data, false).then((jobExecution)=> {\n                    var d = jobExecution.getData();\n                    this.data.updateFrom(d)\n                })\n            }\n            return this._checkValidityAndRecomputeObjective(this.data, allRules, evalCode, evalNumeric);\n        }).then(()=> {\n            this.updateDisplayValues(this.data);\n        })\n\n    }\n\n    _checkValidityAndRecomputeObjective(data, allRules, evalCode = false, evalNumeric = true) {\n\n        this.objectiveRulesManager.updateDefaultCriterion1Weight(data.defaultCriterion1Weight);\n        data.validationResults = [];\n\n        if (evalCode || evalNumeric) {\n            this.expressionsEvaluator.evalExpressions(data, evalCode, evalNumeric);\n        }\n\n        var weightValid = this.mcdmWeightValueValidator.validate(data.defaultCriterion1Weight);\n        var multiCriteria = this.getCurrentRule().multiCriteria;\n\n\n        data.getRoots().forEach(root=> {\n            var vr = this.treeValidator.validate(data.getAllNodesInSubtree(root));\n            data.validationResults.push(vr);\n            if (vr.isValid() && (!multiCriteria || weightValid)) {\n                this.objectiveRulesManager.recomputeTree(root, allRules);\n            }\n        });\n    }\n\n    /**\n     * @returns {ObjectiveRule} current objective rule\n     * */\n    getCurrentRule() {\n        return this.objectiveRulesManager.currentRule;\n    }\n\n    /**\n     * Sets current objective rule\n     * @param {string} ruleName - name of objective rule\n     * */\n    setCurrentRuleByName(ruleName) {\n        this.config.ruleName = ruleName;\n        return this.objectiveRulesManager.setCurrentRuleByName(ruleName)\n    }\n\n    /**\n     *\n     *  @param {string} jobName\n     *  @returns {Job}\n     * */\n    getJobByName(jobName) {\n        return this.jobsManger.getJobByName(jobName);\n    }\n\n    /**\n     * @returns array of operations applicable to the given object (node or edge)\n     * @param object\n     */\n    operationsForObject(object) {\n        return this.operationsManager.operationsForObject(object);\n    }\n\n\n    /**\n     * Checks validity of data model without recomputation and revalidation\n     * @param {DataModel} data to check\n     */\n\n    isValid(data) {\n        data = data || this.data;\n        return data.validationResults.every(vr=>vr.isValid());\n    }\n    /**\n     * Run job\n     * @param {string} name - job name\n     * @param {object} jobParamsValues - job parameter values object\n     * @param {DataModel} data model\n     * @param {boolean} resolvePromiseAfterJobIsLaunched - immediately resolve promise with still running JobExecution\n     * @returns {Promise} resolving to JobExecution\n     */\n    runJob(name, jobParamsValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        return this.jobsManger.run(name, jobParamsValues, data || this.data, resolvePromiseAfterJobIsLaunched)\n    }\n\n    /**\n     * Run job using JobInstanceManager\n     * @param {string} name - job name\n     * @param {object} jobParamsValues - job parameter values object\n     * @param {JobInstanceManagerConfig} jobInstanceManagerConfig - JobInstanceManager configuration\n     * @returns {Promise} resolving to JobInstanceManager\n     */\n    runJobWithInstanceManager(name, jobParamsValues, jobInstanceManagerConfig) {\n        return this.runJob(name, jobParamsValues).then(je=> {\n            return new JobInstanceManager(this.jobsManger, je, jobInstanceManagerConfig);\n        })\n    }\n\n    performOperation(object, operationName, jobParamsValues){\n        return this.operationsManager.performOperation(object, operationName, jobParamsValues);\n    }\n\n    getObjectiveRules() {\n        return this.objectiveRulesManager.rules;\n    }\n\n    getObjectiveRuleByName(ruleName){\n        return this.objectiveRulesManager.getObjectiveRuleByName(ruleName)\n    }\n\n    isRuleName(ruleName) {\n        return this.objectiveRulesManager.isRuleName(ruleName)\n    }\n\n\n    flipCriteria(data){\n        data = data || this.data;\n        data.reversePayoffs();\n        let tmp = data.weightLowerBound;\n        data.weightLowerBound = this.flip(data.weightUpperBound);\n        data.weightUpperBound = this.flip(tmp);\n        data.defaultCriterion1Weight = this.flip(data.defaultCriterion1Weight);\n        this.objectiveRulesManager.flipRule();\n        return this.checkValidityAndRecomputeObjective(false);\n    }\n\n    flip(a){\n        if(a == Infinity){\n            return 0;\n        }\n\n        if(a == 0){\n            return Infinity;\n        }\n\n        return this.expressionEngine.serialize(ExpressionEngine.divide(1, a))\n    }\n\n    updateDisplayValues(data, policyToDisplay = null) {\n        data = data || this.data;\n        if (policyToDisplay) {\n            return this.displayPolicy(data, policyToDisplay);\n        }\n\n        data.nodes.forEach(n=> {\n            this.updateNodeDisplayValues(n);\n        });\n        data.edges.forEach(e=> {\n            this.updateEdgeDisplayValues(e);\n        })\n    }\n\n    updateNodeDisplayValues(node) {\n        node.$DISPLAY_VALUE_NAMES.forEach(n=>node.displayValue(n, this.objectiveRulesManager.getNodeDisplayValue(node, n)));\n    }\n\n    updateEdgeDisplayValues(e) {\n        e.$DISPLAY_VALUE_NAMES.forEach(n=>e.displayValue(n, this.objectiveRulesManager.getEdgeDisplayValue(e, n)));\n    }\n\n    displayPolicy(policyToDisplay, data) {\n\n\n        data = data || this.data;\n        data.nodes.forEach(n=> {\n            n.clearDisplayValues();\n        });\n        data.edges.forEach(e=> {\n            e.clearDisplayValues();\n        });\n        data.getRoots().forEach((root)=>this.displayPolicyForNode(root, policyToDisplay));\n    }\n\n    displayPolicyForNode(node, policy) {\n        if (node instanceof model.DecisionNode) {\n            var decision = Policy.getDecision(policy, node);\n            //console.log(decision, node, policy);\n            if (decision) {\n                node.displayValue('optimal', true)\n                var childEdge = node.childEdges[decision.decisionValue];\n                childEdge.displayValue('optimal', true)\n                return this.displayPolicyForNode(childEdge.childNode, policy)\n            }\n            return;\n        } else if(node instanceof model.ChanceNode){\n            node.displayValue('optimal', true);\n            node.childEdges.forEach(e=>{\n                e.displayValue('optimal', true);\n                this.displayPolicyForNode(e.childNode, policy)\n            })\n        }else if(node instanceof model.TerminalNode){\n            node.displayValue('optimal', true);\n        }\n\n\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nexport class ComputationsUtils{\n\n    static sequence(min, max, length) {\n        var extent = ExpressionEngine.subtract(max, min);\n        var result = [min];\n        var steps = length - 1;\n        if(!steps){\n            return result;\n        }\n        var step = ExpressionEngine.divide(extent,length - 1);\n        var curr = min;\n        for (var i = 0; i < length - 2; i++) {\n            curr = ExpressionEngine.add(curr, step);\n            result.push(ExpressionEngine.toFloat(curr));\n        }\n        result.push(max);\n        return result;\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {domain as model} from 'sd-model'\nimport {Utils, log} from 'sd-utils'\n\n/*Evaluates code and expressions in trees*/\nexport class ExpressionsEvaluator {\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine = expressionEngine;\n    }\n\n    clear(data){\n        data.nodes.forEach(n=>{\n            n.clearComputedValues();\n        });\n        data.edges.forEach(e=>{\n            e.clearComputedValues();\n        });\n    }\n\n    clearTree(data, root){\n        data.getAllNodesInSubtree(root).forEach(n=>{\n            n.clearComputedValues();\n            n.childEdges.forEach(e=>{\n                e.clearComputedValues();\n            })\n        })\n    }\n\n    evalExpressions(data, evalCode=true, evalNumeric=true, initScopes=false){\n        log.debug('evalExpressions evalCode:'+evalCode+' evalNumeric:'+evalNumeric);\n        if(evalCode){\n            this.evalGlobalCode(data);\n        }\n\n        data.getRoots().forEach(n=>{\n            this.clearTree(data, n);\n            this.evalExpressionsForNode(data, n, evalCode, evalNumeric,initScopes);\n        });\n\n    }\n\n    evalGlobalCode(data){\n        data.clearExpressionScope();\n        data.$codeDirty = false;\n        try{\n            data.$codeError = null;\n            this.expressionEngine.eval(data.code, false, data.expressionScope);\n        }catch (e){\n            data.$codeError = e;\n        }\n    }\n\n    evalPayoff(edge, index = 0) {\n        if (ExpressionEngine.hasAssignmentExpression(edge.payoff[index])) {\n            return null;\n        }\n        return this.expressionEngine.eval(edge.payoff[index], true, edge.parentNode.expressionScope);\n    }\n\n    evalExpressionsForNode(data, node, evalCode=true, evalNumeric=true, initScope=false) {\n        if(!node.expressionScope || initScope || evalCode){\n            this.initScopeForNode(data, node);\n        }\n        if(evalCode){\n            node.$codeDirty = false;\n            if(node.code){\n                try{\n                    node.$codeError = null;\n                    this.expressionEngine.eval(node.code, false, node.expressionScope);\n                }catch (e){\n                    node.$codeError = e;\n                    log.debug(e);\n                }\n            }\n        }\n\n        if(evalNumeric){\n            var scope = node.expressionScope;\n            var probabilitySum=ExpressionEngine.toNumber(0);\n            var hashEdges= [];\n            var invalidProb = false;\n\n            node.childEdges.forEach(e=>{\n                e.payoff.forEach((rawPayoff, payoffIndex)=> {\n                    let path = 'payoff[' + payoffIndex + ']';\n                    if(e.isFieldValid(path, true, false)){\n                        try{\n                            e.computedValue(null, path, this.evalPayoff(e, payoffIndex))\n                        }catch (err){\n                            //   Left empty intentionally\n                        }\n                    }\n                });\n\n\n\n                if(node instanceof model.ChanceNode){\n                    if(ExpressionEngine.isHash(e.probability)){\n                        hashEdges.push(e);\n                        return;\n                    }\n\n                    if(ExpressionEngine.hasAssignmentExpression(e.probability)){ //It should not occur here!\n                        log.warn(\"evalExpressionsForNode hasAssignmentExpression!\", e);\n                        return null;\n                    }\n\n                    if(e.isFieldValid('probability', true, false)){\n                        try{\n                            var prob = this.expressionEngine.eval(e.probability, true, scope);\n                            e.computedValue(null, 'probability', prob);\n                            probabilitySum = ExpressionEngine.add(probabilitySum, prob);\n                        }catch (err){\n                            invalidProb = true;\n                        }\n                    }else{\n                        invalidProb = true;\n                    }\n                }\n\n            });\n\n\n            if(node instanceof model.ChanceNode){\n                var computeHash = hashEdges.length && !invalidProb && (probabilitySum.compare(0) >= 0 && probabilitySum.compare(1) <= 0);\n\n                if(computeHash) {\n                    var hash = ExpressionEngine.divide(ExpressionEngine.subtract(1, probabilitySum), hashEdges.length);\n                    hashEdges.forEach(e=> {\n                        e.computedValue(null, 'probability', hash);\n                    });\n                }\n            }\n\n            node.childEdges.forEach(e=>{\n                this.evalExpressionsForNode(data, e.childNode, evalCode, evalNumeric, initScope);\n            });\n        }\n    }\n\n    initScopeForNode(data, node){\n        var parent = node.$parent;\n        var parentScope = parent?parent.expressionScope : data.expressionScope;\n        node.expressionScope = Utils.cloneDeep(parentScope);\n    }\n}\n","export * from './computations-engine'\nexport * from './computations-manager'\nexport * from './expressions-evaluator'\nexport * from './jobs/index'\n\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\n\nexport class LeagueTableJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"weightLowerBound\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v <= JobParameterDefinition.computeNumberExpression(allVals['weightUpperBound'])\n        }));\n        this.definitions.push(new JobParameterDefinition(\"defaultWeight\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v >= JobParameterDefinition.computeNumberExpression(allVals['weightLowerBound']) && v <= JobParameterDefinition.computeNumberExpression(allVals['weightUpperBound'])\n        }));\n        this.definitions.push(new JobParameterDefinition(\"weightUpperBound\", PARAMETER_TYPE.NUMBER_EXPRESSION).set(\"singleValueValidator\", (v, allVals) => {\n            return v >= 0 && v >= JobParameterDefinition.computeNumberExpression(allVals['weightLowerBound'])\n        }));\n\n    }\n\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            nameOfCriterion1: 'Cost',\n            nameOfCriterion2: 'Effect',\n            extendedPolicyDescription: true,\n            weightLowerBound: 0,\n            defaultWeight: 0,\n            weightUpperBound: Infinity,\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Policy} from \"../../../policies/policy\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {LeagueTableJobParameters} from \"./league-table-job-parameters\";\n\n\nexport class LeagueTableJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"league-table\", jobRepository, expressionsEvaluator, objectiveRulesManager);\n        this.initSteps();\n    }\n\n    initSteps() {\n        this.calculateStep = new CalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        this.addStep(this.calculateStep);\n    }\n\n    createJobParameters(values) {\n        return new LeagueTableJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders = true) {\n        var result = [];\n        if (withHeaders) {\n            var headers = ['policy_id', 'policy', jobResult.payoffNames[0], jobResult.payoffNames[1], 'dominated_by', 'extended-dominated_by', 'incratio', 'optimal', 'optimal_for_default_weight'];\n            result.push(headers);\n        }\n\n        jobResult.rows.forEach(row => {\n            row.policies.forEach(policy=> {\n                var rowCells = [\n                    row.id,\n                    Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription),\n                    row.payoffs[1],\n                    row.payoffs[0],\n                    row.dominatedBy,\n                    row.extendedDominatedBy === null ? null : row.extendedDominatedBy[0] + ', ' + row.extendedDominatedBy[1],\n                    row.incratio,\n                    row.optimal,\n                    row.optimalForDefaultWeight\n                ];\n                result.push(rowCells);\n            })\n        });\n\n        return result;\n    }\n}\n","import {Step} from \"../../../engine/step\";\nimport {JOB_STATUS} from \"../../../engine/job-status\";\nimport {PoliciesCollector} from \"../../../../policies/policies-collector\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {TreeValidator} from \"../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../policies/policy\";\n\nexport class CalculateStep extends Step {\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var data = stepExecution.getData();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let rule = this.objectiveRulesManager.currentRule;\n        var treeRoot = data.getRoots()[0];\n        var policiesCollector = new PoliciesCollector(treeRoot);\n\n        var policies = policiesCollector.policies;\n\n\n        var payoffCoeffs = this.payoffCoeffs = rule.payoffCoeffs;\n\n        this.expressionsEvaluator.evalExpressions(data);\n        var vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n\n        if (!vr.isValid()) {\n            return stepExecution;\n        }\n\n        var compare = (a, b)=>(-payoffCoeffs[0] *  (b.payoffs[0] - a.payoffs[0])) || (-payoffCoeffs[1] *  (a.payoffs[1] - b.payoffs[1]));\n\n        var rows = policies.map(policy => {\n            this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n            return {\n                policies: [policy],\n                payoffs: treeRoot.computedValue(ruleName, 'payoff').slice(),\n                dominatedBy: null,\n                extendedDominatedBy: null,\n                incratio: null,\n                optimal: false,\n                optimalForDefaultWeight: false\n            }\n        }).sort(compare);\n\n        rows = rows.reduce((previousValue, currentValue, index, array)=>{\n            if(!previousValue.length){\n                return [currentValue]\n            }\n\n            let prev = previousValue[previousValue.length-1];\n            if(compare(prev, currentValue) == 0){\n                prev.policies.push(...currentValue.policies);\n                return previousValue\n            }\n            return previousValue.concat(currentValue)\n        }, []);\n\n        rows.sort((a, b)=>(payoffCoeffs[0] *  (a.payoffs[0] - b.payoffs[0])) || (-payoffCoeffs[1] *   (a.payoffs[1] - b.payoffs[1])));\n        rows.forEach((r, i)=> {\n            r.id = i+1;\n        });\n        // rows.sort(compare);\n        rows.sort((a, b)=>(-payoffCoeffs[0] *  (a.payoffs[0] - b.payoffs[0])) || (-payoffCoeffs[1] *   (a.payoffs[1] - b.payoffs[1])));\n\n        let bestCost = -payoffCoeffs[1] * Infinity,\n            bestCostRow = null;\n\n        let cmp= (a, b) => a > b;\n        if(payoffCoeffs[1]<0){\n            cmp= (a, b) => a < b;\n        }\n\n        rows.forEach((r, i)=> {\n            if (cmp(r.payoffs[1], bestCost)) {\n                bestCost = r.payoffs[1];\n                bestCostRow = r;\n            } else if(bestCostRow) {\n                r.dominatedBy = bestCostRow.id;\n            }\n        });\n\n        cmp= (a, b) => a < b;\n        if(payoffCoeffs[0] > 0 && payoffCoeffs[1] < 0){\n            cmp= (a, b) => a < b;\n        }else if(payoffCoeffs[0] < 0 && payoffCoeffs[1] > 0){\n            cmp= (a, b) => a < b;\n        }else if(payoffCoeffs[1]<0){\n            cmp= (a, b) => a > b;\n        }\n\n        let prev2NotDominated = null;\n\n\n        rows.filter(r=>!r.dominatedBy).sort((a, b)=>(  payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0]))).forEach((r, i, arr)=> {\n            if (!i) {\n                r.incratio = 0;\n                return;\n            }\n\n            let prev = arr[i - 1];\n\n            r.incratio = this.computeICER(r, prev);\n            if (i < 2) {\n                return;\n            }\n\n            if(!prev2NotDominated){\n                prev2NotDominated = arr[i - 2];\n            }\n\n            if(cmp(r.incratio,prev.incratio)){\n                prev.incratio = null;\n                prev.extendedDominatedBy = [prev2NotDominated.id, r.id] ;\n                r.incratio = this.computeICER(r, prev2NotDominated);\n            }else{\n                prev2NotDominated = prev;\n            }\n        });\n\n        let weightLowerBound = params.value(\"weightLowerBound\");\n        let defaultWeight = params.value(\"defaultWeight\");\n        let weightUpperBound = params.value(\"weightUpperBound\");\n\n        //mark optimal for weight in [weightLowerBound, weightUpperBound] and optimal for default Weight\n        let lastLELower = null;\n        let lastLELowerDef = null;\n        rows.slice().filter(r=>!r.dominatedBy && !r.extendedDominatedBy).sort((a, b) => {\n            let sub = a.incratio - b.incratio;\n            return sub ? sub : payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0])\n        }).forEach((row, i, arr)=>{\n\n            if(row.incratio < weightLowerBound){\n                lastLELower  = row;\n            }\n            if(row.incratio < defaultWeight){\n                lastLELowerDef  = row;\n            }\n\n            row.optimal = row.incratio >= weightLowerBound && row.incratio <= weightUpperBound;\n            row.optimalForDefaultWeight = row.incratio == defaultWeight;\n\n        });\n        if(lastLELower){\n            lastLELower.optimal = true;\n        }\n\n        if(lastLELowerDef){\n            lastLELowerDef.optimalForDefaultWeight = true;\n        }\n\n        rows.forEach(row=>{\n            row.payoffs[0] =  ExpressionEngine.toFloat(row.payoffs[0]);\n            row.payoffs[1] =  ExpressionEngine.toFloat(row.payoffs[1]);\n            row.incratio = row.incratio === null ? null : ExpressionEngine.toFloat(row.incratio);\n        });\n\n        jobResult.data = {\n            payoffNames: data.payoffNames.slice(),\n            payoffCoeffs : payoffCoeffs,\n            rows: rows.sort((a, b)=>(a.id - b.id)),\n            weightLowerBound: ExpressionEngine.toFloat(weightLowerBound),\n            defaultWeight: ExpressionEngine.toFloat(defaultWeight),\n            weightUpperBound: ExpressionEngine.toFloat(weightUpperBound)\n        };\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n\n    computeICER(r, prev){\n        let d = ExpressionEngine.subtract(r.payoffs[0], prev.payoffs[0]);\n        let n = ExpressionEngine.subtract(r.payoffs[1], prev.payoffs[1]);\n        if (d == 0){\n            if(n<0){\n                return - Infinity;\n            }\n            return Infinity;\n        }\n        return Math.abs(ExpressionEngine.divide(n, d));\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\nexport class PayoffsTransformationJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"objectId\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"functionName\", PARAMETER_TYPE.STRING).set('required', true));\n        this.definitions.push(new JobParameterDefinition(\"functionBody\", PARAMETER_TYPE.STRING).set('required', true));\n        this.definitions.push(new JobParameterDefinition(\"functionArgumentName\", PARAMETER_TYPE.STRING).set('required', true));\n        this.definitions.push(new JobParameterDefinition(\"makeClone\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            functionName: 'transformPayoff',\n            functionBody: 'log(p)',\n            functionArgumentName: 'p',\n            makeClone: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Step} from \"../../engine/step\";\nimport {JOB_STATUS} from \"../../engine/job-status\";\nimport {TreeValidator} from \"../../../validation/tree-validator\";\n\nimport {PayoffsTransformationJobParameters} from \"./payoffs-transformation-job-parameters\";\nimport {Job} from \"../../engine/job\";\nimport {domain as model} from \"sd-model\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport class PayoffsTransformationJob extends Job {\n\n    static $NAME = 'payoffs-transformation';\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(PayoffsTransformationJob.$NAME, jobRepository);\n        this.isRestartable = false;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(execution) {\n        var data = execution.getData();\n        var params = execution.jobParameters;\n        let functionName = params.value(\"functionName\");\n\n        const root = data.findNodeById(params.value(\"objectId\"));\n\n        let makeClone = params.value(\"makeClone\");\n\n        let rootTarget = makeClone ? data.cloneSubtree(root, true) : root;\n\n\n        rootTarget.code += '\\n' + functionName + '('+ params.value('functionArgumentName') + ') = ' + params.value('functionBody');\n\n        let allNodes = data.getAllNodesInSubtree(rootTarget);\n\n\n        this.processNodePayoff(rootTarget, params);\n\n        if(makeClone){\n            let minY = Number.MAX_VALUE;\n            let maxY = Number.MIN_VALUE;\n            allNodes.forEach(n => {\n                if (n.location.y < minY) {\n                    minY = n.location.y;\n                }\n                if (n.location.y > maxY) {\n                    maxY = n.location.y;\n                }\n\n            });\n\n            let extentY = maxY - minY;\n            let margin = 30;\n            let offset = extentY + margin;\n\n\n            rootTarget.move(0, offset);\n            data.attachSubtree(rootTarget);\n        }\n\n        return execution;\n    }\n\n    processNodePayoff(node, params, parentEdge = null, aggregatedPayoff = [0, 0]){\n        if(node.type === model.TerminalNode.$TYPE){\n            parentEdge.payoff = aggregatedPayoff.map(p => params.value(\"functionName\") + '(' + ExpressionEngine.toNumber(p).toFraction(false) + ')');\n            return;\n        }\n\n        if (parentEdge) {\n            parentEdge.payoff.fill(0);\n        }\n\n\n        node.childEdges.forEach((e) => {\n            this.processNodePayoff(e.childNode, params, e, aggregatedPayoff.map((p,i) => ExpressionEngine.add(p, e.computedBasePayoff(undefined, i))))\n        })\n    }\n\n    createJobParameters(values) {\n        return new PayoffsTransformationJobParameters(values);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../engine/job-parameter-definition\";\nexport class RecomputeJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING).set('required', false));\n        this.definitions.push(new JobParameterDefinition(\"evalCode\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"evalNumeric\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            ruleName: null, //recompute all rules\n            evalCode: true,\n            evalNumeric: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../engine/simple-job\";\nimport {Step} from \"../../engine/step\";\nimport {JOB_STATUS} from \"../../engine/job-status\";\nimport {TreeValidator} from \"../../../validation/tree-validator\";\nimport {BatchStep} from \"../../engine/batch/batch-step\";\nimport {RecomputeJobParameters} from \"./recompute-job-parameters\";\nimport {Job} from \"../../engine/job\";\n\nexport class RecomputeJob extends Job {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"recompute\", jobRepository);\n        this.isRestartable = false;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    doExecute(execution) {\n        var data = execution.getData();\n        var params = execution.jobParameters;\n        var ruleName = params.value(\"ruleName\");\n        var allRules = !ruleName;\n        if(ruleName){\n            this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        }\n        this.checkValidityAndRecomputeObjective(data, allRules, params.value(\"evalCode\"), params.value(\"evalNumeric\"))\n        return execution;\n    }\n\n    checkValidityAndRecomputeObjective(data, allRules, evalCode, evalNumeric) {\n        data.validationResults = [];\n\n        if(evalCode||evalNumeric){\n            this.expressionsEvaluator.evalExpressions(data, evalCode, evalNumeric);\n        }\n\n        data.getRoots().forEach(root=> {\n            var vr = this.treeValidator.validate(data.getAllNodesInSubtree(root));\n            data.validationResults.push(vr);\n            if (vr.isValid()) {\n                this.objectiveRulesManager.recomputeTree(root, allRules);\n            }\n        });\n    }\n\n    createJobParameters(values) {\n        return new RecomputeJobParameters(values);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class SensitivityAnalysisJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"min\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"max\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 2),\n            ], 1, Infinity, false,\n            v => v[\"min\"] < v[\"max\"],\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ))\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            extendedPolicyDescription: true,\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {SensitivityAnalysisJobParameters} from \"./sensitivity-analysis-job-parameters\";\nimport {PrepareVariablesStep} from \"./steps/prepare-variables-step\";\nimport {InitPoliciesStep} from \"./steps/init-policies-step\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {Policy} from \"../../../../policies/policy\";\nimport {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\n\nexport class SensitivityAnalysisJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize=5) {\n        super(\"sensitivity-analysis\", jobRepository, expressionsEvaluator, objectiveRulesManager);\n        this.batchSize = 5;\n        this.initSteps();\n    }\n\n    initSteps(){\n        this.addStep(new PrepareVariablesStep(this.jobRepository, this.expressionsEvaluator.expressionEngine));\n        this.addStep(new InitPoliciesStep(this.jobRepository));\n        this.calculateStep = new CalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager, this.batchSize);\n        this.addStep(this.calculateStep);\n    }\n\n    createJobParameters(values) {\n        return new SensitivityAnalysisJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n    setBatchSize(batchSize){\n        this.batchSize = batchSize;\n        this.calculateStep.chunkSize = batchSize;\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n        var result = [];\n        if(withHeaders){\n            var headers = ['policy_number', 'policy'];\n            jobResult.variableNames.forEach(n=>headers.push(n));\n            headers.push('payoff');\n            result.push(headers);\n        }\n\n        var roundVariables = !!jobParameters.values.roundVariables;\n        if(roundVariables){\n            this.roundVariables(jobResult);\n        }\n\n        jobResult.rows.forEach(row => {\n            var policy = jobResult.policies[row.policyIndex];\n            var rowCells = [row.policyIndex+1, Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription)];\n            row.variables.forEach(v=> rowCells.push(v));\n            rowCells.push(row.payoff);\n            result.push(rowCells);\n\n            if(row._variables){ //revert original variables\n                row.variables = row._variables;\n                delete row._variables;\n            }\n        });\n\n        return result;\n    }\n\n    roundVariables(jobResult){\n        var uniqueValues = jobResult.variableNames.map(()=>new Set());\n\n        jobResult.rows.forEach(row => {\n            row._variables = row.variables.slice(); // save original row variables\n            row.variables.forEach((v,i)=> {\n                uniqueValues[i].add(v)\n            });\n        });\n\n        var uniqueValuesNo = uniqueValues.map((s)=>s.size);\n        var maxPrecision = 14;\n        var precision = 2;\n        var notReadyVariablesIndexes = jobResult.variableNames.map((v,i)=>i);\n        while(precision<=maxPrecision && notReadyVariablesIndexes.length){\n            uniqueValues = notReadyVariablesIndexes.map(()=>new Set());\n            jobResult.rows.forEach(row => {\n                notReadyVariablesIndexes.forEach((variableIndex, notReadyIndex)=>{\n\n                    var val = row._variables[variableIndex];\n                    val = Utils.round(val, precision);\n                    uniqueValues[notReadyIndex].add(val);\n\n                    row.variables[variableIndex] = val;\n                })\n            });\n\n            var newReadyIndexes = [];\n            uniqueValues.forEach((uniqueVals, notReadyIndex)=>{\n                var origUniqueCount = uniqueValuesNo[notReadyVariablesIndexes[notReadyIndex]] ;\n                if(origUniqueCount==uniqueVals.size){ //ready in previous iteration\n                    newReadyIndexes.push(notReadyIndex);\n                }\n            });\n            if(newReadyIndexes.length) { //revert values to prev iteration\n                newReadyIndexes.reverse();\n                newReadyIndexes.forEach(notReadyIndex=>{\n                    notReadyVariablesIndexes.splice(notReadyIndex, 1);\n                })\n            }\n            precision++;\n        }\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n\n        if (execution.stepExecutions.length <= 2) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[2].getProgress(execution.stepExecutions[2]);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize) {\n        super(\"calculate_step\", jobRepository, batchSize);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        var jobExecutionContext = stepExecution.getJobExecutionContext();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        var variableValues = jobResult.data.variableValues;\n        var variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n\n\n        if (!jobResult.data.rows) {\n            jobResult.data.rows = [];\n            jobResult.data.variableNames = variableNames;\n        }\n\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        var variableValues = jobResult.data.variableValues;\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n\n    processItem(stepExecution, item) {\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n        var failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        var data = stepExecution.getData();\n        var treeRoot = data.getRoots()[0];\n        var variableNames = stepExecution.executionContext.get(\"variableNames\");\n        var policies = stepExecution.getJobExecutionContext().get(\"policies\");\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n        variableNames.forEach((variableName, i)=> {\n            data.expressionScope[variableName] = item[i];\n        });\n\n        this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n        var vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n\n        var valid = vr.isValid();\n\n        if(!valid && failOnInvalidTree){\n            let errorData = {\n                variables: {}\n            };\n            variableNames.forEach((variableName, i)=> {\n                errorData.variables[variableName] = item[i];\n            });\n            throw new JobComputationException(\"computations\", errorData)\n        }\n\n        var payoffs = [];\n\n        policies.forEach(policy=> {\n            var payoff = 'n/a';\n            if (valid) {\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n            }\n            payoffs.push(payoff);\n        });\n\n        return {\n            policies: policies,\n            variables: item,\n            payoffs: payoffs\n        };\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var extendedPolicyDescription = params.value(\"extendedPolicyDescription\");\n\n        items.forEach(item=> {\n            if (!item) {\n                return;\n            }\n            item.policies.forEach((policy, i)=> {\n                var variables = item.variables.map(v => this.toFloat(v));\n\n                var payoff = item.payoffs[i];\n                var row = {\n                    policyIndex: i,\n                    variables: variables,\n                    payoff: Utils.isString(payoff) ? payoff : this.toFloat(payoff)\n                };\n                jobResult.data.rows.push(row);\n            })\n        })\n    }\n\n    postProcess(stepExecution, jobResult) {\n        delete jobResult.data.variableValues;\n    }\n\n\n    toFloat(v) {\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\n\nexport class InitPoliciesStep extends Step {\n    constructor(jobRepository) {\n        super(\"init_policies\", jobRepository);\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var data = stepExecution.getData();\n        var treeRoot = data.getRoots()[0];\n        var policiesCollector = new PoliciesCollector(treeRoot);\n\n        var policies = policiesCollector.policies;\n        stepExecution.getJobExecutionContext().put(\"policies\", policies);\n\n        if(!jobResult.data){\n            jobResult.data={}\n        }\n\n        jobResult.data.policies = policies;\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class PrepareVariablesStep extends Step {\n    constructor(jobRepository, expressionEngine) {\n        super(\"prepare_variables\", jobRepository);\n        this.expressionEngine = expressionEngine;\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n\n        var variableValues = [];\n        variables.forEach(v=> {\n            variableValues.push(ComputationsUtils.sequence(v.min, v.max, v.length));\n        });\n        variableValues = Utils.cartesianProductOf(variableValues);\n        jobResult.data={\n            variableValues: variableValues\n        };\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class ProbabilisticSensitivityAnalysisJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"extendedPolicyDescription\", PARAMETER_TYPE.BOOLEAN));\n        this.definitions.push(new JobParameterDefinition(\"numberOfRuns\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v > 0));\n\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"formula\", PARAMETER_TYPE.NUMBER_EXPRESSION)\n            ], 1, Infinity, false,\n            null,\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ))\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            extendedPolicyDescription: true,\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {ProbabilisticSensitivityAnalysisJobParameters} from \"./probabilistic-sensitivity-analysis-job-parameters\";\nimport {InitPoliciesStep} from \"../n-way/steps/init-policies-step\";\nimport {SensitivityAnalysisJob} from \"../n-way/sensitivity-analysis-job\";\nimport {ProbCalculateStep} from \"./steps/prob-calculate-step\";\nimport {ComputePolicyStatsStep} from \"./steps/compute-policy-stats-step\";\n\nexport class ProbabilisticSensitivityAnalysisJob extends SensitivityAnalysisJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize=5) {\n        super(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize);\n        this.name = \"probabilistic-sensitivity-analysis\";\n    }\n\n    initSteps() {\n        this.addStep(new InitPoliciesStep(this.jobRepository));\n        this.calculateStep = new ProbCalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager, this.batchSize);\n        this.addStep(this.calculateStep);\n        this.addStep(new ComputePolicyStatsStep(this.expressionsEvaluator.expressionEngine, this.objectiveRulesManager, this.jobRepository));\n    }\n\n    createJobParameters(values) {\n        return new ProbabilisticSensitivityAnalysisJobParameters(values);\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution) {\n\n        if (execution.stepExecutions.length <= 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[1].getProgress(execution.stepExecutions[1]);\n    }\n}\n","import {log, Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport class ComputePolicyStatsStep extends Step {\n    constructor(expressionEngine, objectiveRulesManager, jobRepository) {\n        super(\"compute_policy_stats\", jobRepository);\n        this.expressionEngine = expressionEngine;\n        this.objectiveRulesManager = objectiveRulesManager;\n    }\n\n    doExecute(stepExecution, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var numberOfRuns = params.value(\"numberOfRuns\");\n        var ruleName = params.value(\"ruleName\");\n\n        let rule = this.objectiveRulesManager.ruleByName[ruleName];\n\n\n        var payoffsPerPolicy = jobResult.data.policies.map(()=>[]);\n\n        jobResult.data.rows.forEach(row=> {\n            payoffsPerPolicy[row.policyIndex].push(Utils.isString(row.payoff) ? 0 : row.payoff)\n        });\n\n        log.debug('payoffsPerPolicy', payoffsPerPolicy, jobResult.data.rows.length, rule.maximization);\n\n        jobResult.data.medians = payoffsPerPolicy.map(payoffs=>ExpressionEngine.median(payoffs));\n        jobResult.data.standardDeviations = payoffsPerPolicy.map(payoffs=>ExpressionEngine.std(payoffs));\n\n        if (rule.maximization) {\n            jobResult.data.policyIsBestProbabilities = jobResult.data.policyToHighestPayoffCount.map(v=>ExpressionEngine.toFloat(ExpressionEngine.divide(v, numberOfRuns)));\n        } else {\n            jobResult.data.policyIsBestProbabilities = jobResult.data.policyToLowestPayoffCount.map(v=>ExpressionEngine.toFloat(ExpressionEngine.divide(v, numberOfRuns)));\n        }\n\n        jobResult.data.policyToHighestPayoffCount = jobResult.data.policyToHighestPayoffCount.map(v=>ExpressionEngine.toFloat(v));\n        jobResult.data.policyToLowestPayoffCount = jobResult.data.policyToLowestPayoffCount.map(v=>ExpressionEngine.toFloat(v));\n\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {CalculateStep} from \"../../n-way/steps/calculate-step\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\n\nexport class ProbCalculateStep extends CalculateStep {\n\n    init(stepExecution, jobResult) {\n        var jobExecutionContext = stepExecution.getJobExecutionContext();\n        var params = stepExecution.getJobParameters();\n        var ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        var variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n\n        if(!jobResult.data.rows){\n            jobResult.data.rows = [];\n            jobResult.data.variableNames = variableNames;\n            jobResult.data.expectedValues = Utils.fill(new Array(jobResult.data.policies.length), 0);\n            jobResult.data.policyToHighestPayoffCount = Utils.fill(new Array(jobResult.data.policies.length), 0);\n            jobResult.data.policyToLowestPayoffCount = Utils.fill(new Array(jobResult.data.policies.length), 0);\n        }\n\n        return params.value(\"numberOfRuns\");\n    }\n\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n        var data = stepExecution.getData();\n        var variableValues = [];\n        for(var runIndex=0; runIndex<chunkSize; runIndex++){\n            var singleRunVariableValues = [];\n            var errors = [];\n            variables.forEach(v=> {\n                try{\n                    var evaluated = this.expressionsEvaluator.expressionEngine.eval(v.formula, true, Utils.cloneDeep(data.expressionScope));\n                    singleRunVariableValues.push(ExpressionEngine.toFloat(evaluated));\n                }catch(e){\n                    errors.push({\n                        variable: v,\n                        error: e\n                    });\n                }\n\n            });\n            if(errors.length) {\n                var errorData = {variables: []};\n                errors.forEach(e=>{\n                    errorData.variables[e.variable.name] = e.error.message;\n                });\n                throw new JobComputationException(\"param-computation\", errorData)\n            }\n            variableValues.push(singleRunVariableValues)\n        }\n\n        return variableValues;\n    }\n\n    processItem(stepExecution, item, currentItemCount, jobResult) {\n        var r = super.processItem(stepExecution, item, jobResult);\n\n        var params = stepExecution.getJobParameters();\n        var numberOfRuns = params.value(\"numberOfRuns\");\n        var policies = stepExecution.getJobExecutionContext().get(\"policies\");\n\n        this.updatePolicyStats(r, policies, numberOfRuns, jobResult);\n\n        return r;\n    }\n\n    updatePolicyStats(r, policies, numberOfRuns, jobResult){\n        var highestPayoff = -Infinity;\n        var lowestPayoff = Infinity;\n        var bestPolicyIndexes = [];\n        var worstPolicyIndexes = [];\n\n        var zeroNum = ExpressionEngine.toNumber(0);\n\n        policies.forEach((policy,i)=>{\n            let payoff = r.payoffs[i];\n            if(Utils.isString(payoff)){\n                payoff = zeroNum;\n            }\n            if(payoff < lowestPayoff){\n                lowestPayoff = payoff;\n                worstPolicyIndexes = [i];\n            }else if(payoff.equals(lowestPayoff)){\n                worstPolicyIndexes.push(i)\n            }\n            if(payoff > highestPayoff){\n                highestPayoff = payoff;\n                bestPolicyIndexes = [i]\n            }else if(payoff.equals(highestPayoff)){\n                bestPolicyIndexes.push(i)\n            }\n\n            jobResult.data.expectedValues[i] = ExpressionEngine.add(jobResult.data.expectedValues[i], ExpressionEngine.divide(payoff, numberOfRuns));\n        });\n\n        bestPolicyIndexes.forEach(policyIndex=>{\n            jobResult.data.policyToHighestPayoffCount[policyIndex] = ExpressionEngine.add(jobResult.data.policyToHighestPayoffCount[policyIndex], ExpressionEngine.divide(1, bestPolicyIndexes.length))\n        });\n\n        worstPolicyIndexes.forEach(policyIndex=>{\n            jobResult.data.policyToLowestPayoffCount[policyIndex] = ExpressionEngine.add(jobResult.data.policyToLowestPayoffCount[policyIndex], ExpressionEngine.divide(1, worstPolicyIndexes.length))\n        });\n    }\n\n\n    postProcess(stepExecution, jobResult) {\n        jobResult.data.expectedValues = jobResult.data.expectedValues.map(v=>this.toFloat(v));\n    }\n\n\n    toFloat(v) {\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class SpiderPlotJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"percentageChangeRange\", PARAMETER_TYPE.NUMBER).set(\"singleValueValidator\", v => v > 0 && v <=100));\n        this.definitions.push(new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 0));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n            ], 1, Infinity, false,\n            null,\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {SpiderPlotJobParameters} from \"./spider-plot-job-parameters\";\n\nexport class SpiderPlotJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"spider-plot\", jobRepository);\n        this.addStep(new CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager));\n    }\n\n    createJobParameters(values) {\n        return new SpiderPlotJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n        if (execution.stepExecutions.length < 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[0].getProgress(execution.stepExecutions[0]);\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n\n        let result = [];\n        if(withHeaders){\n            result.push(['variable_name', 'policy_no'].concat(jobResult.percentageRangeValues));\n        }\n\n        jobResult.rows.forEach((row, index) => {\n\n            result.push(...row.payoffs.map((payoffs, policyIndex)=>[\n                row.variableName,\n                policyIndex+1,\n                ...payoffs\n            ]));\n\n        });\n\n        return result;\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository, 1);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        let jobExecutionContext = stepExecution.getJobExecutionContext();\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let percentageChangeRange = params.value(\"percentageChangeRange\");\n        let length = params.value(\"length\");\n        let variables = params.value(\"variables\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n        let data = stepExecution.getData();\n\n        let treeRoot = data.getRoots()[0];\n        let payoff = treeRoot.computedValue(ruleName, 'payoff');\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalExpressions(data);\n\n        this.objectiveRulesManager.recomputeTree(treeRoot, false);\n\n        let policiesCollector = new PoliciesCollector(treeRoot, ruleName);\n\n        let defaultValues = {};\n        data.getGlobalVariableNames().forEach(name => {\n            let v = data.expressionScope[name];\n            try {\n                defaultValues[name] = this.toFloat(v);\n            } catch (e) {\n                throw new JobComputationException(\"error computing float value of a variable\", {\n                    name: name,\n                    value: v,\n                })\n            }\n        });\n\n\n        let percentageRangeValues = ComputationsUtils.sequence(-percentageChangeRange, percentageChangeRange, 2*length+1);\n\n        let variableValues = [];\n\n        variables.forEach(v=> {\n            let defVal = defaultValues[v.name];\n            variableValues.push(percentageRangeValues.map(p=> this.toFloat(ExpressionEngine.add(defVal, ExpressionEngine.multiply(ExpressionEngine.divide(p,100), defVal)))));\n        });\n\n\n        if(!jobResult.data){\n            jobResult.data = {\n                variableNames: variableNames,\n                defaultValues: defaultValues,\n                percentageRangeValues: percentageRangeValues,\n                defaultPayoff: this.toFloat(payoff)[0],\n                policies: policiesCollector.policies,\n                rows: []\n            };\n        }\n\n        stepExecution.getJobExecutionContext().put(\"variableValues\", variableValues);\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize) {\n        let variableValues = stepExecution.getJobExecutionContext().get(\"variableValues\");\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n    processItem(stepExecution, item, itemIndex, jobResult) {\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        let data = stepExecution.getData();\n        let treeRoot = data.getRoots()[0];\n        let variableNames = stepExecution.executionContext.get(\"variableNames\");\n        let variableName = variableNames[itemIndex];\n\n\n        let payoffs = jobResult.data.policies.map(policy=>[]);\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n\n\n        item.forEach(variableValue=>{\n\n            data.expressionScope[variableName] = variableValue;\n\n            this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n            let vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n            let valid = vr.isValid();\n\n            if(!valid && failOnInvalidTree){\n                let errorData = {\n                    variables: {}\n                };\n                errorData.variables[variableName] = variableValue;\n\n                throw new JobComputationException(\"computations\", errorData)\n            }\n\n            jobResult.data.policies.forEach((policy, policyIndex)=>{\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                let payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n                payoffs[policyIndex].push(this.toFloat(payoff));\n            });\n\n        });\n\n        return {\n            variableName: variableName,\n            variableIndex: itemIndex,\n            variableValues: item,\n            payoffs: payoffs\n        };\n\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        jobResult.data.rows.push(...items);\n    }\n\n\n    toFloat(v){\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {JobComputationException} from \"../../../../engine/exceptions/job-computation-exception\";\nimport {BatchStep} from \"../../../../engine/batch/batch-step\";\nimport {TreeValidator} from \"../../../../../validation/tree-validator\";\nimport {Policy} from \"../../../../../policies/policy\";\nimport {PoliciesCollector} from \"../../../../../policies/policies-collector\";\n\nexport class CalculateStep extends BatchStep {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"calculate_step\", jobRepository, 1);\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n        this.treeValidator = new TreeValidator();\n    }\n\n    init(stepExecution, jobResult) {\n        let jobExecutionContext = stepExecution.getJobExecutionContext();\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n\n        this.objectiveRulesManager.setCurrentRuleByName(ruleName);\n        let variableValues = jobExecutionContext.get(\"variableValues\");\n        let variableNames = params.value(\"variables\").map(v=>v.name);\n        stepExecution.executionContext.put(\"variableNames\", variableNames);\n        let data = stepExecution.getData();\n\n        let treeRoot = data.getRoots()[0];\n        let payoff = treeRoot.computedValue(ruleName, 'payoff');\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalExpressions(data);\n\n        this.objectiveRulesManager.recomputeTree(treeRoot, false);\n\n\n\n        let policiesCollector = new PoliciesCollector(treeRoot, ruleName);\n\n        let defaultValues = {};\n        data.getGlobalVariableNames().forEach(name => {\n            let v = data.expressionScope[name];\n            try {\n                defaultValues[name] = this.toFloat(v);\n            } catch (e) {\n                throw new JobComputationException(\"error computing float value of a variable\", {\n                    name: name,\n                    value: v,\n                })\n            }\n        });\n\n        if(!jobResult.data){\n            jobResult.data = {\n                variableNames: variableNames,\n                defaultValues: defaultValues,\n                variableExtents: variableValues.map(v=>[v[0], v[v.length-1]]),\n                defaultPayoff: this.toFloat(payoff)[0],\n                policies: policiesCollector.policies,\n                rows: []\n            };\n        }\n\n        return variableValues.length;\n    }\n\n\n    readNextChunk(stepExecution, startIndex, chunkSize) {\n        let variableValues = stepExecution.getJobExecutionContext().get(\"variableValues\");\n        return variableValues.slice(startIndex, startIndex + chunkSize);\n    }\n\n    processItem(stepExecution, item, itemIndex, jobResult) {\n        let params = stepExecution.getJobParameters();\n        let ruleName = params.value(\"ruleName\");\n        let failOnInvalidTree = params.value(\"failOnInvalidTree\");\n        let data = stepExecution.getData();\n        let treeRoot = data.getRoots()[0];\n        let variableNames = stepExecution.executionContext.get(\"variableNames\");\n        let variableName = variableNames[itemIndex];\n\n        let extents = jobResult.data.policies.map(policy=>{\n            return {\n                min: Infinity,\n                max: -Infinity\n            }\n        });\n\n        let values = jobResult.data.policies.map(policy=>{\n            return {\n                min: null,\n                max: null\n            }\n        });\n\n        this.expressionsEvaluator.clear(data);\n        this.expressionsEvaluator.evalGlobalCode(data);\n\n\n        item.forEach(variableValue=>{\n\n            data.expressionScope[variableName] = variableValue;\n\n            this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);\n            let vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));\n            let valid = vr.isValid();\n\n            if(!valid && failOnInvalidTree){\n                let errorData = {\n                    variables: {}\n                };\n                errorData.variables[variableName] = variableValue;\n\n                throw new JobComputationException(\"computations\", errorData)\n            }\n\n            jobResult.data.policies.forEach((policy, policyIndex)=>{\n                this.objectiveRulesManager.recomputeTree(treeRoot, false, policy);\n                let payoff = treeRoot.computedValue(ruleName, 'payoff')[0];\n\n                if(payoff < extents[policyIndex].min){\n                    extents[policyIndex].min = payoff;\n                    values[policyIndex].min = variableValue\n                }\n\n                if(payoff > extents[policyIndex].max){\n                    extents[policyIndex].max = payoff;\n                    values[policyIndex].max = variableValue\n                }\n            });\n\n        });\n\n        return {\n            variableName: variableName,\n            variableIndex: itemIndex,\n            extents: extents.map(e=>[this.toFloat(e.min), this.toFloat(e.max)]),\n            extentVariableValues: values.map(v=>[this.toFloat(v.min), this.toFloat(v.max)])\n        };\n\n    }\n\n    writeChunk(stepExecution, items, jobResult) {\n        jobResult.data.rows.push(...items);\n    }\n\n    postProcess(stepExecution, jobResult) {\n        jobResult.data.rows.sort((a, b)=>(b.extents[0][1]-b.extents[0][0])-(a.extents[0][1]-a.extents[0][0]))\n\n    }\n\n\n    toFloat(v){\n        return ExpressionEngine.toFloat(v);\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {Step} from \"../../../../engine/step\";\nimport {JOB_STATUS} from \"../../../../engine/job-status\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {ComputationsUtils} from \"../../../../../computations-utils\";\n\nexport class PrepareVariablesStep extends Step {\n    constructor(jobRepository) {\n        super(\"prepare_variables\", jobRepository);\n    }\n\n    doExecute(stepExecution) {\n        var params = stepExecution.getJobParameters();\n        var variables = params.value(\"variables\");\n\n        var variableValues = [];\n        variables.forEach(v=> {\n            variableValues.push(ComputationsUtils.sequence(v.min, v.max, v.length));\n        });\n        stepExecution.getJobExecutionContext().put(\"variableValues\", variableValues);\n\n        stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n        return stepExecution;\n    }\n\n}\n","import {Utils} from \"sd-utils\";\nimport {JobParameters} from \"../../../engine/job-parameters\";\nimport {JobParameterDefinition, PARAMETER_TYPE} from \"../../../engine/job-parameter-definition\";\nexport class TornadoDiagramJobParameters extends JobParameters {\n\n    initDefinitions() {\n        this.definitions.push(new JobParameterDefinition(\"id\", PARAMETER_TYPE.STRING, 1, 1, true));\n        this.definitions.push(new JobParameterDefinition(\"ruleName\", PARAMETER_TYPE.STRING));\n        this.definitions.push(new JobParameterDefinition(\"variables\", [\n                new JobParameterDefinition(\"name\", PARAMETER_TYPE.STRING),\n                new JobParameterDefinition(\"min\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"max\", PARAMETER_TYPE.NUMBER),\n                new JobParameterDefinition(\"length\", PARAMETER_TYPE.INTEGER).set(\"singleValueValidator\", v => v >= 0),\n            ], 1, Infinity, false,\n            v => v[\"min\"] <= v[\"max\"],\n            values => Utils.isUnique(values, v=>v[\"name\"]) //Variable names should be unique\n        ));\n        this.definitions.push(new JobParameterDefinition(\"failOnInvalidTree\", PARAMETER_TYPE.BOOLEAN));\n    }\n\n    initDefaultValues() {\n        this.values = {\n            id: Utils.guid(),\n            failOnInvalidTree: true\n        }\n    }\n}\n","import {SimpleJob} from \"../../../engine/simple-job\";\nimport {PrepareVariablesStep} from \"./steps/prepare-variables-step\";\nimport {CalculateStep} from \"./steps/calculate-step\";\nimport {TornadoDiagramJobParameters} from \"./tornado-diagram-job-parameters\";\n\nexport class TornadoDiagramJob extends SimpleJob {\n\n    constructor(jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(\"tornado-diagram\", jobRepository);\n        this.addStep(new PrepareVariablesStep(jobRepository));\n        this.addStep(new CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager));\n    }\n\n    createJobParameters(values) {\n        return new TornadoDiagramJobParameters(values);\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => data.getRoots().length === 1\n        }\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(execution){\n\n        if (execution.stepExecutions.length <= 1) {\n            return {\n                total: 1,\n                current: 0\n            };\n        }\n\n        return this.steps[1].getProgress(execution.stepExecutions[1]);\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters, withHeaders=true){\n        let result = [];\n        if(withHeaders){\n            result.push(['variable_name', 'default_var_value', \"min_var_value\", \"max_var_value\", 'default_payoff', \"min_payoff\", \"max_payoff\", \"policy_no\"]);\n        }\n\n\n        jobResult.rows.forEach((row, index) => {\n\n            result.push(...row.extents.map((extent, policyIndex)=>[\n                row.variableName,\n                jobResult.defaultValues[row.variableName],\n                row.extentVariableValues[policyIndex][0],\n                row.extentVariableValues[policyIndex][1],\n                jobResult.defaultPayoff,\n                extent[0],\n                extent[1],\n                policyIndex+1\n            ]));\n\n        });\n\n\n        return result;\n    }\n}\n","import {JOB_STATUS} from \"../job-status\";\nimport {log} from 'sd-utils'\nimport {Step} from \"../step\";\nimport {JobInterruptedException} from \"../exceptions/job-interrupted-exception\";\n\n/*job step that process batch of items*/\nexport class BatchStep extends Step {\n\n    chunkSize;\n    static CURRENT_ITEM_COUNT_PROP = 'batch_step_current_item_count';\n    static TOTAL_ITEM_COUNT_PROP = 'batch_step_total_item_count';\n\n    constructor(name, jobRepository, chunkSize) {\n        super(name, jobRepository);\n        this.chunkSize = chunkSize;\n    }\n\n    /**\n     * Extension point for subclasses to perform step initialization. Should return total item count\n     */\n    init(stepExecution, jobResult) {\n        throw \"BatchStep.init function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to read and return chunk of items to process\n     */\n    readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {\n        throw \"BatchStep.readNextChunk function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to process single item\n     * Must return processed item which will be passed in a chunk to writeChunk function\n     */\n    processItem(stepExecution, item, currentItemCount, jobResult) {\n        throw \"BatchStep.processItem function not implemented for step: \" + this.name;\n    }\n\n    /**\n     * Extension point for subclasses to write chunk of items. Not required\n     */\n    writeChunk(stepExecution, items, jobResult) {\n    }\n\n    /**\n     * Extension point for subclasses to perform postprocessing after all items have been processed. Not required\n     */\n    postProcess(stepExecution, jobResult) {\n    }\n\n\n    setTotalItemCount(stepExecution, count) {\n        stepExecution.executionContext.put(BatchStep.TOTAL_ITEM_COUNT_PROP, count);\n    }\n\n    getTotalItemCount(stepExecution) {\n        return stepExecution.executionContext.get(BatchStep.TOTAL_ITEM_COUNT_PROP);\n    }\n\n    setCurrentItemCount(stepExecution, count) {\n        stepExecution.executionContext.put(BatchStep.CURRENT_ITEM_COUNT_PROP, count);\n    }\n\n    getCurrentItemCount(stepExecution) {\n        return stepExecution.executionContext.get(BatchStep.CURRENT_ITEM_COUNT_PROP) || 0;\n    }\n\n\n    doExecute(stepExecution, jobResult) {\n        return Promise.resolve().then(()=> {\n            return this.init(stepExecution, jobResult)\n        }).catch(e=> {\n            log.error(\"Failed to initialize batch step: \" + this.name, e);\n            throw e;\n        }).then(totalItemCount=> {\n            return Promise.resolve().then(()=>{\n                this.setCurrentItemCount(stepExecution, this.getCurrentItemCount(stepExecution));\n                this.setTotalItemCount(stepExecution, totalItemCount);\n                return this.handleNextChunk(stepExecution, jobResult)\n            }).catch(e=> {\n                if(!(e instanceof JobInterruptedException)){\n                    log.error(\"Failed to handle batch step: \" + this.name, e);\n                }\n                throw e;\n            })\n        }).then(()=> {\n            return Promise.resolve().then(()=>{\n                return this.postProcess(stepExecution, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to postProcess batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then(()=> {\n            stepExecution.exitStatus = JOB_STATUS.COMPLETED;\n            return stepExecution;\n        })\n\n    }\n\n    handleNextChunk(stepExecution, jobResult) {\n        var currentItemCount = this.getCurrentItemCount(stepExecution);\n        var totalItemCount = this.getTotalItemCount(stepExecution);\n        var chunkSize = Math.min(this.chunkSize, totalItemCount - currentItemCount);\n        if (currentItemCount >= totalItemCount) {\n            return stepExecution;\n        }\n        return this.checkJobExecutionFlags(stepExecution).then(()=> {\n            // Check if someone is trying to stop us\n            if (stepExecution.terminateOnly) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            return stepExecution\n        }).then(()=> {\n            return Promise.resolve().then(()=>{\n                return this.readNextChunk(stepExecution, currentItemCount, chunkSize, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to read chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            });\n        }).then(chunk=> {\n            return Promise.resolve().then(()=>{\n                return this.processChunk(stepExecution, chunk, currentItemCount, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to process chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then(processedChunk=> {\n            return Promise.resolve().then(()=>{\n                return this.writeChunk(stepExecution, processedChunk, jobResult)\n            }).catch(e=> {\n                log.error(\"Failed to write chunk (\" + currentItemCount + \",\" + chunkSize + \") in batch step: \" + this.name, e);\n                throw e;\n            })\n        }).then((res)=> {\n            currentItemCount += chunkSize;\n            this.setCurrentItemCount(stepExecution, currentItemCount);\n            return this.updateJobProgress(stepExecution).then(()=> {\n                return this.handleNextChunk(stepExecution, jobResult);\n            });\n        })\n    }\n\n    processChunk(stepExecution, chunk, currentItemCount, jobResult) { //TODO promisify\n        return chunk.map((item, i)=>this.processItem(stepExecution, item, currentItemCount+i, jobResult));\n    }\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(stepExecution){\n        return {\n            total: this.getTotalItemCount(stepExecution),\n            current: this.getCurrentItemCount(stepExecution)\n        }\n    }\n\n    updateJobProgress(stepExecution) {\n        var progress = this.jobRepository.getJobByName(stepExecution.jobExecution.jobInstance.jobName).getProgress(stepExecution.jobExecution);\n        return this.jobRepository.updateJobExecutionProgress(stepExecution.jobExecution.id, progress);\n    }\n\n    checkJobExecutionFlags(stepExecution){\n        return this.jobRepository.getJobByName(stepExecution.jobExecution.jobInstance.jobName).checkExecutionFlags(stepExecution.jobExecution);\n    }\n}\n","export class ExtendableError {\n    data;\n    constructor(message, data) {\n        this.message = message;\n        this.data = data;\n        this.name = this.constructor.name;\n    }\n}\n","export * from './extendable-error'\nexport * from './job-data-invalid-exception'\nexport * from './job-execution-already-running-exception'\nexport * from './job-instance-already-complete-exception'\nexport * from './job-interrupted-exception'\nexport * from './job-parameters-invalid-exception'\nexport * from './job-restart-exception'\n\n\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobComputationException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobDataInvalidException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobExecutionAlreadyRunningException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobInstanceAlreadyCompleteException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobInterruptedException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobParametersInvalidException extends ExtendableError {\n}\n","import {ExtendableError} from \"./extendable-error\";\nexport class JobRestartException extends ExtendableError {\n}\n","import {Utils} from \"sd-utils\";\nimport {DataModel} from \"sd-model\";\nimport {StepExecution} from \"./step-execution\";\n\nexport class ExecutionContext {\n\n    dirty = false;\n    context = {};\n\n    constructor(context) {\n        if (context) {\n            this.context = Utils.clone(context)\n        }\n    }\n\n    put(key, value) {\n        var prevValue = this.context[key];\n        if (value != null) {\n            var result = this.context[key] = value;\n            this.dirty = prevValue == null || prevValue != null && prevValue != value;\n        }\n        else {\n            delete this.context[key];\n            this.dirty = prevValue != null;\n        }\n    }\n\n    get(key) {\n        return this.context[key];\n    }\n\n    containsKey(key) {\n        return this.context.hasOwnProperty(key);\n    }\n\n    remove(key) {\n        delete this.context[key];\n    }\n\n    setData(data) { //set data model\n        return this.put(\"data\", data);\n    }\n\n    getData() { // get data model\n        return this.get(\"data\");\n    }\n\n\n    getDTO(filteredProperties = [], deepClone = true) {\n        var cloneMethod = Utils.cloneDeepWith;\n        if (!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n\n        let dto = Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if (filteredProperties.indexOf(key) > -1) {\n                return null;\n            }\n\n            if (value instanceof DataModel) {\n                return value.getDTO()\n            }\n\n            if(value && value.$ObjectWithIdAndEditableFields && value.id && this.getData().findById(value.id)){\n                return {\n                    '$ObjectWithIdAndEditableFields': true,\n                    id: value.id\n                }\n            }\n\n            if (value instanceof Error) {\n                return Utils.getErrorDTO(value);\n            }\n\n        }));\n\n        return dto\n    }\n\n}\n","import * as exceptions from './exceptions'\n\nexport {exceptions}\nexport * from './execution-context'\nexport * from './job'\nexport * from './job-execution'\nexport * from './job-execution-flag'\nexport * from './job-execution-listener'\nexport * from './job-instance'\nexport * from './job-key-generator'\nexport * from './job-launcher'\nexport * from './job-parameter-definition'\nexport * from './job-parameters'\nexport * from './job-status'\nexport * from './simple-job'\nexport * from './step'\nexport * from './step-execution'\nexport * from './step-execution-listener'\n\n\n\n\n","export const JOB_EXECUTION_FLAG = {\n    STOP: 'STOP'\n};\n","export class JobExecutionListener {\n    /*Called before a job executes*/\n    beforeJob(jobExecution) {\n\n    }\n\n    /*Called after completion of a job. Called after both successful and failed executions*/\n    afterJob(jobExecution) {\n\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {StepExecution} from \"./step-execution\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\n\n/*domain object representing the execution of a job.*/\nexport class JobExecution {\n    id;\n    jobInstance;\n    jobParameters;\n    stepExecutions = [];\n    status = JOB_STATUS.STARTING;\n    exitStatus = JOB_STATUS.UNKNOWN;\n    executionContext = new ExecutionContext();\n\n    startTime = null;\n    createTime = new Date();\n    endTime = null;\n    lastUpdated = null;\n\n    failureExceptions = [];\n\n    constructor(jobInstance, jobParameters, id) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.jobInstance = jobInstance;\n        this.jobParameters = jobParameters;\n    }\n\n    /**\n     * Register a step execution with the current job execution.\n     * @param stepName the name of the step the new execution is associated with\n     */\n    createStepExecution(stepName) {\n        var stepExecution = new StepExecution(stepName, this);\n        this.stepExecutions.push(stepExecution);\n        return stepExecution;\n    }\n\n    isRunning() {\n        return !this.endTime;\n    }\n\n    /**\n     * Test if this JobExecution has been signalled to\n     * stop.\n     */\n    isStopping() {\n        return this.status === JOB_STATUS.STOPPING;\n    }\n\n    /**\n     * Signal the JobExecution to stop.\n     */\n    stop() {\n        this.stepExecutions.forEach(se=> {\n            se.terminateOnly = true;\n        });\n        this.status = JOB_STATUS.STOPPING;\n    }\n\n    getData() {\n        return this.executionContext.getData();\n    }\n\n    getDTO(filteredProperties = [], deepClone = true) {\n        var cloneMethod = Utils.cloneDeepWith;\n        if (!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        return Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if (filteredProperties.indexOf(key) > -1) {\n                return null;\n            }\n\n            if ([\"jobParameters\", \"executionContext\"].indexOf(key) > -1) {\n                return value.getDTO()\n            }\n            if (value instanceof Error) {\n                return Utils.getErrorDTO(value);\n            }\n\n            if (value instanceof StepExecution) {\n                return value.getDTO([\"jobExecution\"], deepClone)\n            }\n        }))\n    }\n}\n","/* object representing a uniquely identifiable job run. JobInstance can be restarted multiple times in case of execution failure and it's lifecycle ends with first successful execution*/\nexport class JobInstance{\n\n    id;\n    jobName;\n    constructor(id, jobName){\n        this.id = id;\n        this.jobName = jobName;\n    }\n\n}\n","\nexport class JobKeyGenerator {\n    /*Method to generate the unique key used to identify a job instance.*/\n    static generateKey(jobParameters) {\n        var result = \"\";\n        jobParameters.definitions.forEach((d, i)=> {\n            if(d.identifying){\n                result += d.name + \"=\" + jobParameters.values[d.name] + \";\";\n            }\n        });\n        return result;\n    }\n}\n","import {JobRestartException} from \"./exceptions/job-restart-exception\";\nimport {JOB_STATUS} from \"./job-status\";\nimport {Utils, log} from \"sd-utils\";\nimport {JobParametersInvalidException} from \"./exceptions/job-parameters-invalid-exception\";\nimport {JobDataInvalidException} from \"./exceptions/job-data-invalid-exception\";\n\nexport class JobLauncher {\n\n    jobRepository;\n    jobWorker;\n\n    constructor(jobRepository, jobWorker, dataModelSerializer) {\n        this.jobRepository = jobRepository;\n        this.jobWorker = jobWorker;\n        this.dataModelSerializer = dataModelSerializer;\n    }\n\n\n    run(jobOrName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        var job;\n        var jobParameters;\n\n        return Promise.resolve().then(()=> {\n            if (Utils.isString(jobOrName)) {\n                job = this.jobRepository.getJobByName(jobOrName)\n            } else {\n                job = jobOrName;\n            }\n            if (!job) {\n                throw new JobRestartException(\"No such job: \" + jobOrName);\n            }\n\n            jobParameters = job.createJobParameters(jobParametersValues);\n\n            return this.validate(job, jobParameters, data);\n        }).then(valid=>{\n            return this.jobRepository.createJobExecution(job.name, jobParameters, data).then(jobExecution=>{\n\n\n                if(this.jobWorker){\n                    log.debug(\"Job: [\" + job.name + \"] execution [\"+jobExecution.id+\"] delegated to worker\");\n                    this.jobWorker.executeJob(jobExecution.id);\n                    return jobExecution;\n                }\n\n                var executionPromise = this._execute(job, jobExecution);\n                if(resolvePromiseAfterJobIsLaunched){\n                    return jobExecution;\n                }\n                return executionPromise;\n            })\n        })\n    }\n\n    validate(job, jobParameters, data){\n        return this.jobRepository.getLastJobExecution(job.name, jobParameters).then(lastExecution=>{\n            if (lastExecution != null) {\n                if (!job.isRestartable) {\n                    throw new JobRestartException(\"JobInstance already exists and is not restartable\");\n                }\n\n                lastExecution.stepExecutions.forEach(execution=> {\n                    if (execution.status == JOB_STATUS.UNKNOWN) {\n                        throw new JobRestartException(\"Step [\" + execution.stepName + \"] is of status UNKNOWN\");\n                    }\n                });\n            }\n            if (job.jobParametersValidator && !job.jobParametersValidator.validate(jobParameters)) {\n                throw new JobParametersInvalidException(\"Invalid job parameters in jobLauncher.run for job: \"+job.name)\n            }\n\n            if(job.jobDataValidator && !job.jobDataValidator.validate(data)){\n                throw new JobDataInvalidException(\"Invalid job data in jobLauncher.run for job: \"+job.name)\n            }\n\n            return true;\n        })\n    }\n\n    /**Execute previously created job execution*/\n    execute(jobExecutionOrId){\n\n        return Promise.resolve().then(()=>{\n            if(Utils.isString(jobExecutionOrId)){\n                return this.jobRepository.getJobExecutionById(jobExecutionOrId);\n            }\n            return jobExecutionOrId;\n        }).then(jobExecution=>{\n            if(!jobExecution){\n                throw new JobRestartException(\"JobExecution [\" + jobExecutionOrId + \"] is not found\");\n            }\n\n            if (jobExecution.status !== JOB_STATUS.STARTING) {\n                throw new JobRestartException(\"JobExecution [\" + jobExecution.id + \"] already started\");\n            }\n\n            var jobName = jobExecution.jobInstance.jobName;\n            var job = this.jobRepository.getJobByName(jobName);\n            if(!job){\n                throw new JobRestartException(\"No such job: \" + jobName);\n            }\n\n            return  this._execute(job, jobExecution);\n        })\n    }\n\n    _execute(job, jobExecution){\n        var jobName = job.name;\n        log.info(\"Job: [\" + jobName + \"] launched with the following parameters: [\" + jobExecution.jobParameters + \"]\", jobExecution.getData());\n        return job.execute(jobExecution).then(jobExecution=>{\n            log.info(\"Job: [\" + jobName + \"] completed with the following parameters: [\" + jobExecution.jobParameters + \"] and the following status: [\" + jobExecution.status + \"]\");\n            return jobExecution;\n        }).catch(e =>{\n            log.error(\"Job: [\" + jobName + \"] failed unexpectedly and fatally with the following parameters: [\" + jobExecution.jobParameters + \"]\", e);\n            throw e;\n        })\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\n\nexport const PARAMETER_TYPE = {\n    STRING: 'STRING',\n    DATE: 'DATE',\n    INTEGER: 'INTEGER',\n    NUMBER: 'FLOAT',\n    BOOLEAN: 'BOOLEAN',\n    NUMBER_EXPRESSION: 'NUMBER_EXPRESSION',\n    COMPOSITE: 'COMPOSITE' //composite parameter with nested subparameters\n};\n\nexport class JobParameterDefinition {\n    name;\n    type;\n    nestedParameters = [];\n    minOccurs;\n    maxOccurs;\n    required = true;\n\n    identifying;\n    validator;\n    singleValueValidator;\n\n    constructor(name, typeOrNestedParametersDefinitions, minOccurs = 1, maxOccurs = 1, identifying = false, singleValueValidator = null, validator = null) {\n        this.name = name;\n        if (Utils.isArray(typeOrNestedParametersDefinitions)) {\n            this.type = PARAMETER_TYPE.COMPOSITE;\n            this.nestedParameters = typeOrNestedParametersDefinitions;\n        } else {\n            this.type = typeOrNestedParametersDefinitions;\n        }\n        this.validator = validator;\n        this.singleValueValidator = singleValueValidator;\n        this.identifying = identifying;\n        this.minOccurs = minOccurs;\n        this.maxOccurs = maxOccurs;\n    }\n\n    set(key, val) {\n        this[key] = val;\n        return this;\n    }\n\n    validate(value, allValues) {\n        var isArray = Utils.isArray(value);\n\n        if (this.maxOccurs > 1 && !isArray) {\n            return false;\n        }\n\n        if (!isArray) {\n            return this.validateSingleValue(value, allValues)\n        }\n\n        if (value.length < this.minOccurs || value.length > this.maxOccurs) {\n            return false;\n        }\n\n        if (!value.every(v=>this.validateSingleValue(v, value))) {\n            return false;\n        }\n\n        if (this.validator) {\n            return this.validator(value, allValues);\n        }\n\n        return true;\n    }\n\n    static computeNumberExpression(val){\n        let parsed = parseFloat(val);\n        if(parsed === Infinity || parsed === -Infinity) {\n            return parsed;\n        }\n\n        if(!ExpressionEngine.validate(val, {}, false)){\n            return null\n        }\n\n        return ExpressionEngine.eval(val, true)\n    }\n\n    // allValues - all values on the same level\n    validateSingleValue(value, allValues) {\n\n        if ((!value && value !== 0 && value !== false) && this.minOccurs > 0) {\n            return !this.required\n        }\n\n        if (PARAMETER_TYPE.STRING === this.type && !Utils.isString(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.DATE === this.type && !Utils.isDate(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.INTEGER === this.type && !Utils.isInt(value)) {\n            return false;\n        }\n        if (PARAMETER_TYPE.NUMBER === this.type && !Utils.isNumber(value)) {\n            return false;\n        }\n\n        if (PARAMETER_TYPE.BOOLEAN === this.type && !Utils.isBoolean(value)) {\n            return false;\n        }\n\n\n        if (PARAMETER_TYPE.NUMBER_EXPRESSION === this.type) {\n            value = JobParameterDefinition.computeNumberExpression(value);\n            if(value === null){\n                return false\n            }\n        }\n\n        if (PARAMETER_TYPE.COMPOSITE === this.type) {\n            if (!Utils.isObject(value)) {\n                return false;\n            }\n            if (!this.nestedParameters.every((nestedDef, i)=>nestedDef.validate(value[nestedDef.name]))) {\n                return false;\n            }\n        }\n\n        if (this.singleValueValidator) {\n            return this.singleValueValidator(value, allValues);\n        }\n\n        return true;\n    }\n\n    value(value){\n        if(PARAMETER_TYPE.NUMBER_EXPRESSION === this.type) {\n            return JobParameterDefinition.computeNumberExpression(value);\n        }\n\n        return value;\n    }\n}\n","import {PARAMETER_TYPE} from \"./job-parameter-definition\";\nimport {Utils} from \"sd-utils\";\n\nexport class JobParameters{\n    definitions = [];\n    values={};\n\n    constructor(values){\n        this.initDefinitions();\n        this.initDefaultValues();\n        if (values) {\n            Utils.deepExtend(this.values, values);\n        }\n    }\n\n    initDefinitions(){\n\n    }\n\n    initDefaultValues(){\n\n    }\n\n    validate(){\n        return this.definitions.every((def, i)=>def.validate(this.values[def.name], this.values));\n    }\n\n    getDefinition(path){\n        var defs =this.definitions;\n        let def = null;\n        if(!path.split().every(name=>{\n                def = Utils.find(defs, d=>d.name == name);\n                if(!def){\n                    return false\n                }\n                defs = def.nestedParameters;\n                return true;\n        })){\n            return null;\n        }\n        return def;\n    }\n\n    /*get or set value by path*/\n    value(path, value){\n        if (arguments.length === 1) {\n            let def = this.getDefinition(path);\n            let val = Utils.get(this.values, path, null);\n            if(def){\n                return def.value(val);\n            }\n            return  val;\n        }\n        Utils.set(this.values, path, value);\n        return value;\n    }\n\n    toString(){\n        var result = \"JobParameters[\";\n\n        this.definitions.forEach((d, i)=> {\n\n            var val = this.values[d.name];\n            // if(Utils.isArray(val)){\n            //     var values = val;\n            //\n            //\n            // }\n            // if(PARAMETER_TYPE.COMPOSITE == d.type){\n            //\n            // }\n\n            result += d.name + \"=\"+val + \";\";\n        });\n        result+=\"]\";\n        return result;\n    }\n\n    getDTO(){\n        return {\n            values: this.values\n        }\n    }\n}\n","import {JobRepository} from \"./job-repository\";\nimport { openDb, deleteDb } from 'idb';\nimport {Utils} from \"sd-utils\";\nimport {JobExecution} from \"../job-execution\";\nimport {JobInstance} from \"../job-instance\";\nimport {StepExecution} from \"../step-execution\";\nimport {ExecutionContext} from \"../execution-context\";\nimport {DataModel} from \"sd-model\";\nimport {log} from \"sd-utils\";\nimport {JobResult} from \"../job-result\";\n\n/* IndexedDB job repository*/\nexport class IdbJobRepository extends JobRepository {\n\n    dbPromise;\n    jobInstanceDao;\n    jobExecutionDao;\n    stepExecutionDao;\n    jobResultDao;\n    jobExecutionProgressDao;\n    jobExecutionFlagDao;\n\n    constructor(expressionsReviver, dbName = 'sd-job-repository', deleteDB = false) {\n        super();\n        this.dbName = dbName;\n        this.expressionsReviver = expressionsReviver;\n        if (deleteDB) {\n            this.deleteDB().then(()=> {\n                this.initDB()\n            }).catch(e=> {\n                log.error(e);\n                this.initDB();\n            })\n        } else {\n            this.initDB()\n        }\n    }\n\n    initDB() {\n        this.dbPromise = openDb(this.dbName, 2, upgradeDB => {\n            // Note: we don't use 'break' in this switch statement,\n            // the fall-through behaviour is what we want.\n            switch (upgradeDB.oldVersion) {\n                case 0:\n                    upgradeDB.createObjectStore('job-instances');\n                    var jobExecutionsOS = upgradeDB.createObjectStore('job-executions');\n                    jobExecutionsOS.createIndex(\"jobInstanceId\", \"jobInstance.id\", {unique: false});\n                    jobExecutionsOS.createIndex(\"createTime\", \"createTime\", {unique: false});\n                    jobExecutionsOS.createIndex(\"status\", \"status\", {unique: false});\n                    upgradeDB.createObjectStore('job-execution-progress');\n                    upgradeDB.createObjectStore('job-execution-flags');\n                    var stepExecutionsOS = upgradeDB.createObjectStore('step-executions');\n                    stepExecutionsOS.createIndex(\"jobExecutionId\", \"jobExecutionId\", {unique: false});\n\n                    var jobResultOS = upgradeDB.createObjectStore('job-results');\n                    jobResultOS.createIndex(\"jobInstanceId\", \"jobInstance.id\", {unique: true});\n                case 1:\n                    upgradeDB.transaction.objectStore('job-instances').createIndex(\"id\", \"id\", {unique: true});\n            }\n\n        });\n\n        this.jobInstanceDao = new ObjectStoreDao('job-instances', this.dbPromise);\n        this.jobExecutionDao = new ObjectStoreDao('job-executions', this.dbPromise);\n        this.jobExecutionProgressDao = new ObjectStoreDao('job-execution-progress', this.dbPromise);\n        this.jobExecutionFlagDao = new ObjectStoreDao('job-execution-flags', this.dbPromise);\n        this.stepExecutionDao = new ObjectStoreDao('step-executions', this.dbPromise);\n        this.jobResultDao = new ObjectStoreDao('job-results', this.dbPromise);\n    }\n\n    deleteDB() {\n        return Promise.resolve().then(_=>deleteDb(this.dbName));\n    }\n\n\n    removeJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        return this.jobInstanceDao.remove(key).then(()=>{\n            this.findJobExecutions(jobInstance, false).then(jobExecutions=>{  //  Not waiting for promise resolves\n                jobExecutions.forEach(this.removeJobExecution, this);\n            });\n\n            this.getJobResultByInstance(jobInstance).then(jobResult=>{\n                return this.removeJobResult(jobResult)\n            })\n        });\n    }\n\n    removeJobExecution(jobExecution){\n        return this.jobExecutionDao.remove(jobExecution.id).then(()=>{\n            return this.findStepExecutions(jobExecution.id, false).then(stepExecutions=>{  // Not waiting for promise resolves\n                stepExecutions.forEach(this.removeStepExecution, this);\n            });\n        });\n    }\n\n    removeStepExecution(stepExecution){\n        return this.stepExecutionDao.remove(stepExecution.id)\n    }\n\n    removeJobResult(jobResult){\n        return this.jobResultDao.remove(jobResult.id);\n    }\n\n\n\n\n    getJobResult(jobResultId, revive = true) {\n        return this.jobResultDao.get(jobResultId).then(dto => dto && revive ? this.reviveJobResult(dto) : dto);\n    }\n\n    getJobResultByInstance(jobInstance, revive = true) {\n        return this.jobResultDao.getByIndex(\"jobInstanceId\", jobInstance.id).then(dto => dto && revive ? this.reviveJobResult(dto) : dto);\n    }\n\n    getJobResultByExecution(jobExecution, revive = true) {\n        return this.getJobResultByInstance(jobExecution.jobInstance, false).then(dto => dto && revive ? this.reviveJobResult(dto, jobExecution) : dto);\n    }\n\n    saveJobResult(jobResult) {\n        let dto = jobResult.getDTO();\n        return this.jobResultDao.set(jobResult.id, dto).then(r=>jobResult);\n    }\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return this.jobInstanceDao.get(key).then(dto=>dto ? this.reviveJobInstance(dto) : dto);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters) {\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        return this.jobInstanceDao.set(key, jobInstance).then(r=>jobInstance);\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution) {\n        var dto = jobExecution.getDTO();\n        var stepExecutionsDTOs = dto.stepExecutions;\n        dto.stepExecutions = null;\n        return this.jobExecutionDao.set(jobExecution.id, dto).then(r=>this.saveStepExecutionsDTOS(stepExecutionsDTOs)).then(r=>jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress) {\n        return this.jobExecutionProgressDao.set(jobExecutionId, progress)\n    }\n\n    getJobExecutionProgress(jobExecutionId) {\n        return this.jobExecutionProgressDao.get(jobExecutionId)\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag) {\n        return this.jobExecutionFlagDao.set(jobExecutionId, flag)\n    }\n\n    getJobExecutionFlag(jobExecutionId) {\n        return this.jobExecutionFlagDao.get(jobExecutionId)\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution) {\n        var dto = stepExecution.getDTO([\"jobExecution\"]);\n        return this.stepExecutionDao.set(stepExecution.id, dto).then(r=>stepExecution);\n    }\n\n    saveStepExecutionsDTOS(stepExecutions, savedExecutions = []) {\n        if (stepExecutions.length <= savedExecutions.length) {\n            return Promise.resolve(savedExecutions);\n        }\n        var stepExecutionDTO = stepExecutions[savedExecutions.length];\n        return this.stepExecutionDao.set(stepExecutionDTO.id, stepExecutionDTO).then(()=> {\n            savedExecutions.push(stepExecutionDTO);\n            return this.saveStepExecutionsDTOS(stepExecutions, savedExecutions);\n        });\n    }\n\n    getJobExecutionById(id) {\n        return this.jobExecutionDao.get(id).then(dto=> {\n            return this.fetchJobExecutionRelations(dto);\n        });\n    }\n\n    fetchJobExecutionRelations(jobExecutionDTO, revive = true) {\n        if (!jobExecutionDTO) {\n            return Promise.resolve(null)\n        }\n        return this.findStepExecutions(jobExecutionDTO.id, false).then(steps=> {\n            jobExecutionDTO.stepExecutions = steps;\n            if (!revive) {\n                return jobExecutionDTO;\n            }\n            return this.reviveJobExecution(jobExecutionDTO);\n        })\n    }\n\n    fetchJobExecutionsRelations(jobExecutionDtoList, revive = true, fetched = []) {\n        if (jobExecutionDtoList.length <= fetched.length) {\n            return Promise.resolve(fetched);\n        }\n        return this.fetchJobExecutionRelations(jobExecutionDtoList[fetched.length], revive).then((jobExecution)=> {\n            fetched.push(jobExecution);\n\n            return this.fetchJobExecutionsRelations(jobExecutionDtoList, revive, fetched);\n        });\n    }\n\n    findStepExecutions(jobExecutionId, revive = true) {\n        return this.stepExecutionDao.getAllByIndex(\"jobExecutionId\", jobExecutionId).then(dtos=> {\n            if (!revive) {\n                return dtos;\n            }\n            return dtos.map(dto=>this.reviveStepExecution(dto));\n        })\n    }\n\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance, fetchRelationsAndRevive = true) {\n        return this.jobExecutionDao.getAllByIndex(\"jobInstanceId\", jobInstance.id).then(values=> {\n            var sorted = values.sort(function (a, b) {\n                return a.createTime.getTime() - b.createTime.getTime()\n            });\n\n            if (!fetchRelationsAndRevive) {\n                return sorted;\n            }\n\n            return this.fetchJobExecutionsRelations(sorted, true)\n        });\n    }\n\n    getLastJobExecutionByInstance(jobInstance, fetchRelationsAndRevive = true) {\n        return this.findJobExecutions(jobInstance, false).then(executions=>{\n            let execution = executions[executions.length - 1];\n            if (!fetchRelationsAndRevive) {\n                return execution;\n            }\n            this.fetchJobExecutionRelations(execution);\n        });\n    }\n\n    getLastStepExecution(jobInstance, stepName) {\n        return this.findJobExecutions(jobInstance).then(jobExecutions=> {\n            var stepExecutions = [];\n            jobExecutions.forEach(jobExecution=>jobExecution.stepExecutions.filter(s=>s.stepName === stepName).forEach((s)=>stepExecutions.push(s)));\n            var latest = null;\n            stepExecutions.forEach(s=> {\n                if (latest == null || latest.startTime.getTime() < s.startTime.getTime()) {\n                    latest = s;\n                }\n            });\n            return latest;\n        })\n    }\n\n    reviveJobInstance(dto) {\n        return new JobInstance(dto.id, dto.jobName);\n    }\n\n    reviveExecutionContext(dto) {\n        let executionContext = new ExecutionContext();\n        executionContext.context = dto.context;\n        let data = executionContext.getData();\n        if (data) {\n            let dataModel = new DataModel();\n            dataModel.loadFromDTO(data, this.expressionsReviver);\n\n            executionContext.setData(null);\n            this.reviveFromDTO(executionContext.context, dto.context, dataModel);\n\n            executionContext.setData(dataModel);\n\n        }\n        return executionContext\n    }\n\n    reviveFromDTO(target, dto, dataModel) {\n        return Utils.mergeWith(target, dto, (value, dtoValue, key)=> {\n            if(dtoValue && dtoValue.$ObjectWithIdAndEditableFields && dtoValue.id){\n                return dataModel.findById(dtoValue.id) || value;\n            }\n        })\n    }\n\n    reviveJobExecution(dto) {\n\n        var job = this.getJobByName(dto.jobInstance.jobName);\n        var jobInstance = this.reviveJobInstance(dto.jobInstance);\n        var jobParameters = job.createJobParameters(dto.jobParameters.values);\n        var jobExecution = new JobExecution(jobInstance, jobParameters, dto.id);\n        var executionContext = this.reviveExecutionContext(dto.executionContext);\n        return Utils.mergeWith(jobExecution, dto, (objValue, srcValue, key, object, source, stack)=> {\n            if (key === \"jobInstance\") {\n                return jobInstance;\n            }\n            if (key === \"executionContext\") {\n                return executionContext;\n            }\n            if (key === \"jobParameters\") {\n                return jobParameters;\n            }\n            if (key === \"jobExecution\") {\n                return jobExecution;\n            }\n\n            if (key === \"stepExecutions\") {\n                return srcValue.map(stepDTO => this.reviveStepExecution(stepDTO, jobExecution));\n            }\n        })\n    }\n\n    reviveStepExecution(dto, jobExecution) {\n        var stepExecution = new StepExecution(dto.stepName, jobExecution, dto.id);\n        var executionContext = this.reviveExecutionContext(dto.executionContext);\n        return Utils.mergeWith(stepExecution, dto, (objValue, srcValue, key, object, source, stack)=> {\n            if (key === \"jobExecution\") {\n                return jobExecution;\n            }\n            if (key === \"executionContext\") {\n                return executionContext;\n            }\n        })\n    }\n\n    reviveJobResult(dto, jobExecution = null) {\n        let job = this.getJobByName(dto.jobInstance.jobName);\n        let jobInstance = this.reviveJobInstance(dto.jobInstance);\n\n        let contextPromise;\n        if (jobExecution != null) {\n            contextPromise = Promise.resolve(jobExecution.executionContext);\n        }else{\n            contextPromise = this.getLastJobExecutionByInstance(jobInstance, false).then(jobExecutionDto => this.reviveExecutionContext(jobExecutionDto.executionContext));\n        }\n\n        return contextPromise.then(executionContext => job.reviveResultData( this.reviveFromDTO({}, dto.data, executionContext.getData()), executionContext)).then(d=>new JobResult(jobInstance, dto.id, d));\n    }\n}\n\n\nclass ObjectStoreDao {\n\n    name;\n    dbPromise;\n\n    constructor(name, dbPromise) {\n        this.name = name;\n        this.dbPromise = dbPromise;\n    }\n\n    get(key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).get(key);\n        });\n    }\n\n    getAllByIndex(indexName, key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).index(indexName).getAll(key)\n        });\n    }\n\n    getByIndex(indexName, key) {\n        return this.dbPromise.then(db => {\n            return db.transaction(this.name)\n                .objectStore(this.name).index(indexName).get(key)\n        });\n    }\n\n    set(key, val) {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).put(val, key);\n            return tx.complete;\n        });\n    }\n\n    remove(key) {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).delete(key);\n            return tx.complete;\n        });\n    }\n\n    clear() {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name, 'readwrite');\n            tx.objectStore(this.name).clear();\n            return tx.complete;\n        });\n    }\n\n    keys() {\n        return this.dbPromise.then(db => {\n            const tx = db.transaction(this.name);\n            const keys = [];\n            const store = tx.objectStore(this.name);\n\n            // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n            // openKeyCursor isn't supported by Safari, so we fall back\n            (store.iterateKeyCursor || store.iterateCursor).call(store, cursor => {\n                if (!cursor) return;\n                keys.push(cursor.key);\n                cursor.continue();\n            });\n\n            return tx.complete.then(() => keys);\n        });\n    }\n}\n","import {JobKeyGenerator} from \"../job-key-generator\";\nimport {JobInstance} from \"../job-instance\";\nimport {Utils} from \"sd-utils\";\nimport {JobExecution} from \"../job-execution\";\nimport {JobExecutionAlreadyRunningException} from \"../exceptions/job-execution-already-running-exception\";\nimport {JOB_STATUS} from \"../job-status\";\nimport {JobInstanceAlreadyCompleteException} from \"../exceptions/job-instance-already-complete-exception\";\nimport {ExecutionContext} from \"../execution-context\";\nimport {StepExecution} from \"../step-execution\";\nimport {DataModel} from \"sd-model\";\nimport {JobResult} from \"../job-result\";\n\nexport class JobRepository {\n\n    jobByName = {};\n\n    registerJob(job) {\n        this.jobByName[job.name] = job;\n    }\n\n    getJobByName(name) {\n        return this.jobByName[name];\n    }\n\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n       throw \"JobRepository getJobInstance function not implemented!\"\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(key, jobInstance){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    getJobExecutionById(id){\n        throw \"JobRepository.getJobExecutionById function not implemented!\"\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        throw \"JobRepository.saveJobInstance function not implemented!\"\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        throw \"JobRepository.getJobExecutionProgress function not implemented!\"\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        throw \"JobRepository.saveJobExecutionFlag function not implemented!\"\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        throw \"JobRepository.getJobExecutionFlag function not implemented!\"\n    }\n\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        throw \"JobRepository.saveStepExecution function not implemented!\"\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        throw \"JobRepository.findJobExecutions function not implemented!\"\n    }\n\n    getJobResult(jobResultId){\n        throw \"JobRepository.getJobResult function not implemented!\"\n    }\n\n    getJobResultByInstance(jobInstance){\n        throw \"JobRepository.getJobResultByInstance function not implemented!\"\n    }\n\n    getJobResultByExecution(jobInstance){\n        throw \"JobRepository.getJobResultByExecution function not implemented!\"\n    }\n\n    saveJobResult(jobResult) {\n        throw \"JobRepository.setJobResult function not implemented!\"\n    }\n\n\n    removeJobInstance(jobInstance, jobParameters){\n        throw \"JobRepository.removeJobInstance function not implemented!\"\n    }\n\n    removeJobExecution(jobExecution){\n        throw \"JobRepository.removeJobExecution function not implemented!\"\n    }\n\n    removeStepExecution(stepExecution){\n        throw \"JobRepository.removeStepExecution function not implemented!\"\n    }\n\n    removeJobResult(jobResult){\n        throw \"JobRepository.removeJobResult function not implemented!\"\n    }\n\n    /*Create a new JobInstance with the name and job parameters provided. return promise*/\n    createJobInstance(jobName, jobParameters) {\n        var jobInstance = new JobInstance(Utils.guid(), jobName);\n        return this.saveJobInstance(jobInstance, jobParameters);\n    }\n\n    /*Check if an instance of this job already exists with the parameters provided.*/\n    isJobInstanceExists(jobName, jobParameters) {\n        return this.getJobInstance(jobName, jobParameters).then(result => !!result).catch(error=>false);\n    }\n\n    generateJobInstanceKey(jobName, jobParameters) {\n        return jobName + \"|\" + JobKeyGenerator.generateKey(jobParameters);\n    }\n\n    /*Create a JobExecution for a given  Job and JobParameters. If matching JobInstance already exists,\n     * the job must be restartable and it's last JobExecution must *not* be\n     * completed. If matching JobInstance does not exist yet it will be  created.*/\n\n    createJobExecution(jobName, jobParameters, data) {\n        return this.getJobInstance(jobName, jobParameters).then(jobInstance=>{\n            if (jobInstance != null) {\n                return this.findJobExecutions(jobInstance).then(executions=>{\n                    executions.forEach(execution=> {\n                        if (execution.isRunning()) {\n                            throw new JobExecutionAlreadyRunningException(\"A job execution for this job is already running: \" + jobInstance.jobName);\n                        }\n                        if (execution.status == JOB_STATUS.COMPLETED || execution.status == JOB_STATUS.ABANDONED) {\n                            throw new JobInstanceAlreadyCompleteException(\n                                \"A job instance already exists and is complete for parameters=\" + jobParameters\n                                + \".  If you want to run this job again, change the parameters.\");\n                        }\n                    });\n\n                    var executionContext = executions[executions.length - 1].executionContext;\n\n                    return [jobInstance, executionContext];\n                })\n            }\n\n            // no job found, create one\n            jobInstance = this.createJobInstance(jobName, jobParameters);\n            var executionContext = new ExecutionContext();\n            var dataModel = new DataModel();\n            dataModel._setNewState(data.createStateSnapshot());\n            executionContext.setData(dataModel);\n            return Promise.all([jobInstance, executionContext]);\n        }).then(instanceAndExecutionContext=>{\n            var jobExecution = new JobExecution(instanceAndExecutionContext[0], jobParameters);\n            jobExecution.executionContext = instanceAndExecutionContext[1];\n            jobExecution.lastUpdated = new Date();\n            return this.saveJobExecution(jobExecution);\n        }).catch(e=>{\n            throw e;\n        })\n    }\n\n    getLastJobExecution(jobName, jobParameters) {\n        return this.getJobInstance(jobName, jobParameters).then((jobInstance)=>{\n            if(!jobInstance){\n                return null;\n            }\n            return this.getLastJobExecutionByInstance(jobInstance);\n        })\n    }\n\n    getLastJobExecutionByInstance(jobInstance){\n        return this.findJobExecutions(jobInstance).then(executions=>executions[executions.length -1]);\n    }\n\n    getLastStepExecution(jobInstance, stepName) {\n        return this.findJobExecutions(jobInstance).then(jobExecutions=>{\n            var stepExecutions=[];\n            jobExecutions.forEach(jobExecution=>jobExecution.stepExecutions.filter(s=>s.stepName === stepName).forEach((s)=>stepExecutions.push(s)));\n            var latest = null;\n            stepExecutions.forEach(s=>{\n                if (latest == null || latest.startTime.getTime() < s.startTime.getTime()) {\n                    latest = s;\n                }\n            });\n            return latest;\n        })\n    }\n\n    addStepExecution(stepExecution) {\n        stepExecution.lastUpdated = new Date();\n        return this.saveStepExecution(stepExecution);\n    }\n\n    update(o){\n        o.lastUpdated = new Date();\n\n        if(o instanceof JobExecution){\n            return this.saveJobExecution(o);\n        }\n\n        if(o instanceof StepExecution){\n            return this.saveStepExecution(o);\n        }\n\n        throw \"Object not updatable: \"+o\n    }\n\n    remove(o){\n\n        if(o instanceof JobExecution){\n            return this.removeJobExecution(o);\n        }\n\n        if(o instanceof StepExecution){\n            return this.removeStepExecution(o);\n        }\n\n        if(o instanceof JobResult){\n            return this.removeJobResult();\n        }\n\n        return Promise.reject(\"Object not removable: \"+o);\n    }\n\n\n    reviveJobInstance(dto) {\n        return dto;\n    }\n\n    reviveExecutionContext(dto) {\n        return dto;\n    }\n\n    reviveJobExecution(dto) {\n        return dto;\n    }\n\n    reviveStepExecution(dto, jobExecution) {\n        return dto;\n    }\n}\n","import {JobRepository} from \"./job-repository\";\nimport {Utils} from \"sd-utils\";\n\nexport class SimpleJobRepository extends JobRepository{\n    jobInstancesByKey = {};\n    jobExecutions = [];\n    stepExecutions = [];\n    executionProgress = {};\n    executionFlags = {};\n    jobResults = [];\n\n    removeJobInstance(jobInstance){\n        Utils.forOwn(this.jobInstancesByKey,  (ji, key)=>{\n            if(ji===jobInstance){\n                delete this.jobInstancesByKey[key]\n            }\n        });\n\n        this.jobExecutions.filter(jobExecution=>jobExecution.jobInstance.id == jobInstance.id).reverse().forEach(this.removeJobExecution, this);\n        this.jobResults.filter(jobResult=>jobResult.jobInstance.id == jobInstance.id).reverse().forEach(this.removeJobResult, this);\n\n        return Promise.resolve();\n    }\n\n    removeJobExecution(jobExecution){\n        let index = this.jobExecutions.indexOf(jobExecution);\n        if(index>-1) {\n            this.jobExecutions.splice(index, 1)\n        }\n\n        this.stepExecutions.filter(stepExecution=>stepExecution.jobExecution.id === jobExecution.id).reverse().forEach(this.removeStepExecution, this);\n        return Promise.resolve();\n    }\n\n    removeStepExecution(stepExecution){\n        let index = this.stepExecutions.indexOf(stepExecution);\n        if(index>-1) {\n            this.stepExecutions.splice(index, 1)\n        }\n        return Promise.resolve();\n    }\n\n    removeJobResult(jobResult){\n        let index = this.jobResults.indexOf(jobResult);\n        if(index>-1) {\n            this.jobResults.splice(index, 1)\n        }\n        return Promise.resolve();\n    }\n\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return Promise.resolve(this.jobInstancesByKey[key]);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        this.jobInstancesByKey[key] = jobInstance;\n        return Promise.resolve(jobInstance)\n    }\n\n    getJobResult(jobResultId){\n        return Promise.resolve(Utils.find(this.jobResults, r=>r.id===jobResultId))\n    }\n\n    getJobResultByInstance(jobInstance){\n        return Promise.resolve(Utils.find(this.jobResults, r=>r.jobInstance.id===jobInstance.id))\n    }\n\n    getJobResultByExecution(jobExecution){\n        return this.getJobResultByInstance(jobExecution.jobInstance);\n    }\n\n    saveJobResult(jobResult) {\n        this.jobResults.push(jobResult);\n        return Promise.resolve(jobResult);\n    }\n\n    getJobExecutionById(id){\n        return Promise.resolve(Utils.find(this.jobExecutions, ex=>ex.id===id))\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        this.jobExecutions.push(jobExecution);\n        return Promise.resolve(jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        this.executionProgress[jobExecutionId] = progress;\n        return Promise.resolve(progress)\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        return Promise.resolve(this.executionProgress[jobExecutionId])\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        this.executionFlags[jobExecutionId] = flag;\n        return Promise.resolve(flag)\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        return Promise.resolve(this.executionFlags[jobExecutionId])\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        this.stepExecutions.push(stepExecution);\n        return Promise.resolve(stepExecution);\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        return Promise.resolve(this.jobExecutions.filter(e=>e.jobInstance.id == jobInstance.id).sort(function (a, b) {\n            return a.createTime.getTime() - b.createTime.getTime()\n        }));\n    }\n\n\n}\n","import {JobRepository} from \"./job-repository\";\nimport {Utils} from \"sd-utils\";\nimport {SimpleJobRepository} from \"./simple-job-repository\";\n\n\n\nexport class TimeoutJobRepository extends SimpleJobRepository{\n\n    createTimeoutPromise(valueToResolve, delay=1){\n        return new Promise(resolve=>{\n            setTimeout(function(){\n                resolve(valueToResolve);\n            }, delay)\n        });\n    }\n\n    /*returns promise*/\n    getJobInstance(jobName, jobParameters) {\n        var key = this.generateJobInstanceKey(jobName, jobParameters);\n        return this.createTimeoutPromise(this.jobInstancesByKey[key]);\n    }\n\n    /*should return promise that resolves to saved instance*/\n    saveJobInstance(jobInstance, jobParameters){\n        var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);\n        this.jobInstancesByKey[key] = jobInstance;\n        return this.createTimeoutPromise(jobInstance);\n    }\n\n    getJobResult(jobResultId){\n        return this.createTimeoutPromise(Utils.find(this.jobResults, r=>r.id===jobResultId));\n    }\n\n    getJobResultByInstance(jobInstance){\n        return this.createTimeoutPromise(Utils.find(this.jobResults, r=>r.jobInstance.id===jobInstance.id));\n    }\n\n    getJobResultByExecution(jobExecution){\n        return this.getJobResultByInstance(jobExecution.jobInstance);\n    }\n\n    saveJobResult(jobResult) {\n        this.jobResults.push(jobResult);\n        return this.createTimeoutPromise(jobResult);\n    }\n\n    getJobExecutionById(id){\n        return this.createTimeoutPromise(Utils.find(this.jobExecutions, ex=>ex.id===id));\n    }\n\n    /*should return promise that resolves to saved jobExecution*/\n    saveJobExecution(jobExecution){\n        this.jobExecutions.push(jobExecution);\n        return this.createTimeoutPromise(jobExecution);\n    }\n\n    updateJobExecutionProgress(jobExecutionId, progress){\n        this.executionProgress[jobExecutionId] = progress;\n        return this.createTimeoutPromise(progress);\n    }\n\n    getJobExecutionProgress(jobExecutionId){\n        return this.createTimeoutPromise(this.executionProgress[jobExecutionId]);\n    }\n\n    saveJobExecutionFlag(jobExecutionId, flag){\n        this.executionFlags[jobExecutionId] = flag;\n        return this.createTimeoutPromise(flag);\n    }\n\n    getJobExecutionFlag(jobExecutionId){\n        return this.createTimeoutPromise(this.executionFlags[jobExecutionId]);\n    }\n\n    /*should return promise which resolves to saved stepExecution*/\n    saveStepExecution(stepExecution){\n        this.stepExecutions.push(stepExecution);\n        return this.createTimeoutPromise(stepExecution);\n    }\n\n    /*find job executions sorted by createTime, returns promise*/\n    findJobExecutions(jobInstance) {\n        return this.createTimeoutPromise(this.jobExecutions.filter(e=>e.jobInstance.id == jobInstance.id).sort(function (a, b) {\n            return a.createTime.getTime() - b.createTime.getTime()\n        }));\n    }\n\n    remove(object){ //TODO\n\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {StepExecution} from \"./step-execution\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {JobExecution} from \"./job-execution\";\n\n/*domain object representing the result of a job instance.*/\nexport class JobResult {\n    id;\n    jobInstance;\n    lastUpdated = null;\n\n    data; // job result data - this is not a data model!\n\n    constructor(jobInstance, id, data) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.jobInstance = jobInstance;\n        this.data = data;\n    }\n\n    getDTO(filteredProperties=[], deepClone = true){\n\n        var cloneMethod = Utils.cloneDeepWith;\n        if(!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        let dto = Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if(filteredProperties.indexOf(key)>-1){\n                return null;\n            }\n\n            if(value && value.$ObjectWithIdAndEditableFields && value.id){\n                return {\n                    '$ObjectWithIdAndEditableFields': true,\n                    id: value.id\n                }\n            }\n\n            if(value instanceof Error){\n                return Utils.getErrorDTO(value);\n            }\n        }));\n\n        return dto\n    }\n}\n","export const JOB_STATUS = {\n    COMPLETED: 'COMPLETED',\n    STARTING: 'STARTING',\n    STARTED: 'STARTED',\n    STOPPING: 'STOPPING',\n    STOPPED: 'STOPPED',\n    FAILED: 'FAILED',\n    UNKNOWN: 'UNKNOWN',\n    ABANDONED: 'ABANDONED',\n    EXECUTING: 'EXECUTING' //for exit status only\n};\n","import {log} from 'sd-utils'\nimport {JOB_STATUS} from \"./job-status\";\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\nimport {JobParametersInvalidException} from \"./exceptions/job-parameters-invalid-exception\";\nimport {JobDataInvalidException} from \"./exceptions/job-data-invalid-exception\";\nimport {JOB_EXECUTION_FLAG} from \"./job-execution-flag\";\nimport {JobResult} from \"./job-result\";\n\n/**\n * Base class for jobs\n * A Job is an entity that encapsulates an entire job process ( an abstraction representing the configuration of a job)\n * */\n\nexport class Job {\n\n    id;\n    name;\n    steps = [];\n\n    isRestartable=true;\n    executionListeners = [];\n    jobParametersValidator;\n\n    jobRepository;\n\n    constructor(name, jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        this.name = name;\n        this.jobParametersValidator = this.getJobParametersValidator();\n        this.jobDataValidator = this.getJobDataValidator();\n        this.jobRepository = jobRepository;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n    }\n\n    setJobRepository(jobRepository) {\n        this.jobRepository = jobRepository;\n    }\n\n    execute(execution) {\n        log.debug(\"Job execution starting: \", execution);\n        var jobResult;\n        return this.checkExecutionFlags(execution).then(execution=>{\n\n            if (execution.status === JOB_STATUS.STOPPING) {\n                // The job was already stopped\n                execution.status = JOB_STATUS.STOPPED;\n                execution.exitStatus = JOB_STATUS.COMPLETED;\n                log.debug(\"Job execution was stopped: \" + execution);\n                return execution;\n            }\n\n            if (this.jobParametersValidator && !this.jobParametersValidator.validate(execution.jobParameters)) {\n                throw new JobParametersInvalidException(\"Invalid job parameters in job execute\")\n            }\n\n            if(this.jobDataValidator && !this.jobDataValidator.validate(execution.getData())){\n                throw new JobDataInvalidException(\"Invalid job data in job execute\")\n            }\n\n\n            execution.startTime = new Date();\n            return Promise.all([this.updateStatus(execution, JOB_STATUS.STARTED), this.getResult(execution), this.updateProgress(execution)]).then(res=>{\n                execution=res[0];\n                jobResult = res[1];\n                if(!jobResult) {\n                    jobResult = new JobResult(execution.jobInstance)\n                }\n                this.executionListeners.forEach(listener=>listener.beforeJob(execution));\n\n                return this.doExecute(execution, jobResult);\n            });\n\n        }).then(execution=>{\n            log.debug(\"Job execution complete: \",execution);\n            return execution\n        }).catch(e=>{\n            if (e instanceof JobInterruptedException) {\n                log.info(\"Encountered interruption executing job\", e);\n                execution.status = JOB_STATUS.STOPPED;\n                execution.exitStatus = JOB_STATUS.STOPPED;\n            } else {\n                log.error(\"Encountered fatal error executing job\", e);\n                execution.status = JOB_STATUS.FAILED;\n                execution.exitStatus = JOB_STATUS.FAILED;\n            }\n            execution.failureExceptions.push(e);\n            return execution;\n        }).then(execution=>{\n            if(jobResult){\n                return this.jobRepository.saveJobResult(jobResult).then(()=>execution)\n            }\n            return execution\n        }).catch(e=>{\n            log.error(\"Encountered fatal error saving job results\", e);\n            if(e){\n                execution.failureExceptions.push(e);\n            }\n            execution.status = JOB_STATUS.FAILED;\n            execution.exitStatus = JOB_STATUS.FAILED;\n            return execution;\n        }).then(execution=>{\n            execution.endTime = new Date();\n            return Promise.all([this.jobRepository.update(execution), this.updateProgress(execution)]).then(res=>res[0])\n        }).then(execution=>{\n            try {\n                this.executionListeners.forEach(listener=>listener.afterJob(execution));\n            } catch (e) {\n                log.error(\"Exception encountered in afterStep callback\", e);\n            }\n            return execution;\n        })\n    }\n\n\n    updateStatus(jobExecution, status) {\n        jobExecution.status=status;\n        return this.jobRepository.update(jobExecution)\n    }\n\n    updateProgress(jobExecution){\n        return this.jobRepository.updateJobExecutionProgress(jobExecution.id, this.getProgress(jobExecution));\n    }\n\n    /* Extension point for subclasses allowing them to concentrate on processing logic and ignore listeners, returns promise*/\n    doExecute(execution, jobResult) {\n        throw 'doExecute function not implemented for job: ' + this.name\n    }\n\n    getJobParametersValidator() {\n        return {\n            validate: (params) => params.validate()\n        }\n    }\n\n    getJobDataValidator() {\n        return {\n            validate: (data) => true\n        }\n    }\n\n    addStep(step){\n        this.steps.push(step);\n    }\n\n\n    createJobParameters(values){\n        throw 'createJobParameters function not implemented for job: ' + this.name\n    }\n\n    /*Should return progress object with fields:\n    * current\n    * total */\n    getProgress(execution){\n        return {\n            total: 1,\n            current: execution.status === JOB_STATUS.COMPLETED ? 1 : 0\n        }\n    }\n\n    registerExecutionListener(listener){\n        this.executionListeners.push(listener);\n    }\n\n    checkExecutionFlags(execution){\n        return this.jobRepository.getJobExecutionFlag(execution.id).then(flag=>{\n            if(JOB_EXECUTION_FLAG.STOP === flag){\n                execution.stop();\n            }\n            return execution\n        })\n    }\n\n    getResult(execution) {\n        return this.jobRepository.getJobResultByExecution(execution);\n    }\n\n    /* revive job result data (after conversion to dto) if needed*/\n    reviveResultData(data, executionContext) {\n        return data;\n    }\n\n    jobResultToCsvRows(jobResult, jobParameters){\n        throw 'jobResultToCsvRows function not implemented for job: ' + this.name\n    }\n}\n","import {log} from 'sd-utils'\nimport {JOB_STATUS} from \"./job-status\";\nimport {Job} from \"./job\";\nimport {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {Step} from \"./step\";\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\nimport {JobRestartException} from \"./exceptions/job-restart-exception\";\nimport {JOB_EXECUTION_FLAG} from \"./job-execution-flag\";\n\n/* Simple Job that sequentially executes a job by iterating through its list of steps.  Any Step that fails will fail the job.  The job is\n considered complete when all steps have been executed.*/\n\nexport class SimpleJob extends Job {\n\n    constructor(name, jobRepository, expressionsEvaluator, objectiveRulesManager) {\n        super(name, jobRepository, expressionsEvaluator, objectiveRulesManager)\n    }\n\n    getStep(stepName) {\n        return Utils.find(this.steps, s=>s.name == stepName);\n    }\n\n    doExecute(execution, jobResult) {\n\n        return this.handleNextStep(execution, jobResult).then(lastExecutedStepExecution=>{\n            if (lastExecutedStepExecution != null) {\n                log.debug(\"Updating JobExecution status: \", lastExecutedStepExecution);\n                execution.status = lastExecutedStepExecution.status;\n                execution.exitStatus = lastExecutedStepExecution.exitStatus;\n                execution.failureExceptions.push(...lastExecutedStepExecution.failureExceptions)\n            }\n            return execution;\n        });\n    }\n\n    handleNextStep(jobExecution, jobResult, prevStep=null, prevStepExecution=null){\n        var stepIndex = 0;\n        if(prevStep){\n            stepIndex = this.steps.indexOf(prevStep)+1;\n        }\n        if(stepIndex>=this.steps.length){\n            return Promise.resolve(prevStepExecution)\n        }\n        var step = this.steps[stepIndex];\n        return this.handleStep(step, jobExecution, jobResult).then(stepExecution=>{\n            if(stepExecution.status !== JOB_STATUS.COMPLETED){ // Terminate the job if a step fails\n                return stepExecution;\n            }\n            return this.handleNextStep(jobExecution, jobResult, step, stepExecution);\n        })\n    }\n\n    handleStep(step, jobExecution, jobResult) {\n        var jobInstance = jobExecution.jobInstance;\n        return this.checkExecutionFlags(jobExecution).then(jobExecution=>{\n            if (jobExecution.isStopping()) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            return this.jobRepository.getLastStepExecution(jobInstance, step.name)\n\n        }).then(lastStepExecution=>{\n            if (this.stepExecutionPartOfExistingJobExecution(jobExecution, lastStepExecution)) {\n                // If the last execution of this step was in the same job, it's probably intentional so we want to run it again.\n                log.info(\"Duplicate step detected in execution of job. step: \" + step.name + \" jobName: \", jobInstance.jobName);\n                lastStepExecution = null;\n            }\n\n            var currentStepExecution = lastStepExecution;\n\n            if (!this.shouldStart(currentStepExecution, jobExecution, step)) {\n                return currentStepExecution;\n            }\n\n            currentStepExecution = jobExecution.createStepExecution(step.name);\n\n            var isCompleted = lastStepExecution != null && lastStepExecution.status === JOB_STATUS.COMPLETED;\n            var isRestart = lastStepExecution != null && !isCompleted;\n            var skipExecution = isCompleted && step.skipOnRestartIfCompleted;\n\n            if (isRestart) {\n                currentStepExecution.executionContext = lastStepExecution.executionContext;\n                if (lastStepExecution.executionContext.containsKey(\"executed\")) {\n                    currentStepExecution.executionContext.remove(\"executed\");\n                }\n            }\n            else {\n\n                currentStepExecution.executionContext = new ExecutionContext();\n            }\n            if(skipExecution){\n                currentStepExecution.exitStatus = JOB_STATUS.COMPLETED;\n                currentStepExecution.status = JOB_STATUS.COMPLETED;\n                currentStepExecution.executionContext.put(\"skipped\", true);\n            }\n\n            return this.jobRepository.addStepExecution(currentStepExecution).then((_currentStepExecution)=>{\n                currentStepExecution=_currentStepExecution;\n                if(skipExecution){\n                    log.info(\"Skipping completed step execution: [\" + step.name + \"]\");\n                    return currentStepExecution;\n                }\n                log.info(\"Executing step: [\" + step.name + \"]\");\n                return step.execute(currentStepExecution, jobResult)\n            }).then(()=>{\n                currentStepExecution.executionContext.put(\"executed\", true);\n                return currentStepExecution;\n            }).catch (e => {\n                jobExecution.status = JOB_STATUS.FAILED;\n                return this.jobRepository.update(jobExecution).then(jobExecution=>{throw e})\n            });\n\n        }).then((currentStepExecution)=>{\n            if (currentStepExecution.status == JOB_STATUS.STOPPING\n                || currentStepExecution.status == JOB_STATUS.STOPPED) {\n                // Ensure that the job gets the message that it is stopping\n                jobExecution.status = JOB_STATUS.STOPPING;\n                // throw new Error(\"Job interrupted by step execution\");\n            }\n            return this.updateProgress(jobExecution).then(()=>currentStepExecution);\n        })\n\n    }\n\n    stepExecutionPartOfExistingJobExecution(jobExecution, stepExecution) {\n        return stepExecution != null && stepExecution.jobExecution.id == jobExecution.id\n    }\n\n    shouldStart(lastStepExecution, execution, step) {\n        var stepStatus;\n        if (lastStepExecution == null) {\n            stepStatus = JOB_STATUS.STARTING;\n        }\n        else {\n            stepStatus = lastStepExecution.status;\n        }\n\n        if (stepStatus == JOB_STATUS.UNKNOWN) {\n            throw new JobRestartException(\"Cannot restart step from UNKNOWN status\")\n        }\n\n        return stepStatus != JOB_STATUS.COMPLETED || step.isRestartable;\n    }\n\n    getProgress(execution){\n        var completedSteps = execution.stepExecutions.length;\n        let progress = {\n            total: this.steps.length,\n            current: completedSteps\n        };\n        if(!completedSteps){\n            return progress\n        }\n        if(JOB_STATUS.COMPLETED !== execution.stepExecutions[execution.stepExecutions.length-1].status){\n            progress.current--;\n        }\n\n        return progress;\n    }\n\n    addStep(){\n        if(arguments.length===1){\n            return super.addStep(arguments[0])\n        }\n        var step = new Step(arguments[0], this.jobRepository);\n        step.doExecute = arguments[1];\n        return super.addStep(step);\n    }\n\n}\n","export class StepExecutionListener {\n    /*Called before a step executes*/\n    beforeStep(jobExecution) {\n\n    }\n\n    /*Called after completion of a step. Called after both successful and failed executions*/\n    afterStep(jobExecution) {\n\n    }\n}\n","import {Utils} from \"sd-utils\";\nimport {ExecutionContext} from \"./execution-context\";\nimport {JOB_STATUS} from \"./job-status\";\nimport {JobExecution} from \"./job-execution\";\n\n/*\n representation of the execution of a step\n */\nexport class StepExecution {\n    id;\n    stepName;\n    jobExecution;\n\n    status = JOB_STATUS.STARTING;\n    exitStatus = JOB_STATUS.EXECUTING;\n    executionContext = new ExecutionContext(); //execution context for single step level,\n\n    startTime = new Date();\n    endTime = null;\n    lastUpdated = null;\n\n    terminateOnly = false; //flag to indicate that an execution should halt\n    failureExceptions = [];\n\n    constructor(stepName, jobExecution, id) {\n        if(id===null || id === undefined){\n            this.id = Utils.guid();\n        }else{\n            this.id = id;\n        }\n\n        this.stepName = stepName;\n        this.jobExecution = jobExecution;\n        this.jobExecutionId = jobExecution.id;\n    }\n\n    getJobParameters(){\n        return this.jobExecution.jobParameters;\n    }\n\n    getJobExecutionContext(){\n        return this.jobExecution.executionContext;\n    }\n\n    getData(){\n        return this.jobExecution.getData();\n    }\n\n    getDTO(filteredProperties=[], deepClone = true){\n\n        var cloneMethod = Utils.cloneDeepWith;\n        if(!deepClone) {\n            cloneMethod = Utils.cloneWith;\n        }\n\n        return Utils.assign({}, cloneMethod(this, (value, key, object, stack)=> {\n            if(filteredProperties.indexOf(key)>-1){\n                return null;\n            }\n            if([\"executionContext\"].indexOf(key)>-1){\n                return value.getDTO()\n            }\n            if(value instanceof Error){\n                return Utils.getErrorDTO(value);\n            }\n\n            if (value instanceof JobExecution) {\n                return value.getDTO([\"stepExecutions\"], deepClone)\n            }\n        }))\n    }\n}\n","import {JOB_STATUS} from \"./job-status\";\nimport {log} from 'sd-utils'\n\nimport {JobInterruptedException} from \"./exceptions/job-interrupted-exception\";\n/*domain object representing the configuration of a job step*/\nexport class Step {\n\n    id;\n    name;\n    isRestartable = true;\n    skipOnRestartIfCompleted=true;\n    steps = [];\n    executionListeners = [];\n\n    jobRepository;\n\n    constructor(name, jobRepository) {\n        this.name = name;\n        this.jobRepository = jobRepository;\n    }\n\n    setJobRepository(jobRepository) {\n        this.jobRepository = jobRepository;\n    }\n\n    /*Process the step and assign progress and status meta information to the StepExecution provided*/\n    execute(stepExecution, jobResult) {\n        log.debug(\"Executing step: name=\" + this.name);\n        stepExecution.startTime = new Date();\n        stepExecution.status = JOB_STATUS.STARTED;\n        var exitStatus;\n        return this.jobRepository.update(stepExecution).then(stepExecution=>{\n            exitStatus = JOB_STATUS.EXECUTING;\n\n            this.executionListeners.forEach(listener=>listener.beforeStep(stepExecution));\n            this.open(stepExecution.executionContext);\n\n            return this.doExecute(stepExecution, jobResult)\n        }).then(_stepExecution=>{\n            stepExecution = _stepExecution;\n            exitStatus = stepExecution.exitStatus;\n\n            // Check if someone is trying to stop us\n            if (stepExecution.terminateOnly) {\n                throw new JobInterruptedException(\"JobExecution interrupted.\");\n            }\n            // Need to upgrade here not set, in case the execution was stopped\n            stepExecution.status = JOB_STATUS.COMPLETED;\n            log.debug(\"Step execution success: name=\" + this.name);\n            return stepExecution\n        }).catch(e=>{\n            stepExecution.status = this.determineJobStatus(e);\n            exitStatus = stepExecution.status;\n            stepExecution.failureExceptions.push(e);\n\n            if (stepExecution.status == JOB_STATUS.STOPPED) {\n                log.info(\"Encountered interruption executing step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n            else {\n                log.error(\"Encountered an error executing step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n            return stepExecution;\n        }).then(stepExecution=>{\n            try {\n                stepExecution.exitStatus = exitStatus;\n                this.executionListeners.forEach(listener=>listener.afterStep(stepExecution));\n            }\n            catch (e) {\n                log.error(\"Exception in afterStep callback in step \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n            }\n\n            stepExecution.endTime = new Date();\n            stepExecution.exitStatus = exitStatus;\n\n\n            return this.jobRepository.update(stepExecution)\n        }).then(stepExecution=>{\n            try {\n                this.close(stepExecution.executionContext);\n            }\n            catch (e) {\n                log.error(\"Exception while closing step execution resources in step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n                stepExecution.failureExceptions.push(e);\n            }\n\n            try {\n                this.close(stepExecution.executionContext);\n            }\n            catch (e) {\n                log.error(\"Exception while closing step execution resources in step: \" + this.name + \" in job: \" + stepExecution.jobExecution.jobInstance.jobName, e);\n                stepExecution.failureExceptions.push(e);\n            }\n\n            // doExecutionRelease();\n\n            log.debug(\"Step execution complete: \" + stepExecution.id);\n            return stepExecution;\n        });\n\n    }\n\n    determineJobStatus(e) {\n        if (e instanceof JobInterruptedException) {\n            return JOB_STATUS.STOPPED;\n        }\n        else {\n            return JOB_STATUS.FAILED;\n        }\n    }\n\n    /**\n     * Extension point for subclasses to execute business logic. Subclasses should set the exitStatus on the\n     * StepExecution before returning. Must return stepExecution\n     */\n    doExecute(stepExecution, jobResult) {\n    }\n\n    /**\n     * Extension point for subclasses to provide callbacks to their collaborators at the beginning of a step, to open or\n     * acquire resources. Does nothing by default.\n     */\n    open(executionContext) {\n    }\n\n    /**\n     * Extension point for subclasses to provide callbacks to their collaborators at the end of a step (right at the end\n     * of the finally block), to close or release resources. Does nothing by default.\n     */\n    close(executionContext) {\n    }\n\n\n    /*Should return progress object with fields:\n     * current\n     * total */\n    getProgress(stepExecution){\n        return {\n            total: 1,\n            current: stepExecution.status === JOB_STATUS.COMPLETED ? 1 : 0\n        }\n    }\n}\n","import * as engine from './engine/index'\n\nexport {engine}\nexport * from './jobs-manager'\nexport * from './job-worker'\n\n\n\n","import {JobExecutionListener} from \"./engine/job-execution-listener\";\nimport {JOB_STATUS} from \"./engine/job-status\";\nimport {JobInstance} from \"./engine/job-instance\";\nimport {Utils, log} from \"sd-utils\";\n\n\nexport class JobInstanceManagerConfig {\n    onJobStarted = () => {};\n    onJobCompleted = result => {};\n    onJobFailed = errors => {};\n    onJobStopped = () => {};\n    onJobTerminated = () => {};\n    onProgress = (progress) => {};\n    callbacksThisArg;\n    updateInterval = 100;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n/*convenience class for managing and tracking job instance progress*/\nexport class JobInstanceManager extends JobExecutionListener {\n\n    jobsManger;\n    jobInstance;\n    config;\n\n    lastJobExecution;\n    lastUpdateTime;\n    progress = null;\n\n    constructor(jobsManger, jobInstanceOrExecution, config) {\n        super();\n        this.config = new JobInstanceManagerConfig(config);\n        this.jobsManger = jobsManger;\n        if (jobInstanceOrExecution instanceof JobInstance) {\n            this.jobInstance = jobInstanceOrExecution;\n            this.getLastJobExecution().then(je=> {\n                this.checkProgress();\n            })\n        } else {\n            this.lastJobExecution = jobInstanceOrExecution;\n            this.jobInstance = this.lastJobExecution.jobInstance;\n            this.checkProgress();\n        }\n        if (this.lastJobExecution && !this.lastJobExecution.isRunning()) {\n            this.afterJob(this.lastJobExecution);\n            return;\n        }\n        jobsManger.registerJobExecutionListener(this);\n    }\n\n    checkProgress() {\n\n        var self = this;\n        if (this.terminated || !this.lastJobExecution.isRunning() || this.getProgressPercents(this.progress) === 100) {\n            return;\n        }\n        this.jobsManger.getProgress(this.lastJobExecution).then(progress=> {\n            this.lastUpdateTime = new Date();\n            if (progress) {\n                this.progress = progress;\n                this.config.onProgress.call(this.config.callbacksThisArg || this, progress);\n            }\n\n            setTimeout(function () {\n                self.checkProgress();\n            }, this.config.updateInterval)\n        })\n    }\n\n    beforeJob(jobExecution) {\n        if (jobExecution.jobInstance.id !== this.jobInstance.id) {\n            return;\n        }\n\n        this.lastJobExecution = jobExecution;\n        this.config.onJobStarted.call(this.config.callbacksThisArg || this);\n    }\n\n    getProgressPercents(progress) {\n        if (!progress) {\n            return 0;\n        }\n        return progress.current * 100 / progress.total;\n    }\n\n    getProgressFromExecution(jobExecution) {\n        var job = this.jobsManger.getJobByName(jobExecution.jobInstance.jobName);\n        return job.getProgress(jobExecution);\n    }\n\n    afterJob(jobExecution) {\n        if (jobExecution.jobInstance.id !== this.jobInstance.id) {\n            return;\n        }\n        this.lastJobExecution = jobExecution;\n        if (JOB_STATUS.COMPLETED === jobExecution.status) {\n            this.jobsManger.deregisterJobExecutionListener(this);\n            this.progress = this.getProgressFromExecution(jobExecution);\n            this.config.onProgress.call(this.config.callbacksThisArg || this, this.progress);\n            this.jobsManger.getResult(jobExecution).then(result=> {\n                this.config.onJobCompleted.call(this.config.callbacksThisArg || this, result.data);\n            }).catch(e=> {\n                log.error(e);\n            })\n\n\n        } else if (JOB_STATUS.FAILED === jobExecution.status) {\n            this.config.onJobFailed.call(this.config.callbacksThisArg || this, jobExecution.failureExceptions);\n\n        } else if (JOB_STATUS.STOPPED === jobExecution.status) {\n            this.config.onJobStopped.call(this.config.callbacksThisArg || this);\n        }\n    }\n\n    getLastJobExecution(forceUpdate = false) {\n        if (!this.lastJobExecution || forceUpdate) {\n            return this.jobsManger.jobRepository.getLastJobExecutionByInstance(this.jobInstance).then(je=> {\n                this.lastJobExecution = je;\n                return je;\n            });\n        }\n        return Promise.resolve(this.lastJobExecution);\n    }\n\n    stop() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.stop(this.lastJobExecution)\n        })\n    }\n\n    resume() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.run(this.jobInstance.jobName, this.lastJobExecution.jobParameters.values, this.lastJobExecution.getData()).then(je=> {\n                this.lastJobExecution = je;\n                this.checkProgress();\n                return true;\n            }).catch(e=> {\n                log.error(e);\n                return false;\n            })\n        })\n    }\n\n    terminate() {\n        return this.getLastJobExecution().then(()=> {\n            return this.jobsManger.terminate(this.jobInstance).then(()=> {\n                this.terminated = true;\n                this.config.onJobTerminated.call(this.config.callbacksThisArg || this, this.lastJobExecution);\n                this.jobsManger.deregisterJobExecutionListener(this);\n\n                return this.lastJobExecution;\n            })\n        }).catch(e=> {\n            log.error(e);\n            return false;\n        })\n    }\n\n}\n","export class JobWorker{\n\n    worker;\n    listeners = {};\n    defaultListener;\n\n    constructor(url, defaultListener, onError){\n        var instance = this;\n        this.worker = new Worker(url);\n        this.defaultListener = defaultListener || function() {};\n        if (onError) {this.worker.onerror = onError;}\n\n        this.worker.onmessage = function(event) {\n            if (event.data instanceof Object &&\n                event.data.hasOwnProperty('queryMethodListener') && event.data.hasOwnProperty('queryMethodArguments')) {\n                var listener = instance.listeners[event.data.queryMethodListener];\n                var args = event.data.queryMethodArguments;\n                if(listener.deserializer){\n                    args = listener.deserializer(args);\n                }\n                listener.fn.apply(listener.thisArg, args);\n            } else {\n                this.defaultListener.call(instance, event.data);\n            }\n        }\n\n    }\n\n    sendQuery() {\n        if (arguments.length < 1) {\n            throw new TypeError('JobWorker.sendQuery takes at least one argument');\n        }\n        this.worker.postMessage({\n            'queryMethod': arguments[0],\n            'queryArguments': Array.prototype.slice.call(arguments, 1)\n        });\n    }\n\n    runJob(jobName, jobParametersValues, dataDTO){\n        this.sendQuery('runJob', jobName, jobParametersValues, dataDTO)\n    }\n\n    executeJob(jobExecutionId){\n        this.sendQuery('executeJob', jobExecutionId)\n    }\n\n    recompute(dataDTO, ruleNames, evalCode, evalNumeric){\n        this.sendQuery('recompute', dataDTO, ruleNames, evalCode, evalNumeric)\n    }\n\n    postMessage(message) {\n        this.worker.postMessage(message);\n    }\n\n    terminate() {\n        this.worker.terminate();\n    }\n\n    addListener(name, listener, thisArg, deserializer) {\n        this.listeners[name] = {\n            fn: listener,\n            thisArg: thisArg || this,\n            deserializer: deserializer\n        };\n    }\n\n    removeListener(name) {\n        delete this.listeners[name];\n    }\n}\n","import {Utils, log} from \"sd-utils\";\nimport {SensitivityAnalysisJob} from \"./configurations/sensitivity-analysis/n-way/sensitivity-analysis-job\";\nimport {JobLauncher} from \"./engine/job-launcher\";\nimport {JobWorker} from \"./job-worker\";\nimport {JobExecutionListener} from \"./engine/job-execution-listener\";\nimport {JobParameters} from \"./engine/job-parameters\";\nimport {IdbJobRepository} from \"./engine/job-repository/idb-job-repository\";\nimport {JOB_EXECUTION_FLAG} from \"./engine/job-execution-flag\";\nimport {RecomputeJob} from \"./configurations/recompute/recompute-job\";\nimport {ProbabilisticSensitivityAnalysisJob} from \"./configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job\";\nimport {TimeoutJobRepository} from \"./engine/job-repository/timeout-job-repository\";\nimport {TornadoDiagramJob} from \"./configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job\";\nimport {JOB_STATUS} from \"./engine/job-status\";\nimport {SimpleJobRepository} from \"./engine/job-repository/simple-job-repository\";\nimport {LeagueTableJob} from \"./configurations/league-table/league-table-job\";\nimport {SpiderPlotJob} from \"./configurations/sensitivity-analysis/spider-plot/spider-plot-job\";\nimport {PayoffsTransformationJob} from \"./configurations/payoffs-transformation/payoffs-transformation-job\";\n\n\nexport class JobsManagerConfig {\n\n    workerUrl = null;\n    repositoryType = 'idb';\n    clearRepository = false;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\nexport class JobsManager extends JobExecutionListener {\n\n\n    useWorker;\n    expressionsEvaluator;\n    objectiveRulesManager;\n    jobWorker;\n\n    jobRepository;\n    jobLauncher;\n\n    jobExecutionListeners = [];\n\n    afterJobExecutionPromiseResolves = {};\n    jobInstancesToTerminate = {};\n\n    constructor(expressionsEvaluator, objectiveRulesManager, config) {\n        super();\n        this.setConfig(config);\n        this.expressionEngine = expressionsEvaluator.expressionEngine;\n        this.expressionsEvaluator = expressionsEvaluator;\n        this.objectiveRulesManager = objectiveRulesManager;\n\n\n        this.useWorker = !!this.config.workerUrl;\n        if (this.useWorker) {\n            this.initWorker(this.config.workerUrl);\n        }\n\n        this.initRepository();\n\n        this.registerJobs();\n\n\n\n        this.jobLauncher = new JobLauncher(this.jobRepository, this.jobWorker, (data)=>this.serializeData(data));\n    }\n\n    setConfig(config) {\n        this.config = new JobsManagerConfig(config);\n        return this;\n    }\n\n    initRepository() {\n        switch (this.config.repositoryType){\n            case 'idb':\n                this.jobRepository = new IdbJobRepository(this.expressionEngine.getJsonReviver(), 'sd-job-repository', this.config.clearRepository);\n                break;\n            case 'timeout':\n                this.jobRepository = new TimeoutJobRepository(this.expressionEngine.getJsonReviver());\n                break;\n            case 'simple':\n                this.jobRepository = new SimpleJobRepository(this.expressionEngine.getJsonReviver());\n                break;\n            default:\n                log.error('JobsManager configuration error! Unknown repository type: '+this.config.repositoryType+'. Using default: idb');\n                this.config.repositoryType = 'idb';\n                this.initRepository()\n        }\n    }\n\n    serializeData(data) {\n        return data.serialize(true, false, false, this.expressionEngine.getJsonReplacer());\n    }\n\n    getProgress(jobExecutionOrId) {\n        var id = jobExecutionOrId;\n        if (!Utils.isString(jobExecutionOrId)) {\n            id = jobExecutionOrId.id\n        }\n        return this.jobRepository.getJobExecutionProgress(id);\n    }\n\n    getResult(jobInstanceOrExecution) {\n        let jobInstance = jobInstanceOrExecution;\n        let jobExecution = null;\n        if(jobInstanceOrExecution.jobInstance){\n            jobExecution = jobInstanceOrExecution;\n            jobInstance = jobExecution.jobInstance;\n        }\n\n        return this.jobRepository.getJobResultByInstance(jobInstance);\n    }\n\n    run(jobName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched = true) {\n        return this.jobLauncher.run(jobName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched).then(jobExecution=> {\n            if (resolvePromiseAfterJobIsLaunched || !jobExecution.isRunning()) {\n                return jobExecution;\n            }\n            //job was delegated to worker and is still running\n\n            return new Promise((resolve, reject)=> {\n                this.afterJobExecutionPromiseResolves[jobExecution.id] = resolve;\n            });\n        });\n    }\n\n    execute(jobExecutionOrId) {\n        return this.jobLauncher.execute(jobExecutionOrId);\n    }\n\n    stop(jobExecutionOrId) {\n        var id = jobExecutionOrId;\n        if (!Utils.isString(jobExecutionOrId)) {\n            id = jobExecutionOrId.id\n        }\n\n        return this.jobRepository.getJobExecutionById(id).then(jobExecution=> {\n            if (!jobExecution) {\n                log.error(\"Job Execution not found: \" + jobExecutionOrId);\n                return null;\n            }\n            if (!jobExecution.isRunning()) {\n                log.warn(\"Job Execution not running, status: \" + jobExecution.status + \", endTime: \" + jobExecution.endTime);\n                return jobExecution;\n            }\n\n            return this.jobRepository.saveJobExecutionFlag(jobExecution.id, JOB_EXECUTION_FLAG.STOP).then(()=>jobExecution);\n        });\n    }\n\n    /*stop job execution if running and delete job instance from repository*/\n    terminate(jobInstance) {\n        return this.jobRepository.getLastJobExecutionByInstance(jobInstance).then(jobExecution=> {\n            if (jobExecution) {\n                if(jobExecution.isRunning()){\n                    return this.jobRepository.saveJobExecutionFlag(jobExecution.id, JOB_EXECUTION_FLAG.STOP).then(()=>jobExecution);\n                }else{\n                    return this.jobRepository.removeJobInstance(jobInstance, jobExecution.jobParameters);\n                }\n            }\n        }).then(()=>{\n            this.jobInstancesToTerminate[jobInstance.id]=jobInstance;\n        })\n    }\n\n    getJobByName(jobName) {\n        return this.jobRepository.getJobByName(jobName);\n    }\n\n\n    createJobParameters(jobName, jobParametersValues) {\n        var job = this.jobRepository.getJobByName(jobName);\n        return job.createJobParameters(jobParametersValues);\n    }\n\n\n    /*Returns a promise*/\n    getLastJobExecution(jobName, jobParameters) {\n        if (this.useWorker) {\n            return this.jobWorker;\n        }\n        if (!(jobParameters instanceof JobParameters)) {\n            jobParameters = this.createJobParameters(jobParameters)\n        }\n        return this.jobRepository.getLastJobExecution(jobName, jobParameters);\n    }\n\n    initWorker(workerUrl) {\n        this.jobWorker = new JobWorker(workerUrl, ()=>{\n            log.error('error in worker', arguments);\n        });\n        var argsDeserializer = (args)=> {\n            return [this.jobRepository.reviveJobExecution(args[0])]\n        };\n\n        this.jobWorker.addListener(\"beforeJob\", this.beforeJob, this, argsDeserializer);\n        this.jobWorker.addListener(\"afterJob\", this.afterJob, this, argsDeserializer);\n        this.jobWorker.addListener(\"jobFatalError\", this.onJobFatalError, this);\n    }\n\n    registerJobs() {\n\n        let sensitivityAnalysisJob = new SensitivityAnalysisJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        let probabilisticSensitivityAnalysisJob = new ProbabilisticSensitivityAnalysisJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);\n        if(!Utils.isWorker()){\n            sensitivityAnalysisJob.setBatchSize(1);\n            probabilisticSensitivityAnalysisJob.setBatchSize(1);\n        }\n\n        this.registerJob(sensitivityAnalysisJob);\n        this.registerJob(new TornadoDiagramJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(probabilisticSensitivityAnalysisJob);\n        this.registerJob(new RecomputeJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new LeagueTableJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new SpiderPlotJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n        this.registerJob(new PayoffsTransformationJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));\n    }\n\n    registerJob(job) {\n        this.jobRepository.registerJob(job);\n        job.registerExecutionListener(this)\n    }\n\n    registerJobExecutionListener(listener) {\n        this.jobExecutionListeners.push(listener);\n    }\n\n    deregisterJobExecutionListener(listener) {\n        var index = this.jobExecutionListeners.indexOf(listener);\n        if (index > -1) {\n            this.jobExecutionListeners.splice(index, 1)\n        }\n    }\n\n    beforeJob(jobExecution) {\n        log.debug(\"beforeJob\", this.useWorker, jobExecution);\n        this.jobExecutionListeners.forEach(l=>l.beforeJob(jobExecution));\n    }\n\n    afterJob(jobExecution) {\n        log.debug(\"afterJob\", this.useWorker, jobExecution);\n        this.jobExecutionListeners.forEach(l=>l.afterJob(jobExecution));\n        var promiseResolve = this.afterJobExecutionPromiseResolves[jobExecution.id];\n        if (promiseResolve) {\n            promiseResolve(jobExecution)\n        }\n\n        if(this.jobInstancesToTerminate[jobExecution.jobInstance.id]){\n            this.jobRepository.removeJobInstance(jobExecution.jobInstance, jobExecution.jobParameters);\n        }\n    }\n\n    onJobFatalError(jobExecutionId, error){\n        var promiseResolve = this.afterJobExecutionPromiseResolves[jobExecutionId];\n        if (promiseResolve) {\n            this.jobRepository.getJobExecutionById(jobExecutionId).then(jobExecution=>{\n                jobExecution.status = JOB_STATUS.FAILED;\n                if(error){\n                    jobExecution.failureExceptions.push(error);\n                }\n\n                return this.jobRepository.saveJobExecution(jobExecution).then(()=>{\n                    promiseResolve(jobExecution);\n                })\n            }).catch(e=>{\n                log.error(e);\n            })\n\n        }\n        log.debug('onJobFatalError', jobExecutionId, error);\n    }\n\n\n}\n","import {\n    ExpectedValueMaximizationRule,\n    ExpectedValueMinimizationRule,\n    MaxiMinRule,\n    MaxiMaxRule,\n    MiniMinRule,\n    MiniMaxRule\n} from \"./rules\";\nimport {log} from \"sd-utils\";\nimport * as model from \"sd-model\";\nimport {MinMaxRule} from \"./rules/min-max-rule\";\nimport {MaxMinRule} from \"./rules/max-min-rule\";\nimport {MinMinRule} from \"./rules/min-min-rule\";\nimport {MaxMaxRule} from \"./rules/max-max-rule\";\n\nexport class ObjectiveRulesManager{\n\n    expressionEngine;\n    currentRule;\n    ruleByName = {};\n    rules = [];\n\n\n    flipPair = {};\n    payoffIndex = 0;\n\n    constructor(expressionEngine, currentRuleName) {\n        this.expressionEngine = expressionEngine;\n        this.addRule(new ExpectedValueMaximizationRule(expressionEngine));\n        this.addRule(new ExpectedValueMinimizationRule(expressionEngine));\n        this.addRule(new MaxiMinRule(expressionEngine));\n        this.addRule(new MaxiMaxRule(expressionEngine));\n        this.addRule(new MiniMinRule(expressionEngine));\n        this.addRule(new MiniMaxRule(expressionEngine));\n\n        let minMax = new MinMaxRule(expressionEngine);\n        this.addRule(minMax);\n        let maxMin = new MaxMinRule(expressionEngine);\n        this.addRule(maxMin);\n        this.addFlipPair(minMax, maxMin);\n\n        let minMin = new MinMinRule(expressionEngine);\n        this.addRule(minMin);\n        let maxMax = new MaxMaxRule(expressionEngine);\n        this.addRule(maxMax);\n\n\n        if (currentRuleName) {\n            this.currentRule = this.ruleByName[currentRuleName];\n        } else {\n            this.currentRule = this.rules[0];\n        }\n\n    }\n\n\n    setPayoffIndex(payoffIndex){\n        this.payoffIndex = payoffIndex || 0;\n    }\n\n    addRule(rule){\n        this.ruleByName[rule.name]=rule;\n        this.rules.push(rule);\n    }\n\n    isRuleName(ruleName){\n         return !!this.ruleByName[ruleName]\n    }\n\n    setCurrentRuleByName(ruleName){\n        this.currentRule = this.ruleByName[ruleName];\n    }\n\n    getObjectiveRuleByName(ruleName){\n        return this.ruleByName[ruleName];\n    }\n\n    flipRule(){\n        var flipped = this.flipPair[this.currentRule.name];\n        if(flipped){\n            this.currentRule = flipped;\n        }\n    }\n\n    updateDefaultCriterion1Weight(defaultCriterion1Weight){\n        this.rules.filter(r=>r.multiCriteria).forEach(r=>r.setDefaultCriterion1Weight(defaultCriterion1Weight));\n    }\n\n    recompute(dataModel, allRules, decisionPolicy=null){\n\n        var startTime = new Date().getTime();\n        log.trace('recomputing rules, all: '+allRules);\n\n        dataModel.getRoots().forEach(n=>{\n            this.recomputeTree(n, allRules, decisionPolicy);\n        });\n\n        var time  = (new Date().getTime() - startTime/1000);\n        log.trace('recomputation took '+time+'s');\n\n        return this;\n    }\n\n    recomputeTree(root, allRules, decisionPolicy=null){\n        log.trace('recomputing rules for tree ...', root);\n\n        var startTime = new Date().getTime();\n\n        var rules  = [this.currentRule];\n        if(allRules){\n            rules = this.rules;\n        }\n\n        rules.forEach(rule=> {\n            rule.setPayoffIndex(this.payoffIndex);\n            rule.setDecisionPolicy(decisionPolicy);\n            rule.computePayoff(root);\n            rule.computeOptimal(root);\n            rule.clearDecisionPolicy();\n        });\n\n        var time  = (new Date().getTime() - startTime)/1000;\n        log.trace('recomputation took '+time+'s');\n\n        return this;\n    }\n\n\n    getNodeDisplayValue(node, name) {\n        return node.computedValue(this.currentRule.name, name)\n\n    }\n\n    getEdgeDisplayValue(e, name){\n        if(name==='probability'){\n            if(e.parentNode instanceof model.domain.DecisionNode){\n                return e.computedValue(this.currentRule.name, 'probability');\n            }\n            if(e.parentNode instanceof model.domain.ChanceNode){\n                return e.computedBaseProbability();\n            }\n            return null;\n        }\n        if(name==='payoff'){\n            if(this.currentRule.multiCriteria){\n                return e.computedValue(null, 'payoff');\n            }else{\n                return e.computedValue(null, 'payoff[' +this.payoffIndex + ']');\n            }\n\n        }\n        if(name==='optimal'){\n            return e.computedValue(this.currentRule.name, 'optimal')\n        }\n    }\n\n    addFlipPair(rule1, rule2) {\n        this.flipPair[rule1.name] = rule2;\n        this.flipPair[rule2.name] = rule1;\n    }\n\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from 'sd-utils'\n\n/*expected value maximization rule*/\nexport class ExpectedValueMaximizationRule extends ObjectiveRule{\n\n    static NAME = 'expected-value-maximization';\n\n    constructor(expressionEngine){\n        super(ExpectedValueMaximizationRule.NAME, true, expressionEngine);\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff=0, probabilityToEnter=1){\n        this.cValue(node, 'optimal', true);\n        if(node instanceof model.TerminalNode){\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=>{\n            if ( this.subtract(this.computedPayoff(node),payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode) ) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e,'probability')));\n            }else{\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*expected value minimization rule*/\nexport class ExpectedValueMinimizationRule extends ObjectiveRule{\n\n    static NAME = 'expected-value-minimization';\n\n    constructor(expressionEngine){\n        super(ExpectedValueMinimizationRule.NAME, false, expressionEngine);\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff=0, probabilityToEnter=1){\n        this.cValue(node, 'optimal', true);\n        if(node instanceof model.TerminalNode){\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=>{\n            if ( this.subtract(this.computedPayoff(node),payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode) ) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e,'probability')));\n            }else{\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","export * from './objective-rule'\nexport * from './expected-value-maximization-rule'\nexport * from './expected-value-minimization-rule'\nexport * from './maxi-max-rule'\nexport * from './maxi-min-rule'\nexport * from './mini-max-rule'\nexport * from './mini-min-rule'\n\n\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MaxMaxRule extends MultiCriteriaRule{\n\n    static NAME = 'max-max';\n\n    constructor(expressionEngine){\n        super(MaxMaxRule.NAME, [1, 1], expressionEngine);\n    }\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MaxMinRule extends MultiCriteriaRule{\n\n    static NAME = 'max-min';\n\n    constructor(expressionEngine){\n        super(MaxMinRule.NAME, [1, -1], expressionEngine);\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*maxi-max rule*/\nexport class MaxiMaxRule extends ObjectiveRule{\n\n    static NAME = 'maxi-max';\n\n    constructor(expressionEngine){\n        super(MaxiMaxRule.NAME, true, expressionEngine);\n    }\n\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)<bestChildPayoff ? 0.0 : (1.0/bestCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.maxBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*maxi-min rule*/\nexport class MaxiMinRule extends ObjectiveRule{\n\n    static NAME = 'maxi-min';\n\n    constructor(expressionEngine){\n        super(MaxiMinRule.NAME, true, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)>worstChildPayoff ? 0.0 : (1.0/worstCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.minBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MinMaxRule extends MultiCriteriaRule{\n\n    static NAME = 'min-max';\n\n    constructor(expressionEngine){\n        super(MinMaxRule.NAME, [-1, 1], expressionEngine);\n    }\n}\n","import {MultiCriteriaRule} from \"./multi-criteria-rule\";\n\n\nexport class MinMinRule extends MultiCriteriaRule{\n\n    static NAME = 'min-min';\n\n    constructor(expressionEngine){\n        super(MinMinRule.NAME, [-1, -1], expressionEngine);\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*mini-max rule*/\nexport class MiniMaxRule extends ObjectiveRule{\n\n    static NAME = 'mini-max';\n\n    constructor(expressionEngine){\n        super(MiniMaxRule.NAME, false, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)<bestChildPayoff ? 0.0 : (1.0/bestCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.maxBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {ObjectiveRule} from './objective-rule'\nimport {Utils} from \"sd-utils\";\n\n/*mini-min rule*/\nexport class MiniMinRule extends ObjectiveRule{\n\n    static NAME = 'mini-min';\n\n    constructor(expressionEngine){\n        super(MiniMinRule.NAME, false, expressionEngine);\n    }\n\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount){\n        edges.forEach(e=>{\n            this.clearComputedValues(e);\n            this.cValue(e, 'probability', this.computedPayoff(e.childNode)>worstChildPayoff ? 0.0 : (1.0/worstCount));\n        });\n    }\n\n    //  payoff - parent edge payoff\n    computeOptimal(node, payoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        var optimalEdge = null;\n        if (node instanceof model.ChanceNode) {\n            optimalEdge = Utils.minBy(node.childEdges, e=>this.computedPayoff(e.childNode));\n        }\n\n        node.childEdges.forEach(e=> {\n            var isOptimal = false;\n            if (optimalEdge) {\n                isOptimal = this.computedPayoff(optimalEdge.childNode).equals(this.computedPayoff(e.childNode));\n            } else isOptimal = !!(this.subtract(this.computedPayoff(node), payoff).equals(this.computedPayoff(e.childNode)) || !(node instanceof model.DecisionNode));\n\n            if (isOptimal) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.basePayoff(e), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n\n}\n","import {domain as model} from \"sd-model\";\nimport {ObjectiveRule} from \"./objective-rule\";\nimport {Policy} from \"../../policies/policy\";\n\n\nexport class MultiCriteriaRule extends ObjectiveRule {\n\n    criterion1Weight = 1;\n    payoffCoeffs = [1, -1];\n\n    constructor(name, payoffCoeffs, expressionEngine) {\n        super(name, true, expressionEngine, true);\n        this.payoffCoeffs = payoffCoeffs;\n\n    }\n\n    setDefaultCriterion1Weight(criterion1Weight) {\n        this.criterion1Weight = criterion1Weight;\n    }\n\n    // payoff - parent edge payoff, aggregatedPayoff - aggregated payoff along path\n    computePayoff(node, payoff = [0, 0], aggregatedPayoff = [0, 0]) {\n        var childrenPayoff = [0, 0];\n        if (node.childEdges.length) {\n            if (node instanceof model.DecisionNode) {\n\n                var selectedIndexes = [];\n                var bestChild = -Infinity;\n\n                node.childEdges.forEach((e, i)=> {\n                    let basePayoffs = [this.basePayoff(e, 0), this.basePayoff(e, 1)];\n                    var childPayoff = this.computePayoff(e.childNode, basePayoffs, [this.add(basePayoffs[0], aggregatedPayoff[0]), this.add(basePayoffs[1], aggregatedPayoff[1])]);\n                    var childCombinedPayoff = this.cValue(e.childNode, 'combinedPayoff');\n                    if (childCombinedPayoff > bestChild) {\n                        bestChild = childCombinedPayoff;\n                        selectedIndexes = [i];\n                    } else if (bestChild.equals(childCombinedPayoff)) {\n                        selectedIndexes.push(i);\n                    }\n                });\n\n                if (this.decisionPolicy) {\n                    selectedIndexes = [];\n                    var decision = Policy.getDecision(this.decisionPolicy, node);\n                    if (decision) {\n                        selectedIndexes = [decision.decisionValue];\n                    }\n\n                }\n\n                node.childEdges.forEach((e, i)=> {\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', selectedIndexes.indexOf(i) < 0 ? 0.0 : 1.0);\n                });\n            } else {\n                node.childEdges.forEach(e=> {\n                    let basePayoffs = [this.basePayoff(e, 0), this.basePayoff(e, 1)];\n                    this.computePayoff(e.childNode, basePayoffs, [this.add(basePayoffs[0], aggregatedPayoff[0]), this.add(basePayoffs[1], aggregatedPayoff[1])]);\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', this.baseProbability(e));\n                });\n            }\n\n            var sumweight = 0;\n            node.childEdges.forEach(e=> {\n                sumweight = this.add(sumweight, this.cValue(e, 'probability'));\n            });\n\n            if (sumweight > 0) {\n                node.childEdges.forEach(e=> {\n                    childrenPayoff.forEach((p, i)=> {\n                        let ep = this.cValue(e.childNode, 'payoff[' + i + ']');\n                        childrenPayoff[i] = this.add(p, this.multiply(this.cValue(e, 'probability'), ep).div(sumweight))\n                    });\n                });\n            }\n\n\n        }\n        payoff.forEach((p, i)=> {\n            payoff[i] = this.add(p, childrenPayoff[i]);\n        });\n\n        this.clearComputedValues(node);\n\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'aggregatedPayoff', aggregatedPayoff);\n            this.cValue(node, 'probabilityToEnter', 0); //initial value\n        } else {\n            this.cValue(node, 'childrenPayoff', childrenPayoff);\n        }\n\n        this.cValue(node, 'combinedPayoff', this.computeCombinedPayoff(payoff));\n\n        return this.cValue(node, 'payoff', payoff);\n    }\n\n    computeCombinedPayoff(payoff){\n        // [criterion 1 coeff]*[criterion 1]*[weight]+[criterion 2 coeff]*[criterion 2]\n        if (this.criterion1Weight === Infinity) {\n            return this.multiply(this.payoffCoeffs[0], payoff[0]);\n        }\n        return this.add(this.multiply(this.payoffCoeffs[0], this.multiply(this.criterion1Weight, payoff[0])), this.multiply(this.payoffCoeffs[1], payoff[1]));\n    }\n\n    //  combinedPayoff - parent edge combinedPayoff\n    computeOptimal(node, combinedPayoff = 0, probabilityToEnter = 1) {\n        this.cValue(node, 'optimal', true);\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'probabilityToEnter', probabilityToEnter);\n        }\n\n        node.childEdges.forEach(e=> {\n            if (this.subtract(this.cValue(node, 'combinedPayoff'), combinedPayoff).equals(this.cValue(e.childNode, 'combinedPayoff')) || !(node instanceof model.DecisionNode)) {\n                this.cValue(e, 'optimal', true);\n                this.computeOptimal(e.childNode, this.computeCombinedPayoff([this.basePayoff(e, 0), this.basePayoff(e, 1)]), this.multiply(probabilityToEnter, this.cValue(e, 'probability')));\n            } else {\n                this.cValue(e, 'optimal', false);\n            }\n        })\n    }\n}\n","import {ExpressionEngine} from \"sd-expression-engine\";\nimport {domain as model} from \"sd-model\";\nimport {Policy} from \"../../policies/policy\";\n\n/*Base class for objective rules*/\nexport class ObjectiveRule {\n    name;\n    expressionEngine;\n\n    decisionPolicy;\n    maximization;\n\n    payoffIndex = 0;\n    multiCriteria = false;\n\n    constructor(name, maximization, expressionEngine, multiCriteria=false) {\n        this.name = name;\n        this.maximization = maximization;\n        this.expressionEngine = expressionEngine;\n        this.multiCriteria = multiCriteria;\n    }\n\n    setDecisionPolicy(decisionPolicy) {\n        this.decisionPolicy = decisionPolicy;\n    }\n\n    setPayoffIndex(payoffIndex) {\n        this.payoffIndex = payoffIndex;\n    }\n\n    clearDecisionPolicy() {\n        this.decisionPolicy = null;\n    }\n\n    // should return array of selected children indexes\n    makeDecision(decisionNode, childrenPayoffs) {\n        var best;\n        if (this.maximization) {\n            best = this.max(...childrenPayoffs);\n        } else {\n            best = this.min(...childrenPayoffs);\n        }\n        var selectedIndexes = [];\n        childrenPayoffs.forEach((p, i)=> {\n            if (ExpressionEngine.compare(best, p) == 0) {\n                selectedIndexes.push(i);\n            }\n        });\n        return selectedIndexes;\n    }\n\n    _makeDecision(decisionNode, childrenPayoffs) {\n        if (this.decisionPolicy) {\n            var decision = Policy.getDecision(this.decisionPolicy, decisionNode);\n            if (decision) {\n                return [decision.decisionValue];\n            }\n            return [];\n        }\n        return this.makeDecision(decisionNode, childrenPayoffs);\n    }\n\n    // extension point for changing computed probability of edges in a chance node\n    modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount) {\n\n    }\n\n    // payoff - parent edge payoff, aggregatedPayoff - aggregated payoff along path\n    computePayoff(node, payoff = 0, aggregatedPayoff = 0) {\n        var childrenPayoff = 0;\n        if (node.childEdges.length) {\n            if (node instanceof model.DecisionNode) {\n\n                var selectedIndexes = this._makeDecision(node, node.childEdges.map(e=>this.computePayoff(e.childNode, this.basePayoff(e), this.add(this.basePayoff(e), aggregatedPayoff))));\n                node.childEdges.forEach((e, i)=> {\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', selectedIndexes.indexOf(i) < 0 ? 0.0 : 1.0);\n                });\n\n            } else {\n                var bestChild = -Infinity;\n                var bestCount = 1;\n                var worstChild = Infinity;\n                var worstCount = 1;\n\n                node.childEdges.forEach(e=> {\n                    var childPayoff = this.computePayoff(e.childNode, this.basePayoff(e), this.add(this.basePayoff(e), aggregatedPayoff));\n                    if (childPayoff < worstChild) {\n                        worstChild = childPayoff;\n                        worstCount = 1;\n                    } else if (childPayoff.equals(worstChild)) {\n                        worstCount++\n                    }\n                    if (childPayoff > bestChild) {\n                        bestChild = childPayoff;\n                        bestCount = 1;\n                    } else if (childPayoff.equals(bestChild)) {\n                        bestCount++\n                    }\n\n                    this.clearComputedValues(e);\n                    this.cValue(e, 'probability', this.baseProbability(e));\n                });\n                this.modifyChanceProbability(node.childEdges, bestChild, bestCount, worstChild, worstCount);\n            }\n\n            var sumweight = 0;\n            node.childEdges.forEach(e=> {\n                sumweight = this.add(sumweight, this.cValue(e, 'probability'));\n            });\n\n            // console.log(payoff,node.childEdges,'sumweight',sumweight);\n            if (sumweight > 0) {\n                node.childEdges.forEach(e=> {\n                    childrenPayoff = this.add(childrenPayoff, this.multiply(this.cValue(e, 'probability'), this.computedPayoff(e.childNode)).div(sumweight));\n                });\n            }\n\n\n        }\n\n        payoff = this.add(payoff, childrenPayoff);\n        this.clearComputedValues(node);\n\n        if (node instanceof model.TerminalNode) {\n            this.cValue(node, 'aggregatedPayoff'+ '[' + this.payoffIndex + ']', aggregatedPayoff);\n            this.cValue(node, 'probabilityToEnter', 0); //initial value\n        } else {\n            this.cValue(node, 'childrenPayoff' + '[' + this.payoffIndex + ']', childrenPayoff);\n        }\n\n        return this.computedPayoff(node, payoff);\n    }\n\n    // koloruje optymalne ścieżki\n    computeOptimal(node) {\n        throw 'computeOptimal function not implemented for rule: ' + this.name\n    }\n\n    /* get or set computed payoff*/\n    computedPayoff(node, value){\n        return this.cValue(node, 'payoff[' + this.payoffIndex + ']', value)\n    }\n\n    /*Get or set object's computed value for current rule*/\n    cValue(object, fieldPath, value) {\n        // if(fieldPath.trim() === 'payoff'){\n        //     fieldPath += '[' + this.payoffIndex + ']';\n        // }\n\n        return object.computedValue(this.name, fieldPath, value);\n    }\n\n    baseProbability(edge) {\n        return edge.computedBaseProbability();\n    }\n\n    basePayoff(edge, payoffIndex) {\n        return edge.computedBasePayoff(undefined, payoffIndex || this.payoffIndex);\n    }\n\n    clearComputedValues(object) {\n        object.clearComputedValues(this.name);\n    }\n\n    add(a, b) {\n        return ExpressionEngine.add(a, b)\n    }\n\n    subtract(a, b) {\n        return ExpressionEngine.subtract(a, b)\n    }\n\n    divide(a, b) {\n        return ExpressionEngine.divide(a, b)\n    }\n\n    multiply(a, b) {\n        return ExpressionEngine.multiply(a, b)\n    }\n\n    max() {\n        return ExpressionEngine.max(...arguments)\n    }\n\n    min() {\n        return ExpressionEngine.min(...arguments)\n    }\n\n}\n","import {domain as model} from 'sd-model'\nimport {ExpressionEngine} from 'sd-expression-engine'\nimport {log} from 'sd-utils'\nimport {Operation} from \"./operation\";\nimport {TreeValidator} from \"../validation/tree-validator\";\n\n/*Subtree flipping operation*/\nexport class FlipSubtree extends Operation{\n\n    static $NAME = 'flipSubtree';\n    data;\n    expressionEngine;\n\n    constructor(data, expressionEngine) {\n        super(FlipSubtree.$NAME);\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.treeValidator = new TreeValidator(expressionEngine);\n    }\n\n    isApplicable(object){\n        return object instanceof model.ChanceNode\n    }\n\n    canPerform(node) {\n        if (!this.isApplicable(node)) {\n            return false;\n        }\n\n        if (!this.treeValidator.validate(this.data.getAllNodesInSubtree(node)).isValid()) { //check if the whole subtree is proper\n            return false;\n        }\n\n        if (node.childEdges.length < 1) {\n            return false;\n        }\n\n\n        var grandchildrenNumber = null;\n        var grandchildrenEdgeLabels = [];\n        var childrenEdgeLabelsSet = new Set();\n        var grandchildrenEdgeLabelsSet;\n        if (!node.childEdges.every(e=> {\n\n                var child = e.childNode;\n                if (!(child instanceof model.ChanceNode)) {\n                    return false;\n                }\n\n                if (childrenEdgeLabelsSet.has(e.name.trim())) { // edge labels should be unique\n                    return false;\n                }\n                childrenEdgeLabelsSet.add(e.name.trim());\n\n                if (grandchildrenNumber === null) {\n                    grandchildrenNumber = child.childEdges.length;\n                    if (grandchildrenNumber < 1) {\n                        return false;\n                    }\n                    child.childEdges.forEach(ge=> {\n                        grandchildrenEdgeLabels.push(ge.name.trim());\n                    });\n\n                    grandchildrenEdgeLabelsSet = new Set(grandchildrenEdgeLabels);\n\n                    if (grandchildrenEdgeLabelsSet.size !== grandchildrenEdgeLabels.length) { //grandchildren edge labels should be unique\n                        return false;\n                    }\n\n                    return true;\n                }\n\n                if (child.childEdges.length != grandchildrenNumber) {\n                    return false;\n                }\n\n                if (!child.childEdges.every((ge, i)=>grandchildrenEdgeLabels[i] === ge.name.trim())) {\n                    return false;\n                }\n\n                return true;\n\n            })) {\n\n            return false;\n        }\n\n        return true;\n    }\n\n    perform(root) {\n\n        var rootClone = this.data.cloneSubtree(root, true);\n        var oldChildrenNumber = root.childEdges.length;\n        var oldGrandChildrenNumber = root.childEdges[0].childNode.childEdges.length;\n\n        var childrenNumber = oldGrandChildrenNumber;\n        var grandChildrenNumber = oldChildrenNumber;\n\n        var callbacksDisabled = this.data.callbacksDisabled;\n        this.data.callbacksDisabled = true;\n\n\n        var childX = root.childEdges[0].childNode.location.x;\n        var topY = root.childEdges[0].childNode.childEdges[0].childNode.location.y;\n        var bottomY = root.childEdges[oldChildrenNumber - 1].childNode.childEdges[oldGrandChildrenNumber - 1].childNode.location.y;\n\n        var extentY = bottomY - topY;\n        var stepY = extentY / (childrenNumber + 1);\n\n        root.childEdges.slice().forEach(e=> this.data.removeNode(e.childNode));\n\n\n        for (var i = 0; i < childrenNumber; i++) {\n            var child = new model.ChanceNode(new model.Point(childX, topY + (i + 1) * stepY));\n            var edge = this.data.addNode(child, root);\n            edge.name = rootClone.childEdges[0].childNode.childEdges[i].name;\n\n            edge.probability = 0;\n\n            for (var j = 0; j < grandChildrenNumber; j++) {\n                var grandChild = rootClone.childEdges[j].childNode.childEdges[i].childNode;\n\n\n                var grandChildEdge = this.data.attachSubtree(grandChild, child);\n                grandChildEdge.name = rootClone.childEdges[j].name;\n                grandChildEdge.payoff = [\n                    ExpressionEngine.add(rootClone.childEdges[j].computedBasePayoff(undefined, 0), rootClone.childEdges[j].childNode.childEdges[i].computedBasePayoff(undefined, 0)),\n                    ExpressionEngine.add(rootClone.childEdges[j].computedBasePayoff(undefined, 1), rootClone.childEdges[j].childNode.childEdges[i].computedBasePayoff(undefined, 1)),\n                ];\n\n                grandChildEdge.probability = ExpressionEngine.multiply(rootClone.childEdges[j].computedBaseProbability(), rootClone.childEdges[j].childNode.childEdges[i].computedBaseProbability());\n                edge.probability = ExpressionEngine.add(edge.probability, grandChildEdge.probability);\n            }\n\n            var divideGrandChildEdgeProbability = p => ExpressionEngine.divide(p, edge.probability);\n            if (edge.probability.equals(0)) {\n                var prob = ExpressionEngine.divide(1, grandChildrenNumber);\n                divideGrandChildEdgeProbability = p => prob;\n            }\n\n            var probabilitySum = 0.0;\n            child.childEdges.forEach(grandChildEdge=> {\n                grandChildEdge.probability = divideGrandChildEdgeProbability(grandChildEdge.probability);\n                probabilitySum = ExpressionEngine.add(probabilitySum, grandChildEdge.probability);\n                grandChildEdge.probability = this.expressionEngine.serialize(grandChildEdge.probability)\n            });\n\n            this._normalizeProbabilitiesAfterFlip(child.childEdges, probabilitySum);\n            edge.probability = this.expressionEngine.serialize(edge.probability)\n        }\n        this._normalizeProbabilitiesAfterFlip(root.childEdges);\n\n\n        this.data.callbacksDisabled = callbacksDisabled;\n        this.data._fireNodeAddedCallback();\n    }\n\n    _normalizeProbabilitiesAfterFlip(childEdges, probabilitySum){\n        if(!probabilitySum){\n            probabilitySum = 0.0;\n            childEdges.forEach(e=> {\n                probabilitySum = ExpressionEngine.add(probabilitySum, e.probability);\n            });\n        }\n        if (!probabilitySum.equals(1)) {\n            log.info('Sum of the probabilities in child nodes is not equal to 1 : ', probabilitySum);\n            var newProbabilitySum = 0.0;\n            var cf = 1000000000000; //10^12\n            var prec = 12;\n            childEdges.forEach(e=> {\n                e.probability = parseInt(ExpressionEngine.round(e.probability, prec) * cf);\n                newProbabilitySum = newProbabilitySum + e.probability;\n            });\n            var rest = cf - newProbabilitySum;\n            log.info('Normalizing with rounding to precision: ' + prec, rest);\n            childEdges[0].probability = ExpressionEngine.add(rest, childEdges[0].probability);\n            newProbabilitySum = 0.0;\n            childEdges.forEach(e=> {\n                e.probability = this.expressionEngine.serialize(ExpressionEngine.divide(parseInt(e.probability), cf))\n            })\n        }\n    }\n}\n","\n\n\n/*Base class for complex operations executing a job*/\nimport {Operation} from \"./operation\";\n\nexport class JobExecutingOperation extends Operation{\n\n\n    jobName; //Job name if this operation executes a job\n\n    constructor(name, jobName = null){\n        super(name);\n\n        this.name = name;\n        this.jobName = jobName;\n    }\n\n\n    //check if can perform operation for applicable object\n    canPerform(object, params){\n\n        throw 'canPerform function not implemented for operation: '+this.name\n    }\n\n    //Performed in job by operations manager\n    perform(object, params, ){\n\n    }\n\n\n    postProcess(object, params){\n\n    }\n\n\n}\n","\n\n\n/*Base class for complex operations on tree structure*/\nexport class Operation{\n\n    name;\n\n    constructor(name){\n        this.name = name;\n    }\n\n    //check if operation is potentially applicable for object\n    isApplicable(object){\n        throw 'isApplicable function not implemented for operation: '+this.name\n    }\n\n    //check if can perform operation for applicable object\n    canPerform(object){\n        throw 'canPerform function not implemented for operation: '+this.name\n    }\n\n    perform(object, params){\n        throw 'perform function not implemented for operation: '+this.name\n    }\n\n\n}\n","import {FlipSubtree} from \"./flip-subtree\";\nimport {PayoffsTransformation} from \"./payoffs-transformation.js\";\n\n\nexport class OperationsManager {\n\n    operations = [];\n    operationByName = {};\n\n    constructor(data, expressionEngine, jobsManger){\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.jobsManger = jobsManger;\n        this.registerOperation(new FlipSubtree(data, expressionEngine));\n        this.registerOperation(new PayoffsTransformation(data, expressionEngine));\n    }\n\n    registerOperation(operation){\n        this.operations.push(operation);\n        this.operationByName[operation.name] = operation;\n    }\n\n\n    getOperationByName(name){\n        return this.operationByName[name];\n    }\n\n    operationsForObject(object){\n        return this.operations.filter(op=>op.isApplicable(object))\n    }\n\n    setData(data){\n        this.data = data;\n        this.operations.forEach(o => o.data = data)\n    }\n\n    performOperation(object, operationName, jobParamsValues){\n\n        let operation = this.getOperationByName(operationName);\n\n        if(!operation.jobName){\n            return Promise.resolve(operation.perform(object, jobParamsValues))\n        }\n\n        jobParamsValues['objectId'] = object.id;\n\n        return this.jobsManger.run(operation.jobName, jobParamsValues, this.data, false).then((jobExecution)=> {\n\n            const d = jobExecution.getData();\n            this.data.nodes = d.nodes;\n            this.data.edges = d.edges;\n            this.data.code = d.code;\n\n            operation.postProcess(object, jobParamsValues);\n\n            return true;\n        })\n    }\n}\n","import {domain as model} from 'sd-model'\nimport {TreeValidator} from \"../validation/tree-validator\";\nimport {JobExecutingOperation} from \"./job-executing-operation\";\nimport {PayoffsTransformationJob} from \"../jobs/configurations/payoffs-transformation/payoffs-transformation-job\";\n\n\nexport class PayoffsTransformation extends JobExecutingOperation {\n\n    static $NAME = 'payoffsTransformation';\n\n    data;\n    expressionEngine;\n\n    constructor(data, expressionEngine) {\n        super(PayoffsTransformation.$NAME, PayoffsTransformationJob.$NAME);\n        this.data = data;\n        this.expressionEngine = expressionEngine;\n        this.treeValidator = new TreeValidator(expressionEngine);\n    }\n\n    isApplicable(object){\n        return object instanceof model.ChanceNode || object instanceof model.DecisionNode\n    }\n\n    canPerform(node) {\n        if (!this.isApplicable(node)) {\n            return false;\n        }\n\n        if (!this.treeValidator.validate(this.data.getAllNodesInSubtree(node)).isValid()) { //check if the whole subtree is proper\n            return false;\n        }\n\n        return !node.$parent && node.childEdges.length > 0;\n    }\n\n}\n","\nexport class Decision{\n    node;\n    decisionValue; //index of  selected edge\n    children = [];\n    key;\n\n    constructor(node, decisionValue) {\n        this.node = node;\n        this.decisionValue = decisionValue;\n        this.key = Decision.generateKey(this);\n    }\n\n    static generateKey(decision, keyProperty='id'){\n        var e = decision.node.childEdges[decision.decisionValue];\n        var key = decision.node[keyProperty]+\":\"+(e[keyProperty]? e[keyProperty] : decision.decisionValue+1);\n        return key.replace(/\\n/g, ' ');\n    }\n\n    addDecision(node, decisionValue){\n        var decision = new Decision(node, decisionValue);\n        this.children.push(decision);\n        this.key = Decision.generateKey(this);\n        return decision;\n    }\n\n    getDecision(decisionNode){\n        return Decision.getDecision(this, decisionNode)\n    }\n\n    static getDecision(decision, decisionNode){\n        if(decision.node===decisionNode || decision.node.id === decisionNode.id){\n            return decision;\n        }\n        for(var i=0; i<decision.children.length; i++){\n            var d = Decision.getDecision(decision.children[i], decisionNode);\n            if(d){\n                return d;\n            }\n        }\n    }\n\n    static toDecisionString(decision, extended=false, keyProperty='name', indent = ''){\n\n        var res = Decision.generateKey(decision, keyProperty);\n        var childrenRes = \"\";\n\n        decision.children.forEach(d=>{\n            if(childrenRes){\n                if(extended){\n                    childrenRes += '\\n'+indent;\n                }else{\n                    childrenRes += \", \"\n                }\n\n            }\n            childrenRes += Decision.toDecisionString(d,extended,keyProperty, indent+'\\t')\n        });\n        if(decision.children.length){\n            if(extended){\n                childrenRes =  '\\n'+indent +childrenRes;\n            }else{\n                childrenRes = \" - (\" + childrenRes + \")\";\n            }\n\n\n\n        }\n\n        return res+childrenRes;\n    }\n\n    toDecisionString(indent=false){\n        return Decision.toDecisionString(this, indent)\n    }\n}\n","import {Policy} from \"./policy\";\nimport {domain as model} from 'sd-model'\nimport {Utils} from 'sd-utils'\nimport {Decision} from \"./decision\";\n\nexport class PoliciesCollector{\n    policies = [];\n    ruleName=false;\n\n    constructor(root, optimalForRuleName){\n        this.ruleName = optimalForRuleName;\n        this.collect(root).forEach((decisions,i)=>{\n            this.policies.push(new Policy(\"#\"+(i+1), decisions));\n        });\n        if(this.policies.length===1){\n            this.policies[0].id = \"default\"\n        }\n    }\n\n    collect(root){\n        var nodeQueue = [root];\n        var node;\n        var decisionNodes = [];\n        while(nodeQueue.length){\n            node = nodeQueue.shift();\n\n            if(this.ruleName && !node.computedValue(this.ruleName, 'optimal')){\n                continue;\n            }\n\n            if(node instanceof model.DecisionNode){\n                decisionNodes.push(node);\n                continue;\n            }\n\n            node.childEdges.forEach((edge, i)=>{\n                nodeQueue.push(edge.childNode)\n            })\n        }\n\n        return Utils.cartesianProductOf(decisionNodes.map((decisionNode)=>{\n            var decisions= [];\n            decisionNode.childEdges.forEach((edge, i)=>{\n\n                if(this.ruleName && !edge.computedValue(this.ruleName, 'optimal')){\n                    return;\n                }\n\n                var childDecisions = this.collect(edge.childNode); //all possible child decisions (cartesian)\n                childDecisions.forEach(cd=>{\n                    var decision = new Decision(decisionNode, i);\n                    decisions.push(decision);\n                    decision.children = cd;\n                })\n\n            });\n            return decisions;\n        }));\n    }\n\n}\n","import {Decision} from \"./decision\";\n\nexport class Policy{\n    id;\n    decisions = [];\n\n    constructor(id, decisions){\n        this.id = id;\n        this.decisions = decisions || [];\n        this.key = Policy.generateKey(this);\n    }\n\n    addDecision(node, decisionValue){\n        var decision = new Decision(node, decisionValue);\n        this.decisions .push(decision);\n        this.key = Policy.generateKey(this);\n        return decision;\n    }\n\n    static generateKey(policy){\n        var key = \"\";\n        policy.decisions.forEach(d=>key+=(key? \"&\": \"\")+d.key);\n        return key;\n    }\n\n    equals(policy, ignoreId=true){\n        if(this.key != policy.key){\n            return false;\n        }\n\n        return ignoreId || this.id === policy.id;\n    }\n\n    getDecision(decisionNode){\n        return Policy.getDecision(this, decisionNode);\n    }\n\n    static getDecision(policy, decisionNode){\n        for(var i=0; i<policy.decisions.length; i++){\n            var decision = Decision.getDecision(policy.decisions[i], decisionNode);\n            if(decision){\n                return decision;\n            }\n        }\n        return null;\n    }\n\n    static toPolicyString(policy, extended=false, prependId=false){\n\n        var res = \"\";\n        policy.decisions.forEach(d=>{\n            if(res){\n                if(extended){\n                    res += \"\\n\"\n                }else{\n                    res += \", \"\n                }\n\n\n            }\n            res += Decision.toDecisionString(d, extended, 'name', '\\t');\n        });\n        if(prependId && policy.id!==undefined){\n            return policy.id+\" \"+res;\n        }\n        return res;\n    }\n\n\n    toPolicyString(indent=false){\n        return Policy.toPolicyString(this, indent)\n    }\n\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n\nexport class McdmWeightValueValidator{\n\n    additionalValidator = null;\n\n    constructor(additionalValidator){\n        this.additionalValidator = additionalValidator;\n    }\n\n    validate(value){\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        let parsed = parseFloat(value);\n        if(parsed !== Infinity && !ExpressionEngine.validate(value, {}, false)){\n            return false\n        }\n\n        value = ExpressionEngine.toNumber(value);\n        var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991; // Number.MAX_SAFE_INTEGER is undefined in IE\n        if(ExpressionEngine.compare(value, 0) < 0 || (value !== Infinity && ExpressionEngine.compare(value, maxSafeInteger)> 0)){\n            return false;\n        }\n\n        if(this.additionalValidator) {\n            return this.additionalValidator(ExpressionEngine.toNumber(value))\n        }\n\n        return true;\n    }\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n/*Computed base value validator*/\nexport class PayoffValueValidator{\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine=expressionEngine;\n    }\n\n    validate(value){\n\n\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        value = ExpressionEngine.toNumber(value);\n        var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991; // Number.MAX_SAFE_INTEGER in undefined in IE\n        return ExpressionEngine.compare(value, -maxSafeInteger) >= 0 && ExpressionEngine.compare(value, maxSafeInteger) <= 0;\n    }\n\n}\n","import {ExpressionEngine} from 'sd-expression-engine'\nimport {Utils} from \"sd-utils\";\n\n/*Computed base value validator*/\nexport class ProbabilityValueValidator{\n    expressionEngine;\n    constructor(expressionEngine){\n        this.expressionEngine=expressionEngine;\n    }\n\n    validate(value, edge){\n        if(value===null || value === undefined){\n            return false;\n        }\n\n        var value = ExpressionEngine.toNumber(value);\n        return value.compare(0) >= 0 && value.compare(1) <= 0;\n    }\n\n}\n","import {domain as model, ValidationResult} from \"sd-model\";\nimport {ExpressionEngine} from \"sd-expression-engine\";\nimport {ProbabilityValueValidator} from \"./probability-value-validator\";\nimport {PayoffValueValidator} from \"./payoff-value-validator\";\n\nexport class TreeValidator {\n\n    expressionEngine;\n\n    constructor(expressionEngine) {\n        this.expressionEngine = expressionEngine;\n        this.probabilityValueValidator = new ProbabilityValueValidator(expressionEngine);\n        this.payoffValueValidator = new PayoffValueValidator(expressionEngine);\n    }\n\n    validate(nodes) {\n\n        var validationResult = new ValidationResult();\n\n        nodes.forEach(n=> {\n            this.validateNode(n, validationResult);\n        });\n\n        return validationResult;\n    }\n\n    validateNode(node, validationResult = new ValidationResult()) {\n\n        if (node instanceof model.TerminalNode) {\n            return;\n        }\n        if (!node.childEdges.length) {\n            validationResult.addError('incompletePath', node)\n        }\n\n        var probabilitySum = ExpressionEngine.toNumber(0);\n        var withHash = false;\n        node.childEdges.forEach((e, i)=> {\n            e.setValueValidity('probability', true);\n\n            if (node instanceof model.ChanceNode) {\n                var probability = e.computedBaseProbability();\n                if (!this.probabilityValueValidator.validate(probability)) {\n                    if (!ExpressionEngine.isHash(e.probability)) {\n                        validationResult.addError({name: 'invalidProbability', data: {'number': i + 1}}, node);\n                        e.setValueValidity('probability', false);\n                    }\n\n                } else {\n                    probabilitySum = ExpressionEngine.add(probabilitySum, probability);\n                }\n            }\n\n            e.payoff.forEach((rawPayoff, payoffIndex)=> {\n                var path = 'payoff[' + payoffIndex + ']';\n                e.setValueValidity(path, true);\n                var payoff = e.computedBasePayoff(undefined, payoffIndex);\n                if (!this.payoffValueValidator.validate(payoff)) {\n                    validationResult.addError({name: 'invalidPayoff', data: {'number': i + 1}}, node);\n                    e.setValueValidity(path, false);\n                }\n            })\n\n\n        });\n        if (node instanceof model.ChanceNode) {\n            if (isNaN(probabilitySum) || !probabilitySum.equals(1)) {\n                validationResult.addError('probabilityDoNotSumUpTo1', node);\n            }\n        }\n\n\n        return validationResult;\n    }\n}\n","export * from './src/index'\n"]}