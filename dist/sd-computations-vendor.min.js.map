{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/build/cjs/wrap-idb-value.js","index.js"],"names":["require","r","e","n","t","o","i","f","c","u","a","Error","code","p","exports","call","length","1","module","idbProxyableTypes","cursorAdvanceMethods","instanceOfAny","object","constructors","some","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","get","target","prop","receiver","IDBTransaction","objectStoreNames","undefined","objectStore","wrap","set","value","has","wrapFunction","func","IDBDatabase","prototype","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","_len2","arguments","args","Array","_key2","apply","unwrap","this","_len3","_key3","storeNames","_len","_key","tx","concat","sort","transformCachableValue","done","Promise","resolve","reject","unlisten","removeEventListener","complete","error","DOMException","addEventListener","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","Proxy","IDBRequest","request","promise","success","result","then","catch","newValue","replaceTraps","callback","Object","defineProperty","wrapIdbValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","_ref3","regeneratorRuntime","mark","_callee","storeName","_target","_args","_context","prev","next","store","index","shift","all","abrupt","sent","stop","_x","oldTraps","_objectSpread","deleteDB","name","blocked","indexedDB","deleteDatabase","openDB","version","_ref","upgrade","blocking","terminated","open","openPromise","event","oldVersion","newVersion","db"],"mappings":"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","file":"sd-computations-vendor.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\nconst instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexports.instanceOfAny = instanceOfAny;\nexports.replaceTraps = replaceTraps;\nexports.reverseTransformCache = reverseTransformCache;\nexports.unwrap = unwrap;\nexports.wrap = wrap;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar wrapIdbValue = require('./wrap-idb-value.js');\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrapIdbValue.wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrapIdbValue.wrap(request.result), event.oldVersion, event.newVersion, wrapIdbValue.wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrapIdbValue.wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nwrapIdbValue.replaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexports.unwrap = wrapIdbValue.unwrap;\nexports.wrap = wrapIdbValue.wrap;\nexports.deleteDB = deleteDB;\nexports.openDB = openDB;\n"]}