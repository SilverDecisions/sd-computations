require=(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var wrapIdbValue = require('./wrap-idb-value.js');
/**
 * Open a database.
 *
 * @param name Name of the database.
 * @param version Schema version.
 * @param callbacks Additional callbacks.
 */


function openDB(name, version) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      blocked = _ref.blocked,
      upgrade = _ref.upgrade,
      blocking = _ref.blocking,
      terminated = _ref.terminated;

  var request = indexedDB.open(name, version);
  var openPromise = wrapIdbValue.wrap(request);

  if (upgrade) {
    request.addEventListener('upgradeneeded', function (event) {
      upgrade(wrapIdbValue.wrap(request.result), event.oldVersion, event.newVersion, wrapIdbValue.wrap(request.transaction));
    });
  }

  if (blocked) request.addEventListener('blocked', function () {
    return blocked();
  });
  openPromise.then(function (db) {
    if (terminated) db.addEventListener('close', function () {
      return terminated();
    });
    if (blocking) db.addEventListener('versionchange', function () {
      return blocking();
    });
  }).catch(function () {});
  return openPromise;
}
/**
 * Delete a database.
 *
 * @param name Name of the database.
 */


function deleteDB(name) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      blocked = _ref2.blocked;

  var request = indexedDB.deleteDatabase(name);
  if (blocked) request.addEventListener('blocked', function () {
    return blocked();
  });
  return wrapIdbValue.wrap(request).then(function () {
    return undefined;
  });
}

var readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
var writeMethods = ['put', 'add', 'delete', 'clear'];
var cachedMethods = new Map();

function getMethod(target, prop) {
  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === 'string')) {
    return;
  }

  if (cachedMethods.get(prop)) return cachedMethods.get(prop);
  var targetFuncName = prop.replace(/FromIndex$/, '');
  var useIndex = prop !== targetFuncName;
  var isWrite = writeMethods.includes(targetFuncName);

  if ( // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
  !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))) {
    return;
  }

  var method = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(storeName) {
      var _target;

      var tx,
          target,
          _len,
          args,
          _key,
          _args = arguments;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
              tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
              target = tx.store;

              for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = _args[_key];
              }

              if (useIndex) target = target.index(args.shift()); // Must reject if op rejects.
              // If it's a write operation, must reject if tx.done rejects.
              // Must reject with op rejection first.
              // Must resolve with op value.
              // Must handle both promises (no unhandled rejections)

              _context.next = 6;
              return Promise.all([(_target = target)[targetFuncName].apply(_target, args), isWrite && tx.done]);

            case 6:
              return _context.abrupt("return", _context.sent[0]);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function method(_x) {
      return _ref3.apply(this, arguments);
    };
  }();

  cachedMethods.set(prop, method);
  return method;
}

wrapIdbValue.replaceTraps(function (oldTraps) {
  return _objectSpread(_objectSpread({}, oldTraps), {}, {
    get: function get(target, prop, receiver) {
      return getMethod(target, prop) || oldTraps.get(target, prop, receiver);
    },
    has: function has(target, prop) {
      return !!getMethod(target, prop) || oldTraps.has(target, prop);
    }
  });
});
exports.unwrap = wrapIdbValue.unwrap;
exports.wrap = wrapIdbValue.wrap;
exports.deleteDB = deleteDB;
exports.openDB = openDB;

},{"./wrap-idb-value.js":2}],2:[function(require,module,exports){
'use strict';

var instanceOfAny = function instanceOfAny(object, constructors) {
  return constructors.some(function (c) {
    return object instanceof c;
  });
};

var idbProxyableTypes;
var cursorAdvanceMethods; // This is a function to prevent it throwing up in node environments.

function getIdbProxyableTypes() {
  return idbProxyableTypes || (idbProxyableTypes = [IDBDatabase, IDBObjectStore, IDBIndex, IDBCursor, IDBTransaction]);
} // This is a function to prevent it throwing up in node environments.


function getCursorAdvanceMethods() {
  return cursorAdvanceMethods || (cursorAdvanceMethods = [IDBCursor.prototype.advance, IDBCursor.prototype.continue, IDBCursor.prototype.continuePrimaryKey]);
}

var cursorRequestMap = new WeakMap();
var transactionDoneMap = new WeakMap();
var transactionStoreNamesMap = new WeakMap();
var transformCache = new WeakMap();
var reverseTransformCache = new WeakMap();

function promisifyRequest(request) {
  var promise = new Promise(function (resolve, reject) {
    var unlisten = function unlisten() {
      request.removeEventListener('success', success);
      request.removeEventListener('error', error);
    };

    var success = function success() {
      resolve(wrap(request.result));
      unlisten();
    };

    var error = function error() {
      reject(request.error);
      unlisten();
    };

    request.addEventListener('success', success);
    request.addEventListener('error', error);
  });
  promise.then(function (value) {
    // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
    // (see wrapFunction).
    if (value instanceof IDBCursor) {
      cursorRequestMap.set(value, request);
    } // Catching to avoid "Uncaught Promise exceptions"

  }).catch(function () {}); // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
  // is because we create many promises from a single IDBRequest.

  reverseTransformCache.set(promise, request);
  return promise;
}

function cacheDonePromiseForTransaction(tx) {
  // Early bail if we've already created a done promise for this transaction.
  if (transactionDoneMap.has(tx)) return;
  var done = new Promise(function (resolve, reject) {
    var unlisten = function unlisten() {
      tx.removeEventListener('complete', complete);
      tx.removeEventListener('error', error);
      tx.removeEventListener('abort', error);
    };

    var complete = function complete() {
      resolve();
      unlisten();
    };

    var error = function error() {
      reject(tx.error || new DOMException('AbortError', 'AbortError'));
      unlisten();
    };

    tx.addEventListener('complete', complete);
    tx.addEventListener('error', error);
    tx.addEventListener('abort', error);
  }); // Cache it for later retrieval.

  transactionDoneMap.set(tx, done);
}

var idbProxyTraps = {
  get: function get(target, prop, receiver) {
    if (target instanceof IDBTransaction) {
      // Special handling for transaction.done.
      if (prop === 'done') return transactionDoneMap.get(target); // Polyfill for objectStoreNames because of Edge.

      if (prop === 'objectStoreNames') {
        return target.objectStoreNames || transactionStoreNamesMap.get(target);
      } // Make tx.store return the only store in the transaction, or undefined if there are many.


      if (prop === 'store') {
        return receiver.objectStoreNames[1] ? undefined : receiver.objectStore(receiver.objectStoreNames[0]);
      }
    } // Else transform whatever we get back.


    return wrap(target[prop]);
  },
  set: function set(target, prop, value) {
    target[prop] = value;
    return true;
  },
  has: function has(target, prop) {
    if (target instanceof IDBTransaction && (prop === 'done' || prop === 'store')) {
      return true;
    }

    return prop in target;
  }
};

function replaceTraps(callback) {
  idbProxyTraps = callback(idbProxyTraps);
}

function wrapFunction(func) {
  // Due to expected object equality (which is enforced by the caching in `wrap`), we
  // only create one new func per func.
  // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
  if (func === IDBDatabase.prototype.transaction && !('objectStoreNames' in IDBTransaction.prototype)) {
    return function (storeNames) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var tx = func.call.apply(func, [unwrap(this), storeNames].concat(args));
      transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
      return wrap(tx);
    };
  } // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
  // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
  // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
  // with real promises, so each advance methods returns a new promise for the cursor object, or
  // undefined if the end of the cursor has been reached.


  if (getCursorAdvanceMethods().includes(func)) {
    return function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
      // the original object.
      func.apply(unwrap(this), args);
      return wrap(cursorRequestMap.get(this));
    };
  }

  return function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
    // the original object.
    return wrap(func.apply(unwrap(this), args));
  };
}

function transformCachableValue(value) {
  if (typeof value === 'function') return wrapFunction(value); // This doesn't return, it just creates a 'done' promise for the transaction,
  // which is later returned for transaction.done (see idbObjectHandler).

  if (value instanceof IDBTransaction) cacheDonePromiseForTransaction(value);
  if (instanceOfAny(value, getIdbProxyableTypes())) return new Proxy(value, idbProxyTraps); // Return the same value back if we're not going to transform it.

  return value;
}

function wrap(value) {
  // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
  // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
  if (value instanceof IDBRequest) return promisifyRequest(value); // If we've already transformed this value before, reuse the transformed value.
  // This is faster, but it also provides object equality.

  if (transformCache.has(value)) return transformCache.get(value);
  var newValue = transformCachableValue(value); // Not all types are transformed.
  // These may be primitive types, so they can't be WeakMap keys.

  if (newValue !== value) {
    transformCache.set(value, newValue);
    reverseTransformCache.set(newValue, value);
  }

  return newValue;
}

var unwrap = function unwrap(value) {
  return reverseTransformCache.get(value);
};

exports.instanceOfAny = instanceOfAny;
exports.replaceTraps = replaceTraps;
exports.reverseTransformCache = reverseTransformCache;
exports.unwrap = unwrap;
exports.wrap = wrap;

},{}],3:[function(require,module,exports){
(function (global){(function (){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComputationsEngine = exports.ComputationsEngineConfig = void 0;

var _sdUtils = require("sd-utils");

var _sdModel = require("sd-model");

var _computationsManager = require("./computations-manager");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var ComputationsEngineConfig = /*#__PURE__*/function (_ComputationsManagerC) {
  _inherits(ComputationsEngineConfig, _ComputationsManagerC);

  var _super = _createSuper(ComputationsEngineConfig);

  function ComputationsEngineConfig(custom) {
    var _this;

    _classCallCheck(this, ComputationsEngineConfig);

    _this = _super.call(this);
    _this.logLevel = 'warn';

    if (custom) {
      _sdUtils.Utils.deepExtend(_assertThisInitialized(_this), custom);
    }

    return _this;
  }

  return ComputationsEngineConfig;
}(_computationsManager.ComputationsManagerConfig);
/**
 * Entry point class for standalone computation workers
 */


exports.ComputationsEngineConfig = ComputationsEngineConfig;

var ComputationsEngine = /*#__PURE__*/function (_ComputationsManager) {
  _inherits(ComputationsEngine, _ComputationsManager);

  var _super2 = _createSuper(ComputationsEngine);

  function ComputationsEngine(config, data) {
    var _this2;

    _classCallCheck(this, ComputationsEngine);

    _this2 = _super2.call(this, config, data);
    _this2.global = _sdUtils.Utils.getGlobalObject();
    _this2.isWorker = _sdUtils.Utils.isWorker();

    if (_this2.isWorker) {
      _this2.jobsManger.registerJobExecutionListener({
        beforeJob: function beforeJob(jobExecution) {
          _this2.reply('beforeJob', jobExecution.getDTO());
        },
        afterJob: function afterJob(jobExecution) {
          _this2.reply('afterJob', jobExecution.getDTO());
        }
      });

      var instance = _assertThisInitialized(_this2);

      _this2.queryableFunctions = {
        runJob: function runJob(jobName, jobParametersValues, dataDTO) {
          // console.log(jobName, jobParameters, serializedData);
          var data = new _sdModel.DataModel(dataDTO);
          instance.runJob(jobName, jobParametersValues, data);
        },
        executeJob: function executeJob(jobExecutionId) {
          instance.jobsManger.execute(jobExecutionId).catch(function (e) {
            instance.reply('jobFatalError', jobExecutionId, _sdUtils.Utils.getErrorDTO(e));
          });
        },
        recompute: function recompute(dataDTO, ruleName, evalCode, evalNumeric) {
          if (ruleName) {
            instance.objectiveRulesManager.setCurrentRuleByName(ruleName);
          }

          var allRules = !ruleName;
          var data = new _sdModel.DataModel(dataDTO);

          instance._checkValidityAndRecomputeObjective(data, allRules, evalCode, evalNumeric);

          this.reply('recomputed', data.getDTO());
        }
      };

      global.onmessage = function (oEvent) {
        if (oEvent.data instanceof Object && oEvent.data.hasOwnProperty('queryMethod') && oEvent.data.hasOwnProperty('queryArguments')) {
          instance.queryableFunctions[oEvent.data.queryMethod].apply(self, oEvent.data.queryArguments);
        } else {
          instance.defaultReply(oEvent.data);
        }
      };
    }

    return _this2;
  }

  _createClass(ComputationsEngine, [{
    key: "setConfig",
    value: function setConfig(config) {
      _get(_getPrototypeOf(ComputationsEngine.prototype), "setConfig", this).call(this, config);

      if (this.config.logLevel) {
        this.setLogLevel(this.config.logLevel);
      }

      return this;
    }
  }, {
    key: "setLogLevel",
    value: function setLogLevel(level) {
      _sdUtils.log.setLevel(level);
    }
  }, {
    key: "defaultReply",
    value: function defaultReply(message) {
      this.reply('test', message);
    }
  }, {
    key: "reply",
    value: function reply() {
      if (arguments.length < 1) {
        throw new TypeError('reply - not enough arguments');
      }

      this.global.postMessage({
        'queryMethodListener': arguments[0],
        'queryMethodArguments': Array.prototype.slice.call(arguments, 1)
      });
    }
  }]);

  return ComputationsEngine;
}(_computationsManager.ComputationsManager);

exports.ComputationsEngine = ComputationsEngine;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./computations-manager":4,"sd-model":"sd-model","sd-utils":"sd-utils"}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComputationsManager = exports.ComputationsManagerConfig = void 0;

var _sdExpressionEngine = require("sd-expression-engine");

var _sdUtils = require("sd-utils");

var _objectiveRulesManager = require("./objective/objective-rules-manager");

var _treeValidator = require("./validation/tree-validator");

var _operationsManager = require("./operations/operations-manager");

var _jobsManager = require("./jobs/jobs-manager");

var _expressionsEvaluator = require("./expressions-evaluator");

var _jobInstanceManager = require("./jobs/job-instance-manager");

var _sdModel = require("sd-model");

var _policy = require("./policies/policy");

var _mcdmWeightValueValidator = require("./validation/mcdm-weight-value-validator");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
/** Computation manager configuration object
 * @param custom configuration object to extend
 */


var ComputationsManagerConfig =
/**
 * logging level
 * */

/**
 * default objective rule name
 * */

/**
 * worker configuration object
 * */

/**
 * job repository to use, available types: idb, timeout, simple
* */

/**
 * clear repository after init
 * */
function ComputationsManagerConfig(custom) {
  _classCallCheck(this, ComputationsManagerConfig);

  this.logLevel = null;
  this.ruleName = null;
  this.worker = {
    /**
     * delegate tree recomputation to worker
     * */
    delegateRecomputation: false,

    /**
     * worker url
     * */
    url: null
  };
  this.jobRepositoryType = 'idb';
  this.clearRepository = false;

  if (custom) {
    _sdUtils.Utils.deepExtend(this, custom);
  }
};
/** Computation manager
* @param {object} config
* @param {DataModel} data model object
* */


exports.ComputationsManagerConfig = ComputationsManagerConfig;

var ComputationsManager = /*#__PURE__*/function () {
  function ComputationsManager(config) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, ComputationsManager);

    this.data = data;
    this.setConfig(config);
    this.expressionEngine = new _sdExpressionEngine.ExpressionEngine();
    this.expressionsEvaluator = new _expressionsEvaluator.ExpressionsEvaluator(this.expressionEngine);
    this.objectiveRulesManager = new _objectiveRulesManager.ObjectiveRulesManager(this.expressionEngine, this.config.ruleName);
    this.jobsManger = new _jobsManager.JobsManager(this.expressionsEvaluator, this.objectiveRulesManager, {
      workerUrl: this.config.worker.url,
      repositoryType: this.config.jobRepositoryType,
      clearRepository: this.config.clearRepository
    });
    this.operationsManager = new _operationsManager.OperationsManager(this.data, this.expressionEngine, new _jobsManager.JobsManager(this.expressionsEvaluator, this.objectiveRulesManager, {
      repositoryType: 'timeout'
    }));
    this.treeValidator = new _treeValidator.TreeValidator(this.expressionEngine);
    this.mcdmWeightValueValidator = new _mcdmWeightValueValidator.McdmWeightValueValidator();
  }

  _createClass(ComputationsManager, [{
    key: "setConfig",
    value: function setConfig(config) {
      this.config = new ComputationsManagerConfig(config);
      return this;
    }
  }, {
    key: "setData",
    value: function setData(data) {
      this.data = data;
      this.operationsManager.setData(data);
    }
    /** Alias function for checkValidityAndRecomputeObjective*/

  }, {
    key: "recompute",
    value: function recompute() {
      return this.checkValidityAndRecomputeObjective.apply(this, arguments);
    }
    /**
     * Checks validity of data model and recomputes objective rules
     * @returns promise
     * @param {boolean} allRules - recompute all objective rules
     * @param {boolean} evalCode - evaluate code
     * @param {boolean} evalNumeric - evaluate numeric expressions
     */

  }, {
    key: "checkValidityAndRecomputeObjective",
    value: function checkValidityAndRecomputeObjective(allRules) {
      var _this = this;

      var evalCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var evalNumeric = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      return Promise.resolve().then(function () {
        if (_this.config.worker.delegateRecomputation) {
          var params = {
            evalCode: evalCode,
            evalNumeric: evalNumeric
          };

          if (!allRules) {
            params.ruleName = _this.getCurrentRule().name;
          }

          return _this.runJob("recompute", params, _this.data, false).then(function (jobExecution) {
            var d = jobExecution.getData();

            _this.data.updateFrom(d);
          });
        }

        return _this._checkValidityAndRecomputeObjective(_this.data, allRules, evalCode, evalNumeric);
      }).then(function () {
        _this.updateDisplayValues(_this.data);
      });
    }
  }, {
    key: "_checkValidityAndRecomputeObjective",
    value: function _checkValidityAndRecomputeObjective(data, allRules) {
      var _this2 = this;

      var evalCode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var evalNumeric = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      this.objectiveRulesManager.updateDefaultCriterion1Weight(data.defaultCriterion1Weight);
      data.validationResults = [];

      if (evalCode || evalNumeric) {
        this.expressionsEvaluator.evalExpressions(data, evalCode, evalNumeric);
      }

      var weightValid = this.mcdmWeightValueValidator.validate(data.defaultCriterion1Weight);
      var multiCriteria = this.getCurrentRule().multiCriteria;
      data.getRoots().forEach(function (root) {
        var vr = _this2.treeValidator.validate(data.getAllNodesInSubtree(root));

        data.validationResults.push(vr);

        if (vr.isValid() && (!multiCriteria || weightValid)) {
          _this2.objectiveRulesManager.recomputeTree(root, allRules);
        }
      });
    }
    /**
     * @returns {ObjectiveRule} current objective rule
     * */

  }, {
    key: "getCurrentRule",
    value: function getCurrentRule() {
      return this.objectiveRulesManager.currentRule;
    }
    /**
     * Sets current objective rule
     * @param {string} ruleName - name of objective rule
     * */

  }, {
    key: "setCurrentRuleByName",
    value: function setCurrentRuleByName(ruleName) {
      this.config.ruleName = ruleName;
      return this.objectiveRulesManager.setCurrentRuleByName(ruleName);
    }
    /**
     *
     *  @param {string} jobName
     *  @returns {Job}
     * */

  }, {
    key: "getJobByName",
    value: function getJobByName(jobName) {
      return this.jobsManger.getJobByName(jobName);
    }
    /**
     * @returns array of operations applicable to the given object (node or edge)
     * @param object
     */

  }, {
    key: "operationsForObject",
    value: function operationsForObject(object) {
      return this.operationsManager.operationsForObject(object);
    }
    /**
     * Checks validity of data model without recomputation and revalidation
     * @param {DataModel} data to check
     */

  }, {
    key: "isValid",
    value: function isValid(data) {
      data = data || this.data;
      return data.validationResults.every(function (vr) {
        return vr.isValid();
      });
    }
    /**
     * Run job
     * @param {string} name - job name
     * @param {object} jobParamsValues - job parameter values object
     * @param {DataModel} data model
     * @param {boolean} resolvePromiseAfterJobIsLaunched - immediately resolve promise with still running JobExecution
     * @returns {Promise} resolving to JobExecution
     */

  }, {
    key: "runJob",
    value: function runJob(name, jobParamsValues, data) {
      var resolvePromiseAfterJobIsLaunched = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      return this.jobsManger.run(name, jobParamsValues, data || this.data, resolvePromiseAfterJobIsLaunched);
    }
    /**
     * Run job using JobInstanceManager
     * @param {string} name - job name
     * @param {object} jobParamsValues - job parameter values object
     * @param {JobInstanceManagerConfig} jobInstanceManagerConfig - JobInstanceManager configuration
     * @returns {Promise} resolving to JobInstanceManager
     */

  }, {
    key: "runJobWithInstanceManager",
    value: function runJobWithInstanceManager(name, jobParamsValues, jobInstanceManagerConfig) {
      var _this3 = this;

      return this.runJob(name, jobParamsValues).then(function (je) {
        return new _jobInstanceManager.JobInstanceManager(_this3.jobsManger, je, jobInstanceManagerConfig);
      });
    }
  }, {
    key: "performOperation",
    value: function performOperation(object, operationName, jobParamsValues) {
      return this.operationsManager.performOperation(object, operationName, jobParamsValues);
    }
  }, {
    key: "getObjectiveRules",
    value: function getObjectiveRules() {
      return this.objectiveRulesManager.rules;
    }
  }, {
    key: "getObjectiveRuleByName",
    value: function getObjectiveRuleByName(ruleName) {
      return this.objectiveRulesManager.getObjectiveRuleByName(ruleName);
    }
  }, {
    key: "isRuleName",
    value: function isRuleName(ruleName) {
      return this.objectiveRulesManager.isRuleName(ruleName);
    }
  }, {
    key: "flipCriteria",
    value: function flipCriteria(data) {
      data = data || this.data;
      data.reversePayoffs();
      var tmp = data.weightLowerBound;
      data.weightLowerBound = this.flip(data.weightUpperBound);
      data.weightUpperBound = this.flip(tmp);
      data.defaultCriterion1Weight = this.flip(data.defaultCriterion1Weight);
      this.objectiveRulesManager.flipRule();
      return this.checkValidityAndRecomputeObjective(false);
    }
  }, {
    key: "flip",
    value: function flip(a) {
      if (a == Infinity) {
        return 0;
      }

      if (a == 0) {
        return Infinity;
      }

      return this.expressionEngine.serialize(_sdExpressionEngine.ExpressionEngine.divide(1, a));
    }
  }, {
    key: "updateDisplayValues",
    value: function updateDisplayValues(data) {
      var _this4 = this;

      var policyToDisplay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      data = data || this.data;

      if (policyToDisplay) {
        return this.displayPolicy(data, policyToDisplay);
      }

      data.nodes.forEach(function (n) {
        _this4.updateNodeDisplayValues(n);
      });
      data.edges.forEach(function (e) {
        _this4.updateEdgeDisplayValues(e);
      });
    }
  }, {
    key: "updateNodeDisplayValues",
    value: function updateNodeDisplayValues(node) {
      var _this5 = this;

      node.$DISPLAY_VALUE_NAMES.forEach(function (n) {
        return node.displayValue(n, _this5.objectiveRulesManager.getNodeDisplayValue(node, n));
      });
    }
  }, {
    key: "updateEdgeDisplayValues",
    value: function updateEdgeDisplayValues(e) {
      var _this6 = this;

      e.$DISPLAY_VALUE_NAMES.forEach(function (n) {
        return e.displayValue(n, _this6.objectiveRulesManager.getEdgeDisplayValue(e, n));
      });
    }
  }, {
    key: "displayPolicy",
    value: function displayPolicy(policyToDisplay, data) {
      var _this7 = this;

      data = data || this.data;
      data.nodes.forEach(function (n) {
        n.clearDisplayValues();
      });
      data.edges.forEach(function (e) {
        e.clearDisplayValues();
      });
      data.getRoots().forEach(function (root) {
        return _this7.displayPolicyForNode(root, policyToDisplay);
      });
    }
  }, {
    key: "displayPolicyForNode",
    value: function displayPolicyForNode(node, policy) {
      var _this8 = this;

      if (node instanceof _sdModel.domain.DecisionNode) {
        var decision = _policy.Policy.getDecision(policy, node); //console.log(decision, node, policy);


        if (decision) {
          node.displayValue('optimal', true);
          var childEdge = node.childEdges[decision.decisionValue];
          childEdge.displayValue('optimal', true);
          return this.displayPolicyForNode(childEdge.childNode, policy);
        }

        return;
      } else if (node instanceof _sdModel.domain.ChanceNode) {
        node.displayValue('optimal', true);
        node.childEdges.forEach(function (e) {
          e.displayValue('optimal', true);

          _this8.displayPolicyForNode(e.childNode, policy);
        });
      } else if (node instanceof _sdModel.domain.TerminalNode) {
        node.displayValue('optimal', true);
      }
    }
  }]);

  return ComputationsManager;
}();

exports.ComputationsManager = ComputationsManager;

},{"./expressions-evaluator":6,"./jobs/job-instance-manager":63,"./jobs/jobs-manager":65,"./objective/objective-rules-manager":66,"./operations/operations-manager":83,"./policies/policy":87,"./validation/mcdm-weight-value-validator":88,"./validation/tree-validator":91,"sd-expression-engine":"sd-expression-engine","sd-model":"sd-model","sd-utils":"sd-utils"}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComputationsUtils = void 0;

var _sdExpressionEngine = require("sd-expression-engine");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var ComputationsUtils = /*#__PURE__*/function () {
  function ComputationsUtils() {
    _classCallCheck(this, ComputationsUtils);
  }

  _createClass(ComputationsUtils, null, [{
    key: "sequence",
    value: function sequence(min, max, length) {
      var extent = _sdExpressionEngine.ExpressionEngine.subtract(max, min);

      var result = [min];
      var steps = length - 1;

      if (!steps) {
        return result;
      }

      var step = _sdExpressionEngine.ExpressionEngine.divide(extent, length - 1);

      var curr = min;

      for (var i = 0; i < length - 2; i++) {
        curr = _sdExpressionEngine.ExpressionEngine.add(curr, step);
        result.push(_sdExpressionEngine.ExpressionEngine.toFloat(curr));
      }

      result.push(max);
      return result;
    }
  }]);

  return ComputationsUtils;
}();

exports.ComputationsUtils = ComputationsUtils;

},{"sd-expression-engine":"sd-expression-engine"}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExpressionsEvaluator = void 0;

var _sdExpressionEngine = require("sd-expression-engine");

var _sdModel = require("sd-model");

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/*Evaluates code and expressions in trees*/


var ExpressionsEvaluator = /*#__PURE__*/function () {
  function ExpressionsEvaluator(expressionEngine) {
    _classCallCheck(this, ExpressionsEvaluator);

    this.expressionEngine = expressionEngine;
  }

  _createClass(ExpressionsEvaluator, [{
    key: "clear",
    value: function clear(data) {
      data.nodes.forEach(function (n) {
        n.clearComputedValues();
      });
      data.edges.forEach(function (e) {
        e.clearComputedValues();
      });
    }
  }, {
    key: "clearTree",
    value: function clearTree(data, root) {
      data.getAllNodesInSubtree(root).forEach(function (n) {
        n.clearComputedValues();
        n.childEdges.forEach(function (e) {
          e.clearComputedValues();
        });
      });
    }
  }, {
    key: "evalExpressions",
    value: function evalExpressions(data) {
      var _this = this;

      var evalCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var evalNumeric = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var initScopes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      _sdUtils.log.debug('evalExpressions evalCode:' + evalCode + ' evalNumeric:' + evalNumeric);

      if (evalCode) {
        this.evalGlobalCode(data);
      }

      data.getRoots().forEach(function (n) {
        _this.clearTree(data, n);

        _this.evalExpressionsForNode(data, n, evalCode, evalNumeric, initScopes);
      });
    }
  }, {
    key: "evalGlobalCode",
    value: function evalGlobalCode(data) {
      data.clearExpressionScope();
      data.$codeDirty = false;

      try {
        data.$codeError = null;
        this.expressionEngine.eval(data.code, false, data.expressionScope);
      } catch (e) {
        data.$codeError = e;
      }
    }
  }, {
    key: "evalPayoff",
    value: function evalPayoff(edge) {
      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (_sdExpressionEngine.ExpressionEngine.hasAssignmentExpression(edge.payoff[index])) {
        return null;
      }

      return this.expressionEngine.eval(edge.payoff[index], true, edge.parentNode.expressionScope);
    }
  }, {
    key: "evalExpressionsForNode",
    value: function evalExpressionsForNode(data, node) {
      var _this2 = this;

      var evalCode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var evalNumeric = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var initScope = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

      if (!node.expressionScope || initScope || evalCode) {
        this.initScopeForNode(data, node);
      }

      if (evalCode) {
        node.$codeDirty = false;

        if (node.code) {
          try {
            node.$codeError = null;
            this.expressionEngine.eval(node.code, false, node.expressionScope);
          } catch (e) {
            node.$codeError = e;

            _sdUtils.log.debug(e);
          }
        }
      }

      if (evalNumeric) {
        var scope = node.expressionScope;

        var probabilitySum = _sdExpressionEngine.ExpressionEngine.toNumber(0);

        var hashEdges = [];
        var invalidProb = false;
        node.childEdges.forEach(function (e) {
          e.payoff.forEach(function (rawPayoff, payoffIndex) {
            var path = 'payoff[' + payoffIndex + ']';

            if (e.isFieldValid(path, true, false)) {
              try {
                e.computedValue(null, path, _this2.evalPayoff(e, payoffIndex));
              } catch (err) {//   Left empty intentionally
              }
            }
          });

          if (node instanceof _sdModel.domain.ChanceNode) {
            if (_sdExpressionEngine.ExpressionEngine.isHash(e.probability)) {
              hashEdges.push(e);
              return;
            }

            if (_sdExpressionEngine.ExpressionEngine.hasAssignmentExpression(e.probability)) {
              //It should not occur here!
              _sdUtils.log.warn("evalExpressionsForNode hasAssignmentExpression!", e);

              return null;
            }

            if (e.isFieldValid('probability', true, false)) {
              try {
                var prob = _this2.expressionEngine.eval(e.probability, true, scope);

                e.computedValue(null, 'probability', prob);
                probabilitySum = _sdExpressionEngine.ExpressionEngine.add(probabilitySum, prob);
              } catch (err) {
                invalidProb = true;
              }
            } else {
              invalidProb = true;
            }
          }
        });

        if (node instanceof _sdModel.domain.ChanceNode) {
          var computeHash = hashEdges.length && !invalidProb && probabilitySum.compare(0) >= 0 && probabilitySum.compare(1) <= 0;

          if (computeHash) {
            var hash = _sdExpressionEngine.ExpressionEngine.divide(_sdExpressionEngine.ExpressionEngine.subtract(1, probabilitySum), hashEdges.length);

            hashEdges.forEach(function (e) {
              e.computedValue(null, 'probability', hash);
            });
          }
        }

        node.childEdges.forEach(function (e) {
          _this2.evalExpressionsForNode(data, e.childNode, evalCode, evalNumeric, initScope);
        });
      }
    }
  }, {
    key: "initScopeForNode",
    value: function initScopeForNode(data, node) {
      var parent = node.$parent;
      var parentScope = parent ? parent.expressionScope : data.expressionScope;
      node.expressionScope = _sdUtils.Utils.cloneDeep(parentScope);
    }
  }]);

  return ExpressionsEvaluator;
}();

exports.ExpressionsEvaluator = ExpressionsEvaluator;

},{"sd-expression-engine":"sd-expression-engine","sd-model":"sd-model","sd-utils":"sd-utils"}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _computationsEngine = require("./computations-engine");

Object.keys(_computationsEngine).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _computationsEngine[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _computationsEngine[key];
    }
  });
});

var _computationsManager = require("./computations-manager");

Object.keys(_computationsManager).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _computationsManager[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _computationsManager[key];
    }
  });
});

var _expressionsEvaluator = require("./expressions-evaluator");

Object.keys(_expressionsEvaluator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _expressionsEvaluator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _expressionsEvaluator[key];
    }
  });
});

var _index = require("./jobs/index");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _index[key];
    }
  });
});

},{"./computations-engine":3,"./computations-manager":4,"./expressions-evaluator":6,"./jobs/index":62}],8:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LeagueTableJobParameters = void 0;

var _sdUtils = require("sd-utils");

var _jobParameters = require("../../engine/job-parameters");

var _jobParameterDefinition = require("../../engine/job-parameter-definition");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var LeagueTableJobParameters = /*#__PURE__*/function (_JobParameters) {
  _inherits(LeagueTableJobParameters, _JobParameters);

  var _super = _createSuper(LeagueTableJobParameters);

  function LeagueTableJobParameters() {
    _classCallCheck(this, LeagueTableJobParameters);

    return _super.apply(this, arguments);
  }

  _createClass(LeagueTableJobParameters, [{
    key: "initDefinitions",
    value: function initDefinitions() {
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("id", _jobParameterDefinition.PARAMETER_TYPE.STRING, 1, 1, true));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("ruleName", _jobParameterDefinition.PARAMETER_TYPE.STRING));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("extendedPolicyDescription", _jobParameterDefinition.PARAMETER_TYPE.BOOLEAN));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("weightLowerBound", _jobParameterDefinition.PARAMETER_TYPE.NUMBER_EXPRESSION).set("singleValueValidator", function (v, allVals) {
        return v >= 0 && v <= _jobParameterDefinition.JobParameterDefinition.computeNumberExpression(allVals['weightUpperBound']);
      }));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("defaultWeight", _jobParameterDefinition.PARAMETER_TYPE.NUMBER_EXPRESSION).set("singleValueValidator", function (v, allVals) {
        return v >= 0 && v >= _jobParameterDefinition.JobParameterDefinition.computeNumberExpression(allVals['weightLowerBound']) && v <= _jobParameterDefinition.JobParameterDefinition.computeNumberExpression(allVals['weightUpperBound']);
      }));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("weightUpperBound", _jobParameterDefinition.PARAMETER_TYPE.NUMBER_EXPRESSION).set("singleValueValidator", function (v, allVals) {
        return v >= 0 && v >= _jobParameterDefinition.JobParameterDefinition.computeNumberExpression(allVals['weightLowerBound']);
      }));
    }
  }, {
    key: "initDefaultValues",
    value: function initDefaultValues() {
      this.values = {
        id: _sdUtils.Utils.guid(),
        nameOfCriterion1: 'Cost',
        nameOfCriterion2: 'Effect',
        extendedPolicyDescription: true,
        weightLowerBound: 0,
        defaultWeight: 0,
        weightUpperBound: Infinity
      };
    }
  }]);

  return LeagueTableJobParameters;
}(_jobParameters.JobParameters);

exports.LeagueTableJobParameters = LeagueTableJobParameters;

},{"../../engine/job-parameter-definition":49,"../../engine/job-parameters":50,"sd-utils":"sd-utils"}],9:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LeagueTableJob = void 0;

var _simpleJob = require("../../engine/simple-job");

var _policy = require("../../../policies/policy");

var _sdExpressionEngine = require("sd-expression-engine");

var _calculateStep = require("./steps/calculate-step");

var _leagueTableJobParameters = require("./league-table-job-parameters");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var LeagueTableJob = /*#__PURE__*/function (_SimpleJob) {
  _inherits(LeagueTableJob, _SimpleJob);

  var _super = _createSuper(LeagueTableJob);

  function LeagueTableJob(jobRepository, expressionsEvaluator, objectiveRulesManager) {
    var _this;

    _classCallCheck(this, LeagueTableJob);

    _this = _super.call(this, "league-table", jobRepository, expressionsEvaluator, objectiveRulesManager);

    _this.initSteps();

    return _this;
  }

  _createClass(LeagueTableJob, [{
    key: "initSteps",
    value: function initSteps() {
      this.calculateStep = new _calculateStep.CalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);
      this.addStep(this.calculateStep);
    }
  }, {
    key: "createJobParameters",
    value: function createJobParameters(values) {
      return new _leagueTableJobParameters.LeagueTableJobParameters(values);
    }
  }, {
    key: "getJobDataValidator",
    value: function getJobDataValidator() {
      return {
        validate: function validate(data) {
          return data.getRoots().length === 1;
        }
      };
    }
  }, {
    key: "jobResultToCsvRows",
    value: function jobResultToCsvRows(jobResult, jobParameters) {
      var withHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var result = [];

      if (withHeaders) {
        var headers = ['policy_id', 'policy', jobResult.payoffNames[0], jobResult.payoffNames[1], 'dominated_by', 'extended-dominated_by', 'incratio', 'optimal', 'optimal_for_default_weight'];
        result.push(headers);
      }

      jobResult.rows.forEach(function (row) {
        row.policies.forEach(function (policy) {
          var rowCells = [row.id, _policy.Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription), row.payoffs[1], row.payoffs[0], row.dominatedBy, row.extendedDominatedBy === null ? null : row.extendedDominatedBy[0] + ', ' + row.extendedDominatedBy[1], row.incratio, row.optimal, row.optimalForDefaultWeight];
          result.push(rowCells);
        });
      });
      return result;
    }
  }]);

  return LeagueTableJob;
}(_simpleJob.SimpleJob);

exports.LeagueTableJob = LeagueTableJob;

},{"../../../policies/policy":87,"../../engine/simple-job":58,"./league-table-job-parameters":8,"./steps/calculate-step":10,"sd-expression-engine":"sd-expression-engine"}],10:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalculateStep = void 0;

var _step = require("../../../engine/step");

var _jobStatus = require("../../../engine/job-status");

var _policiesCollector = require("../../../../policies/policies-collector");

var _sdExpressionEngine = require("sd-expression-engine");

var _treeValidator = require("../../../../validation/tree-validator");

var _policy = require("../../../../policies/policy");

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var CalculateStep = /*#__PURE__*/function (_Step) {
  _inherits(CalculateStep, _Step);

  var _super = _createSuper(CalculateStep);

  function CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager) {
    var _this;

    _classCallCheck(this, CalculateStep);

    _this = _super.call(this, "calculate_step", jobRepository);
    _this.expressionsEvaluator = expressionsEvaluator;
    _this.objectiveRulesManager = objectiveRulesManager;
    _this.treeValidator = new _treeValidator.TreeValidator();
    return _this;
  }

  _createClass(CalculateStep, [{
    key: "doExecute",
    value: function doExecute(stepExecution, jobResult) {
      var _this2 = this;

      var data = stepExecution.getData();
      var params = stepExecution.getJobParameters();
      var ruleName = params.value("ruleName");
      this.objectiveRulesManager.setCurrentRuleByName(ruleName);
      var rule = this.objectiveRulesManager.currentRule;
      var treeRoot = data.getRoots()[0];
      var policiesCollector = new _policiesCollector.PoliciesCollector(treeRoot);
      var policies = policiesCollector.policies;
      var payoffCoeffs = this.payoffCoeffs = rule.payoffCoeffs;
      this.expressionsEvaluator.evalExpressions(data);
      var vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));

      if (!vr.isValid()) {
        return stepExecution;
      }

      var compare = function compare(a, b) {
        return -payoffCoeffs[0] * (b.payoffs[0] - a.payoffs[0]) || -payoffCoeffs[1] * (a.payoffs[1] - b.payoffs[1]);
      };

      var rows = policies.map(function (policy) {
        _this2.objectiveRulesManager.recomputeTree(treeRoot, false, policy);

        return {
          policies: [policy],
          payoffs: treeRoot.computedValue(ruleName, 'payoff').slice(),
          dominatedBy: null,
          extendedDominatedBy: null,
          incratio: null,
          optimal: false,
          optimalForDefaultWeight: false
        };
      }).sort(compare);
      rows = rows.reduce(function (previousValue, currentValue, index, array) {
        if (!previousValue.length) {
          return [currentValue];
        }

        var prev = previousValue[previousValue.length - 1];

        if (compare(prev, currentValue) == 0) {
          var _prev$policies;

          (_prev$policies = prev.policies).push.apply(_prev$policies, _toConsumableArray(currentValue.policies));

          return previousValue;
        }

        return previousValue.concat(currentValue);
      }, []);
      rows.sort(function (a, b) {
        return payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0]) || -payoffCoeffs[1] * (a.payoffs[1] - b.payoffs[1]);
      });
      rows.forEach(function (r, i) {
        r.id = i + 1;
      }); // rows.sort(compare);

      rows.sort(function (a, b) {
        return -payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0]) || -payoffCoeffs[1] * (a.payoffs[1] - b.payoffs[1]);
      });
      var bestCost = -payoffCoeffs[1] * Infinity,
          bestCostRow = null;

      var cmp = function cmp(a, b) {
        return a > b;
      };

      if (payoffCoeffs[1] < 0) {
        cmp = function cmp(a, b) {
          return a < b;
        };
      }

      rows.forEach(function (r, i) {
        if (cmp(r.payoffs[1], bestCost)) {
          bestCost = r.payoffs[1];
          bestCostRow = r;
        } else if (bestCostRow) {
          r.dominatedBy = bestCostRow.id;
        }
      });

      cmp = function cmp(a, b) {
        return a < b;
      };

      if (payoffCoeffs[0] > 0 && payoffCoeffs[1] < 0) {
        cmp = function cmp(a, b) {
          return a < b;
        };
      } else if (payoffCoeffs[0] < 0 && payoffCoeffs[1] > 0) {
        cmp = function cmp(a, b) {
          return a < b;
        };
      } else if (payoffCoeffs[1] < 0) {
        cmp = function cmp(a, b) {
          return a > b;
        };
      }

      var prev2NotDominated = null;
      rows.filter(function (r) {
        return !r.dominatedBy;
      }).sort(function (a, b) {
        return payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0]);
      }).forEach(function (r, i, arr) {
        if (!i) {
          r.incratio = 0;
          return;
        }

        var prev = arr[i - 1];
        r.incratio = _this2.computeICER(r, prev);

        if (i < 2) {
          return;
        }

        if (!prev2NotDominated) {
          prev2NotDominated = arr[i - 2];
        }

        if (cmp(r.incratio, prev.incratio)) {
          prev.incratio = null;
          prev.extendedDominatedBy = [prev2NotDominated.id, r.id];
          r.incratio = _this2.computeICER(r, prev2NotDominated);
        } else {
          prev2NotDominated = prev;
        }
      });
      var weightLowerBound = params.value("weightLowerBound");
      var defaultWeight = params.value("defaultWeight");
      var weightUpperBound = params.value("weightUpperBound"); //mark optimal for weight in [weightLowerBound, weightUpperBound] and optimal for default Weight

      var lastLELower = null;
      var lastLELowerDef = null;
      rows.slice().filter(function (r) {
        return !r.dominatedBy && !r.extendedDominatedBy;
      }).sort(function (a, b) {
        var sub = a.incratio - b.incratio;
        return sub ? sub : payoffCoeffs[0] * (a.payoffs[0] - b.payoffs[0]);
      }).forEach(function (row, i, arr) {
        if (row.incratio < weightLowerBound) {
          lastLELower = row;
        }

        if (row.incratio < defaultWeight) {
          lastLELowerDef = row;
        }

        row.optimal = row.incratio >= weightLowerBound && row.incratio <= weightUpperBound;
        row.optimalForDefaultWeight = row.incratio == defaultWeight;
      });

      if (lastLELower) {
        lastLELower.optimal = true;
      }

      if (lastLELowerDef) {
        lastLELowerDef.optimalForDefaultWeight = true;
      }

      rows.forEach(function (row) {
        row.payoffs[0] = _sdExpressionEngine.ExpressionEngine.toFloat(row.payoffs[0]);
        row.payoffs[1] = _sdExpressionEngine.ExpressionEngine.toFloat(row.payoffs[1]);
        row.incratio = row.incratio === null ? null : _sdExpressionEngine.ExpressionEngine.toFloat(row.incratio);
      });
      jobResult.data = {
        payoffNames: data.payoffNames.slice(),
        payoffCoeffs: payoffCoeffs,
        rows: rows.sort(function (a, b) {
          return a.id - b.id;
        }),
        weightLowerBound: _sdExpressionEngine.ExpressionEngine.toFloat(weightLowerBound),
        defaultWeight: _sdExpressionEngine.ExpressionEngine.toFloat(defaultWeight),
        weightUpperBound: _sdExpressionEngine.ExpressionEngine.toFloat(weightUpperBound)
      };
      stepExecution.exitStatus = _jobStatus.JOB_STATUS.COMPLETED;
      return stepExecution;
    }
  }, {
    key: "computeICER",
    value: function computeICER(r, prev) {
      var d = _sdExpressionEngine.ExpressionEngine.subtract(r.payoffs[0], prev.payoffs[0]);

      var n = _sdExpressionEngine.ExpressionEngine.subtract(r.payoffs[1], prev.payoffs[1]);

      if (d == 0) {
        if (n < 0) {
          return -Infinity;
        }

        return Infinity;
      }

      return Math.abs(_sdExpressionEngine.ExpressionEngine.divide(n, d));
    }
  }]);

  return CalculateStep;
}(_step.Step);

exports.CalculateStep = CalculateStep;

},{"../../../../policies/policies-collector":86,"../../../../policies/policy":87,"../../../../validation/tree-validator":91,"../../../engine/job-status":56,"../../../engine/step":61,"sd-expression-engine":"sd-expression-engine"}],11:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PayoffsTransformationJobParameters = void 0;

var _sdUtils = require("sd-utils");

var _jobParameters = require("../../engine/job-parameters");

var _jobParameterDefinition = require("../../engine/job-parameter-definition");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var PayoffsTransformationJobParameters = /*#__PURE__*/function (_JobParameters) {
  _inherits(PayoffsTransformationJobParameters, _JobParameters);

  var _super = _createSuper(PayoffsTransformationJobParameters);

  function PayoffsTransformationJobParameters() {
    _classCallCheck(this, PayoffsTransformationJobParameters);

    return _super.apply(this, arguments);
  }

  _createClass(PayoffsTransformationJobParameters, [{
    key: "initDefinitions",
    value: function initDefinitions() {
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("id", _jobParameterDefinition.PARAMETER_TYPE.STRING, 1, 1, true));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("objectId", _jobParameterDefinition.PARAMETER_TYPE.STRING, 1, 1, true));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("functionName", _jobParameterDefinition.PARAMETER_TYPE.STRING).set('required', true));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("functionBody", _jobParameterDefinition.PARAMETER_TYPE.STRING).set('required', true));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("functionArgumentName", _jobParameterDefinition.PARAMETER_TYPE.STRING).set('required', true));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("makeClone", _jobParameterDefinition.PARAMETER_TYPE.BOOLEAN));
    }
  }, {
    key: "initDefaultValues",
    value: function initDefaultValues() {
      this.values = {
        id: _sdUtils.Utils.guid(),
        functionName: 'transformPayoff',
        functionBody: 'log(p)',
        functionArgumentName: 'p',
        makeClone: true
      };
    }
  }]);

  return PayoffsTransformationJobParameters;
}(_jobParameters.JobParameters);

exports.PayoffsTransformationJobParameters = PayoffsTransformationJobParameters;

},{"../../engine/job-parameter-definition":49,"../../engine/job-parameters":50,"sd-utils":"sd-utils"}],12:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PayoffsTransformationJob = void 0;

var _simpleJob = require("../../engine/simple-job");

var _step = require("../../engine/step");

var _jobStatus = require("../../engine/job-status");

var _treeValidator = require("../../../validation/tree-validator");

var _payoffsTransformationJobParameters = require("./payoffs-transformation-job-parameters");

var _job = require("../../engine/job");

var _sdModel = require("sd-model");

var _sdExpressionEngine = require("sd-expression-engine");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var PayoffsTransformationJob = /*#__PURE__*/function (_Job) {
  _inherits(PayoffsTransformationJob, _Job);

  var _super = _createSuper(PayoffsTransformationJob);

  function PayoffsTransformationJob(jobRepository, expressionsEvaluator, objectiveRulesManager) {
    var _this;

    _classCallCheck(this, PayoffsTransformationJob);

    _this = _super.call(this, PayoffsTransformationJob.$NAME, jobRepository);
    _this.isRestartable = false;
    _this.expressionsEvaluator = expressionsEvaluator;
    _this.objectiveRulesManager = objectiveRulesManager;
    _this.treeValidator = new _treeValidator.TreeValidator();
    return _this;
  }

  _createClass(PayoffsTransformationJob, [{
    key: "doExecute",
    value: function doExecute(execution) {
      var data = execution.getData();
      var params = execution.jobParameters;
      var functionName = params.value("functionName");
      var root = data.findNodeById(params.value("objectId"));
      var makeClone = params.value("makeClone");
      var rootTarget = makeClone ? data.cloneSubtree(root, true) : root;
      rootTarget.code += '\n' + functionName + '(' + params.value('functionArgumentName') + ') = ' + params.value('functionBody');
      var allNodes = data.getAllNodesInSubtree(rootTarget);
      this.processNodePayoff(rootTarget, params);

      if (makeClone) {
        var minY = Number.MAX_VALUE;
        var maxY = Number.MIN_VALUE;
        allNodes.forEach(function (n) {
          if (n.location.y < minY) {
            minY = n.location.y;
          }

          if (n.location.y > maxY) {
            maxY = n.location.y;
          }
        });
        var extentY = maxY - minY;
        var margin = 30;
        var offset = extentY + margin;
        rootTarget.move(0, offset);
        data.attachSubtree(rootTarget);
      }

      return execution;
    }
  }, {
    key: "processNodePayoff",
    value: function processNodePayoff(node, params) {
      var _this2 = this;

      var parentEdge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var aggregatedPayoff = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0, 0];

      if (node.type === _sdModel.domain.TerminalNode.$TYPE) {
        parentEdge.payoff = aggregatedPayoff.map(function (p) {
          return params.value("functionName") + '(' + _sdExpressionEngine.ExpressionEngine.toNumber(p).toFraction(false) + ')';
        });
        return;
      }

      if (parentEdge) {
        parentEdge.payoff.fill(0);
      }

      node.childEdges.forEach(function (e) {
        _this2.processNodePayoff(e.childNode, params, e, aggregatedPayoff.map(function (p, i) {
          return _sdExpressionEngine.ExpressionEngine.add(p, e.computedBasePayoff(undefined, i));
        }));
      });
    }
  }, {
    key: "createJobParameters",
    value: function createJobParameters(values) {
      return new _payoffsTransformationJobParameters.PayoffsTransformationJobParameters(values);
    }
  }]);

  return PayoffsTransformationJob;
}(_job.Job);

exports.PayoffsTransformationJob = PayoffsTransformationJob;
PayoffsTransformationJob.$NAME = 'payoffs-transformation';

},{"../../../validation/tree-validator":91,"../../engine/job":57,"../../engine/job-status":56,"../../engine/simple-job":58,"../../engine/step":61,"./payoffs-transformation-job-parameters":11,"sd-expression-engine":"sd-expression-engine","sd-model":"sd-model"}],13:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RecomputeJobParameters = void 0;

var _sdUtils = require("sd-utils");

var _jobParameters = require("../../engine/job-parameters");

var _jobParameterDefinition = require("../../engine/job-parameter-definition");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var RecomputeJobParameters = /*#__PURE__*/function (_JobParameters) {
  _inherits(RecomputeJobParameters, _JobParameters);

  var _super = _createSuper(RecomputeJobParameters);

  function RecomputeJobParameters() {
    _classCallCheck(this, RecomputeJobParameters);

    return _super.apply(this, arguments);
  }

  _createClass(RecomputeJobParameters, [{
    key: "initDefinitions",
    value: function initDefinitions() {
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("id", _jobParameterDefinition.PARAMETER_TYPE.STRING, 1, 1, true));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("ruleName", _jobParameterDefinition.PARAMETER_TYPE.STRING).set('required', false));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("evalCode", _jobParameterDefinition.PARAMETER_TYPE.BOOLEAN));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("evalNumeric", _jobParameterDefinition.PARAMETER_TYPE.BOOLEAN));
    }
  }, {
    key: "initDefaultValues",
    value: function initDefaultValues() {
      this.values = {
        id: _sdUtils.Utils.guid(),
        ruleName: null,
        //recompute all rules
        evalCode: true,
        evalNumeric: true
      };
    }
  }]);

  return RecomputeJobParameters;
}(_jobParameters.JobParameters);

exports.RecomputeJobParameters = RecomputeJobParameters;

},{"../../engine/job-parameter-definition":49,"../../engine/job-parameters":50,"sd-utils":"sd-utils"}],14:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RecomputeJob = void 0;

var _simpleJob = require("../../engine/simple-job");

var _step = require("../../engine/step");

var _jobStatus = require("../../engine/job-status");

var _treeValidator = require("../../../validation/tree-validator");

var _batchStep = require("../../engine/batch/batch-step");

var _recomputeJobParameters = require("./recompute-job-parameters");

var _job = require("../../engine/job");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var RecomputeJob = /*#__PURE__*/function (_Job) {
  _inherits(RecomputeJob, _Job);

  var _super = _createSuper(RecomputeJob);

  function RecomputeJob(jobRepository, expressionsEvaluator, objectiveRulesManager) {
    var _this;

    _classCallCheck(this, RecomputeJob);

    _this = _super.call(this, "recompute", jobRepository);
    _this.isRestartable = false;
    _this.expressionsEvaluator = expressionsEvaluator;
    _this.objectiveRulesManager = objectiveRulesManager;
    _this.treeValidator = new _treeValidator.TreeValidator();
    return _this;
  }

  _createClass(RecomputeJob, [{
    key: "doExecute",
    value: function doExecute(execution) {
      var data = execution.getData();
      var params = execution.jobParameters;
      var ruleName = params.value("ruleName");
      var allRules = !ruleName;

      if (ruleName) {
        this.objectiveRulesManager.setCurrentRuleByName(ruleName);
      }

      this.checkValidityAndRecomputeObjective(data, allRules, params.value("evalCode"), params.value("evalNumeric"));
      return execution;
    }
  }, {
    key: "checkValidityAndRecomputeObjective",
    value: function checkValidityAndRecomputeObjective(data, allRules, evalCode, evalNumeric) {
      var _this2 = this;

      data.validationResults = [];

      if (evalCode || evalNumeric) {
        this.expressionsEvaluator.evalExpressions(data, evalCode, evalNumeric);
      }

      data.getRoots().forEach(function (root) {
        var vr = _this2.treeValidator.validate(data.getAllNodesInSubtree(root));

        data.validationResults.push(vr);

        if (vr.isValid()) {
          _this2.objectiveRulesManager.recomputeTree(root, allRules);
        }
      });
    }
  }, {
    key: "createJobParameters",
    value: function createJobParameters(values) {
      return new _recomputeJobParameters.RecomputeJobParameters(values);
    }
  }]);

  return RecomputeJob;
}(_job.Job);

exports.RecomputeJob = RecomputeJob;

},{"../../../validation/tree-validator":91,"../../engine/batch/batch-step":31,"../../engine/job":57,"../../engine/job-status":56,"../../engine/simple-job":58,"../../engine/step":61,"./recompute-job-parameters":13}],15:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SensitivityAnalysisJobParameters = void 0;

var _sdUtils = require("sd-utils");

var _jobParameters = require("../../../engine/job-parameters");

var _jobParameterDefinition = require("../../../engine/job-parameter-definition");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var SensitivityAnalysisJobParameters = /*#__PURE__*/function (_JobParameters) {
  _inherits(SensitivityAnalysisJobParameters, _JobParameters);

  var _super = _createSuper(SensitivityAnalysisJobParameters);

  function SensitivityAnalysisJobParameters() {
    _classCallCheck(this, SensitivityAnalysisJobParameters);

    return _super.apply(this, arguments);
  }

  _createClass(SensitivityAnalysisJobParameters, [{
    key: "initDefinitions",
    value: function initDefinitions() {
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("id", _jobParameterDefinition.PARAMETER_TYPE.STRING, 1, 1, true));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("ruleName", _jobParameterDefinition.PARAMETER_TYPE.STRING));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("extendedPolicyDescription", _jobParameterDefinition.PARAMETER_TYPE.BOOLEAN));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("failOnInvalidTree", _jobParameterDefinition.PARAMETER_TYPE.BOOLEAN));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("variables", [new _jobParameterDefinition.JobParameterDefinition("name", _jobParameterDefinition.PARAMETER_TYPE.STRING), new _jobParameterDefinition.JobParameterDefinition("min", _jobParameterDefinition.PARAMETER_TYPE.NUMBER), new _jobParameterDefinition.JobParameterDefinition("max", _jobParameterDefinition.PARAMETER_TYPE.NUMBER), new _jobParameterDefinition.JobParameterDefinition("length", _jobParameterDefinition.PARAMETER_TYPE.INTEGER).set("singleValueValidator", function (v) {
        return v >= 2;
      })], 1, Infinity, false, function (v) {
        return v["min"] < v["max"];
      }, function (values) {
        return _sdUtils.Utils.isUnique(values, function (v) {
          return v["name"];
        });
      } //Variable names should be unique
      ));
    }
  }, {
    key: "initDefaultValues",
    value: function initDefaultValues() {
      this.values = {
        id: _sdUtils.Utils.guid(),
        extendedPolicyDescription: true,
        failOnInvalidTree: true
      };
    }
  }]);

  return SensitivityAnalysisJobParameters;
}(_jobParameters.JobParameters);

exports.SensitivityAnalysisJobParameters = SensitivityAnalysisJobParameters;

},{"../../../engine/job-parameter-definition":49,"../../../engine/job-parameters":50,"sd-utils":"sd-utils"}],16:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SensitivityAnalysisJob = void 0;

var _simpleJob = require("../../../engine/simple-job");

var _sensitivityAnalysisJobParameters = require("./sensitivity-analysis-job-parameters");

var _prepareVariablesStep = require("./steps/prepare-variables-step");

var _initPoliciesStep = require("./steps/init-policies-step");

var _calculateStep = require("./steps/calculate-step");

var _policy = require("../../../../policies/policy");

var _sdUtils = require("sd-utils");

var _sdExpressionEngine = require("sd-expression-engine");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var SensitivityAnalysisJob = /*#__PURE__*/function (_SimpleJob) {
  _inherits(SensitivityAnalysisJob, _SimpleJob);

  var _super = _createSuper(SensitivityAnalysisJob);

  function SensitivityAnalysisJob(jobRepository, expressionsEvaluator, objectiveRulesManager) {
    var _this;

    var batchSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;

    _classCallCheck(this, SensitivityAnalysisJob);

    _this = _super.call(this, "sensitivity-analysis", jobRepository, expressionsEvaluator, objectiveRulesManager);
    _this.batchSize = 5;

    _this.initSteps();

    return _this;
  }

  _createClass(SensitivityAnalysisJob, [{
    key: "initSteps",
    value: function initSteps() {
      this.addStep(new _prepareVariablesStep.PrepareVariablesStep(this.jobRepository, this.expressionsEvaluator.expressionEngine));
      this.addStep(new _initPoliciesStep.InitPoliciesStep(this.jobRepository));
      this.calculateStep = new _calculateStep.CalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager, this.batchSize);
      this.addStep(this.calculateStep);
    }
  }, {
    key: "createJobParameters",
    value: function createJobParameters(values) {
      return new _sensitivityAnalysisJobParameters.SensitivityAnalysisJobParameters(values);
    }
  }, {
    key: "getJobDataValidator",
    value: function getJobDataValidator() {
      return {
        validate: function validate(data) {
          return data.getRoots().length === 1;
        }
      };
    }
  }, {
    key: "setBatchSize",
    value: function setBatchSize(batchSize) {
      this.batchSize = batchSize;
      this.calculateStep.chunkSize = batchSize;
    }
  }, {
    key: "jobResultToCsvRows",
    value: function jobResultToCsvRows(jobResult, jobParameters) {
      var withHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var result = [];

      if (withHeaders) {
        var headers = ['policy_number', 'policy'];
        jobResult.variableNames.forEach(function (n) {
          return headers.push(n);
        });
        headers.push('payoff');
        result.push(headers);
      }

      var roundVariables = !!jobParameters.values.roundVariables;

      if (roundVariables) {
        this.roundVariables(jobResult);
      }

      jobResult.rows.forEach(function (row) {
        var policy = jobResult.policies[row.policyIndex];
        var rowCells = [row.policyIndex + 1, _policy.Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription)];
        row.variables.forEach(function (v) {
          return rowCells.push(v);
        });
        rowCells.push(row.payoff);
        result.push(rowCells);

        if (row._variables) {
          //revert original variables
          row.variables = row._variables;
          delete row._variables;
        }
      });
      return result;
    }
  }, {
    key: "roundVariables",
    value: function roundVariables(jobResult) {
      var uniqueValues = jobResult.variableNames.map(function () {
        return new Set();
      });
      jobResult.rows.forEach(function (row) {
        row._variables = row.variables.slice(); // save original row variables

        row.variables.forEach(function (v, i) {
          uniqueValues[i].add(v);
        });
      });
      var uniqueValuesNo = uniqueValues.map(function (s) {
        return s.size;
      });
      var maxPrecision = 14;
      var precision = 2;
      var notReadyVariablesIndexes = jobResult.variableNames.map(function (v, i) {
        return i;
      });

      while (precision <= maxPrecision && notReadyVariablesIndexes.length) {
        uniqueValues = notReadyVariablesIndexes.map(function () {
          return new Set();
        });
        jobResult.rows.forEach(function (row) {
          notReadyVariablesIndexes.forEach(function (variableIndex, notReadyIndex) {
            var val = row._variables[variableIndex];
            val = _sdUtils.Utils.round(val, precision);
            uniqueValues[notReadyIndex].add(val);
            row.variables[variableIndex] = val;
          });
        });
        var newReadyIndexes = [];
        uniqueValues.forEach(function (uniqueVals, notReadyIndex) {
          var origUniqueCount = uniqueValuesNo[notReadyVariablesIndexes[notReadyIndex]];

          if (origUniqueCount == uniqueVals.size) {
            //ready in previous iteration
            newReadyIndexes.push(notReadyIndex);
          }
        });

        if (newReadyIndexes.length) {
          //revert values to prev iteration
          newReadyIndexes.reverse();
          newReadyIndexes.forEach(function (notReadyIndex) {
            notReadyVariablesIndexes.splice(notReadyIndex, 1);
          });
        }

        precision++;
      }
    }
    /*Should return progress object with fields:
     * current
     * total */

  }, {
    key: "getProgress",
    value: function getProgress(execution) {
      if (execution.stepExecutions.length <= 2) {
        return {
          total: 1,
          current: 0
        };
      }

      return this.steps[2].getProgress(execution.stepExecutions[2]);
    }
  }]);

  return SensitivityAnalysisJob;
}(_simpleJob.SimpleJob);

exports.SensitivityAnalysisJob = SensitivityAnalysisJob;

},{"../../../../policies/policy":87,"../../../engine/simple-job":58,"./sensitivity-analysis-job-parameters":15,"./steps/calculate-step":17,"./steps/init-policies-step":18,"./steps/prepare-variables-step":19,"sd-expression-engine":"sd-expression-engine","sd-utils":"sd-utils"}],17:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalculateStep = void 0;

var _sdUtils = require("sd-utils");

var _sdExpressionEngine = require("sd-expression-engine");

var _batchStep = require("../../../../engine/batch/batch-step");

var _treeValidator = require("../../../../../validation/tree-validator");

var _policy = require("../../../../../policies/policy");

var _jobComputationException = require("../../../../engine/exceptions/job-computation-exception");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var CalculateStep = /*#__PURE__*/function (_BatchStep) {
  _inherits(CalculateStep, _BatchStep);

  var _super = _createSuper(CalculateStep);

  function CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize) {
    var _this;

    _classCallCheck(this, CalculateStep);

    _this = _super.call(this, "calculate_step", jobRepository, batchSize);
    _this.expressionsEvaluator = expressionsEvaluator;
    _this.objectiveRulesManager = objectiveRulesManager;
    _this.treeValidator = new _treeValidator.TreeValidator();
    return _this;
  }

  _createClass(CalculateStep, [{
    key: "init",
    value: function init(stepExecution, jobResult) {
      var jobExecutionContext = stepExecution.getJobExecutionContext();
      var params = stepExecution.getJobParameters();
      var ruleName = params.value("ruleName");
      this.objectiveRulesManager.setCurrentRuleByName(ruleName);
      var variableValues = jobResult.data.variableValues;
      var variableNames = params.value("variables").map(function (v) {
        return v.name;
      });
      stepExecution.executionContext.put("variableNames", variableNames);

      if (!jobResult.data.rows) {
        jobResult.data.rows = [];
        jobResult.data.variableNames = variableNames;
      }

      return variableValues.length;
    }
  }, {
    key: "readNextChunk",
    value: function readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {
      var variableValues = jobResult.data.variableValues;
      return variableValues.slice(startIndex, startIndex + chunkSize);
    }
  }, {
    key: "processItem",
    value: function processItem(stepExecution, item) {
      var _this2 = this;

      var params = stepExecution.getJobParameters();
      var ruleName = params.value("ruleName");
      var failOnInvalidTree = params.value("failOnInvalidTree");
      var data = stepExecution.getData();
      var treeRoot = data.getRoots()[0];
      var variableNames = stepExecution.executionContext.get("variableNames");
      var policies = stepExecution.getJobExecutionContext().get("policies");
      this.expressionsEvaluator.clear(data);
      this.expressionsEvaluator.evalGlobalCode(data);
      variableNames.forEach(function (variableName, i) {
        data.expressionScope[variableName] = item[i];
      });
      this.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);
      var vr = this.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));
      var valid = vr.isValid();

      if (!valid && failOnInvalidTree) {
        var errorData = {
          variables: {}
        };
        variableNames.forEach(function (variableName, i) {
          errorData.variables[variableName] = item[i];
        });
        throw new _jobComputationException.JobComputationException("computations", errorData);
      }

      var payoffs = [];
      policies.forEach(function (policy) {
        var payoff = 'n/a';

        if (valid) {
          _this2.objectiveRulesManager.recomputeTree(treeRoot, false, policy);

          payoff = treeRoot.computedValue(ruleName, 'payoff')[0];
        }

        payoffs.push(payoff);
      });
      return {
        policies: policies,
        variables: item,
        payoffs: payoffs
      };
    }
  }, {
    key: "writeChunk",
    value: function writeChunk(stepExecution, items, jobResult) {
      var _this3 = this;

      var params = stepExecution.getJobParameters();
      var extendedPolicyDescription = params.value("extendedPolicyDescription");
      items.forEach(function (item) {
        if (!item) {
          return;
        }

        item.policies.forEach(function (policy, i) {
          var variables = item.variables.map(function (v) {
            return _this3.toFloat(v);
          });
          var payoff = item.payoffs[i];
          var row = {
            policyIndex: i,
            variables: variables,
            payoff: _sdUtils.Utils.isString(payoff) ? payoff : _this3.toFloat(payoff)
          };
          jobResult.data.rows.push(row);
        });
      });
    }
  }, {
    key: "postProcess",
    value: function postProcess(stepExecution, jobResult) {
      delete jobResult.data.variableValues;
    }
  }, {
    key: "toFloat",
    value: function toFloat(v) {
      return _sdExpressionEngine.ExpressionEngine.toFloat(v);
    }
  }]);

  return CalculateStep;
}(_batchStep.BatchStep);

exports.CalculateStep = CalculateStep;

},{"../../../../../policies/policy":87,"../../../../../validation/tree-validator":91,"../../../../engine/batch/batch-step":31,"../../../../engine/exceptions/job-computation-exception":34,"sd-expression-engine":"sd-expression-engine","sd-utils":"sd-utils"}],18:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InitPoliciesStep = void 0;

var _step = require("../../../../engine/step");

var _jobStatus = require("../../../../engine/job-status");

var _policiesCollector = require("../../../../../policies/policies-collector");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var InitPoliciesStep = /*#__PURE__*/function (_Step) {
  _inherits(InitPoliciesStep, _Step);

  var _super = _createSuper(InitPoliciesStep);

  function InitPoliciesStep(jobRepository) {
    _classCallCheck(this, InitPoliciesStep);

    return _super.call(this, "init_policies", jobRepository);
  }

  _createClass(InitPoliciesStep, [{
    key: "doExecute",
    value: function doExecute(stepExecution, jobResult) {
      var data = stepExecution.getData();
      var treeRoot = data.getRoots()[0];
      var policiesCollector = new _policiesCollector.PoliciesCollector(treeRoot);
      var policies = policiesCollector.policies;
      stepExecution.getJobExecutionContext().put("policies", policies);

      if (!jobResult.data) {
        jobResult.data = {};
      }

      jobResult.data.policies = policies;
      stepExecution.exitStatus = _jobStatus.JOB_STATUS.COMPLETED;
      return stepExecution;
    }
  }]);

  return InitPoliciesStep;
}(_step.Step);

exports.InitPoliciesStep = InitPoliciesStep;

},{"../../../../../policies/policies-collector":86,"../../../../engine/job-status":56,"../../../../engine/step":61}],19:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PrepareVariablesStep = void 0;

var _sdUtils = require("sd-utils");

var _step = require("../../../../engine/step");

var _jobStatus = require("../../../../engine/job-status");

var _computationsUtils = require("../../../../../computations-utils");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var PrepareVariablesStep = /*#__PURE__*/function (_Step) {
  _inherits(PrepareVariablesStep, _Step);

  var _super = _createSuper(PrepareVariablesStep);

  function PrepareVariablesStep(jobRepository, expressionEngine) {
    var _this;

    _classCallCheck(this, PrepareVariablesStep);

    _this = _super.call(this, "prepare_variables", jobRepository);
    _this.expressionEngine = expressionEngine;
    return _this;
  }

  _createClass(PrepareVariablesStep, [{
    key: "doExecute",
    value: function doExecute(stepExecution, jobResult) {
      var params = stepExecution.getJobParameters();
      var variables = params.value("variables");
      var variableValues = [];
      variables.forEach(function (v) {
        variableValues.push(_computationsUtils.ComputationsUtils.sequence(v.min, v.max, v.length));
      });
      variableValues = _sdUtils.Utils.cartesianProductOf(variableValues);
      jobResult.data = {
        variableValues: variableValues
      };
      stepExecution.exitStatus = _jobStatus.JOB_STATUS.COMPLETED;
      return stepExecution;
    }
  }]);

  return PrepareVariablesStep;
}(_step.Step);

exports.PrepareVariablesStep = PrepareVariablesStep;

},{"../../../../../computations-utils":5,"../../../../engine/job-status":56,"../../../../engine/step":61,"sd-utils":"sd-utils"}],20:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProbabilisticSensitivityAnalysisJobParameters = void 0;

var _sdUtils = require("sd-utils");

var _jobParameters = require("../../../engine/job-parameters");

var _jobParameterDefinition = require("../../../engine/job-parameter-definition");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var ProbabilisticSensitivityAnalysisJobParameters = /*#__PURE__*/function (_JobParameters) {
  _inherits(ProbabilisticSensitivityAnalysisJobParameters, _JobParameters);

  var _super = _createSuper(ProbabilisticSensitivityAnalysisJobParameters);

  function ProbabilisticSensitivityAnalysisJobParameters() {
    _classCallCheck(this, ProbabilisticSensitivityAnalysisJobParameters);

    return _super.apply(this, arguments);
  }

  _createClass(ProbabilisticSensitivityAnalysisJobParameters, [{
    key: "initDefinitions",
    value: function initDefinitions() {
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("id", _jobParameterDefinition.PARAMETER_TYPE.STRING, 1, 1, true));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("ruleName", _jobParameterDefinition.PARAMETER_TYPE.STRING));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("failOnInvalidTree", _jobParameterDefinition.PARAMETER_TYPE.BOOLEAN));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("extendedPolicyDescription", _jobParameterDefinition.PARAMETER_TYPE.BOOLEAN));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("numberOfRuns", _jobParameterDefinition.PARAMETER_TYPE.INTEGER).set("singleValueValidator", function (v) {
        return v > 0;
      }));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("variables", [new _jobParameterDefinition.JobParameterDefinition("name", _jobParameterDefinition.PARAMETER_TYPE.STRING), new _jobParameterDefinition.JobParameterDefinition("formula", _jobParameterDefinition.PARAMETER_TYPE.NUMBER_EXPRESSION)], 1, Infinity, false, null, function (values) {
        return _sdUtils.Utils.isUnique(values, function (v) {
          return v["name"];
        });
      } //Variable names should be unique
      ));
    }
  }, {
    key: "initDefaultValues",
    value: function initDefaultValues() {
      this.values = {
        id: _sdUtils.Utils.guid(),
        extendedPolicyDescription: true,
        failOnInvalidTree: true
      };
    }
  }]);

  return ProbabilisticSensitivityAnalysisJobParameters;
}(_jobParameters.JobParameters);

exports.ProbabilisticSensitivityAnalysisJobParameters = ProbabilisticSensitivityAnalysisJobParameters;

},{"../../../engine/job-parameter-definition":49,"../../../engine/job-parameters":50,"sd-utils":"sd-utils"}],21:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProbabilisticSensitivityAnalysisJob = void 0;

var _probabilisticSensitivityAnalysisJobParameters = require("./probabilistic-sensitivity-analysis-job-parameters");

var _initPoliciesStep = require("../n-way/steps/init-policies-step");

var _sensitivityAnalysisJob = require("../n-way/sensitivity-analysis-job");

var _probCalculateStep = require("./steps/prob-calculate-step");

var _computePolicyStatsStep = require("./steps/compute-policy-stats-step");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var ProbabilisticSensitivityAnalysisJob = /*#__PURE__*/function (_SensitivityAnalysisJ) {
  _inherits(ProbabilisticSensitivityAnalysisJob, _SensitivityAnalysisJ);

  var _super = _createSuper(ProbabilisticSensitivityAnalysisJob);

  function ProbabilisticSensitivityAnalysisJob(jobRepository, expressionsEvaluator, objectiveRulesManager) {
    var _this;

    var batchSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;

    _classCallCheck(this, ProbabilisticSensitivityAnalysisJob);

    _this = _super.call(this, jobRepository, expressionsEvaluator, objectiveRulesManager, batchSize);
    _this.name = "probabilistic-sensitivity-analysis";
    return _this;
  }

  _createClass(ProbabilisticSensitivityAnalysisJob, [{
    key: "initSteps",
    value: function initSteps() {
      this.addStep(new _initPoliciesStep.InitPoliciesStep(this.jobRepository));
      this.calculateStep = new _probCalculateStep.ProbCalculateStep(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager, this.batchSize);
      this.addStep(this.calculateStep);
      this.addStep(new _computePolicyStatsStep.ComputePolicyStatsStep(this.expressionsEvaluator.expressionEngine, this.objectiveRulesManager, this.jobRepository));
    }
  }, {
    key: "createJobParameters",
    value: function createJobParameters(values) {
      return new _probabilisticSensitivityAnalysisJobParameters.ProbabilisticSensitivityAnalysisJobParameters(values);
    }
    /*Should return progress object with fields:
     * current
     * total */

  }, {
    key: "getProgress",
    value: function getProgress(execution) {
      if (execution.stepExecutions.length <= 1) {
        return {
          total: 1,
          current: 0
        };
      }

      return this.steps[1].getProgress(execution.stepExecutions[1]);
    }
  }]);

  return ProbabilisticSensitivityAnalysisJob;
}(_sensitivityAnalysisJob.SensitivityAnalysisJob);

exports.ProbabilisticSensitivityAnalysisJob = ProbabilisticSensitivityAnalysisJob;

},{"../n-way/sensitivity-analysis-job":16,"../n-way/steps/init-policies-step":18,"./probabilistic-sensitivity-analysis-job-parameters":20,"./steps/compute-policy-stats-step":22,"./steps/prob-calculate-step":23}],22:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComputePolicyStatsStep = void 0;

var _sdUtils = require("sd-utils");

var _step = require("../../../../engine/step");

var _jobStatus = require("../../../../engine/job-status");

var _sdExpressionEngine = require("sd-expression-engine");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var ComputePolicyStatsStep = /*#__PURE__*/function (_Step) {
  _inherits(ComputePolicyStatsStep, _Step);

  var _super = _createSuper(ComputePolicyStatsStep);

  function ComputePolicyStatsStep(expressionEngine, objectiveRulesManager, jobRepository) {
    var _this;

    _classCallCheck(this, ComputePolicyStatsStep);

    _this = _super.call(this, "compute_policy_stats", jobRepository);
    _this.expressionEngine = expressionEngine;
    _this.objectiveRulesManager = objectiveRulesManager;
    return _this;
  }

  _createClass(ComputePolicyStatsStep, [{
    key: "doExecute",
    value: function doExecute(stepExecution, jobResult) {
      var params = stepExecution.getJobParameters();
      var numberOfRuns = params.value("numberOfRuns");
      var ruleName = params.value("ruleName");
      var rule = this.objectiveRulesManager.ruleByName[ruleName];
      var payoffsPerPolicy = jobResult.data.policies.map(function () {
        return [];
      });
      jobResult.data.rows.forEach(function (row) {
        payoffsPerPolicy[row.policyIndex].push(_sdUtils.Utils.isString(row.payoff) ? 0 : row.payoff);
      });

      _sdUtils.log.debug('payoffsPerPolicy', payoffsPerPolicy, jobResult.data.rows.length, rule.maximization);

      jobResult.data.medians = payoffsPerPolicy.map(function (payoffs) {
        return _sdExpressionEngine.ExpressionEngine.median(payoffs);
      });
      jobResult.data.standardDeviations = payoffsPerPolicy.map(function (payoffs) {
        return _sdExpressionEngine.ExpressionEngine.std(payoffs);
      });

      if (rule.maximization) {
        jobResult.data.policyIsBestProbabilities = jobResult.data.policyToHighestPayoffCount.map(function (v) {
          return _sdExpressionEngine.ExpressionEngine.toFloat(_sdExpressionEngine.ExpressionEngine.divide(v, numberOfRuns));
        });
      } else {
        jobResult.data.policyIsBestProbabilities = jobResult.data.policyToLowestPayoffCount.map(function (v) {
          return _sdExpressionEngine.ExpressionEngine.toFloat(_sdExpressionEngine.ExpressionEngine.divide(v, numberOfRuns));
        });
      }

      jobResult.data.policyToHighestPayoffCount = jobResult.data.policyToHighestPayoffCount.map(function (v) {
        return _sdExpressionEngine.ExpressionEngine.toFloat(v);
      });
      jobResult.data.policyToLowestPayoffCount = jobResult.data.policyToLowestPayoffCount.map(function (v) {
        return _sdExpressionEngine.ExpressionEngine.toFloat(v);
      });
      stepExecution.exitStatus = _jobStatus.JOB_STATUS.COMPLETED;
      return stepExecution;
    }
  }]);

  return ComputePolicyStatsStep;
}(_step.Step);

exports.ComputePolicyStatsStep = ComputePolicyStatsStep;

},{"../../../../engine/job-status":56,"../../../../engine/step":61,"sd-expression-engine":"sd-expression-engine","sd-utils":"sd-utils"}],23:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProbCalculateStep = void 0;

var _sdUtils = require("sd-utils");

var _sdExpressionEngine = require("sd-expression-engine");

var _calculateStep = require("../../n-way/steps/calculate-step");

var _jobComputationException = require("../../../../engine/exceptions/job-computation-exception");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var ProbCalculateStep = /*#__PURE__*/function (_CalculateStep) {
  _inherits(ProbCalculateStep, _CalculateStep);

  var _super = _createSuper(ProbCalculateStep);

  function ProbCalculateStep() {
    _classCallCheck(this, ProbCalculateStep);

    return _super.apply(this, arguments);
  }

  _createClass(ProbCalculateStep, [{
    key: "init",
    value: function init(stepExecution, jobResult) {
      var jobExecutionContext = stepExecution.getJobExecutionContext();
      var params = stepExecution.getJobParameters();
      var ruleName = params.value("ruleName");
      this.objectiveRulesManager.setCurrentRuleByName(ruleName);
      var variableNames = params.value("variables").map(function (v) {
        return v.name;
      });
      stepExecution.executionContext.put("variableNames", variableNames);

      if (!jobResult.data.rows) {
        jobResult.data.rows = [];
        jobResult.data.variableNames = variableNames;
        jobResult.data.expectedValues = _sdUtils.Utils.fill(new Array(jobResult.data.policies.length), 0);
        jobResult.data.policyToHighestPayoffCount = _sdUtils.Utils.fill(new Array(jobResult.data.policies.length), 0);
        jobResult.data.policyToLowestPayoffCount = _sdUtils.Utils.fill(new Array(jobResult.data.policies.length), 0);
      }

      return params.value("numberOfRuns");
    }
  }, {
    key: "readNextChunk",
    value: function readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {
      var _this = this;

      var params = stepExecution.getJobParameters();
      var variables = params.value("variables");
      var data = stepExecution.getData();
      var variableValues = [];

      for (var runIndex = 0; runIndex < chunkSize; runIndex++) {
        var singleRunVariableValues = [];
        var errors = [];
        variables.forEach(function (v) {
          try {
            var evaluated = _this.expressionsEvaluator.expressionEngine.eval(v.formula, true, _sdUtils.Utils.cloneDeep(data.expressionScope));

            singleRunVariableValues.push(_sdExpressionEngine.ExpressionEngine.toFloat(evaluated));
          } catch (e) {
            errors.push({
              variable: v,
              error: e
            });
          }
        });

        if (errors.length) {
          var errorData = {
            variables: []
          };
          errors.forEach(function (e) {
            errorData.variables[e.variable.name] = e.error.message;
          });
          throw new _jobComputationException.JobComputationException("param-computation", errorData);
        }

        variableValues.push(singleRunVariableValues);
      }

      return variableValues;
    }
  }, {
    key: "processItem",
    value: function processItem(stepExecution, item, currentItemCount, jobResult) {
      var r = _get(_getPrototypeOf(ProbCalculateStep.prototype), "processItem", this).call(this, stepExecution, item, jobResult);

      var params = stepExecution.getJobParameters();
      var numberOfRuns = params.value("numberOfRuns");
      var policies = stepExecution.getJobExecutionContext().get("policies");
      this.updatePolicyStats(r, policies, numberOfRuns, jobResult);
      return r;
    }
  }, {
    key: "updatePolicyStats",
    value: function updatePolicyStats(r, policies, numberOfRuns, jobResult) {
      var highestPayoff = -Infinity;
      var lowestPayoff = Infinity;
      var bestPolicyIndexes = [];
      var worstPolicyIndexes = [];

      var zeroNum = _sdExpressionEngine.ExpressionEngine.toNumber(0);

      policies.forEach(function (policy, i) {
        var payoff = r.payoffs[i];

        if (_sdUtils.Utils.isString(payoff)) {
          payoff = zeroNum;
        }

        if (payoff < lowestPayoff) {
          lowestPayoff = payoff;
          worstPolicyIndexes = [i];
        } else if (payoff.equals(lowestPayoff)) {
          worstPolicyIndexes.push(i);
        }

        if (payoff > highestPayoff) {
          highestPayoff = payoff;
          bestPolicyIndexes = [i];
        } else if (payoff.equals(highestPayoff)) {
          bestPolicyIndexes.push(i);
        }

        jobResult.data.expectedValues[i] = _sdExpressionEngine.ExpressionEngine.add(jobResult.data.expectedValues[i], _sdExpressionEngine.ExpressionEngine.divide(payoff, numberOfRuns));
      });
      bestPolicyIndexes.forEach(function (policyIndex) {
        jobResult.data.policyToHighestPayoffCount[policyIndex] = _sdExpressionEngine.ExpressionEngine.add(jobResult.data.policyToHighestPayoffCount[policyIndex], _sdExpressionEngine.ExpressionEngine.divide(1, bestPolicyIndexes.length));
      });
      worstPolicyIndexes.forEach(function (policyIndex) {
        jobResult.data.policyToLowestPayoffCount[policyIndex] = _sdExpressionEngine.ExpressionEngine.add(jobResult.data.policyToLowestPayoffCount[policyIndex], _sdExpressionEngine.ExpressionEngine.divide(1, worstPolicyIndexes.length));
      });
    }
  }, {
    key: "postProcess",
    value: function postProcess(stepExecution, jobResult) {
      var _this2 = this;

      jobResult.data.expectedValues = jobResult.data.expectedValues.map(function (v) {
        return _this2.toFloat(v);
      });
    }
  }, {
    key: "toFloat",
    value: function toFloat(v) {
      return _sdExpressionEngine.ExpressionEngine.toFloat(v);
    }
  }]);

  return ProbCalculateStep;
}(_calculateStep.CalculateStep);

exports.ProbCalculateStep = ProbCalculateStep;

},{"../../../../engine/exceptions/job-computation-exception":34,"../../n-way/steps/calculate-step":17,"sd-expression-engine":"sd-expression-engine","sd-utils":"sd-utils"}],24:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpiderPlotJobParameters = void 0;

var _sdUtils = require("sd-utils");

var _jobParameters = require("../../../engine/job-parameters");

var _jobParameterDefinition = require("../../../engine/job-parameter-definition");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var SpiderPlotJobParameters = /*#__PURE__*/function (_JobParameters) {
  _inherits(SpiderPlotJobParameters, _JobParameters);

  var _super = _createSuper(SpiderPlotJobParameters);

  function SpiderPlotJobParameters() {
    _classCallCheck(this, SpiderPlotJobParameters);

    return _super.apply(this, arguments);
  }

  _createClass(SpiderPlotJobParameters, [{
    key: "initDefinitions",
    value: function initDefinitions() {
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("id", _jobParameterDefinition.PARAMETER_TYPE.STRING, 1, 1, true));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("ruleName", _jobParameterDefinition.PARAMETER_TYPE.STRING));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("percentageChangeRange", _jobParameterDefinition.PARAMETER_TYPE.NUMBER).set("singleValueValidator", function (v) {
        return v > 0 && v <= 100;
      }));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("length", _jobParameterDefinition.PARAMETER_TYPE.INTEGER).set("singleValueValidator", function (v) {
        return v >= 0;
      }));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("variables", [new _jobParameterDefinition.JobParameterDefinition("name", _jobParameterDefinition.PARAMETER_TYPE.STRING)], 1, Infinity, false, null, function (values) {
        return _sdUtils.Utils.isUnique(values, function (v) {
          return v["name"];
        });
      } //Variable names should be unique
      ));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("failOnInvalidTree", _jobParameterDefinition.PARAMETER_TYPE.BOOLEAN));
    }
  }, {
    key: "initDefaultValues",
    value: function initDefaultValues() {
      this.values = {
        id: _sdUtils.Utils.guid(),
        failOnInvalidTree: true
      };
    }
  }]);

  return SpiderPlotJobParameters;
}(_jobParameters.JobParameters);

exports.SpiderPlotJobParameters = SpiderPlotJobParameters;

},{"../../../engine/job-parameter-definition":49,"../../../engine/job-parameters":50,"sd-utils":"sd-utils"}],25:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpiderPlotJob = void 0;

var _simpleJob = require("../../../engine/simple-job");

var _calculateStep = require("./steps/calculate-step");

var _spiderPlotJobParameters = require("./spider-plot-job-parameters");

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var SpiderPlotJob = /*#__PURE__*/function (_SimpleJob) {
  _inherits(SpiderPlotJob, _SimpleJob);

  var _super = _createSuper(SpiderPlotJob);

  function SpiderPlotJob(jobRepository, expressionsEvaluator, objectiveRulesManager) {
    var _this;

    _classCallCheck(this, SpiderPlotJob);

    _this = _super.call(this, "spider-plot", jobRepository);

    _this.addStep(new _calculateStep.CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager));

    return _this;
  }

  _createClass(SpiderPlotJob, [{
    key: "createJobParameters",
    value: function createJobParameters(values) {
      return new _spiderPlotJobParameters.SpiderPlotJobParameters(values);
    }
  }, {
    key: "getJobDataValidator",
    value: function getJobDataValidator() {
      return {
        validate: function validate(data) {
          return data.getRoots().length === 1;
        }
      };
    }
    /*Should return progress object with fields:
     * current
     * total */

  }, {
    key: "getProgress",
    value: function getProgress(execution) {
      if (execution.stepExecutions.length < 1) {
        return {
          total: 1,
          current: 0
        };
      }

      return this.steps[0].getProgress(execution.stepExecutions[0]);
    }
  }, {
    key: "jobResultToCsvRows",
    value: function jobResultToCsvRows(jobResult, jobParameters) {
      var withHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var result = [];

      if (withHeaders) {
        result.push(['variable_name', 'policy_no'].concat(jobResult.percentageRangeValues));
      }

      jobResult.rows.forEach(function (row, index) {
        result.push.apply(result, _toConsumableArray(row.payoffs.map(function (payoffs, policyIndex) {
          return [row.variableName, policyIndex + 1].concat(_toConsumableArray(payoffs));
        })));
      });
      return result;
    }
  }]);

  return SpiderPlotJob;
}(_simpleJob.SimpleJob);

exports.SpiderPlotJob = SpiderPlotJob;

},{"../../../engine/simple-job":58,"./spider-plot-job-parameters":24,"./steps/calculate-step":26}],26:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalculateStep = void 0;

var _sdUtils = require("sd-utils");

var _sdExpressionEngine = require("sd-expression-engine");

var _jobComputationException = require("../../../../engine/exceptions/job-computation-exception");

var _batchStep = require("../../../../engine/batch/batch-step");

var _treeValidator = require("../../../../../validation/tree-validator");

var _policy = require("../../../../../policies/policy");

var _policiesCollector = require("../../../../../policies/policies-collector");

var _computationsUtils = require("../../../../../computations-utils");

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var CalculateStep = /*#__PURE__*/function (_BatchStep) {
  _inherits(CalculateStep, _BatchStep);

  var _super = _createSuper(CalculateStep);

  function CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager) {
    var _this;

    _classCallCheck(this, CalculateStep);

    _this = _super.call(this, "calculate_step", jobRepository, 1);
    _this.expressionsEvaluator = expressionsEvaluator;
    _this.objectiveRulesManager = objectiveRulesManager;
    _this.treeValidator = new _treeValidator.TreeValidator();
    return _this;
  }

  _createClass(CalculateStep, [{
    key: "init",
    value: function init(stepExecution, jobResult) {
      var _this2 = this;

      var jobExecutionContext = stepExecution.getJobExecutionContext();
      var params = stepExecution.getJobParameters();
      var ruleName = params.value("ruleName");
      var percentageChangeRange = params.value("percentageChangeRange");
      var length = params.value("length");
      var variables = params.value("variables");
      this.objectiveRulesManager.setCurrentRuleByName(ruleName);
      var variableNames = params.value("variables").map(function (v) {
        return v.name;
      });
      stepExecution.executionContext.put("variableNames", variableNames);
      var data = stepExecution.getData();
      var treeRoot = data.getRoots()[0];
      var payoff = treeRoot.computedValue(ruleName, 'payoff');
      this.expressionsEvaluator.clear(data);
      this.expressionsEvaluator.evalExpressions(data);
      this.objectiveRulesManager.recomputeTree(treeRoot, false);
      var policiesCollector = new _policiesCollector.PoliciesCollector(treeRoot, ruleName);
      var defaultValues = {};
      data.getGlobalVariableNames().forEach(function (name) {
        var v = data.expressionScope[name];

        try {
          defaultValues[name] = _this2.toFloat(v);
        } catch (e) {
          throw new _jobComputationException.JobComputationException("error computing float value of a variable", {
            name: name,
            value: v
          });
        }
      });

      var percentageRangeValues = _computationsUtils.ComputationsUtils.sequence(-percentageChangeRange, percentageChangeRange, 2 * length + 1);

      var variableValues = [];
      variables.forEach(function (v) {
        var defVal = defaultValues[v.name];
        variableValues.push(percentageRangeValues.map(function (p) {
          return _this2.toFloat(_sdExpressionEngine.ExpressionEngine.add(defVal, _sdExpressionEngine.ExpressionEngine.multiply(_sdExpressionEngine.ExpressionEngine.divide(p, 100), defVal)));
        }));
      });

      if (!jobResult.data) {
        jobResult.data = {
          variableNames: variableNames,
          defaultValues: defaultValues,
          percentageRangeValues: percentageRangeValues,
          defaultPayoff: this.toFloat(payoff)[0],
          policies: policiesCollector.policies,
          rows: []
        };
      }

      stepExecution.getJobExecutionContext().put("variableValues", variableValues);
      return variableValues.length;
    }
  }, {
    key: "readNextChunk",
    value: function readNextChunk(stepExecution, startIndex, chunkSize) {
      var variableValues = stepExecution.getJobExecutionContext().get("variableValues");
      return variableValues.slice(startIndex, startIndex + chunkSize);
    }
  }, {
    key: "processItem",
    value: function processItem(stepExecution, item, itemIndex, jobResult) {
      var _this3 = this;

      var params = stepExecution.getJobParameters();
      var ruleName = params.value("ruleName");
      var failOnInvalidTree = params.value("failOnInvalidTree");
      var data = stepExecution.getData();
      var treeRoot = data.getRoots()[0];
      var variableNames = stepExecution.executionContext.get("variableNames");
      var variableName = variableNames[itemIndex];
      var payoffs = jobResult.data.policies.map(function (policy) {
        return [];
      });
      this.expressionsEvaluator.clear(data);
      this.expressionsEvaluator.evalGlobalCode(data);
      item.forEach(function (variableValue) {
        data.expressionScope[variableName] = variableValue;

        _this3.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);

        var vr = _this3.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));

        var valid = vr.isValid();

        if (!valid && failOnInvalidTree) {
          var errorData = {
            variables: {}
          };
          errorData.variables[variableName] = variableValue;
          throw new _jobComputationException.JobComputationException("computations", errorData);
        }

        jobResult.data.policies.forEach(function (policy, policyIndex) {
          _this3.objectiveRulesManager.recomputeTree(treeRoot, false, policy);

          var payoff = treeRoot.computedValue(ruleName, 'payoff')[0];
          payoffs[policyIndex].push(_this3.toFloat(payoff));
        });
      });
      return {
        variableName: variableName,
        variableIndex: itemIndex,
        variableValues: item,
        payoffs: payoffs
      };
    }
  }, {
    key: "writeChunk",
    value: function writeChunk(stepExecution, items, jobResult) {
      var _jobResult$data$rows;

      (_jobResult$data$rows = jobResult.data.rows).push.apply(_jobResult$data$rows, _toConsumableArray(items));
    }
  }, {
    key: "toFloat",
    value: function toFloat(v) {
      return _sdExpressionEngine.ExpressionEngine.toFloat(v);
    }
  }]);

  return CalculateStep;
}(_batchStep.BatchStep);

exports.CalculateStep = CalculateStep;

},{"../../../../../computations-utils":5,"../../../../../policies/policies-collector":86,"../../../../../policies/policy":87,"../../../../../validation/tree-validator":91,"../../../../engine/batch/batch-step":31,"../../../../engine/exceptions/job-computation-exception":34,"sd-expression-engine":"sd-expression-engine","sd-utils":"sd-utils"}],27:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalculateStep = void 0;

var _sdUtils = require("sd-utils");

var _sdExpressionEngine = require("sd-expression-engine");

var _jobComputationException = require("../../../../engine/exceptions/job-computation-exception");

var _batchStep = require("../../../../engine/batch/batch-step");

var _treeValidator = require("../../../../../validation/tree-validator");

var _policy = require("../../../../../policies/policy");

var _policiesCollector = require("../../../../../policies/policies-collector");

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var CalculateStep = /*#__PURE__*/function (_BatchStep) {
  _inherits(CalculateStep, _BatchStep);

  var _super = _createSuper(CalculateStep);

  function CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager) {
    var _this;

    _classCallCheck(this, CalculateStep);

    _this = _super.call(this, "calculate_step", jobRepository, 1);
    _this.expressionsEvaluator = expressionsEvaluator;
    _this.objectiveRulesManager = objectiveRulesManager;
    _this.treeValidator = new _treeValidator.TreeValidator();
    return _this;
  }

  _createClass(CalculateStep, [{
    key: "init",
    value: function init(stepExecution, jobResult) {
      var _this2 = this;

      var jobExecutionContext = stepExecution.getJobExecutionContext();
      var params = stepExecution.getJobParameters();
      var ruleName = params.value("ruleName");
      this.objectiveRulesManager.setCurrentRuleByName(ruleName);
      var variableValues = jobExecutionContext.get("variableValues");
      var variableNames = params.value("variables").map(function (v) {
        return v.name;
      });
      stepExecution.executionContext.put("variableNames", variableNames);
      var data = stepExecution.getData();
      var treeRoot = data.getRoots()[0];
      var payoff = treeRoot.computedValue(ruleName, 'payoff');
      this.expressionsEvaluator.clear(data);
      this.expressionsEvaluator.evalExpressions(data);
      this.objectiveRulesManager.recomputeTree(treeRoot, false);
      var policiesCollector = new _policiesCollector.PoliciesCollector(treeRoot, ruleName);
      var defaultValues = {};
      data.getGlobalVariableNames().forEach(function (name) {
        var v = data.expressionScope[name];

        try {
          defaultValues[name] = _this2.toFloat(v);
        } catch (e) {
          throw new _jobComputationException.JobComputationException("error computing float value of a variable", {
            name: name,
            value: v
          });
        }
      });

      if (!jobResult.data) {
        jobResult.data = {
          variableNames: variableNames,
          defaultValues: defaultValues,
          variableExtents: variableValues.map(function (v) {
            return [v[0], v[v.length - 1]];
          }),
          defaultPayoff: this.toFloat(payoff)[0],
          policies: policiesCollector.policies,
          rows: []
        };
      }

      return variableValues.length;
    }
  }, {
    key: "readNextChunk",
    value: function readNextChunk(stepExecution, startIndex, chunkSize) {
      var variableValues = stepExecution.getJobExecutionContext().get("variableValues");
      return variableValues.slice(startIndex, startIndex + chunkSize);
    }
  }, {
    key: "processItem",
    value: function processItem(stepExecution, item, itemIndex, jobResult) {
      var _this3 = this;

      var params = stepExecution.getJobParameters();
      var ruleName = params.value("ruleName");
      var failOnInvalidTree = params.value("failOnInvalidTree");
      var data = stepExecution.getData();
      var treeRoot = data.getRoots()[0];
      var variableNames = stepExecution.executionContext.get("variableNames");
      var variableName = variableNames[itemIndex];
      var extents = jobResult.data.policies.map(function (policy) {
        return {
          min: Infinity,
          max: -Infinity
        };
      });
      var values = jobResult.data.policies.map(function (policy) {
        return {
          min: null,
          max: null
        };
      });
      this.expressionsEvaluator.clear(data);
      this.expressionsEvaluator.evalGlobalCode(data);
      item.forEach(function (variableValue) {
        data.expressionScope[variableName] = variableValue;

        _this3.expressionsEvaluator.evalExpressionsForNode(data, treeRoot);

        var vr = _this3.treeValidator.validate(data.getAllNodesInSubtree(treeRoot));

        var valid = vr.isValid();

        if (!valid && failOnInvalidTree) {
          var errorData = {
            variables: {}
          };
          errorData.variables[variableName] = variableValue;
          throw new _jobComputationException.JobComputationException("computations", errorData);
        }

        jobResult.data.policies.forEach(function (policy, policyIndex) {
          _this3.objectiveRulesManager.recomputeTree(treeRoot, false, policy);

          var payoff = treeRoot.computedValue(ruleName, 'payoff')[0];

          if (payoff < extents[policyIndex].min) {
            extents[policyIndex].min = payoff;
            values[policyIndex].min = variableValue;
          }

          if (payoff > extents[policyIndex].max) {
            extents[policyIndex].max = payoff;
            values[policyIndex].max = variableValue;
          }
        });
      });
      return {
        variableName: variableName,
        variableIndex: itemIndex,
        extents: extents.map(function (e) {
          return [_this3.toFloat(e.min), _this3.toFloat(e.max)];
        }),
        extentVariableValues: values.map(function (v) {
          return [_this3.toFloat(v.min), _this3.toFloat(v.max)];
        })
      };
    }
  }, {
    key: "writeChunk",
    value: function writeChunk(stepExecution, items, jobResult) {
      var _jobResult$data$rows;

      (_jobResult$data$rows = jobResult.data.rows).push.apply(_jobResult$data$rows, _toConsumableArray(items));
    }
  }, {
    key: "postProcess",
    value: function postProcess(stepExecution, jobResult) {
      jobResult.data.rows.sort(function (a, b) {
        return b.extents[0][1] - b.extents[0][0] - (a.extents[0][1] - a.extents[0][0]);
      });
    }
  }, {
    key: "toFloat",
    value: function toFloat(v) {
      return _sdExpressionEngine.ExpressionEngine.toFloat(v);
    }
  }]);

  return CalculateStep;
}(_batchStep.BatchStep);

exports.CalculateStep = CalculateStep;

},{"../../../../../policies/policies-collector":86,"../../../../../policies/policy":87,"../../../../../validation/tree-validator":91,"../../../../engine/batch/batch-step":31,"../../../../engine/exceptions/job-computation-exception":34,"sd-expression-engine":"sd-expression-engine","sd-utils":"sd-utils"}],28:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PrepareVariablesStep = void 0;

var _sdUtils = require("sd-utils");

var _step = require("../../../../engine/step");

var _jobStatus = require("../../../../engine/job-status");

var _sdExpressionEngine = require("sd-expression-engine");

var _computationsUtils = require("../../../../../computations-utils");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var PrepareVariablesStep = /*#__PURE__*/function (_Step) {
  _inherits(PrepareVariablesStep, _Step);

  var _super = _createSuper(PrepareVariablesStep);

  function PrepareVariablesStep(jobRepository) {
    _classCallCheck(this, PrepareVariablesStep);

    return _super.call(this, "prepare_variables", jobRepository);
  }

  _createClass(PrepareVariablesStep, [{
    key: "doExecute",
    value: function doExecute(stepExecution) {
      var params = stepExecution.getJobParameters();
      var variables = params.value("variables");
      var variableValues = [];
      variables.forEach(function (v) {
        variableValues.push(_computationsUtils.ComputationsUtils.sequence(v.min, v.max, v.length));
      });
      stepExecution.getJobExecutionContext().put("variableValues", variableValues);
      stepExecution.exitStatus = _jobStatus.JOB_STATUS.COMPLETED;
      return stepExecution;
    }
  }]);

  return PrepareVariablesStep;
}(_step.Step);

exports.PrepareVariablesStep = PrepareVariablesStep;

},{"../../../../../computations-utils":5,"../../../../engine/job-status":56,"../../../../engine/step":61,"sd-expression-engine":"sd-expression-engine","sd-utils":"sd-utils"}],29:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TornadoDiagramJobParameters = void 0;

var _sdUtils = require("sd-utils");

var _jobParameters = require("../../../engine/job-parameters");

var _jobParameterDefinition = require("../../../engine/job-parameter-definition");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var TornadoDiagramJobParameters = /*#__PURE__*/function (_JobParameters) {
  _inherits(TornadoDiagramJobParameters, _JobParameters);

  var _super = _createSuper(TornadoDiagramJobParameters);

  function TornadoDiagramJobParameters() {
    _classCallCheck(this, TornadoDiagramJobParameters);

    return _super.apply(this, arguments);
  }

  _createClass(TornadoDiagramJobParameters, [{
    key: "initDefinitions",
    value: function initDefinitions() {
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("id", _jobParameterDefinition.PARAMETER_TYPE.STRING, 1, 1, true));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("ruleName", _jobParameterDefinition.PARAMETER_TYPE.STRING));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("variables", [new _jobParameterDefinition.JobParameterDefinition("name", _jobParameterDefinition.PARAMETER_TYPE.STRING), new _jobParameterDefinition.JobParameterDefinition("min", _jobParameterDefinition.PARAMETER_TYPE.NUMBER), new _jobParameterDefinition.JobParameterDefinition("max", _jobParameterDefinition.PARAMETER_TYPE.NUMBER), new _jobParameterDefinition.JobParameterDefinition("length", _jobParameterDefinition.PARAMETER_TYPE.INTEGER).set("singleValueValidator", function (v) {
        return v >= 0;
      })], 1, Infinity, false, function (v) {
        return v["min"] <= v["max"];
      }, function (values) {
        return _sdUtils.Utils.isUnique(values, function (v) {
          return v["name"];
        });
      } //Variable names should be unique
      ));
      this.definitions.push(new _jobParameterDefinition.JobParameterDefinition("failOnInvalidTree", _jobParameterDefinition.PARAMETER_TYPE.BOOLEAN));
    }
  }, {
    key: "initDefaultValues",
    value: function initDefaultValues() {
      this.values = {
        id: _sdUtils.Utils.guid(),
        failOnInvalidTree: true
      };
    }
  }]);

  return TornadoDiagramJobParameters;
}(_jobParameters.JobParameters);

exports.TornadoDiagramJobParameters = TornadoDiagramJobParameters;

},{"../../../engine/job-parameter-definition":49,"../../../engine/job-parameters":50,"sd-utils":"sd-utils"}],30:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TornadoDiagramJob = void 0;

var _simpleJob = require("../../../engine/simple-job");

var _prepareVariablesStep = require("./steps/prepare-variables-step");

var _calculateStep = require("./steps/calculate-step");

var _tornadoDiagramJobParameters = require("./tornado-diagram-job-parameters");

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var TornadoDiagramJob = /*#__PURE__*/function (_SimpleJob) {
  _inherits(TornadoDiagramJob, _SimpleJob);

  var _super = _createSuper(TornadoDiagramJob);

  function TornadoDiagramJob(jobRepository, expressionsEvaluator, objectiveRulesManager) {
    var _this;

    _classCallCheck(this, TornadoDiagramJob);

    _this = _super.call(this, "tornado-diagram", jobRepository);

    _this.addStep(new _prepareVariablesStep.PrepareVariablesStep(jobRepository));

    _this.addStep(new _calculateStep.CalculateStep(jobRepository, expressionsEvaluator, objectiveRulesManager));

    return _this;
  }

  _createClass(TornadoDiagramJob, [{
    key: "createJobParameters",
    value: function createJobParameters(values) {
      return new _tornadoDiagramJobParameters.TornadoDiagramJobParameters(values);
    }
  }, {
    key: "getJobDataValidator",
    value: function getJobDataValidator() {
      return {
        validate: function validate(data) {
          return data.getRoots().length === 1;
        }
      };
    }
    /*Should return progress object with fields:
     * current
     * total */

  }, {
    key: "getProgress",
    value: function getProgress(execution) {
      if (execution.stepExecutions.length <= 1) {
        return {
          total: 1,
          current: 0
        };
      }

      return this.steps[1].getProgress(execution.stepExecutions[1]);
    }
  }, {
    key: "jobResultToCsvRows",
    value: function jobResultToCsvRows(jobResult, jobParameters) {
      var withHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var result = [];

      if (withHeaders) {
        result.push(['variable_name', 'default_var_value', "min_var_value", "max_var_value", 'default_payoff', "min_payoff", "max_payoff", "policy_no"]);
      }

      jobResult.rows.forEach(function (row, index) {
        result.push.apply(result, _toConsumableArray(row.extents.map(function (extent, policyIndex) {
          return [row.variableName, jobResult.defaultValues[row.variableName], row.extentVariableValues[policyIndex][0], row.extentVariableValues[policyIndex][1], jobResult.defaultPayoff, extent[0], extent[1], policyIndex + 1];
        })));
      });
      return result;
    }
  }]);

  return TornadoDiagramJob;
}(_simpleJob.SimpleJob);

exports.TornadoDiagramJob = TornadoDiagramJob;

},{"../../../engine/simple-job":58,"./steps/calculate-step":27,"./steps/prepare-variables-step":28,"./tornado-diagram-job-parameters":29}],31:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BatchStep = void 0;

var _jobStatus = require("../job-status");

var _sdUtils = require("sd-utils");

var _step = require("../step");

var _jobInterruptedException = require("../exceptions/job-interrupted-exception");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/*job step that process batch of items*/


var BatchStep = /*#__PURE__*/function (_Step) {
  _inherits(BatchStep, _Step);

  var _super = _createSuper(BatchStep);

  function BatchStep(name, jobRepository, chunkSize) {
    var _this;

    _classCallCheck(this, BatchStep);

    _this = _super.call(this, name, jobRepository);
    _this.chunkSize = chunkSize;
    return _this;
  }
  /**
   * Extension point for subclasses to perform step initialization. Should return total item count
   */


  _createClass(BatchStep, [{
    key: "init",
    value: function init(stepExecution, jobResult) {
      throw "BatchStep.init function not implemented for step: " + this.name;
    }
    /**
     * Extension point for subclasses to read and return chunk of items to process
     */

  }, {
    key: "readNextChunk",
    value: function readNextChunk(stepExecution, startIndex, chunkSize, jobResult) {
      throw "BatchStep.readNextChunk function not implemented for step: " + this.name;
    }
    /**
     * Extension point for subclasses to process single item
     * Must return processed item which will be passed in a chunk to writeChunk function
     */

  }, {
    key: "processItem",
    value: function processItem(stepExecution, item, currentItemCount, jobResult) {
      throw "BatchStep.processItem function not implemented for step: " + this.name;
    }
    /**
     * Extension point for subclasses to write chunk of items. Not required
     */

  }, {
    key: "writeChunk",
    value: function writeChunk(stepExecution, items, jobResult) {}
    /**
     * Extension point for subclasses to perform postprocessing after all items have been processed. Not required
     */

  }, {
    key: "postProcess",
    value: function postProcess(stepExecution, jobResult) {}
  }, {
    key: "setTotalItemCount",
    value: function setTotalItemCount(stepExecution, count) {
      stepExecution.executionContext.put(BatchStep.TOTAL_ITEM_COUNT_PROP, count);
    }
  }, {
    key: "getTotalItemCount",
    value: function getTotalItemCount(stepExecution) {
      return stepExecution.executionContext.get(BatchStep.TOTAL_ITEM_COUNT_PROP);
    }
  }, {
    key: "setCurrentItemCount",
    value: function setCurrentItemCount(stepExecution, count) {
      stepExecution.executionContext.put(BatchStep.CURRENT_ITEM_COUNT_PROP, count);
    }
  }, {
    key: "getCurrentItemCount",
    value: function getCurrentItemCount(stepExecution) {
      return stepExecution.executionContext.get(BatchStep.CURRENT_ITEM_COUNT_PROP) || 0;
    }
  }, {
    key: "doExecute",
    value: function doExecute(stepExecution, jobResult) {
      var _this2 = this;

      return Promise.resolve().then(function () {
        return _this2.init(stepExecution, jobResult);
      }).catch(function (e) {
        _sdUtils.log.error("Failed to initialize batch step: " + _this2.name, e);

        throw e;
      }).then(function (totalItemCount) {
        return Promise.resolve().then(function () {
          _this2.setCurrentItemCount(stepExecution, _this2.getCurrentItemCount(stepExecution));

          _this2.setTotalItemCount(stepExecution, totalItemCount);

          return _this2.handleNextChunk(stepExecution, jobResult);
        }).catch(function (e) {
          if (!(e instanceof _jobInterruptedException.JobInterruptedException)) {
            _sdUtils.log.error("Failed to handle batch step: " + _this2.name, e);
          }

          throw e;
        });
      }).then(function () {
        return Promise.resolve().then(function () {
          return _this2.postProcess(stepExecution, jobResult);
        }).catch(function (e) {
          _sdUtils.log.error("Failed to postProcess batch step: " + _this2.name, e);

          throw e;
        });
      }).then(function () {
        stepExecution.exitStatus = _jobStatus.JOB_STATUS.COMPLETED;
        return stepExecution;
      });
    }
  }, {
    key: "handleNextChunk",
    value: function handleNextChunk(stepExecution, jobResult) {
      var _this3 = this;

      var currentItemCount = this.getCurrentItemCount(stepExecution);
      var totalItemCount = this.getTotalItemCount(stepExecution);
      var chunkSize = Math.min(this.chunkSize, totalItemCount - currentItemCount);

      if (currentItemCount >= totalItemCount) {
        return stepExecution;
      }

      return this.checkJobExecutionFlags(stepExecution).then(function () {
        // Check if someone is trying to stop us
        if (stepExecution.terminateOnly) {
          throw new _jobInterruptedException.JobInterruptedException("JobExecution interrupted.");
        }

        return stepExecution;
      }).then(function () {
        return Promise.resolve().then(function () {
          return _this3.readNextChunk(stepExecution, currentItemCount, chunkSize, jobResult);
        }).catch(function (e) {
          _sdUtils.log.error("Failed to read chunk (" + currentItemCount + "," + chunkSize + ") in batch step: " + _this3.name, e);

          throw e;
        });
      }).then(function (chunk) {
        return Promise.resolve().then(function () {
          return _this3.processChunk(stepExecution, chunk, currentItemCount, jobResult);
        }).catch(function (e) {
          _sdUtils.log.error("Failed to process chunk (" + currentItemCount + "," + chunkSize + ") in batch step: " + _this3.name, e);

          throw e;
        });
      }).then(function (processedChunk) {
        return Promise.resolve().then(function () {
          return _this3.writeChunk(stepExecution, processedChunk, jobResult);
        }).catch(function (e) {
          _sdUtils.log.error("Failed to write chunk (" + currentItemCount + "," + chunkSize + ") in batch step: " + _this3.name, e);

          throw e;
        });
      }).then(function (res) {
        currentItemCount += chunkSize;

        _this3.setCurrentItemCount(stepExecution, currentItemCount);

        return _this3.updateJobProgress(stepExecution).then(function () {
          return _this3.handleNextChunk(stepExecution, jobResult);
        });
      });
    }
  }, {
    key: "processChunk",
    value: function processChunk(stepExecution, chunk, currentItemCount, jobResult) {
      var _this4 = this; //TODO promisify


      return chunk.map(function (item, i) {
        return _this4.processItem(stepExecution, item, currentItemCount + i, jobResult);
      });
    }
    /*Should return progress object with fields:
     * current
     * total */

  }, {
    key: "getProgress",
    value: function getProgress(stepExecution) {
      return {
        total: this.getTotalItemCount(stepExecution),
        current: this.getCurrentItemCount(stepExecution)
      };
    }
  }, {
    key: "updateJobProgress",
    value: function updateJobProgress(stepExecution) {
      var progress = this.jobRepository.getJobByName(stepExecution.jobExecution.jobInstance.jobName).getProgress(stepExecution.jobExecution);
      return this.jobRepository.updateJobExecutionProgress(stepExecution.jobExecution.id, progress);
    }
  }, {
    key: "checkJobExecutionFlags",
    value: function checkJobExecutionFlags(stepExecution) {
      return this.jobRepository.getJobByName(stepExecution.jobExecution.jobInstance.jobName).checkExecutionFlags(stepExecution.jobExecution);
    }
  }]);

  return BatchStep;
}(_step.Step);

exports.BatchStep = BatchStep;
BatchStep.CURRENT_ITEM_COUNT_PROP = 'batch_step_current_item_count';
BatchStep.TOTAL_ITEM_COUNT_PROP = 'batch_step_total_item_count';

},{"../exceptions/job-interrupted-exception":38,"../job-status":56,"../step":61,"sd-utils":"sd-utils"}],32:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExtendableError = void 0;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var ExtendableError = function ExtendableError(message, data) {
  _classCallCheck(this, ExtendableError);

  this.message = message;
  this.data = data;
  this.name = this.constructor.name;
};

exports.ExtendableError = ExtendableError;

},{}],33:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extendableError = require("./extendable-error");

Object.keys(_extendableError).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _extendableError[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _extendableError[key];
    }
  });
});

var _jobDataInvalidException = require("./job-data-invalid-exception");

Object.keys(_jobDataInvalidException).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _jobDataInvalidException[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobDataInvalidException[key];
    }
  });
});

var _jobExecutionAlreadyRunningException = require("./job-execution-already-running-exception");

Object.keys(_jobExecutionAlreadyRunningException).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _jobExecutionAlreadyRunningException[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobExecutionAlreadyRunningException[key];
    }
  });
});

var _jobInstanceAlreadyCompleteException = require("./job-instance-already-complete-exception");

Object.keys(_jobInstanceAlreadyCompleteException).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _jobInstanceAlreadyCompleteException[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobInstanceAlreadyCompleteException[key];
    }
  });
});

var _jobInterruptedException = require("./job-interrupted-exception");

Object.keys(_jobInterruptedException).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _jobInterruptedException[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobInterruptedException[key];
    }
  });
});

var _jobParametersInvalidException = require("./job-parameters-invalid-exception");

Object.keys(_jobParametersInvalidException).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _jobParametersInvalidException[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobParametersInvalidException[key];
    }
  });
});

var _jobRestartException = require("./job-restart-exception");

Object.keys(_jobRestartException).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _jobRestartException[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobRestartException[key];
    }
  });
});

},{"./extendable-error":32,"./job-data-invalid-exception":35,"./job-execution-already-running-exception":36,"./job-instance-already-complete-exception":37,"./job-interrupted-exception":38,"./job-parameters-invalid-exception":39,"./job-restart-exception":40}],34:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobComputationException = void 0;

var _extendableError = require("./extendable-error");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var JobComputationException = /*#__PURE__*/function (_ExtendableError) {
  _inherits(JobComputationException, _ExtendableError);

  var _super = _createSuper(JobComputationException);

  function JobComputationException() {
    _classCallCheck(this, JobComputationException);

    return _super.apply(this, arguments);
  }

  return JobComputationException;
}(_extendableError.ExtendableError);

exports.JobComputationException = JobComputationException;

},{"./extendable-error":32}],35:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobDataInvalidException = void 0;

var _extendableError = require("./extendable-error");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var JobDataInvalidException = /*#__PURE__*/function (_ExtendableError) {
  _inherits(JobDataInvalidException, _ExtendableError);

  var _super = _createSuper(JobDataInvalidException);

  function JobDataInvalidException() {
    _classCallCheck(this, JobDataInvalidException);

    return _super.apply(this, arguments);
  }

  return JobDataInvalidException;
}(_extendableError.ExtendableError);

exports.JobDataInvalidException = JobDataInvalidException;

},{"./extendable-error":32}],36:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobExecutionAlreadyRunningException = void 0;

var _extendableError = require("./extendable-error");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var JobExecutionAlreadyRunningException = /*#__PURE__*/function (_ExtendableError) {
  _inherits(JobExecutionAlreadyRunningException, _ExtendableError);

  var _super = _createSuper(JobExecutionAlreadyRunningException);

  function JobExecutionAlreadyRunningException() {
    _classCallCheck(this, JobExecutionAlreadyRunningException);

    return _super.apply(this, arguments);
  }

  return JobExecutionAlreadyRunningException;
}(_extendableError.ExtendableError);

exports.JobExecutionAlreadyRunningException = JobExecutionAlreadyRunningException;

},{"./extendable-error":32}],37:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobInstanceAlreadyCompleteException = void 0;

var _extendableError = require("./extendable-error");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var JobInstanceAlreadyCompleteException = /*#__PURE__*/function (_ExtendableError) {
  _inherits(JobInstanceAlreadyCompleteException, _ExtendableError);

  var _super = _createSuper(JobInstanceAlreadyCompleteException);

  function JobInstanceAlreadyCompleteException() {
    _classCallCheck(this, JobInstanceAlreadyCompleteException);

    return _super.apply(this, arguments);
  }

  return JobInstanceAlreadyCompleteException;
}(_extendableError.ExtendableError);

exports.JobInstanceAlreadyCompleteException = JobInstanceAlreadyCompleteException;

},{"./extendable-error":32}],38:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobInterruptedException = void 0;

var _extendableError = require("./extendable-error");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var JobInterruptedException = /*#__PURE__*/function (_ExtendableError) {
  _inherits(JobInterruptedException, _ExtendableError);

  var _super = _createSuper(JobInterruptedException);

  function JobInterruptedException() {
    _classCallCheck(this, JobInterruptedException);

    return _super.apply(this, arguments);
  }

  return JobInterruptedException;
}(_extendableError.ExtendableError);

exports.JobInterruptedException = JobInterruptedException;

},{"./extendable-error":32}],39:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobParametersInvalidException = void 0;

var _extendableError = require("./extendable-error");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var JobParametersInvalidException = /*#__PURE__*/function (_ExtendableError) {
  _inherits(JobParametersInvalidException, _ExtendableError);

  var _super = _createSuper(JobParametersInvalidException);

  function JobParametersInvalidException() {
    _classCallCheck(this, JobParametersInvalidException);

    return _super.apply(this, arguments);
  }

  return JobParametersInvalidException;
}(_extendableError.ExtendableError);

exports.JobParametersInvalidException = JobParametersInvalidException;

},{"./extendable-error":32}],40:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobRestartException = void 0;

var _extendableError = require("./extendable-error");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var JobRestartException = /*#__PURE__*/function (_ExtendableError) {
  _inherits(JobRestartException, _ExtendableError);

  var _super = _createSuper(JobRestartException);

  function JobRestartException() {
    _classCallCheck(this, JobRestartException);

    return _super.apply(this, arguments);
  }

  return JobRestartException;
}(_extendableError.ExtendableError);

exports.JobRestartException = JobRestartException;

},{"./extendable-error":32}],41:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExecutionContext = void 0;

var _sdUtils = require("sd-utils");

var _sdModel = require("sd-model");

var _stepExecution = require("./step-execution");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var ExecutionContext = /*#__PURE__*/function () {
  function ExecutionContext(context) {
    _classCallCheck(this, ExecutionContext);

    this.dirty = false;
    this.context = {};

    if (context) {
      this.context = _sdUtils.Utils.clone(context);
    }
  }

  _createClass(ExecutionContext, [{
    key: "put",
    value: function put(key, value) {
      var prevValue = this.context[key];

      if (value != null) {
        var result = this.context[key] = value;
        this.dirty = prevValue == null || prevValue != null && prevValue != value;
      } else {
        delete this.context[key];
        this.dirty = prevValue != null;
      }
    }
  }, {
    key: "get",
    value: function get(key) {
      return this.context[key];
    }
  }, {
    key: "containsKey",
    value: function containsKey(key) {
      return this.context.hasOwnProperty(key);
    }
  }, {
    key: "remove",
    value: function remove(key) {
      delete this.context[key];
    }
  }, {
    key: "setData",
    value: function setData(data) {
      //set data model
      return this.put("data", data);
    }
  }, {
    key: "getData",
    value: function getData() {
      // get data model
      return this.get("data");
    }
  }, {
    key: "getDTO",
    value: function getDTO() {
      var _this = this;

      var filteredProperties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var deepClone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var cloneMethod = _sdUtils.Utils.cloneDeepWith;

      if (!deepClone) {
        cloneMethod = _sdUtils.Utils.cloneWith;
      }

      var dto = _sdUtils.Utils.assign({}, cloneMethod(this, function (value, key, object, stack) {
        if (filteredProperties.indexOf(key) > -1) {
          return null;
        }

        if (value instanceof _sdModel.DataModel) {
          return value.getDTO();
        }

        if (value && value.$ObjectWithIdAndEditableFields && value.id && _this.getData().findById(value.id)) {
          return {
            '$ObjectWithIdAndEditableFields': true,
            id: value.id
          };
        }

        if (value instanceof Error) {
          return _sdUtils.Utils.getErrorDTO(value);
        }
      }));

      return dto;
    }
  }]);

  return ExecutionContext;
}();

exports.ExecutionContext = ExecutionContext;

},{"./step-execution":60,"sd-model":"sd-model","sd-utils":"sd-utils"}],42:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  exceptions: true
};
exports.exceptions = void 0;

var exceptions = _interopRequireWildcard(require("./exceptions"));

exports.exceptions = exceptions;

var _executionContext = require("./execution-context");

Object.keys(_executionContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _executionContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _executionContext[key];
    }
  });
});

var _job = require("./job");

Object.keys(_job).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _job[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _job[key];
    }
  });
});

var _jobExecution = require("./job-execution");

Object.keys(_jobExecution).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _jobExecution[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobExecution[key];
    }
  });
});

var _jobExecutionFlag = require("./job-execution-flag");

Object.keys(_jobExecutionFlag).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _jobExecutionFlag[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobExecutionFlag[key];
    }
  });
});

var _jobExecutionListener = require("./job-execution-listener");

Object.keys(_jobExecutionListener).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _jobExecutionListener[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobExecutionListener[key];
    }
  });
});

var _jobInstance = require("./job-instance");

Object.keys(_jobInstance).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _jobInstance[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobInstance[key];
    }
  });
});

var _jobKeyGenerator = require("./job-key-generator");

Object.keys(_jobKeyGenerator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _jobKeyGenerator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobKeyGenerator[key];
    }
  });
});

var _jobLauncher = require("./job-launcher");

Object.keys(_jobLauncher).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _jobLauncher[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobLauncher[key];
    }
  });
});

var _jobParameterDefinition = require("./job-parameter-definition");

Object.keys(_jobParameterDefinition).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _jobParameterDefinition[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobParameterDefinition[key];
    }
  });
});

var _jobParameters = require("./job-parameters");

Object.keys(_jobParameters).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _jobParameters[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobParameters[key];
    }
  });
});

var _jobStatus = require("./job-status");

Object.keys(_jobStatus).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _jobStatus[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobStatus[key];
    }
  });
});

var _simpleJob = require("./simple-job");

Object.keys(_simpleJob).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _simpleJob[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _simpleJob[key];
    }
  });
});

var _step = require("./step");

Object.keys(_step).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _step[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _step[key];
    }
  });
});

var _stepExecution = require("./step-execution");

Object.keys(_stepExecution).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _stepExecution[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _stepExecution[key];
    }
  });
});

var _stepExecutionListener = require("./step-execution-listener");

Object.keys(_stepExecutionListener).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _stepExecutionListener[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _stepExecutionListener[key];
    }
  });
});

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

},{"./exceptions":33,"./execution-context":41,"./job":57,"./job-execution":45,"./job-execution-flag":43,"./job-execution-listener":44,"./job-instance":46,"./job-key-generator":47,"./job-launcher":48,"./job-parameter-definition":49,"./job-parameters":50,"./job-status":56,"./simple-job":58,"./step":61,"./step-execution":60,"./step-execution-listener":59}],43:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JOB_EXECUTION_FLAG = void 0;
var JOB_EXECUTION_FLAG = {
  STOP: 'STOP'
};
exports.JOB_EXECUTION_FLAG = JOB_EXECUTION_FLAG;

},{}],44:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobExecutionListener = void 0;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var JobExecutionListener = /*#__PURE__*/function () {
  function JobExecutionListener() {
    _classCallCheck(this, JobExecutionListener);
  }

  _createClass(JobExecutionListener, [{
    key: "beforeJob",
    value:
    /*Called before a job executes*/
    function beforeJob(jobExecution) {}
    /*Called after completion of a job. Called after both successful and failed executions*/

  }, {
    key: "afterJob",
    value: function afterJob(jobExecution) {}
  }]);

  return JobExecutionListener;
}();

exports.JobExecutionListener = JobExecutionListener;

},{}],45:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobExecution = void 0;

var _jobStatus = require("./job-status");

var _stepExecution = require("./step-execution");

var _sdUtils = require("sd-utils");

var _executionContext = require("./execution-context");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/*domain object representing the execution of a job.*/


var JobExecution = /*#__PURE__*/function () {
  function JobExecution(jobInstance, jobParameters, id) {
    _classCallCheck(this, JobExecution);

    this.stepExecutions = [];
    this.status = _jobStatus.JOB_STATUS.STARTING;
    this.exitStatus = _jobStatus.JOB_STATUS.UNKNOWN;
    this.executionContext = new _executionContext.ExecutionContext();
    this.startTime = null;
    this.createTime = new Date();
    this.endTime = null;
    this.lastUpdated = null;
    this.failureExceptions = [];

    if (id === null || id === undefined) {
      this.id = _sdUtils.Utils.guid();
    } else {
      this.id = id;
    }

    this.jobInstance = jobInstance;
    this.jobParameters = jobParameters;
  }
  /**
   * Register a step execution with the current job execution.
   * @param stepName the name of the step the new execution is associated with
   */


  _createClass(JobExecution, [{
    key: "createStepExecution",
    value: function createStepExecution(stepName) {
      var stepExecution = new _stepExecution.StepExecution(stepName, this);
      this.stepExecutions.push(stepExecution);
      return stepExecution;
    }
  }, {
    key: "isRunning",
    value: function isRunning() {
      return !this.endTime;
    }
    /**
     * Test if this JobExecution has been signalled to
     * stop.
     */

  }, {
    key: "isStopping",
    value: function isStopping() {
      return this.status === _jobStatus.JOB_STATUS.STOPPING;
    }
    /**
     * Signal the JobExecution to stop.
     */

  }, {
    key: "stop",
    value: function stop() {
      this.stepExecutions.forEach(function (se) {
        se.terminateOnly = true;
      });
      this.status = _jobStatus.JOB_STATUS.STOPPING;
    }
  }, {
    key: "getData",
    value: function getData() {
      return this.executionContext.getData();
    }
  }, {
    key: "getDTO",
    value: function getDTO() {
      var filteredProperties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var deepClone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var cloneMethod = _sdUtils.Utils.cloneDeepWith;

      if (!deepClone) {
        cloneMethod = _sdUtils.Utils.cloneWith;
      }

      return _sdUtils.Utils.assign({}, cloneMethod(this, function (value, key, object, stack) {
        if (filteredProperties.indexOf(key) > -1) {
          return null;
        }

        if (["jobParameters", "executionContext"].indexOf(key) > -1) {
          return value.getDTO();
        }

        if (value instanceof Error) {
          return _sdUtils.Utils.getErrorDTO(value);
        }

        if (value instanceof _stepExecution.StepExecution) {
          return value.getDTO(["jobExecution"], deepClone);
        }
      }));
    }
  }]);

  return JobExecution;
}();

exports.JobExecution = JobExecution;

},{"./execution-context":41,"./job-status":56,"./step-execution":60,"sd-utils":"sd-utils"}],46:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobInstance = void 0;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
/* object representing a uniquely identifiable job run. JobInstance can be restarted multiple times in case of execution failure and it's lifecycle ends with first successful execution*/


var JobInstance = function JobInstance(id, jobName) {
  _classCallCheck(this, JobInstance);

  this.id = id;
  this.jobName = jobName;
};

exports.JobInstance = JobInstance;

},{}],47:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobKeyGenerator = void 0;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var JobKeyGenerator = /*#__PURE__*/function () {
  function JobKeyGenerator() {
    _classCallCheck(this, JobKeyGenerator);
  }

  _createClass(JobKeyGenerator, null, [{
    key: "generateKey",
    value:
    /*Method to generate the unique key used to identify a job instance.*/
    function generateKey(jobParameters) {
      var result = "";
      jobParameters.definitions.forEach(function (d, i) {
        if (d.identifying) {
          result += d.name + "=" + jobParameters.values[d.name] + ";";
        }
      });
      return result;
    }
  }]);

  return JobKeyGenerator;
}();

exports.JobKeyGenerator = JobKeyGenerator;

},{}],48:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobLauncher = void 0;

var _jobRestartException = require("./exceptions/job-restart-exception");

var _jobStatus = require("./job-status");

var _sdUtils = require("sd-utils");

var _jobParametersInvalidException = require("./exceptions/job-parameters-invalid-exception");

var _jobDataInvalidException = require("./exceptions/job-data-invalid-exception");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var JobLauncher = /*#__PURE__*/function () {
  function JobLauncher(jobRepository, jobWorker, dataModelSerializer) {
    _classCallCheck(this, JobLauncher);

    this.jobRepository = jobRepository;
    this.jobWorker = jobWorker;
    this.dataModelSerializer = dataModelSerializer;
  }

  _createClass(JobLauncher, [{
    key: "run",
    value: function run(jobOrName, jobParametersValues, data) {
      var _this = this;

      var resolvePromiseAfterJobIsLaunched = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var job;
      var jobParameters;
      return Promise.resolve().then(function () {
        if (_sdUtils.Utils.isString(jobOrName)) {
          job = _this.jobRepository.getJobByName(jobOrName);
        } else {
          job = jobOrName;
        }

        if (!job) {
          throw new _jobRestartException.JobRestartException("No such job: " + jobOrName);
        }

        jobParameters = job.createJobParameters(jobParametersValues);
        return _this.validate(job, jobParameters, data);
      }).then(function (valid) {
        return _this.jobRepository.createJobExecution(job.name, jobParameters, data).then(function (jobExecution) {
          if (_this.jobWorker) {
            _sdUtils.log.debug("Job: [" + job.name + "] execution [" + jobExecution.id + "] delegated to worker");

            _this.jobWorker.executeJob(jobExecution.id);

            return jobExecution;
          }

          var executionPromise = _this._execute(job, jobExecution);

          if (resolvePromiseAfterJobIsLaunched) {
            return jobExecution;
          }

          return executionPromise;
        });
      });
    }
  }, {
    key: "validate",
    value: function validate(job, jobParameters, data) {
      return this.jobRepository.getLastJobExecution(job.name, jobParameters).then(function (lastExecution) {
        if (lastExecution != null) {
          if (!job.isRestartable) {
            throw new _jobRestartException.JobRestartException("JobInstance already exists and is not restartable");
          }

          lastExecution.stepExecutions.forEach(function (execution) {
            if (execution.status == _jobStatus.JOB_STATUS.UNKNOWN) {
              throw new _jobRestartException.JobRestartException("Step [" + execution.stepName + "] is of status UNKNOWN");
            }
          });
        }

        if (job.jobParametersValidator && !job.jobParametersValidator.validate(jobParameters)) {
          throw new _jobParametersInvalidException.JobParametersInvalidException("Invalid job parameters in jobLauncher.run for job: " + job.name);
        }

        if (job.jobDataValidator && !job.jobDataValidator.validate(data)) {
          throw new _jobDataInvalidException.JobDataInvalidException("Invalid job data in jobLauncher.run for job: " + job.name);
        }

        return true;
      });
    }
    /**Execute previously created job execution*/

  }, {
    key: "execute",
    value: function execute(jobExecutionOrId) {
      var _this2 = this;

      return Promise.resolve().then(function () {
        if (_sdUtils.Utils.isString(jobExecutionOrId)) {
          return _this2.jobRepository.getJobExecutionById(jobExecutionOrId);
        }

        return jobExecutionOrId;
      }).then(function (jobExecution) {
        if (!jobExecution) {
          throw new _jobRestartException.JobRestartException("JobExecution [" + jobExecutionOrId + "] is not found");
        }

        if (jobExecution.status !== _jobStatus.JOB_STATUS.STARTING) {
          throw new _jobRestartException.JobRestartException("JobExecution [" + jobExecution.id + "] already started");
        }

        var jobName = jobExecution.jobInstance.jobName;

        var job = _this2.jobRepository.getJobByName(jobName);

        if (!job) {
          throw new _jobRestartException.JobRestartException("No such job: " + jobName);
        }

        return _this2._execute(job, jobExecution);
      });
    }
  }, {
    key: "_execute",
    value: function _execute(job, jobExecution) {
      var jobName = job.name;

      _sdUtils.log.info("Job: [" + jobName + "] launched with the following parameters: [" + jobExecution.jobParameters + "]", jobExecution.getData());

      return job.execute(jobExecution).then(function (jobExecution) {
        _sdUtils.log.info("Job: [" + jobName + "] completed with the following parameters: [" + jobExecution.jobParameters + "] and the following status: [" + jobExecution.status + "]");

        return jobExecution;
      }).catch(function (e) {
        _sdUtils.log.error("Job: [" + jobName + "] failed unexpectedly and fatally with the following parameters: [" + jobExecution.jobParameters + "]", e);

        throw e;
      });
    }
  }]);

  return JobLauncher;
}();

exports.JobLauncher = JobLauncher;

},{"./exceptions/job-data-invalid-exception":35,"./exceptions/job-parameters-invalid-exception":39,"./exceptions/job-restart-exception":40,"./job-status":56,"sd-utils":"sd-utils"}],49:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobParameterDefinition = exports.PARAMETER_TYPE = void 0;

var _sdUtils = require("sd-utils");

var _sdExpressionEngine = require("sd-expression-engine");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var PARAMETER_TYPE = {
  STRING: 'STRING',
  DATE: 'DATE',
  INTEGER: 'INTEGER',
  NUMBER: 'FLOAT',
  BOOLEAN: 'BOOLEAN',
  NUMBER_EXPRESSION: 'NUMBER_EXPRESSION',
  COMPOSITE: 'COMPOSITE' //composite parameter with nested subparameters

};
exports.PARAMETER_TYPE = PARAMETER_TYPE;

var JobParameterDefinition = /*#__PURE__*/function () {
  function JobParameterDefinition(name, typeOrNestedParametersDefinitions) {
    var minOccurs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var maxOccurs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    var identifying = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    var singleValueValidator = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    var validator = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

    _classCallCheck(this, JobParameterDefinition);

    this.nestedParameters = [];
    this.required = true;
    this.name = name;

    if (_sdUtils.Utils.isArray(typeOrNestedParametersDefinitions)) {
      this.type = PARAMETER_TYPE.COMPOSITE;
      this.nestedParameters = typeOrNestedParametersDefinitions;
    } else {
      this.type = typeOrNestedParametersDefinitions;
    }

    this.validator = validator;
    this.singleValueValidator = singleValueValidator;
    this.identifying = identifying;
    this.minOccurs = minOccurs;
    this.maxOccurs = maxOccurs;
  }

  _createClass(JobParameterDefinition, [{
    key: "set",
    value: function set(key, val) {
      this[key] = val;
      return this;
    }
  }, {
    key: "validate",
    value: function validate(value, allValues) {
      var _this = this;

      var isArray = _sdUtils.Utils.isArray(value);

      if (this.maxOccurs > 1 && !isArray) {
        return false;
      }

      if (!isArray) {
        return this.validateSingleValue(value, allValues);
      }

      if (value.length < this.minOccurs || value.length > this.maxOccurs) {
        return false;
      }

      if (!value.every(function (v) {
        return _this.validateSingleValue(v, value);
      })) {
        return false;
      }

      if (this.validator) {
        return this.validator(value, allValues);
      }

      return true;
    }
  }, {
    key: "validateSingleValue",
    value: // allValues - all values on the same level
    function validateSingleValue(value, allValues) {
      if (!value && value !== 0 && value !== false && this.minOccurs > 0) {
        return !this.required;
      }

      if (PARAMETER_TYPE.STRING === this.type && !_sdUtils.Utils.isString(value)) {
        return false;
      }

      if (PARAMETER_TYPE.DATE === this.type && !_sdUtils.Utils.isDate(value)) {
        return false;
      }

      if (PARAMETER_TYPE.INTEGER === this.type && !_sdUtils.Utils.isInt(value)) {
        return false;
      }

      if (PARAMETER_TYPE.NUMBER === this.type && !_sdUtils.Utils.isNumber(value)) {
        return false;
      }

      if (PARAMETER_TYPE.BOOLEAN === this.type && !_sdUtils.Utils.isBoolean(value)) {
        return false;
      }

      if (PARAMETER_TYPE.NUMBER_EXPRESSION === this.type) {
        value = JobParameterDefinition.computeNumberExpression(value);

        if (value === null) {
          return false;
        }
      }

      if (PARAMETER_TYPE.COMPOSITE === this.type) {
        if (!_sdUtils.Utils.isObject(value)) {
          return false;
        }

        if (!this.nestedParameters.every(function (nestedDef, i) {
          return nestedDef.validate(value[nestedDef.name]);
        })) {
          return false;
        }
      }

      if (this.singleValueValidator) {
        return this.singleValueValidator(value, allValues);
      }

      return true;
    }
  }, {
    key: "value",
    value: function value(_value) {
      if (PARAMETER_TYPE.NUMBER_EXPRESSION === this.type) {
        return JobParameterDefinition.computeNumberExpression(_value);
      }

      return _value;
    }
  }], [{
    key: "computeNumberExpression",
    value: function computeNumberExpression(val) {
      var parsed = parseFloat(val);

      if (parsed === Infinity || parsed === -Infinity) {
        return parsed;
      }

      if (!_sdExpressionEngine.ExpressionEngine.validate(val, {}, false)) {
        return null;
      }

      return _sdExpressionEngine.ExpressionEngine.eval(val, true);
    }
  }]);

  return JobParameterDefinition;
}();

exports.JobParameterDefinition = JobParameterDefinition;

},{"sd-expression-engine":"sd-expression-engine","sd-utils":"sd-utils"}],50:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobParameters = void 0;

var _jobParameterDefinition = require("./job-parameter-definition");

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var JobParameters = /*#__PURE__*/function () {
  function JobParameters(values) {
    _classCallCheck(this, JobParameters);

    this.definitions = [];
    this.values = {};
    this.initDefinitions();
    this.initDefaultValues();

    if (values) {
      _sdUtils.Utils.deepExtend(this.values, values);
    }
  }

  _createClass(JobParameters, [{
    key: "initDefinitions",
    value: function initDefinitions() {}
  }, {
    key: "initDefaultValues",
    value: function initDefaultValues() {}
  }, {
    key: "validate",
    value: function validate() {
      var _this = this;

      return this.definitions.every(function (def, i) {
        return def.validate(_this.values[def.name], _this.values);
      });
    }
  }, {
    key: "getDefinition",
    value: function getDefinition(path) {
      var defs = this.definitions;
      var def = null;

      if (!path.split().every(function (name) {
        def = _sdUtils.Utils.find(defs, function (d) {
          return d.name == name;
        });

        if (!def) {
          return false;
        }

        defs = def.nestedParameters;
        return true;
      })) {
        return null;
      }

      return def;
    }
    /*get or set value by path*/

  }, {
    key: "value",
    value: function value(path, _value) {
      if (arguments.length === 1) {
        var def = this.getDefinition(path);

        var val = _sdUtils.Utils.get(this.values, path, null);

        if (def) {
          return def.value(val);
        }

        return val;
      }

      _sdUtils.Utils.set(this.values, path, _value);

      return _value;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this2 = this;

      var result = "JobParameters[";
      this.definitions.forEach(function (d, i) {
        var val = _this2.values[d.name]; // if(Utils.isArray(val)){
        //     var values = val;
        //
        //
        // }
        // if(PARAMETER_TYPE.COMPOSITE == d.type){
        //
        // }

        result += d.name + "=" + val + ";";
      });
      result += "]";
      return result;
    }
  }, {
    key: "getDTO",
    value: function getDTO() {
      return {
        values: this.values
      };
    }
  }]);

  return JobParameters;
}();

exports.JobParameters = JobParameters;

},{"./job-parameter-definition":49,"sd-utils":"sd-utils"}],51:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IdbJobRepository = void 0;

var _jobRepository = require("./job-repository");

var _idb = require("idb");

var _sdUtils = require("sd-utils");

var _jobExecution = require("../job-execution");

var _jobInstance = require("../job-instance");

var _stepExecution = require("../step-execution");

var _executionContext = require("../execution-context");

var _sdModel = require("sd-model");

var _jobResult = require("../job-result");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/* IndexedDB job repository*/


var IdbJobRepository = /*#__PURE__*/function (_JobRepository) {
  _inherits(IdbJobRepository, _JobRepository);

  var _super = _createSuper(IdbJobRepository);

  function IdbJobRepository(expressionsReviver) {
    var _this;

    var dbName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'sd-job-repository';
    var deleteDB = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    _classCallCheck(this, IdbJobRepository);

    _this = _super.call(this);
    _this.dbName = dbName;
    _this.expressionsReviver = expressionsReviver;

    if (deleteDB) {
      _this.deleteDB().then(function () {
        _this.initDB();
      }).catch(function (e) {
        _sdUtils.log.error(e);

        _this.initDB();
      });
    } else {
      _this.initDB();
    }

    return _this;
  }

  _createClass(IdbJobRepository, [{
    key: "initDB",
    value: function initDB() {
      this.dbPromise = (0, _idb.openDB)(this.dbName, 2, {
        upgrade: function upgrade(db, oldVersion, newVersion, transaction) {
          // Note: we don't use 'break' in this switch statement,
          // the fall-through behaviour is what we want.
          switch (oldVersion) {
            case 0:
              db.createObjectStore('job-instances');
              var jobExecutionsOS = db.createObjectStore('job-executions');
              jobExecutionsOS.createIndex("jobInstanceId", "jobInstance.id", {
                unique: false
              });
              jobExecutionsOS.createIndex("createTime", "createTime", {
                unique: false
              });
              jobExecutionsOS.createIndex("status", "status", {
                unique: false
              });
              db.createObjectStore('job-execution-progress');
              db.createObjectStore('job-execution-flags');
              var stepExecutionsOS = db.createObjectStore('step-executions');
              stepExecutionsOS.createIndex("jobExecutionId", "jobExecutionId", {
                unique: false
              });
              var jobResultOS = db.createObjectStore('job-results');
              jobResultOS.createIndex("jobInstanceId", "jobInstance.id", {
                unique: true
              });

            case 1:
              transaction.objectStore('job-instances').createIndex("id", "id", {
                unique: true
              });
          }
        }
      });
      this.jobInstanceDao = new ObjectStoreDao('job-instances', this.dbPromise);
      this.jobExecutionDao = new ObjectStoreDao('job-executions', this.dbPromise);
      this.jobExecutionProgressDao = new ObjectStoreDao('job-execution-progress', this.dbPromise);
      this.jobExecutionFlagDao = new ObjectStoreDao('job-execution-flags', this.dbPromise);
      this.stepExecutionDao = new ObjectStoreDao('step-executions', this.dbPromise);
      this.jobResultDao = new ObjectStoreDao('job-results', this.dbPromise);
    }
  }, {
    key: "deleteDB",
    value: function deleteDB() {
      var _this2 = this;

      return Promise.resolve().then(function (_) {
        return (0, _idb.deleteDB)(_this2.dbName);
      });
    }
  }, {
    key: "removeJobInstance",
    value: function removeJobInstance(jobInstance, jobParameters) {
      var _this3 = this;

      var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);
      return this.jobInstanceDao.remove(key).then(function () {
        _this3.findJobExecutions(jobInstance, false).then(function (jobExecutions) {
          //  Not waiting for promise resolves
          jobExecutions.forEach(_this3.removeJobExecution, _this3);
        });

        _this3.getJobResultByInstance(jobInstance).then(function (jobResult) {
          return _this3.removeJobResult(jobResult);
        });
      });
    }
  }, {
    key: "removeJobExecution",
    value: function removeJobExecution(jobExecution) {
      var _this4 = this;

      return this.jobExecutionDao.remove(jobExecution.id).then(function () {
        return _this4.findStepExecutions(jobExecution.id, false).then(function (stepExecutions) {
          // Not waiting for promise resolves
          stepExecutions.forEach(_this4.removeStepExecution, _this4);
        });
      });
    }
  }, {
    key: "removeStepExecution",
    value: function removeStepExecution(stepExecution) {
      return this.stepExecutionDao.remove(stepExecution.id);
    }
  }, {
    key: "removeJobResult",
    value: function removeJobResult(jobResult) {
      return this.jobResultDao.remove(jobResult.id);
    }
  }, {
    key: "getJobResult",
    value: function getJobResult(jobResultId) {
      var _this5 = this;

      var revive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return this.jobResultDao.get(jobResultId).then(function (dto) {
        return dto && revive ? _this5.reviveJobResult(dto) : dto;
      });
    }
  }, {
    key: "getJobResultByInstance",
    value: function getJobResultByInstance(jobInstance) {
      var _this6 = this;

      var revive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return this.jobResultDao.getByIndex("jobInstanceId", jobInstance.id).then(function (dto) {
        return dto && revive ? _this6.reviveJobResult(dto) : dto;
      });
    }
  }, {
    key: "getJobResultByExecution",
    value: function getJobResultByExecution(jobExecution) {
      var _this7 = this;

      var revive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return this.getJobResultByInstance(jobExecution.jobInstance, false).then(function (dto) {
        return dto && revive ? _this7.reviveJobResult(dto, jobExecution) : dto;
      });
    }
  }, {
    key: "saveJobResult",
    value: function saveJobResult(jobResult) {
      var dto = jobResult.getDTO();
      return this.jobResultDao.set(jobResult.id, dto).then(function (r) {
        return jobResult;
      });
    }
    /*returns promise*/

  }, {
    key: "getJobInstance",
    value: function getJobInstance(jobName, jobParameters) {
      var _this8 = this;

      var key = this.generateJobInstanceKey(jobName, jobParameters);
      return this.jobInstanceDao.get(key).then(function (dto) {
        return dto ? _this8.reviveJobInstance(dto) : dto;
      });
    }
    /*should return promise that resolves to saved instance*/

  }, {
    key: "saveJobInstance",
    value: function saveJobInstance(jobInstance, jobParameters) {
      var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);
      return this.jobInstanceDao.set(key, jobInstance).then(function (r) {
        return jobInstance;
      });
    }
    /*should return promise that resolves to saved jobExecution*/

  }, {
    key: "saveJobExecution",
    value: function saveJobExecution(jobExecution) {
      var _this9 = this;

      var dto = jobExecution.getDTO();
      var stepExecutionsDTOs = dto.stepExecutions;
      dto.stepExecutions = null;
      return this.jobExecutionDao.set(jobExecution.id, dto).then(function (r) {
        return _this9.saveStepExecutionsDTOS(stepExecutionsDTOs);
      }).then(function (r) {
        return jobExecution;
      });
    }
  }, {
    key: "updateJobExecutionProgress",
    value: function updateJobExecutionProgress(jobExecutionId, progress) {
      return this.jobExecutionProgressDao.set(jobExecutionId, progress);
    }
  }, {
    key: "getJobExecutionProgress",
    value: function getJobExecutionProgress(jobExecutionId) {
      return this.jobExecutionProgressDao.get(jobExecutionId);
    }
  }, {
    key: "saveJobExecutionFlag",
    value: function saveJobExecutionFlag(jobExecutionId, flag) {
      return this.jobExecutionFlagDao.set(jobExecutionId, flag);
    }
  }, {
    key: "getJobExecutionFlag",
    value: function getJobExecutionFlag(jobExecutionId) {
      return this.jobExecutionFlagDao.get(jobExecutionId);
    }
    /*should return promise which resolves to saved stepExecution*/

  }, {
    key: "saveStepExecution",
    value: function saveStepExecution(stepExecution) {
      var dto = stepExecution.getDTO(["jobExecution"]);
      return this.stepExecutionDao.set(stepExecution.id, dto).then(function (r) {
        return stepExecution;
      });
    }
  }, {
    key: "saveStepExecutionsDTOS",
    value: function saveStepExecutionsDTOS(stepExecutions) {
      var _this10 = this;

      var savedExecutions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (stepExecutions.length <= savedExecutions.length) {
        return Promise.resolve(savedExecutions);
      }

      var stepExecutionDTO = stepExecutions[savedExecutions.length];
      return this.stepExecutionDao.set(stepExecutionDTO.id, stepExecutionDTO).then(function () {
        savedExecutions.push(stepExecutionDTO);
        return _this10.saveStepExecutionsDTOS(stepExecutions, savedExecutions);
      });
    }
  }, {
    key: "getJobExecutionById",
    value: function getJobExecutionById(id) {
      var _this11 = this;

      return this.jobExecutionDao.get(id).then(function (dto) {
        return _this11.fetchJobExecutionRelations(dto);
      });
    }
  }, {
    key: "fetchJobExecutionRelations",
    value: function fetchJobExecutionRelations(jobExecutionDTO) {
      var _this12 = this;

      var revive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (!jobExecutionDTO) {
        return Promise.resolve(null);
      }

      return this.findStepExecutions(jobExecutionDTO.id, false).then(function (steps) {
        jobExecutionDTO.stepExecutions = steps;

        if (!revive) {
          return jobExecutionDTO;
        }

        return _this12.reviveJobExecution(jobExecutionDTO);
      });
    }
  }, {
    key: "fetchJobExecutionsRelations",
    value: function fetchJobExecutionsRelations(jobExecutionDtoList) {
      var _this13 = this;

      var revive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var fetched = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

      if (jobExecutionDtoList.length <= fetched.length) {
        return Promise.resolve(fetched);
      }

      return this.fetchJobExecutionRelations(jobExecutionDtoList[fetched.length], revive).then(function (jobExecution) {
        fetched.push(jobExecution);
        return _this13.fetchJobExecutionsRelations(jobExecutionDtoList, revive, fetched);
      });
    }
  }, {
    key: "findStepExecutions",
    value: function findStepExecutions(jobExecutionId) {
      var _this14 = this;

      var revive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return this.stepExecutionDao.getAllByIndex("jobExecutionId", jobExecutionId).then(function (dtos) {
        if (!revive) {
          return dtos;
        }

        return dtos.map(function (dto) {
          return _this14.reviveStepExecution(dto);
        });
      });
    }
    /*find job executions sorted by createTime, returns promise*/

  }, {
    key: "findJobExecutions",
    value: function findJobExecutions(jobInstance) {
      var _this15 = this;

      var fetchRelationsAndRevive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return this.jobExecutionDao.getAllByIndex("jobInstanceId", jobInstance.id).then(function (values) {
        var sorted = values.sort(function (a, b) {
          return a.createTime.getTime() - b.createTime.getTime();
        });

        if (!fetchRelationsAndRevive) {
          return sorted;
        }

        return _this15.fetchJobExecutionsRelations(sorted, true);
      });
    }
  }, {
    key: "getLastJobExecutionByInstance",
    value: function getLastJobExecutionByInstance(jobInstance) {
      var _this16 = this;

      var fetchRelationsAndRevive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return this.findJobExecutions(jobInstance, false).then(function (executions) {
        var execution = executions[executions.length - 1];

        if (!fetchRelationsAndRevive) {
          return execution;
        }

        _this16.fetchJobExecutionRelations(execution);
      });
    }
  }, {
    key: "getLastStepExecution",
    value: function getLastStepExecution(jobInstance, stepName) {
      return this.findJobExecutions(jobInstance).then(function (jobExecutions) {
        var stepExecutions = [];
        jobExecutions.forEach(function (jobExecution) {
          return jobExecution.stepExecutions.filter(function (s) {
            return s.stepName === stepName;
          }).forEach(function (s) {
            return stepExecutions.push(s);
          });
        });
        var latest = null;
        stepExecutions.forEach(function (s) {
          if (latest == null || latest.startTime.getTime() < s.startTime.getTime()) {
            latest = s;
          }
        });
        return latest;
      });
    }
  }, {
    key: "reviveJobInstance",
    value: function reviveJobInstance(dto) {
      return new _jobInstance.JobInstance(dto.id, dto.jobName);
    }
  }, {
    key: "reviveExecutionContext",
    value: function reviveExecutionContext(dto) {
      var executionContext = new _executionContext.ExecutionContext();
      executionContext.context = dto.context;
      var data = executionContext.getData();

      if (data) {
        var dataModel = new _sdModel.DataModel();
        dataModel.loadFromDTO(data, this.expressionsReviver);
        executionContext.setData(null);
        this.reviveFromDTO(executionContext.context, dto.context, dataModel);
        executionContext.setData(dataModel);
      }

      return executionContext;
    }
  }, {
    key: "reviveFromDTO",
    value: function reviveFromDTO(target, dto, dataModel) {
      return _sdUtils.Utils.mergeWith(target, dto, function (value, dtoValue, key) {
        if (dtoValue && dtoValue.$ObjectWithIdAndEditableFields && dtoValue.id) {
          return dataModel.findById(dtoValue.id) || value;
        }
      });
    }
  }, {
    key: "reviveJobExecution",
    value: function reviveJobExecution(dto) {
      var _this17 = this;

      var job = this.getJobByName(dto.jobInstance.jobName);
      var jobInstance = this.reviveJobInstance(dto.jobInstance);
      var jobParameters = job.createJobParameters(dto.jobParameters.values);
      var jobExecution = new _jobExecution.JobExecution(jobInstance, jobParameters, dto.id);
      var executionContext = this.reviveExecutionContext(dto.executionContext);
      return _sdUtils.Utils.mergeWith(jobExecution, dto, function (objValue, srcValue, key, object, source, stack) {
        if (key === "jobInstance") {
          return jobInstance;
        }

        if (key === "executionContext") {
          return executionContext;
        }

        if (key === "jobParameters") {
          return jobParameters;
        }

        if (key === "jobExecution") {
          return jobExecution;
        }

        if (key === "stepExecutions") {
          return srcValue.map(function (stepDTO) {
            return _this17.reviveStepExecution(stepDTO, jobExecution);
          });
        }
      });
    }
  }, {
    key: "reviveStepExecution",
    value: function reviveStepExecution(dto, jobExecution) {
      var stepExecution = new _stepExecution.StepExecution(dto.stepName, jobExecution, dto.id);
      var executionContext = this.reviveExecutionContext(dto.executionContext);
      return _sdUtils.Utils.mergeWith(stepExecution, dto, function (objValue, srcValue, key, object, source, stack) {
        if (key === "jobExecution") {
          return jobExecution;
        }

        if (key === "executionContext") {
          return executionContext;
        }
      });
    }
  }, {
    key: "reviveJobResult",
    value: function reviveJobResult(dto) {
      var _this18 = this;

      var jobExecution = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var job = this.getJobByName(dto.jobInstance.jobName);
      var jobInstance = this.reviveJobInstance(dto.jobInstance);
      var contextPromise;

      if (jobExecution != null) {
        contextPromise = Promise.resolve(jobExecution.executionContext);
      } else {
        contextPromise = this.getLastJobExecutionByInstance(jobInstance, false).then(function (jobExecutionDto) {
          return _this18.reviveExecutionContext(jobExecutionDto.executionContext);
        });
      }

      return contextPromise.then(function (executionContext) {
        return job.reviveResultData(_this18.reviveFromDTO({}, dto.data, executionContext.getData()), executionContext);
      }).then(function (d) {
        return new _jobResult.JobResult(jobInstance, dto.id, d);
      });
    }
  }]);

  return IdbJobRepository;
}(_jobRepository.JobRepository);

exports.IdbJobRepository = IdbJobRepository;

var ObjectStoreDao = /*#__PURE__*/function () {
  function ObjectStoreDao(name, dbPromise) {
    _classCallCheck(this, ObjectStoreDao);

    this.name = name;
    this.dbPromise = dbPromise;
  }

  _createClass(ObjectStoreDao, [{
    key: "get",
    value: function get(key) {
      var _this19 = this;

      return this.dbPromise.then(function (db) {
        return db.transaction(_this19.name).objectStore(_this19.name).get(key);
      });
    }
  }, {
    key: "getAllByIndex",
    value: function getAllByIndex(indexName, key) {
      var _this20 = this;

      return this.dbPromise.then(function (db) {
        return db.transaction(_this20.name).objectStore(_this20.name).index(indexName).getAll(key);
      });
    }
  }, {
    key: "getByIndex",
    value: function getByIndex(indexName, key) {
      var _this21 = this;

      return this.dbPromise.then(function (db) {
        return db.transaction(_this21.name).objectStore(_this21.name).index(indexName).get(key);
      });
    }
  }, {
    key: "set",
    value: function set(key, val) {
      var _this22 = this;

      return this.dbPromise.then(function (db) {
        var tx = db.transaction(_this22.name, 'readwrite');
        tx.objectStore(_this22.name).put(val, key);
        return tx.done;
      });
    }
  }, {
    key: "remove",
    value: function remove(key) {
      var _this23 = this;

      return this.dbPromise.then(function (db) {
        var tx = db.transaction(_this23.name, 'readwrite');
        tx.objectStore(_this23.name).delete(key);
        return tx.done;
      });
    }
  }, {
    key: "clear",
    value: function clear() {
      var _this24 = this;

      return this.dbPromise.then(function (db) {
        var tx = db.transaction(_this24.name, 'readwrite');
        tx.objectStore(_this24.name).clear();
        return tx.done;
      });
    }
  }, {
    key: "keys",
    value: function keys() {
      var _this25 = this;

      return this.dbPromise.then(function (db) {
        var tx = db.transaction(_this25.name);
        var store = tx.objectStore(_this25.name);
        return store.getAllKeys();
      });
    }
  }]);

  return ObjectStoreDao;
}();

},{"../execution-context":41,"../job-execution":45,"../job-instance":46,"../job-result":55,"../step-execution":60,"./job-repository":52,"idb":1,"sd-model":"sd-model","sd-utils":"sd-utils"}],52:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobRepository = void 0;

var _jobKeyGenerator = require("../job-key-generator");

var _jobInstance = require("../job-instance");

var _sdUtils = require("sd-utils");

var _jobExecution = require("../job-execution");

var _jobExecutionAlreadyRunningException = require("../exceptions/job-execution-already-running-exception");

var _jobStatus = require("../job-status");

var _jobInstanceAlreadyCompleteException = require("../exceptions/job-instance-already-complete-exception");

var _executionContext = require("../execution-context");

var _stepExecution = require("../step-execution");

var _sdModel = require("sd-model");

var _jobResult = require("../job-result");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var JobRepository = /*#__PURE__*/function () {
  function JobRepository() {
    _classCallCheck(this, JobRepository);

    this.jobByName = {};
  }

  _createClass(JobRepository, [{
    key: "registerJob",
    value: function registerJob(job) {
      this.jobByName[job.name] = job;
    }
  }, {
    key: "getJobByName",
    value: function getJobByName(name) {
      return this.jobByName[name];
    }
    /*returns promise*/

  }, {
    key: "getJobInstance",
    value: function getJobInstance(jobName, jobParameters) {
      throw "JobRepository getJobInstance function not implemented!";
    }
    /*should return promise that resolves to saved instance*/

  }, {
    key: "saveJobInstance",
    value: function saveJobInstance(key, jobInstance) {
      throw "JobRepository.saveJobInstance function not implemented!";
    }
  }, {
    key: "getJobExecutionById",
    value: function getJobExecutionById(id) {
      throw "JobRepository.getJobExecutionById function not implemented!";
    }
    /*should return promise that resolves to saved jobExecution*/

  }, {
    key: "saveJobExecution",
    value: function saveJobExecution(jobExecution) {
      throw "JobRepository.saveJobInstance function not implemented!";
    }
  }, {
    key: "updateJobExecutionProgress",
    value: function updateJobExecutionProgress(jobExecutionId, progress) {
      throw "JobRepository.saveJobInstance function not implemented!";
    }
  }, {
    key: "getJobExecutionProgress",
    value: function getJobExecutionProgress(jobExecutionId) {
      throw "JobRepository.getJobExecutionProgress function not implemented!";
    }
  }, {
    key: "saveJobExecutionFlag",
    value: function saveJobExecutionFlag(jobExecutionId, flag) {
      throw "JobRepository.saveJobExecutionFlag function not implemented!";
    }
  }, {
    key: "getJobExecutionFlag",
    value: function getJobExecutionFlag(jobExecutionId) {
      throw "JobRepository.getJobExecutionFlag function not implemented!";
    }
    /*should return promise which resolves to saved stepExecution*/

  }, {
    key: "saveStepExecution",
    value: function saveStepExecution(stepExecution) {
      throw "JobRepository.saveStepExecution function not implemented!";
    }
    /*find job executions sorted by createTime, returns promise*/

  }, {
    key: "findJobExecutions",
    value: function findJobExecutions(jobInstance) {
      throw "JobRepository.findJobExecutions function not implemented!";
    }
  }, {
    key: "getJobResult",
    value: function getJobResult(jobResultId) {
      throw "JobRepository.getJobResult function not implemented!";
    }
  }, {
    key: "getJobResultByInstance",
    value: function getJobResultByInstance(jobInstance) {
      throw "JobRepository.getJobResultByInstance function not implemented!";
    }
  }, {
    key: "getJobResultByExecution",
    value: function getJobResultByExecution(jobInstance) {
      throw "JobRepository.getJobResultByExecution function not implemented!";
    }
  }, {
    key: "saveJobResult",
    value: function saveJobResult(jobResult) {
      throw "JobRepository.setJobResult function not implemented!";
    }
  }, {
    key: "removeJobInstance",
    value: function removeJobInstance(jobInstance, jobParameters) {
      throw "JobRepository.removeJobInstance function not implemented!";
    }
  }, {
    key: "removeJobExecution",
    value: function removeJobExecution(jobExecution) {
      throw "JobRepository.removeJobExecution function not implemented!";
    }
  }, {
    key: "removeStepExecution",
    value: function removeStepExecution(stepExecution) {
      throw "JobRepository.removeStepExecution function not implemented!";
    }
  }, {
    key: "removeJobResult",
    value: function removeJobResult(jobResult) {
      throw "JobRepository.removeJobResult function not implemented!";
    }
    /*Create a new JobInstance with the name and job parameters provided. return promise*/

  }, {
    key: "createJobInstance",
    value: function createJobInstance(jobName, jobParameters) {
      var jobInstance = new _jobInstance.JobInstance(_sdUtils.Utils.guid(), jobName);
      return this.saveJobInstance(jobInstance, jobParameters);
    }
    /*Check if an instance of this job already exists with the parameters provided.*/

  }, {
    key: "isJobInstanceExists",
    value: function isJobInstanceExists(jobName, jobParameters) {
      return this.getJobInstance(jobName, jobParameters).then(function (result) {
        return !!result;
      }).catch(function (error) {
        return false;
      });
    }
  }, {
    key: "generateJobInstanceKey",
    value: function generateJobInstanceKey(jobName, jobParameters) {
      return jobName + "|" + _jobKeyGenerator.JobKeyGenerator.generateKey(jobParameters);
    }
    /*Create a JobExecution for a given  Job and JobParameters. If matching JobInstance already exists,
     * the job must be restartable and it's last JobExecution must *not* be
     * completed. If matching JobInstance does not exist yet it will be  created.*/

  }, {
    key: "createJobExecution",
    value: function createJobExecution(jobName, jobParameters, data) {
      var _this = this;

      return this.getJobInstance(jobName, jobParameters).then(function (jobInstance) {
        if (jobInstance != null) {
          return _this.findJobExecutions(jobInstance).then(function (executions) {
            executions.forEach(function (execution) {
              if (execution.isRunning()) {
                throw new _jobExecutionAlreadyRunningException.JobExecutionAlreadyRunningException("A job execution for this job is already running: " + jobInstance.jobName);
              }

              if (execution.status == _jobStatus.JOB_STATUS.COMPLETED || execution.status == _jobStatus.JOB_STATUS.ABANDONED) {
                throw new _jobInstanceAlreadyCompleteException.JobInstanceAlreadyCompleteException("A job instance already exists and is complete for parameters=" + jobParameters + ".  If you want to run this job again, change the parameters.");
              }
            });
            var executionContext = executions[executions.length - 1].executionContext;
            return [jobInstance, executionContext];
          });
        } // no job found, create one


        jobInstance = _this.createJobInstance(jobName, jobParameters);
        var executionContext = new _executionContext.ExecutionContext();
        var dataModel = new _sdModel.DataModel();

        dataModel._setNewState(data.createStateSnapshot());

        executionContext.setData(dataModel);
        return Promise.all([jobInstance, executionContext]);
      }).then(function (instanceAndExecutionContext) {
        var jobExecution = new _jobExecution.JobExecution(instanceAndExecutionContext[0], jobParameters);
        jobExecution.executionContext = instanceAndExecutionContext[1];
        jobExecution.lastUpdated = new Date();
        return _this.saveJobExecution(jobExecution);
      }).catch(function (e) {
        throw e;
      });
    }
  }, {
    key: "getLastJobExecution",
    value: function getLastJobExecution(jobName, jobParameters) {
      var _this2 = this;

      return this.getJobInstance(jobName, jobParameters).then(function (jobInstance) {
        if (!jobInstance) {
          return null;
        }

        return _this2.getLastJobExecutionByInstance(jobInstance);
      });
    }
  }, {
    key: "getLastJobExecutionByInstance",
    value: function getLastJobExecutionByInstance(jobInstance) {
      return this.findJobExecutions(jobInstance).then(function (executions) {
        return executions[executions.length - 1];
      });
    }
  }, {
    key: "getLastStepExecution",
    value: function getLastStepExecution(jobInstance, stepName) {
      return this.findJobExecutions(jobInstance).then(function (jobExecutions) {
        var stepExecutions = [];
        jobExecutions.forEach(function (jobExecution) {
          return jobExecution.stepExecutions.filter(function (s) {
            return s.stepName === stepName;
          }).forEach(function (s) {
            return stepExecutions.push(s);
          });
        });
        var latest = null;
        stepExecutions.forEach(function (s) {
          if (latest == null || latest.startTime.getTime() < s.startTime.getTime()) {
            latest = s;
          }
        });
        return latest;
      });
    }
  }, {
    key: "addStepExecution",
    value: function addStepExecution(stepExecution) {
      stepExecution.lastUpdated = new Date();
      return this.saveStepExecution(stepExecution);
    }
  }, {
    key: "update",
    value: function update(o) {
      o.lastUpdated = new Date();

      if (o instanceof _jobExecution.JobExecution) {
        return this.saveJobExecution(o);
      }

      if (o instanceof _stepExecution.StepExecution) {
        return this.saveStepExecution(o);
      }

      throw "Object not updatable: " + o;
    }
  }, {
    key: "remove",
    value: function remove(o) {
      if (o instanceof _jobExecution.JobExecution) {
        return this.removeJobExecution(o);
      }

      if (o instanceof _stepExecution.StepExecution) {
        return this.removeStepExecution(o);
      }

      if (o instanceof _jobResult.JobResult) {
        return this.removeJobResult();
      }

      return Promise.reject("Object not removable: " + o);
    }
  }, {
    key: "reviveJobInstance",
    value: function reviveJobInstance(dto) {
      return dto;
    }
  }, {
    key: "reviveExecutionContext",
    value: function reviveExecutionContext(dto) {
      return dto;
    }
  }, {
    key: "reviveJobExecution",
    value: function reviveJobExecution(dto) {
      return dto;
    }
  }, {
    key: "reviveStepExecution",
    value: function reviveStepExecution(dto, jobExecution) {
      return dto;
    }
  }]);

  return JobRepository;
}();

exports.JobRepository = JobRepository;

},{"../exceptions/job-execution-already-running-exception":36,"../exceptions/job-instance-already-complete-exception":37,"../execution-context":41,"../job-execution":45,"../job-instance":46,"../job-key-generator":47,"../job-result":55,"../job-status":56,"../step-execution":60,"sd-model":"sd-model","sd-utils":"sd-utils"}],53:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleJobRepository = void 0;

var _jobRepository = require("./job-repository");

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var SimpleJobRepository = /*#__PURE__*/function (_JobRepository) {
  _inherits(SimpleJobRepository, _JobRepository);

  var _super = _createSuper(SimpleJobRepository);

  function SimpleJobRepository() {
    var _temp, _this;

    _classCallCheck(this, SimpleJobRepository);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(_this, (_temp = _this = _super.call.apply(_super, [this].concat(args)), _this.jobInstancesByKey = {}, _this.jobExecutions = [], _this.stepExecutions = [], _this.executionProgress = {}, _this.executionFlags = {}, _this.jobResults = [], _temp));
  }

  _createClass(SimpleJobRepository, [{
    key: "removeJobInstance",
    value: function removeJobInstance(jobInstance) {
      var _this2 = this;

      _sdUtils.Utils.forOwn(this.jobInstancesByKey, function (ji, key) {
        if (ji === jobInstance) {
          delete _this2.jobInstancesByKey[key];
        }
      });

      this.jobExecutions.filter(function (jobExecution) {
        return jobExecution.jobInstance.id == jobInstance.id;
      }).reverse().forEach(this.removeJobExecution, this);
      this.jobResults.filter(function (jobResult) {
        return jobResult.jobInstance.id == jobInstance.id;
      }).reverse().forEach(this.removeJobResult, this);
      return Promise.resolve();
    }
  }, {
    key: "removeJobExecution",
    value: function removeJobExecution(jobExecution) {
      var index = this.jobExecutions.indexOf(jobExecution);

      if (index > -1) {
        this.jobExecutions.splice(index, 1);
      }

      this.stepExecutions.filter(function (stepExecution) {
        return stepExecution.jobExecution.id === jobExecution.id;
      }).reverse().forEach(this.removeStepExecution, this);
      return Promise.resolve();
    }
  }, {
    key: "removeStepExecution",
    value: function removeStepExecution(stepExecution) {
      var index = this.stepExecutions.indexOf(stepExecution);

      if (index > -1) {
        this.stepExecutions.splice(index, 1);
      }

      return Promise.resolve();
    }
  }, {
    key: "removeJobResult",
    value: function removeJobResult(jobResult) {
      var index = this.jobResults.indexOf(jobResult);

      if (index > -1) {
        this.jobResults.splice(index, 1);
      }

      return Promise.resolve();
    }
    /*returns promise*/

  }, {
    key: "getJobInstance",
    value: function getJobInstance(jobName, jobParameters) {
      var key = this.generateJobInstanceKey(jobName, jobParameters);
      return Promise.resolve(this.jobInstancesByKey[key]);
    }
    /*should return promise that resolves to saved instance*/

  }, {
    key: "saveJobInstance",
    value: function saveJobInstance(jobInstance, jobParameters) {
      var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);
      this.jobInstancesByKey[key] = jobInstance;
      return Promise.resolve(jobInstance);
    }
  }, {
    key: "getJobResult",
    value: function getJobResult(jobResultId) {
      return Promise.resolve(_sdUtils.Utils.find(this.jobResults, function (r) {
        return r.id === jobResultId;
      }));
    }
  }, {
    key: "getJobResultByInstance",
    value: function getJobResultByInstance(jobInstance) {
      return Promise.resolve(_sdUtils.Utils.find(this.jobResults, function (r) {
        return r.jobInstance.id === jobInstance.id;
      }));
    }
  }, {
    key: "getJobResultByExecution",
    value: function getJobResultByExecution(jobExecution) {
      return this.getJobResultByInstance(jobExecution.jobInstance);
    }
  }, {
    key: "saveJobResult",
    value: function saveJobResult(jobResult) {
      this.jobResults.push(jobResult);
      return Promise.resolve(jobResult);
    }
  }, {
    key: "getJobExecutionById",
    value: function getJobExecutionById(id) {
      return Promise.resolve(_sdUtils.Utils.find(this.jobExecutions, function (ex) {
        return ex.id === id;
      }));
    }
    /*should return promise that resolves to saved jobExecution*/

  }, {
    key: "saveJobExecution",
    value: function saveJobExecution(jobExecution) {
      this.jobExecutions.push(jobExecution);
      return Promise.resolve(jobExecution);
    }
  }, {
    key: "updateJobExecutionProgress",
    value: function updateJobExecutionProgress(jobExecutionId, progress) {
      this.executionProgress[jobExecutionId] = progress;
      return Promise.resolve(progress);
    }
  }, {
    key: "getJobExecutionProgress",
    value: function getJobExecutionProgress(jobExecutionId) {
      return Promise.resolve(this.executionProgress[jobExecutionId]);
    }
  }, {
    key: "saveJobExecutionFlag",
    value: function saveJobExecutionFlag(jobExecutionId, flag) {
      this.executionFlags[jobExecutionId] = flag;
      return Promise.resolve(flag);
    }
  }, {
    key: "getJobExecutionFlag",
    value: function getJobExecutionFlag(jobExecutionId) {
      return Promise.resolve(this.executionFlags[jobExecutionId]);
    }
    /*should return promise which resolves to saved stepExecution*/

  }, {
    key: "saveStepExecution",
    value: function saveStepExecution(stepExecution) {
      this.stepExecutions.push(stepExecution);
      return Promise.resolve(stepExecution);
    }
    /*find job executions sorted by createTime, returns promise*/

  }, {
    key: "findJobExecutions",
    value: function findJobExecutions(jobInstance) {
      return Promise.resolve(this.jobExecutions.filter(function (e) {
        return e.jobInstance.id == jobInstance.id;
      }).sort(function (a, b) {
        return a.createTime.getTime() - b.createTime.getTime();
      }));
    }
  }]);

  return SimpleJobRepository;
}(_jobRepository.JobRepository);

exports.SimpleJobRepository = SimpleJobRepository;

},{"./job-repository":52,"sd-utils":"sd-utils"}],54:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeoutJobRepository = void 0;

var _jobRepository = require("./job-repository");

var _sdUtils = require("sd-utils");

var _simpleJobRepository = require("./simple-job-repository");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var TimeoutJobRepository = /*#__PURE__*/function (_SimpleJobRepository) {
  _inherits(TimeoutJobRepository, _SimpleJobRepository);

  var _super = _createSuper(TimeoutJobRepository);

  function TimeoutJobRepository() {
    _classCallCheck(this, TimeoutJobRepository);

    return _super.apply(this, arguments);
  }

  _createClass(TimeoutJobRepository, [{
    key: "createTimeoutPromise",
    value: function createTimeoutPromise(valueToResolve) {
      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      return new Promise(function (resolve) {
        setTimeout(function () {
          resolve(valueToResolve);
        }, delay);
      });
    }
    /*returns promise*/

  }, {
    key: "getJobInstance",
    value: function getJobInstance(jobName, jobParameters) {
      var key = this.generateJobInstanceKey(jobName, jobParameters);
      return this.createTimeoutPromise(this.jobInstancesByKey[key]);
    }
    /*should return promise that resolves to saved instance*/

  }, {
    key: "saveJobInstance",
    value: function saveJobInstance(jobInstance, jobParameters) {
      var key = this.generateJobInstanceKey(jobInstance.jobName, jobParameters);
      this.jobInstancesByKey[key] = jobInstance;
      return this.createTimeoutPromise(jobInstance);
    }
  }, {
    key: "getJobResult",
    value: function getJobResult(jobResultId) {
      return this.createTimeoutPromise(_sdUtils.Utils.find(this.jobResults, function (r) {
        return r.id === jobResultId;
      }));
    }
  }, {
    key: "getJobResultByInstance",
    value: function getJobResultByInstance(jobInstance) {
      return this.createTimeoutPromise(_sdUtils.Utils.find(this.jobResults, function (r) {
        return r.jobInstance.id === jobInstance.id;
      }));
    }
  }, {
    key: "getJobResultByExecution",
    value: function getJobResultByExecution(jobExecution) {
      return this.getJobResultByInstance(jobExecution.jobInstance);
    }
  }, {
    key: "saveJobResult",
    value: function saveJobResult(jobResult) {
      this.jobResults.push(jobResult);
      return this.createTimeoutPromise(jobResult);
    }
  }, {
    key: "getJobExecutionById",
    value: function getJobExecutionById(id) {
      return this.createTimeoutPromise(_sdUtils.Utils.find(this.jobExecutions, function (ex) {
        return ex.id === id;
      }));
    }
    /*should return promise that resolves to saved jobExecution*/

  }, {
    key: "saveJobExecution",
    value: function saveJobExecution(jobExecution) {
      this.jobExecutions.push(jobExecution);
      return this.createTimeoutPromise(jobExecution);
    }
  }, {
    key: "updateJobExecutionProgress",
    value: function updateJobExecutionProgress(jobExecutionId, progress) {
      this.executionProgress[jobExecutionId] = progress;
      return this.createTimeoutPromise(progress);
    }
  }, {
    key: "getJobExecutionProgress",
    value: function getJobExecutionProgress(jobExecutionId) {
      return this.createTimeoutPromise(this.executionProgress[jobExecutionId]);
    }
  }, {
    key: "saveJobExecutionFlag",
    value: function saveJobExecutionFlag(jobExecutionId, flag) {
      this.executionFlags[jobExecutionId] = flag;
      return this.createTimeoutPromise(flag);
    }
  }, {
    key: "getJobExecutionFlag",
    value: function getJobExecutionFlag(jobExecutionId) {
      return this.createTimeoutPromise(this.executionFlags[jobExecutionId]);
    }
    /*should return promise which resolves to saved stepExecution*/

  }, {
    key: "saveStepExecution",
    value: function saveStepExecution(stepExecution) {
      this.stepExecutions.push(stepExecution);
      return this.createTimeoutPromise(stepExecution);
    }
    /*find job executions sorted by createTime, returns promise*/

  }, {
    key: "findJobExecutions",
    value: function findJobExecutions(jobInstance) {
      return this.createTimeoutPromise(this.jobExecutions.filter(function (e) {
        return e.jobInstance.id == jobInstance.id;
      }).sort(function (a, b) {
        return a.createTime.getTime() - b.createTime.getTime();
      }));
    }
  }, {
    key: "remove",
    value: function remove(object) {//TODO
    }
  }]);

  return TimeoutJobRepository;
}(_simpleJobRepository.SimpleJobRepository);

exports.TimeoutJobRepository = TimeoutJobRepository;

},{"./job-repository":52,"./simple-job-repository":53,"sd-utils":"sd-utils"}],55:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobResult = void 0;

var _jobStatus = require("./job-status");

var _stepExecution = require("./step-execution");

var _sdUtils = require("sd-utils");

var _executionContext = require("./execution-context");

var _jobExecution = require("./job-execution");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/*domain object representing the result of a job instance.*/


var JobResult = /*#__PURE__*/function () {
  // job result data - this is not a data model!
  function JobResult(jobInstance, id, data) {
    _classCallCheck(this, JobResult);

    this.lastUpdated = null;

    if (id === null || id === undefined) {
      this.id = _sdUtils.Utils.guid();
    } else {
      this.id = id;
    }

    this.jobInstance = jobInstance;
    this.data = data;
  }

  _createClass(JobResult, [{
    key: "getDTO",
    value: function getDTO() {
      var filteredProperties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var deepClone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var cloneMethod = _sdUtils.Utils.cloneDeepWith;

      if (!deepClone) {
        cloneMethod = _sdUtils.Utils.cloneWith;
      }

      var dto = _sdUtils.Utils.assign({}, cloneMethod(this, function (value, key, object, stack) {
        if (filteredProperties.indexOf(key) > -1) {
          return null;
        }

        if (value && value.$ObjectWithIdAndEditableFields && value.id) {
          return {
            '$ObjectWithIdAndEditableFields': true,
            id: value.id
          };
        }

        if (value instanceof Error) {
          return _sdUtils.Utils.getErrorDTO(value);
        }
      }));

      return dto;
    }
  }]);

  return JobResult;
}();

exports.JobResult = JobResult;

},{"./execution-context":41,"./job-execution":45,"./job-status":56,"./step-execution":60,"sd-utils":"sd-utils"}],56:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JOB_STATUS = void 0;
var JOB_STATUS = {
  COMPLETED: 'COMPLETED',
  STARTING: 'STARTING',
  STARTED: 'STARTED',
  STOPPING: 'STOPPING',
  STOPPED: 'STOPPED',
  FAILED: 'FAILED',
  UNKNOWN: 'UNKNOWN',
  ABANDONED: 'ABANDONED',
  EXECUTING: 'EXECUTING' //for exit status only

};
exports.JOB_STATUS = JOB_STATUS;

},{}],57:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Job = void 0;

var _sdUtils = require("sd-utils");

var _jobStatus = require("./job-status");

var _jobInterruptedException = require("./exceptions/job-interrupted-exception");

var _jobParametersInvalidException = require("./exceptions/job-parameters-invalid-exception");

var _jobDataInvalidException = require("./exceptions/job-data-invalid-exception");

var _jobExecutionFlag = require("./job-execution-flag");

var _jobResult = require("./job-result");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/**
 * Base class for jobs
 * A Job is an entity that encapsulates an entire job process ( an abstraction representing the configuration of a job)
 * */


var Job = /*#__PURE__*/function () {
  function Job(name, jobRepository, expressionsEvaluator, objectiveRulesManager) {
    _classCallCheck(this, Job);

    this.steps = [];
    this.isRestartable = true;
    this.executionListeners = [];
    this.name = name;
    this.jobParametersValidator = this.getJobParametersValidator();
    this.jobDataValidator = this.getJobDataValidator();
    this.jobRepository = jobRepository;
    this.expressionsEvaluator = expressionsEvaluator;
    this.objectiveRulesManager = objectiveRulesManager;
  }

  _createClass(Job, [{
    key: "setJobRepository",
    value: function setJobRepository(jobRepository) {
      this.jobRepository = jobRepository;
    }
  }, {
    key: "execute",
    value: function execute(execution) {
      var _this = this;

      _sdUtils.log.debug("Job execution starting: ", execution);

      var jobResult;
      return this.checkExecutionFlags(execution).then(function (execution) {
        if (execution.status === _jobStatus.JOB_STATUS.STOPPING) {
          // The job was already stopped
          execution.status = _jobStatus.JOB_STATUS.STOPPED;
          execution.exitStatus = _jobStatus.JOB_STATUS.COMPLETED;

          _sdUtils.log.debug("Job execution was stopped: " + execution);

          return execution;
        }

        if (_this.jobParametersValidator && !_this.jobParametersValidator.validate(execution.jobParameters)) {
          throw new _jobParametersInvalidException.JobParametersInvalidException("Invalid job parameters in job execute");
        }

        if (_this.jobDataValidator && !_this.jobDataValidator.validate(execution.getData())) {
          throw new _jobDataInvalidException.JobDataInvalidException("Invalid job data in job execute");
        }

        execution.startTime = new Date();
        return Promise.all([_this.updateStatus(execution, _jobStatus.JOB_STATUS.STARTED), _this.getResult(execution), _this.updateProgress(execution)]).then(function (res) {
          execution = res[0];
          jobResult = res[1];

          if (!jobResult) {
            jobResult = new _jobResult.JobResult(execution.jobInstance);
          }

          _this.executionListeners.forEach(function (listener) {
            return listener.beforeJob(execution);
          });

          return _this.doExecute(execution, jobResult);
        });
      }).then(function (execution) {
        _sdUtils.log.debug("Job execution complete: ", execution);

        return execution;
      }).catch(function (e) {
        if (e instanceof _jobInterruptedException.JobInterruptedException) {
          _sdUtils.log.info("Encountered interruption executing job", e);

          execution.status = _jobStatus.JOB_STATUS.STOPPED;
          execution.exitStatus = _jobStatus.JOB_STATUS.STOPPED;
        } else {
          _sdUtils.log.error("Encountered fatal error executing job", e);

          execution.status = _jobStatus.JOB_STATUS.FAILED;
          execution.exitStatus = _jobStatus.JOB_STATUS.FAILED;
        }

        execution.failureExceptions.push(e);
        return execution;
      }).then(function (execution) {
        if (jobResult) {
          return _this.jobRepository.saveJobResult(jobResult).then(function () {
            return execution;
          });
        }

        return execution;
      }).catch(function (e) {
        _sdUtils.log.error("Encountered fatal error saving job results", e);

        if (e) {
          execution.failureExceptions.push(e);
        }

        execution.status = _jobStatus.JOB_STATUS.FAILED;
        execution.exitStatus = _jobStatus.JOB_STATUS.FAILED;
        return execution;
      }).then(function (execution) {
        execution.endTime = new Date();
        return Promise.all([_this.jobRepository.update(execution), _this.updateProgress(execution)]).then(function (res) {
          return res[0];
        });
      }).then(function (execution) {
        try {
          _this.executionListeners.forEach(function (listener) {
            return listener.afterJob(execution);
          });
        } catch (e) {
          _sdUtils.log.error("Exception encountered in afterStep callback", e);
        }

        return execution;
      });
    }
  }, {
    key: "updateStatus",
    value: function updateStatus(jobExecution, status) {
      jobExecution.status = status;
      return this.jobRepository.update(jobExecution);
    }
  }, {
    key: "updateProgress",
    value: function updateProgress(jobExecution) {
      return this.jobRepository.updateJobExecutionProgress(jobExecution.id, this.getProgress(jobExecution));
    }
    /* Extension point for subclasses allowing them to concentrate on processing logic and ignore listeners, returns promise*/

  }, {
    key: "doExecute",
    value: function doExecute(execution, jobResult) {
      throw 'doExecute function not implemented for job: ' + this.name;
    }
  }, {
    key: "getJobParametersValidator",
    value: function getJobParametersValidator() {
      return {
        validate: function validate(params) {
          return params.validate();
        }
      };
    }
  }, {
    key: "getJobDataValidator",
    value: function getJobDataValidator() {
      return {
        validate: function validate(data) {
          return true;
        }
      };
    }
  }, {
    key: "addStep",
    value: function addStep(step) {
      this.steps.push(step);
    }
  }, {
    key: "createJobParameters",
    value: function createJobParameters(values) {
      throw 'createJobParameters function not implemented for job: ' + this.name;
    }
    /*Should return progress object with fields:
    * current
    * total */

  }, {
    key: "getProgress",
    value: function getProgress(execution) {
      return {
        total: 1,
        current: execution.status === _jobStatus.JOB_STATUS.COMPLETED ? 1 : 0
      };
    }
  }, {
    key: "registerExecutionListener",
    value: function registerExecutionListener(listener) {
      this.executionListeners.push(listener);
    }
  }, {
    key: "checkExecutionFlags",
    value: function checkExecutionFlags(execution) {
      return this.jobRepository.getJobExecutionFlag(execution.id).then(function (flag) {
        if (_jobExecutionFlag.JOB_EXECUTION_FLAG.STOP === flag) {
          execution.stop();
        }

        return execution;
      });
    }
  }, {
    key: "getResult",
    value: function getResult(execution) {
      return this.jobRepository.getJobResultByExecution(execution);
    }
    /* revive job result data (after conversion to dto) if needed*/

  }, {
    key: "reviveResultData",
    value: function reviveResultData(data, executionContext) {
      return data;
    }
  }, {
    key: "jobResultToCsvRows",
    value: function jobResultToCsvRows(jobResult, jobParameters) {
      throw 'jobResultToCsvRows function not implemented for job: ' + this.name;
    }
  }]);

  return Job;
}();

exports.Job = Job;

},{"./exceptions/job-data-invalid-exception":35,"./exceptions/job-interrupted-exception":38,"./exceptions/job-parameters-invalid-exception":39,"./job-execution-flag":43,"./job-result":55,"./job-status":56,"sd-utils":"sd-utils"}],58:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleJob = void 0;

var _sdUtils = require("sd-utils");

var _jobStatus = require("./job-status");

var _job = require("./job");

var _executionContext = require("./execution-context");

var _step = require("./step");

var _jobInterruptedException = require("./exceptions/job-interrupted-exception");

var _jobRestartException = require("./exceptions/job-restart-exception");

var _jobExecutionFlag = require("./job-execution-flag");

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/* Simple Job that sequentially executes a job by iterating through its list of steps.  Any Step that fails will fail the job.  The job is
 considered complete when all steps have been executed.*/


var SimpleJob = /*#__PURE__*/function (_Job) {
  _inherits(SimpleJob, _Job);

  var _super = _createSuper(SimpleJob);

  function SimpleJob(name, jobRepository, expressionsEvaluator, objectiveRulesManager) {
    _classCallCheck(this, SimpleJob);

    return _super.call(this, name, jobRepository, expressionsEvaluator, objectiveRulesManager);
  }

  _createClass(SimpleJob, [{
    key: "getStep",
    value: function getStep(stepName) {
      return _sdUtils.Utils.find(this.steps, function (s) {
        return s.name == stepName;
      });
    }
  }, {
    key: "doExecute",
    value: function doExecute(execution, jobResult) {
      return this.handleNextStep(execution, jobResult).then(function (lastExecutedStepExecution) {
        if (lastExecutedStepExecution != null) {
          var _execution$failureExc;

          _sdUtils.log.debug("Updating JobExecution status: ", lastExecutedStepExecution);

          execution.status = lastExecutedStepExecution.status;
          execution.exitStatus = lastExecutedStepExecution.exitStatus;

          (_execution$failureExc = execution.failureExceptions).push.apply(_execution$failureExc, _toConsumableArray(lastExecutedStepExecution.failureExceptions));
        }

        return execution;
      });
    }
  }, {
    key: "handleNextStep",
    value: function handleNextStep(jobExecution, jobResult) {
      var _this = this;

      var prevStep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var prevStepExecution = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var stepIndex = 0;

      if (prevStep) {
        stepIndex = this.steps.indexOf(prevStep) + 1;
      }

      if (stepIndex >= this.steps.length) {
        return Promise.resolve(prevStepExecution);
      }

      var step = this.steps[stepIndex];
      return this.handleStep(step, jobExecution, jobResult).then(function (stepExecution) {
        if (stepExecution.status !== _jobStatus.JOB_STATUS.COMPLETED) {
          // Terminate the job if a step fails
          return stepExecution;
        }

        return _this.handleNextStep(jobExecution, jobResult, step, stepExecution);
      });
    }
  }, {
    key: "handleStep",
    value: function handleStep(step, jobExecution, jobResult) {
      var _this2 = this;

      var jobInstance = jobExecution.jobInstance;
      return this.checkExecutionFlags(jobExecution).then(function (jobExecution) {
        if (jobExecution.isStopping()) {
          throw new _jobInterruptedException.JobInterruptedException("JobExecution interrupted.");
        }

        return _this2.jobRepository.getLastStepExecution(jobInstance, step.name);
      }).then(function (lastStepExecution) {
        if (_this2.stepExecutionPartOfExistingJobExecution(jobExecution, lastStepExecution)) {
          // If the last execution of this step was in the same job, it's probably intentional so we want to run it again.
          _sdUtils.log.info("Duplicate step detected in execution of job. step: " + step.name + " jobName: ", jobInstance.jobName);

          lastStepExecution = null;
        }

        var currentStepExecution = lastStepExecution;

        if (!_this2.shouldStart(currentStepExecution, jobExecution, step)) {
          return currentStepExecution;
        }

        currentStepExecution = jobExecution.createStepExecution(step.name);
        var isCompleted = lastStepExecution != null && lastStepExecution.status === _jobStatus.JOB_STATUS.COMPLETED;
        var isRestart = lastStepExecution != null && !isCompleted;
        var skipExecution = isCompleted && step.skipOnRestartIfCompleted;

        if (isRestart) {
          currentStepExecution.executionContext = lastStepExecution.executionContext;

          if (lastStepExecution.executionContext.containsKey("executed")) {
            currentStepExecution.executionContext.remove("executed");
          }
        } else {
          currentStepExecution.executionContext = new _executionContext.ExecutionContext();
        }

        if (skipExecution) {
          currentStepExecution.exitStatus = _jobStatus.JOB_STATUS.COMPLETED;
          currentStepExecution.status = _jobStatus.JOB_STATUS.COMPLETED;
          currentStepExecution.executionContext.put("skipped", true);
        }

        return _this2.jobRepository.addStepExecution(currentStepExecution).then(function (_currentStepExecution) {
          currentStepExecution = _currentStepExecution;

          if (skipExecution) {
            _sdUtils.log.info("Skipping completed step execution: [" + step.name + "]");

            return currentStepExecution;
          }

          _sdUtils.log.info("Executing step: [" + step.name + "]");

          return step.execute(currentStepExecution, jobResult);
        }).then(function () {
          currentStepExecution.executionContext.put("executed", true);
          return currentStepExecution;
        }).catch(function (e) {
          jobExecution.status = _jobStatus.JOB_STATUS.FAILED;
          return _this2.jobRepository.update(jobExecution).then(function (jobExecution) {
            throw e;
          });
        });
      }).then(function (currentStepExecution) {
        if (currentStepExecution.status == _jobStatus.JOB_STATUS.STOPPING || currentStepExecution.status == _jobStatus.JOB_STATUS.STOPPED) {
          // Ensure that the job gets the message that it is stopping
          jobExecution.status = _jobStatus.JOB_STATUS.STOPPING; // throw new Error("Job interrupted by step execution");
        }

        return _this2.updateProgress(jobExecution).then(function () {
          return currentStepExecution;
        });
      });
    }
  }, {
    key: "stepExecutionPartOfExistingJobExecution",
    value: function stepExecutionPartOfExistingJobExecution(jobExecution, stepExecution) {
      return stepExecution != null && stepExecution.jobExecution.id == jobExecution.id;
    }
  }, {
    key: "shouldStart",
    value: function shouldStart(lastStepExecution, execution, step) {
      var stepStatus;

      if (lastStepExecution == null) {
        stepStatus = _jobStatus.JOB_STATUS.STARTING;
      } else {
        stepStatus = lastStepExecution.status;
      }

      if (stepStatus == _jobStatus.JOB_STATUS.UNKNOWN) {
        throw new _jobRestartException.JobRestartException("Cannot restart step from UNKNOWN status");
      }

      return stepStatus != _jobStatus.JOB_STATUS.COMPLETED || step.isRestartable;
    }
  }, {
    key: "getProgress",
    value: function getProgress(execution) {
      var completedSteps = execution.stepExecutions.length;
      var progress = {
        total: this.steps.length,
        current: completedSteps
      };

      if (!completedSteps) {
        return progress;
      }

      if (_jobStatus.JOB_STATUS.COMPLETED !== execution.stepExecutions[execution.stepExecutions.length - 1].status) {
        progress.current--;
      }

      return progress;
    }
  }, {
    key: "addStep",
    value: function addStep() {
      if (arguments.length === 1) {
        return _get(_getPrototypeOf(SimpleJob.prototype), "addStep", this).call(this, arguments[0]);
      }

      var step = new _step.Step(arguments[0], this.jobRepository);
      step.doExecute = arguments[1];
      return _get(_getPrototypeOf(SimpleJob.prototype), "addStep", this).call(this, step);
    }
  }]);

  return SimpleJob;
}(_job.Job);

exports.SimpleJob = SimpleJob;

},{"./exceptions/job-interrupted-exception":38,"./exceptions/job-restart-exception":40,"./execution-context":41,"./job":57,"./job-execution-flag":43,"./job-status":56,"./step":61,"sd-utils":"sd-utils"}],59:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StepExecutionListener = void 0;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var StepExecutionListener = /*#__PURE__*/function () {
  function StepExecutionListener() {
    _classCallCheck(this, StepExecutionListener);
  }

  _createClass(StepExecutionListener, [{
    key: "beforeStep",
    value:
    /*Called before a step executes*/
    function beforeStep(jobExecution) {}
    /*Called after completion of a step. Called after both successful and failed executions*/

  }, {
    key: "afterStep",
    value: function afterStep(jobExecution) {}
  }]);

  return StepExecutionListener;
}();

exports.StepExecutionListener = StepExecutionListener;

},{}],60:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StepExecution = void 0;

var _sdUtils = require("sd-utils");

var _executionContext = require("./execution-context");

var _jobStatus = require("./job-status");

var _jobExecution = require("./job-execution");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/*
 representation of the execution of a step
 */


var StepExecution = /*#__PURE__*/function () {
  //execution context for single step level,
  //flag to indicate that an execution should halt
  function StepExecution(stepName, jobExecution, id) {
    _classCallCheck(this, StepExecution);

    this.status = _jobStatus.JOB_STATUS.STARTING;
    this.exitStatus = _jobStatus.JOB_STATUS.EXECUTING;
    this.executionContext = new _executionContext.ExecutionContext();
    this.startTime = new Date();
    this.endTime = null;
    this.lastUpdated = null;
    this.terminateOnly = false;
    this.failureExceptions = [];

    if (id === null || id === undefined) {
      this.id = _sdUtils.Utils.guid();
    } else {
      this.id = id;
    }

    this.stepName = stepName;
    this.jobExecution = jobExecution;
    this.jobExecutionId = jobExecution.id;
  }

  _createClass(StepExecution, [{
    key: "getJobParameters",
    value: function getJobParameters() {
      return this.jobExecution.jobParameters;
    }
  }, {
    key: "getJobExecutionContext",
    value: function getJobExecutionContext() {
      return this.jobExecution.executionContext;
    }
  }, {
    key: "getData",
    value: function getData() {
      return this.jobExecution.getData();
    }
  }, {
    key: "getDTO",
    value: function getDTO() {
      var filteredProperties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var deepClone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var cloneMethod = _sdUtils.Utils.cloneDeepWith;

      if (!deepClone) {
        cloneMethod = _sdUtils.Utils.cloneWith;
      }

      return _sdUtils.Utils.assign({}, cloneMethod(this, function (value, key, object, stack) {
        if (filteredProperties.indexOf(key) > -1) {
          return null;
        }

        if (["executionContext"].indexOf(key) > -1) {
          return value.getDTO();
        }

        if (value instanceof Error) {
          return _sdUtils.Utils.getErrorDTO(value);
        }

        if (value instanceof _jobExecution.JobExecution) {
          return value.getDTO(["stepExecutions"], deepClone);
        }
      }));
    }
  }]);

  return StepExecution;
}();

exports.StepExecution = StepExecution;

},{"./execution-context":41,"./job-execution":45,"./job-status":56,"sd-utils":"sd-utils"}],61:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Step = void 0;

var _jobStatus = require("./job-status");

var _sdUtils = require("sd-utils");

var _jobInterruptedException = require("./exceptions/job-interrupted-exception");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/*domain object representing the configuration of a job step*/


var Step = /*#__PURE__*/function () {
  function Step(name, jobRepository) {
    _classCallCheck(this, Step);

    this.isRestartable = true;
    this.skipOnRestartIfCompleted = true;
    this.steps = [];
    this.executionListeners = [];
    this.name = name;
    this.jobRepository = jobRepository;
  }

  _createClass(Step, [{
    key: "setJobRepository",
    value: function setJobRepository(jobRepository) {
      this.jobRepository = jobRepository;
    }
    /*Process the step and assign progress and status meta information to the StepExecution provided*/

  }, {
    key: "execute",
    value: function execute(stepExecution, jobResult) {
      var _this = this;

      _sdUtils.log.debug("Executing step: name=" + this.name);

      stepExecution.startTime = new Date();
      stepExecution.status = _jobStatus.JOB_STATUS.STARTED;
      var exitStatus;
      return this.jobRepository.update(stepExecution).then(function (stepExecution) {
        exitStatus = _jobStatus.JOB_STATUS.EXECUTING;

        _this.executionListeners.forEach(function (listener) {
          return listener.beforeStep(stepExecution);
        });

        _this.open(stepExecution.executionContext);

        return _this.doExecute(stepExecution, jobResult);
      }).then(function (_stepExecution) {
        stepExecution = _stepExecution;
        exitStatus = stepExecution.exitStatus; // Check if someone is trying to stop us

        if (stepExecution.terminateOnly) {
          throw new _jobInterruptedException.JobInterruptedException("JobExecution interrupted.");
        } // Need to upgrade here not set, in case the execution was stopped


        stepExecution.status = _jobStatus.JOB_STATUS.COMPLETED;

        _sdUtils.log.debug("Step execution success: name=" + _this.name);

        return stepExecution;
      }).catch(function (e) {
        stepExecution.status = _this.determineJobStatus(e);
        exitStatus = stepExecution.status;
        stepExecution.failureExceptions.push(e);

        if (stepExecution.status == _jobStatus.JOB_STATUS.STOPPED) {
          _sdUtils.log.info("Encountered interruption executing step: " + _this.name + " in job: " + stepExecution.jobExecution.jobInstance.jobName, e);
        } else {
          _sdUtils.log.error("Encountered an error executing step: " + _this.name + " in job: " + stepExecution.jobExecution.jobInstance.jobName, e);
        }

        return stepExecution;
      }).then(function (stepExecution) {
        try {
          stepExecution.exitStatus = exitStatus;

          _this.executionListeners.forEach(function (listener) {
            return listener.afterStep(stepExecution);
          });
        } catch (e) {
          _sdUtils.log.error("Exception in afterStep callback in step " + _this.name + " in job: " + stepExecution.jobExecution.jobInstance.jobName, e);
        }

        stepExecution.endTime = new Date();
        stepExecution.exitStatus = exitStatus;
        return _this.jobRepository.update(stepExecution);
      }).then(function (stepExecution) {
        try {
          _this.close(stepExecution.executionContext);
        } catch (e) {
          _sdUtils.log.error("Exception while closing step execution resources in step: " + _this.name + " in job: " + stepExecution.jobExecution.jobInstance.jobName, e);

          stepExecution.failureExceptions.push(e);
        }

        try {
          _this.close(stepExecution.executionContext);
        } catch (e) {
          _sdUtils.log.error("Exception while closing step execution resources in step: " + _this.name + " in job: " + stepExecution.jobExecution.jobInstance.jobName, e);

          stepExecution.failureExceptions.push(e);
        } // doExecutionRelease();


        _sdUtils.log.debug("Step execution complete: " + stepExecution.id);

        return stepExecution;
      });
    }
  }, {
    key: "determineJobStatus",
    value: function determineJobStatus(e) {
      if (e instanceof _jobInterruptedException.JobInterruptedException) {
        return _jobStatus.JOB_STATUS.STOPPED;
      } else {
        return _jobStatus.JOB_STATUS.FAILED;
      }
    }
    /**
     * Extension point for subclasses to execute business logic. Subclasses should set the exitStatus on the
     * StepExecution before returning. Must return stepExecution
     */

  }, {
    key: "doExecute",
    value: function doExecute(stepExecution, jobResult) {}
    /**
     * Extension point for subclasses to provide callbacks to their collaborators at the beginning of a step, to open or
     * acquire resources. Does nothing by default.
     */

  }, {
    key: "open",
    value: function open(executionContext) {}
    /**
     * Extension point for subclasses to provide callbacks to their collaborators at the end of a step (right at the end
     * of the finally block), to close or release resources. Does nothing by default.
     */

  }, {
    key: "close",
    value: function close(executionContext) {}
    /*Should return progress object with fields:
     * current
     * total */

  }, {
    key: "getProgress",
    value: function getProgress(stepExecution) {
      return {
        total: 1,
        current: stepExecution.status === _jobStatus.JOB_STATUS.COMPLETED ? 1 : 0
      };
    }
  }]);

  return Step;
}();

exports.Step = Step;

},{"./exceptions/job-interrupted-exception":38,"./job-status":56,"sd-utils":"sd-utils"}],62:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  engine: true
};
exports.engine = void 0;

var engine = _interopRequireWildcard(require("./engine/index"));

exports.engine = engine;

var _jobsManager = require("./jobs-manager");

Object.keys(_jobsManager).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _jobsManager[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobsManager[key];
    }
  });
});

var _jobWorker = require("./job-worker");

Object.keys(_jobWorker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _jobWorker[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jobWorker[key];
    }
  });
});

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

},{"./engine/index":42,"./job-worker":64,"./jobs-manager":65}],63:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobInstanceManager = exports.JobInstanceManagerConfig = void 0;

var _jobExecutionListener = require("./engine/job-execution-listener");

var _jobStatus = require("./engine/job-status");

var _jobInstance = require("./engine/job-instance");

var _sdUtils = require("sd-utils");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var JobInstanceManagerConfig = function JobInstanceManagerConfig(custom) {
  _classCallCheck(this, JobInstanceManagerConfig);

  this.onJobStarted = function () {};

  this.onJobCompleted = function (result) {};

  this.onJobFailed = function (errors) {};

  this.onJobStopped = function () {};

  this.onJobTerminated = function () {};

  this.onProgress = function (progress) {};

  this.updateInterval = 100;

  if (custom) {
    _sdUtils.Utils.deepExtend(this, custom);
  }
};
/*convenience class for managing and tracking job instance progress*/


exports.JobInstanceManagerConfig = JobInstanceManagerConfig;

var JobInstanceManager = /*#__PURE__*/function (_JobExecutionListener) {
  _inherits(JobInstanceManager, _JobExecutionListener);

  var _super = _createSuper(JobInstanceManager);

  function JobInstanceManager(jobsManger, jobInstanceOrExecution, config) {
    var _this;

    _classCallCheck(this, JobInstanceManager);

    _this = _super.call(this);
    _this.progress = null;
    _this.config = new JobInstanceManagerConfig(config);
    _this.jobsManger = jobsManger;

    if (jobInstanceOrExecution instanceof _jobInstance.JobInstance) {
      _this.jobInstance = jobInstanceOrExecution;

      _this.getLastJobExecution().then(function (je) {
        _this.checkProgress();
      });
    } else {
      _this.lastJobExecution = jobInstanceOrExecution;
      _this.jobInstance = _this.lastJobExecution.jobInstance;

      _this.checkProgress();
    }

    if (_this.lastJobExecution && !_this.lastJobExecution.isRunning()) {
      _this.afterJob(_this.lastJobExecution);

      return _possibleConstructorReturn(_this);
    }

    jobsManger.registerJobExecutionListener(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(JobInstanceManager, [{
    key: "checkProgress",
    value: function checkProgress() {
      var _this2 = this;

      var self = this;

      if (this.terminated || !this.lastJobExecution.isRunning() || this.getProgressPercents(this.progress) === 100) {
        return;
      }

      this.jobsManger.getProgress(this.lastJobExecution).then(function (progress) {
        _this2.lastUpdateTime = new Date();

        if (progress) {
          _this2.progress = progress;

          _this2.config.onProgress.call(_this2.config.callbacksThisArg || _this2, progress);
        }

        setTimeout(function () {
          self.checkProgress();
        }, _this2.config.updateInterval);
      });
    }
  }, {
    key: "beforeJob",
    value: function beforeJob(jobExecution) {
      if (jobExecution.jobInstance.id !== this.jobInstance.id) {
        return;
      }

      this.lastJobExecution = jobExecution;
      this.config.onJobStarted.call(this.config.callbacksThisArg || this);
    }
  }, {
    key: "getProgressPercents",
    value: function getProgressPercents(progress) {
      if (!progress) {
        return 0;
      }

      return progress.current * 100 / progress.total;
    }
  }, {
    key: "getProgressFromExecution",
    value: function getProgressFromExecution(jobExecution) {
      var job = this.jobsManger.getJobByName(jobExecution.jobInstance.jobName);
      return job.getProgress(jobExecution);
    }
  }, {
    key: "afterJob",
    value: function afterJob(jobExecution) {
      var _this3 = this;

      if (jobExecution.jobInstance.id !== this.jobInstance.id) {
        return;
      }

      this.lastJobExecution = jobExecution;

      if (_jobStatus.JOB_STATUS.COMPLETED === jobExecution.status) {
        this.jobsManger.deregisterJobExecutionListener(this);
        this.progress = this.getProgressFromExecution(jobExecution);
        this.config.onProgress.call(this.config.callbacksThisArg || this, this.progress);
        this.jobsManger.getResult(jobExecution).then(function (result) {
          _this3.config.onJobCompleted.call(_this3.config.callbacksThisArg || _this3, result.data);
        }).catch(function (e) {
          _sdUtils.log.error(e);
        });
      } else if (_jobStatus.JOB_STATUS.FAILED === jobExecution.status) {
        this.config.onJobFailed.call(this.config.callbacksThisArg || this, jobExecution.failureExceptions);
      } else if (_jobStatus.JOB_STATUS.STOPPED === jobExecution.status) {
        this.config.onJobStopped.call(this.config.callbacksThisArg || this);
      }
    }
  }, {
    key: "getLastJobExecution",
    value: function getLastJobExecution() {
      var _this4 = this;

      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (!this.lastJobExecution || forceUpdate) {
        return this.jobsManger.jobRepository.getLastJobExecutionByInstance(this.jobInstance).then(function (je) {
          _this4.lastJobExecution = je;
          return je;
        });
      }

      return Promise.resolve(this.lastJobExecution);
    }
  }, {
    key: "stop",
    value: function stop() {
      var _this5 = this;

      return this.getLastJobExecution().then(function () {
        return _this5.jobsManger.stop(_this5.lastJobExecution);
      });
    }
  }, {
    key: "resume",
    value: function resume() {
      var _this6 = this;

      return this.getLastJobExecution().then(function () {
        return _this6.jobsManger.run(_this6.jobInstance.jobName, _this6.lastJobExecution.jobParameters.values, _this6.lastJobExecution.getData()).then(function (je) {
          _this6.lastJobExecution = je;

          _this6.checkProgress();

          return true;
        }).catch(function (e) {
          _sdUtils.log.error(e);

          return false;
        });
      });
    }
  }, {
    key: "terminate",
    value: function terminate() {
      var _this7 = this;

      return this.getLastJobExecution().then(function () {
        return _this7.jobsManger.terminate(_this7.jobInstance).then(function () {
          _this7.terminated = true;

          _this7.config.onJobTerminated.call(_this7.config.callbacksThisArg || _this7, _this7.lastJobExecution);

          _this7.jobsManger.deregisterJobExecutionListener(_this7);

          return _this7.lastJobExecution;
        });
      }).catch(function (e) {
        _sdUtils.log.error(e);

        return false;
      });
    }
  }]);

  return JobInstanceManager;
}(_jobExecutionListener.JobExecutionListener);

exports.JobInstanceManager = JobInstanceManager;

},{"./engine/job-execution-listener":44,"./engine/job-instance":46,"./engine/job-status":56,"sd-utils":"sd-utils"}],64:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobWorker = void 0;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var JobWorker = /*#__PURE__*/function () {
  function JobWorker(url, defaultListener, onError) {
    _classCallCheck(this, JobWorker);

    this.listeners = {};
    var instance = this;
    this.worker = new Worker(url);

    this.defaultListener = defaultListener || function () {};

    if (onError) {
      this.worker.onerror = onError;
    }

    this.worker.onmessage = function (event) {
      if (event.data instanceof Object && event.data.hasOwnProperty('queryMethodListener') && event.data.hasOwnProperty('queryMethodArguments')) {
        var listener = instance.listeners[event.data.queryMethodListener];
        var args = event.data.queryMethodArguments;

        if (listener.deserializer) {
          args = listener.deserializer(args);
        }

        listener.fn.apply(listener.thisArg, args);
      } else {
        this.defaultListener.call(instance, event.data);
      }
    };
  }

  _createClass(JobWorker, [{
    key: "sendQuery",
    value: function sendQuery() {
      if (arguments.length < 1) {
        throw new TypeError('JobWorker.sendQuery takes at least one argument');
      }

      this.worker.postMessage({
        'queryMethod': arguments[0],
        'queryArguments': Array.prototype.slice.call(arguments, 1)
      });
    }
  }, {
    key: "runJob",
    value: function runJob(jobName, jobParametersValues, dataDTO) {
      this.sendQuery('runJob', jobName, jobParametersValues, dataDTO);
    }
  }, {
    key: "executeJob",
    value: function executeJob(jobExecutionId) {
      this.sendQuery('executeJob', jobExecutionId);
    }
  }, {
    key: "recompute",
    value: function recompute(dataDTO, ruleNames, evalCode, evalNumeric) {
      this.sendQuery('recompute', dataDTO, ruleNames, evalCode, evalNumeric);
    }
  }, {
    key: "postMessage",
    value: function postMessage(message) {
      this.worker.postMessage(message);
    }
  }, {
    key: "terminate",
    value: function terminate() {
      this.worker.terminate();
    }
  }, {
    key: "addListener",
    value: function addListener(name, listener, thisArg, deserializer) {
      this.listeners[name] = {
        fn: listener,
        thisArg: thisArg || this,
        deserializer: deserializer
      };
    }
  }, {
    key: "removeListener",
    value: function removeListener(name) {
      delete this.listeners[name];
    }
  }]);

  return JobWorker;
}();

exports.JobWorker = JobWorker;

},{}],65:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobsManager = exports.JobsManagerConfig = void 0;

var _sdUtils = require("sd-utils");

var _sensitivityAnalysisJob = require("./configurations/sensitivity-analysis/n-way/sensitivity-analysis-job");

var _jobLauncher = require("./engine/job-launcher");

var _jobWorker = require("./job-worker");

var _jobExecutionListener = require("./engine/job-execution-listener");

var _jobParameters = require("./engine/job-parameters");

var _idbJobRepository = require("./engine/job-repository/idb-job-repository");

var _jobExecutionFlag = require("./engine/job-execution-flag");

var _recomputeJob = require("./configurations/recompute/recompute-job");

var _probabilisticSensitivityAnalysisJob = require("./configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job");

var _timeoutJobRepository = require("./engine/job-repository/timeout-job-repository");

var _tornadoDiagramJob = require("./configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job");

var _jobStatus = require("./engine/job-status");

var _simpleJobRepository = require("./engine/job-repository/simple-job-repository");

var _leagueTableJob = require("./configurations/league-table/league-table-job");

var _spiderPlotJob = require("./configurations/sensitivity-analysis/spider-plot/spider-plot-job");

var _payoffsTransformationJob = require("./configurations/payoffs-transformation/payoffs-transformation-job");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var JobsManagerConfig = function JobsManagerConfig(custom) {
  _classCallCheck(this, JobsManagerConfig);

  this.workerUrl = null;
  this.repositoryType = 'idb';
  this.clearRepository = false;

  if (custom) {
    _sdUtils.Utils.deepExtend(this, custom);
  }
};

exports.JobsManagerConfig = JobsManagerConfig;

var JobsManager = /*#__PURE__*/function (_JobExecutionListener) {
  _inherits(JobsManager, _JobExecutionListener);

  var _super = _createSuper(JobsManager);

  function JobsManager(expressionsEvaluator, objectiveRulesManager, config) {
    var _this;

    _classCallCheck(this, JobsManager);

    _this = _super.call(this);
    _this.jobExecutionListeners = [];
    _this.afterJobExecutionPromiseResolves = {};
    _this.jobInstancesToTerminate = {};

    _this.setConfig(config);

    _this.expressionEngine = expressionsEvaluator.expressionEngine;
    _this.expressionsEvaluator = expressionsEvaluator;
    _this.objectiveRulesManager = objectiveRulesManager;
    _this.useWorker = !!_this.config.workerUrl;

    if (_this.useWorker) {
      _this.initWorker(_this.config.workerUrl);
    }

    _this.initRepository();

    _this.registerJobs();

    _this.jobLauncher = new _jobLauncher.JobLauncher(_this.jobRepository, _this.jobWorker, function (data) {
      return _this.serializeData(data);
    });
    return _this;
  }

  _createClass(JobsManager, [{
    key: "setConfig",
    value: function setConfig(config) {
      this.config = new JobsManagerConfig(config);
      return this;
    }
  }, {
    key: "initRepository",
    value: function initRepository() {
      switch (this.config.repositoryType) {
        case 'idb':
          this.jobRepository = new _idbJobRepository.IdbJobRepository(this.expressionEngine.getJsonReviver(), 'sd-job-repository', this.config.clearRepository);
          break;

        case 'timeout':
          this.jobRepository = new _timeoutJobRepository.TimeoutJobRepository(this.expressionEngine.getJsonReviver());
          break;

        case 'simple':
          this.jobRepository = new _simpleJobRepository.SimpleJobRepository(this.expressionEngine.getJsonReviver());
          break;

        default:
          _sdUtils.log.error('JobsManager configuration error! Unknown repository type: ' + this.config.repositoryType + '. Using default: idb');

          this.config.repositoryType = 'idb';
          this.initRepository();
      }
    }
  }, {
    key: "serializeData",
    value: function serializeData(data) {
      return data.serialize(true, false, false, this.expressionEngine.getJsonReplacer());
    }
  }, {
    key: "getProgress",
    value: function getProgress(jobExecutionOrId) {
      var id = jobExecutionOrId;

      if (!_sdUtils.Utils.isString(jobExecutionOrId)) {
        id = jobExecutionOrId.id;
      }

      return this.jobRepository.getJobExecutionProgress(id);
    }
  }, {
    key: "getResult",
    value: function getResult(jobInstanceOrExecution) {
      var jobInstance = jobInstanceOrExecution;
      var jobExecution = null;

      if (jobInstanceOrExecution.jobInstance) {
        jobExecution = jobInstanceOrExecution;
        jobInstance = jobExecution.jobInstance;
      }

      return this.jobRepository.getJobResultByInstance(jobInstance);
    }
  }, {
    key: "run",
    value: function run(jobName, jobParametersValues, data) {
      var _this2 = this;

      var resolvePromiseAfterJobIsLaunched = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      return this.jobLauncher.run(jobName, jobParametersValues, data, resolvePromiseAfterJobIsLaunched).then(function (jobExecution) {
        if (resolvePromiseAfterJobIsLaunched || !jobExecution.isRunning()) {
          return jobExecution;
        } //job was delegated to worker and is still running


        return new Promise(function (resolve, reject) {
          _this2.afterJobExecutionPromiseResolves[jobExecution.id] = resolve;
        });
      });
    }
  }, {
    key: "execute",
    value: function execute(jobExecutionOrId) {
      return this.jobLauncher.execute(jobExecutionOrId);
    }
  }, {
    key: "stop",
    value: function stop(jobExecutionOrId) {
      var _this3 = this;

      var id = jobExecutionOrId;

      if (!_sdUtils.Utils.isString(jobExecutionOrId)) {
        id = jobExecutionOrId.id;
      }

      return this.jobRepository.getJobExecutionById(id).then(function (jobExecution) {
        if (!jobExecution) {
          _sdUtils.log.error("Job Execution not found: " + jobExecutionOrId);

          return null;
        }

        if (!jobExecution.isRunning()) {
          _sdUtils.log.warn("Job Execution not running, status: " + jobExecution.status + ", endTime: " + jobExecution.endTime);

          return jobExecution;
        }

        return _this3.jobRepository.saveJobExecutionFlag(jobExecution.id, _jobExecutionFlag.JOB_EXECUTION_FLAG.STOP).then(function () {
          return jobExecution;
        });
      });
    }
    /*stop job execution if running and delete job instance from repository*/

  }, {
    key: "terminate",
    value: function terminate(jobInstance) {
      var _this4 = this;

      return this.jobRepository.getLastJobExecutionByInstance(jobInstance).then(function (jobExecution) {
        if (jobExecution) {
          if (jobExecution.isRunning()) {
            return _this4.jobRepository.saveJobExecutionFlag(jobExecution.id, _jobExecutionFlag.JOB_EXECUTION_FLAG.STOP).then(function () {
              return jobExecution;
            });
          } else {
            return _this4.jobRepository.removeJobInstance(jobInstance, jobExecution.jobParameters);
          }
        }
      }).then(function () {
        _this4.jobInstancesToTerminate[jobInstance.id] = jobInstance;
      });
    }
  }, {
    key: "getJobByName",
    value: function getJobByName(jobName) {
      return this.jobRepository.getJobByName(jobName);
    }
  }, {
    key: "createJobParameters",
    value: function createJobParameters(jobName, jobParametersValues) {
      var job = this.jobRepository.getJobByName(jobName);
      return job.createJobParameters(jobParametersValues);
    }
    /*Returns a promise*/

  }, {
    key: "getLastJobExecution",
    value: function getLastJobExecution(jobName, jobParameters) {
      if (this.useWorker) {
        return this.jobWorker;
      }

      if (!(jobParameters instanceof _jobParameters.JobParameters)) {
        jobParameters = this.createJobParameters(jobParameters);
      }

      return this.jobRepository.getLastJobExecution(jobName, jobParameters);
    }
  }, {
    key: "initWorker",
    value: function initWorker(workerUrl) {
      var _arguments = arguments,
          _this5 = this;

      this.jobWorker = new _jobWorker.JobWorker(workerUrl, function () {
        _sdUtils.log.error('error in worker', _arguments);
      });

      var argsDeserializer = function argsDeserializer(args) {
        return [_this5.jobRepository.reviveJobExecution(args[0])];
      };

      this.jobWorker.addListener("beforeJob", this.beforeJob, this, argsDeserializer);
      this.jobWorker.addListener("afterJob", this.afterJob, this, argsDeserializer);
      this.jobWorker.addListener("jobFatalError", this.onJobFatalError, this);
    }
  }, {
    key: "registerJobs",
    value: function registerJobs() {
      var sensitivityAnalysisJob = new _sensitivityAnalysisJob.SensitivityAnalysisJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);
      var probabilisticSensitivityAnalysisJob = new _probabilisticSensitivityAnalysisJob.ProbabilisticSensitivityAnalysisJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager);

      if (!_sdUtils.Utils.isWorker()) {
        sensitivityAnalysisJob.setBatchSize(1);
        probabilisticSensitivityAnalysisJob.setBatchSize(1);
      }

      this.registerJob(sensitivityAnalysisJob);
      this.registerJob(new _tornadoDiagramJob.TornadoDiagramJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));
      this.registerJob(probabilisticSensitivityAnalysisJob);
      this.registerJob(new _recomputeJob.RecomputeJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));
      this.registerJob(new _leagueTableJob.LeagueTableJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));
      this.registerJob(new _spiderPlotJob.SpiderPlotJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));
      this.registerJob(new _payoffsTransformationJob.PayoffsTransformationJob(this.jobRepository, this.expressionsEvaluator, this.objectiveRulesManager));
    }
  }, {
    key: "registerJob",
    value: function registerJob(job) {
      this.jobRepository.registerJob(job);
      job.registerExecutionListener(this);
    }
  }, {
    key: "registerJobExecutionListener",
    value: function registerJobExecutionListener(listener) {
      this.jobExecutionListeners.push(listener);
    }
  }, {
    key: "deregisterJobExecutionListener",
    value: function deregisterJobExecutionListener(listener) {
      var index = this.jobExecutionListeners.indexOf(listener);

      if (index > -1) {
        this.jobExecutionListeners.splice(index, 1);
      }
    }
  }, {
    key: "beforeJob",
    value: function beforeJob(jobExecution) {
      _sdUtils.log.debug("beforeJob", this.useWorker, jobExecution);

      this.jobExecutionListeners.forEach(function (l) {
        return l.beforeJob(jobExecution);
      });
    }
  }, {
    key: "afterJob",
    value: function afterJob(jobExecution) {
      _sdUtils.log.debug("afterJob", this.useWorker, jobExecution);

      this.jobExecutionListeners.forEach(function (l) {
        return l.afterJob(jobExecution);
      });
      var promiseResolve = this.afterJobExecutionPromiseResolves[jobExecution.id];

      if (promiseResolve) {
        promiseResolve(jobExecution);
      }

      if (this.jobInstancesToTerminate[jobExecution.jobInstance.id]) {
        this.jobRepository.removeJobInstance(jobExecution.jobInstance, jobExecution.jobParameters);
      }
    }
  }, {
    key: "onJobFatalError",
    value: function onJobFatalError(jobExecutionId, error) {
      var _this6 = this;

      var promiseResolve = this.afterJobExecutionPromiseResolves[jobExecutionId];

      if (promiseResolve) {
        this.jobRepository.getJobExecutionById(jobExecutionId).then(function (jobExecution) {
          jobExecution.status = _jobStatus.JOB_STATUS.FAILED;

          if (error) {
            jobExecution.failureExceptions.push(error);
          }

          return _this6.jobRepository.saveJobExecution(jobExecution).then(function () {
            promiseResolve(jobExecution);
          });
        }).catch(function (e) {
          _sdUtils.log.error(e);
        });
      }

      _sdUtils.log.debug('onJobFatalError', jobExecutionId, error);
    }
  }]);

  return JobsManager;
}(_jobExecutionListener.JobExecutionListener);

exports.JobsManager = JobsManager;

},{"./configurations/league-table/league-table-job":9,"./configurations/payoffs-transformation/payoffs-transformation-job":12,"./configurations/recompute/recompute-job":14,"./configurations/sensitivity-analysis/n-way/sensitivity-analysis-job":16,"./configurations/sensitivity-analysis/probabilistic/probabilistic-sensitivity-analysis-job":21,"./configurations/sensitivity-analysis/spider-plot/spider-plot-job":25,"./configurations/sensitivity-analysis/tornado-diagram/tornado-diagram-job":30,"./engine/job-execution-flag":43,"./engine/job-execution-listener":44,"./engine/job-launcher":48,"./engine/job-parameters":50,"./engine/job-repository/idb-job-repository":51,"./engine/job-repository/simple-job-repository":53,"./engine/job-repository/timeout-job-repository":54,"./engine/job-status":56,"./job-worker":64,"sd-utils":"sd-utils"}],66:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectiveRulesManager = void 0;

var _rules = require("./rules");

var _sdUtils = require("sd-utils");

var model = _interopRequireWildcard(require("sd-model"));

var _minMaxRule = require("./rules/min-max-rule");

var _maxMinRule = require("./rules/max-min-rule");

var _minMinRule = require("./rules/min-min-rule");

var _maxMaxRule = require("./rules/max-max-rule");

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var ObjectiveRulesManager = /*#__PURE__*/function () {
  function ObjectiveRulesManager(expressionEngine, currentRuleName) {
    _classCallCheck(this, ObjectiveRulesManager);

    this.ruleByName = {};
    this.rules = [];
    this.flipPair = {};
    this.payoffIndex = 0;
    this.expressionEngine = expressionEngine;
    this.addRule(new _rules.ExpectedValueMaximizationRule(expressionEngine));
    this.addRule(new _rules.ExpectedValueMinimizationRule(expressionEngine));
    this.addRule(new _rules.MaxiMinRule(expressionEngine));
    this.addRule(new _rules.MaxiMaxRule(expressionEngine));
    this.addRule(new _rules.MiniMinRule(expressionEngine));
    this.addRule(new _rules.MiniMaxRule(expressionEngine));
    var minMax = new _minMaxRule.MinMaxRule(expressionEngine);
    this.addRule(minMax);
    var maxMin = new _maxMinRule.MaxMinRule(expressionEngine);
    this.addRule(maxMin);
    this.addFlipPair(minMax, maxMin);
    var minMin = new _minMinRule.MinMinRule(expressionEngine);
    this.addRule(minMin);
    var maxMax = new _maxMaxRule.MaxMaxRule(expressionEngine);
    this.addRule(maxMax);

    if (currentRuleName) {
      this.currentRule = this.ruleByName[currentRuleName];
    } else {
      this.currentRule = this.rules[0];
    }
  }

  _createClass(ObjectiveRulesManager, [{
    key: "setPayoffIndex",
    value: function setPayoffIndex(payoffIndex) {
      this.payoffIndex = payoffIndex || 0;
    }
  }, {
    key: "addRule",
    value: function addRule(rule) {
      this.ruleByName[rule.name] = rule;
      this.rules.push(rule);
    }
  }, {
    key: "isRuleName",
    value: function isRuleName(ruleName) {
      return !!this.ruleByName[ruleName];
    }
  }, {
    key: "setCurrentRuleByName",
    value: function setCurrentRuleByName(ruleName) {
      this.currentRule = this.ruleByName[ruleName];
    }
  }, {
    key: "getObjectiveRuleByName",
    value: function getObjectiveRuleByName(ruleName) {
      return this.ruleByName[ruleName];
    }
  }, {
    key: "flipRule",
    value: function flipRule() {
      var flipped = this.flipPair[this.currentRule.name];

      if (flipped) {
        this.currentRule = flipped;
      }
    }
  }, {
    key: "updateDefaultCriterion1Weight",
    value: function updateDefaultCriterion1Weight(defaultCriterion1Weight) {
      this.rules.filter(function (r) {
        return r.multiCriteria;
      }).forEach(function (r) {
        return r.setDefaultCriterion1Weight(defaultCriterion1Weight);
      });
    }
  }, {
    key: "recompute",
    value: function recompute(dataModel, allRules) {
      var _this = this;

      var decisionPolicy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var startTime = new Date().getTime();

      _sdUtils.log.trace('recomputing rules, all: ' + allRules);

      dataModel.getRoots().forEach(function (n) {
        _this.recomputeTree(n, allRules, decisionPolicy);
      });
      var time = new Date().getTime() - startTime / 1000;

      _sdUtils.log.trace('recomputation took ' + time + 's');

      return this;
    }
  }, {
    key: "recomputeTree",
    value: function recomputeTree(root, allRules) {
      var _this2 = this;

      var decisionPolicy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      _sdUtils.log.trace('recomputing rules for tree ...', root);

      var startTime = new Date().getTime();
      var rules = [this.currentRule];

      if (allRules) {
        rules = this.rules;
      }

      rules.forEach(function (rule) {
        rule.setPayoffIndex(_this2.payoffIndex);
        rule.setDecisionPolicy(decisionPolicy);
        rule.computePayoff(root);
        rule.computeOptimal(root);
        rule.clearDecisionPolicy();
      });
      var time = (new Date().getTime() - startTime) / 1000;

      _sdUtils.log.trace('recomputation took ' + time + 's');

      return this;
    }
  }, {
    key: "getNodeDisplayValue",
    value: function getNodeDisplayValue(node, name) {
      return node.computedValue(this.currentRule.name, name);
    }
  }, {
    key: "getEdgeDisplayValue",
    value: function getEdgeDisplayValue(e, name) {
      if (name === 'probability') {
        if (e.parentNode instanceof model.domain.DecisionNode) {
          return e.computedValue(this.currentRule.name, 'probability');
        }

        if (e.parentNode instanceof model.domain.ChanceNode) {
          return e.computedBaseProbability();
        }

        return null;
      }

      if (name === 'payoff') {
        if (this.currentRule.multiCriteria) {
          return e.computedValue(null, 'payoff');
        } else {
          return e.computedValue(null, 'payoff[' + this.payoffIndex + ']');
        }
      }

      if (name === 'optimal') {
        return e.computedValue(this.currentRule.name, 'optimal');
      }
    }
  }, {
    key: "addFlipPair",
    value: function addFlipPair(rule1, rule2) {
      this.flipPair[rule1.name] = rule2;
      this.flipPair[rule2.name] = rule1;
    }
  }]);

  return ObjectiveRulesManager;
}();

exports.ObjectiveRulesManager = ObjectiveRulesManager;

},{"./rules":69,"./rules/max-max-rule":70,"./rules/max-min-rule":71,"./rules/min-max-rule":74,"./rules/min-min-rule":75,"sd-model":"sd-model","sd-utils":"sd-utils"}],67:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExpectedValueMaximizationRule = void 0;

var _sdModel = require("sd-model");

var _objectiveRule = require("./objective-rule");

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/*expected value maximization rule*/


var ExpectedValueMaximizationRule = /*#__PURE__*/function (_ObjectiveRule) {
  _inherits(ExpectedValueMaximizationRule, _ObjectiveRule);

  var _super = _createSuper(ExpectedValueMaximizationRule);

  function ExpectedValueMaximizationRule(expressionEngine) {
    _classCallCheck(this, ExpectedValueMaximizationRule);

    return _super.call(this, ExpectedValueMaximizationRule.NAME, true, expressionEngine);
  } //  payoff - parent edge payoff


  _createClass(ExpectedValueMaximizationRule, [{
    key: "computeOptimal",
    value: function computeOptimal(node) {
      var _this = this;

      var payoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var probabilityToEnter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      this.cValue(node, 'optimal', true);

      if (node instanceof _sdModel.domain.TerminalNode) {
        this.cValue(node, 'probabilityToEnter', probabilityToEnter);
      }

      node.childEdges.forEach(function (e) {
        if (_this.subtract(_this.computedPayoff(node), payoff).equals(_this.computedPayoff(e.childNode)) || !(node instanceof _sdModel.domain.DecisionNode)) {
          _this.cValue(e, 'optimal', true);

          _this.computeOptimal(e.childNode, _this.basePayoff(e), _this.multiply(probabilityToEnter, _this.cValue(e, 'probability')));
        } else {
          _this.cValue(e, 'optimal', false);
        }
      });
    }
  }]);

  return ExpectedValueMaximizationRule;
}(_objectiveRule.ObjectiveRule);

exports.ExpectedValueMaximizationRule = ExpectedValueMaximizationRule;
ExpectedValueMaximizationRule.NAME = 'expected-value-maximization';

},{"./objective-rule":79,"sd-model":"sd-model","sd-utils":"sd-utils"}],68:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExpectedValueMinimizationRule = void 0;

var _sdModel = require("sd-model");

var _objectiveRule = require("./objective-rule");

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/*expected value minimization rule*/


var ExpectedValueMinimizationRule = /*#__PURE__*/function (_ObjectiveRule) {
  _inherits(ExpectedValueMinimizationRule, _ObjectiveRule);

  var _super = _createSuper(ExpectedValueMinimizationRule);

  function ExpectedValueMinimizationRule(expressionEngine) {
    _classCallCheck(this, ExpectedValueMinimizationRule);

    return _super.call(this, ExpectedValueMinimizationRule.NAME, false, expressionEngine);
  } //  payoff - parent edge payoff


  _createClass(ExpectedValueMinimizationRule, [{
    key: "computeOptimal",
    value: function computeOptimal(node) {
      var _this = this;

      var payoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var probabilityToEnter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      this.cValue(node, 'optimal', true);

      if (node instanceof _sdModel.domain.TerminalNode) {
        this.cValue(node, 'probabilityToEnter', probabilityToEnter);
      }

      node.childEdges.forEach(function (e) {
        if (_this.subtract(_this.computedPayoff(node), payoff).equals(_this.computedPayoff(e.childNode)) || !(node instanceof _sdModel.domain.DecisionNode)) {
          _this.cValue(e, 'optimal', true);

          _this.computeOptimal(e.childNode, _this.basePayoff(e), _this.multiply(probabilityToEnter, _this.cValue(e, 'probability')));
        } else {
          _this.cValue(e, 'optimal', false);
        }
      });
    }
  }]);

  return ExpectedValueMinimizationRule;
}(_objectiveRule.ObjectiveRule);

exports.ExpectedValueMinimizationRule = ExpectedValueMinimizationRule;
ExpectedValueMinimizationRule.NAME = 'expected-value-minimization';

},{"./objective-rule":79,"sd-model":"sd-model","sd-utils":"sd-utils"}],69:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _objectiveRule = require("./objective-rule");

Object.keys(_objectiveRule).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _objectiveRule[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _objectiveRule[key];
    }
  });
});

var _expectedValueMaximizationRule = require("./expected-value-maximization-rule");

Object.keys(_expectedValueMaximizationRule).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _expectedValueMaximizationRule[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _expectedValueMaximizationRule[key];
    }
  });
});

var _expectedValueMinimizationRule = require("./expected-value-minimization-rule");

Object.keys(_expectedValueMinimizationRule).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _expectedValueMinimizationRule[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _expectedValueMinimizationRule[key];
    }
  });
});

var _maxiMaxRule = require("./maxi-max-rule");

Object.keys(_maxiMaxRule).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _maxiMaxRule[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _maxiMaxRule[key];
    }
  });
});

var _maxiMinRule = require("./maxi-min-rule");

Object.keys(_maxiMinRule).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _maxiMinRule[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _maxiMinRule[key];
    }
  });
});

var _miniMaxRule = require("./mini-max-rule");

Object.keys(_miniMaxRule).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _miniMaxRule[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _miniMaxRule[key];
    }
  });
});

var _miniMinRule = require("./mini-min-rule");

Object.keys(_miniMinRule).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _miniMinRule[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _miniMinRule[key];
    }
  });
});

},{"./expected-value-maximization-rule":67,"./expected-value-minimization-rule":68,"./maxi-max-rule":72,"./maxi-min-rule":73,"./mini-max-rule":76,"./mini-min-rule":77,"./objective-rule":79}],70:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MaxMaxRule = void 0;

var _multiCriteriaRule = require("./multi-criteria-rule");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var MaxMaxRule = /*#__PURE__*/function (_MultiCriteriaRule) {
  _inherits(MaxMaxRule, _MultiCriteriaRule);

  var _super = _createSuper(MaxMaxRule);

  function MaxMaxRule(expressionEngine) {
    _classCallCheck(this, MaxMaxRule);

    return _super.call(this, MaxMaxRule.NAME, [1, 1], expressionEngine);
  }

  return MaxMaxRule;
}(_multiCriteriaRule.MultiCriteriaRule);

exports.MaxMaxRule = MaxMaxRule;
MaxMaxRule.NAME = 'max-max';

},{"./multi-criteria-rule":78}],71:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MaxMinRule = void 0;

var _multiCriteriaRule = require("./multi-criteria-rule");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var MaxMinRule = /*#__PURE__*/function (_MultiCriteriaRule) {
  _inherits(MaxMinRule, _MultiCriteriaRule);

  var _super = _createSuper(MaxMinRule);

  function MaxMinRule(expressionEngine) {
    _classCallCheck(this, MaxMinRule);

    return _super.call(this, MaxMinRule.NAME, [1, -1], expressionEngine);
  }

  return MaxMinRule;
}(_multiCriteriaRule.MultiCriteriaRule);

exports.MaxMinRule = MaxMinRule;
MaxMinRule.NAME = 'max-min';

},{"./multi-criteria-rule":78}],72:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MaxiMaxRule = void 0;

var _sdModel = require("sd-model");

var _objectiveRule = require("./objective-rule");

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/*maxi-max rule*/


var MaxiMaxRule = /*#__PURE__*/function (_ObjectiveRule) {
  _inherits(MaxiMaxRule, _ObjectiveRule);

  var _super = _createSuper(MaxiMaxRule);

  function MaxiMaxRule(expressionEngine) {
    _classCallCheck(this, MaxiMaxRule);

    return _super.call(this, MaxiMaxRule.NAME, true, expressionEngine);
  }

  _createClass(MaxiMaxRule, [{
    key: "modifyChanceProbability",
    value: function modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount) {
      var _this = this;

      edges.forEach(function (e) {
        _this.clearComputedValues(e);

        _this.cValue(e, 'probability', _this.computedPayoff(e.childNode) < bestChildPayoff ? 0.0 : 1.0 / bestCount);
      });
    } //  payoff - parent edge payoff

  }, {
    key: "computeOptimal",
    value: function computeOptimal(node) {
      var _this2 = this;

      var payoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var probabilityToEnter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      this.cValue(node, 'optimal', true);

      if (node instanceof _sdModel.domain.TerminalNode) {
        this.cValue(node, 'probabilityToEnter', probabilityToEnter);
      }

      var optimalEdge = null;

      if (node instanceof _sdModel.domain.ChanceNode) {
        optimalEdge = _sdUtils.Utils.maxBy(node.childEdges, function (e) {
          return _this2.computedPayoff(e.childNode);
        });
      }

      node.childEdges.forEach(function (e) {
        var isOptimal = false;

        if (optimalEdge) {
          isOptimal = _this2.computedPayoff(optimalEdge.childNode).equals(_this2.computedPayoff(e.childNode));
        } else isOptimal = !!(_this2.subtract(_this2.computedPayoff(node), payoff).equals(_this2.computedPayoff(e.childNode)) || !(node instanceof _sdModel.domain.DecisionNode));

        if (isOptimal) {
          _this2.cValue(e, 'optimal', true);

          _this2.computeOptimal(e.childNode, _this2.basePayoff(e), _this2.multiply(probabilityToEnter, _this2.cValue(e, 'probability')));
        } else {
          _this2.cValue(e, 'optimal', false);
        }
      });
    }
  }]);

  return MaxiMaxRule;
}(_objectiveRule.ObjectiveRule);

exports.MaxiMaxRule = MaxiMaxRule;
MaxiMaxRule.NAME = 'maxi-max';

},{"./objective-rule":79,"sd-model":"sd-model","sd-utils":"sd-utils"}],73:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MaxiMinRule = void 0;

var _sdModel = require("sd-model");

var _objectiveRule = require("./objective-rule");

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/*maxi-min rule*/


var MaxiMinRule = /*#__PURE__*/function (_ObjectiveRule) {
  _inherits(MaxiMinRule, _ObjectiveRule);

  var _super = _createSuper(MaxiMinRule);

  function MaxiMinRule(expressionEngine) {
    _classCallCheck(this, MaxiMinRule);

    return _super.call(this, MaxiMinRule.NAME, true, expressionEngine);
  }

  _createClass(MaxiMinRule, [{
    key: "modifyChanceProbability",
    value: function modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount) {
      var _this = this;

      edges.forEach(function (e) {
        _this.clearComputedValues(e);

        _this.cValue(e, 'probability', _this.computedPayoff(e.childNode) > worstChildPayoff ? 0.0 : 1.0 / worstCount);
      });
    } //  payoff - parent edge payoff

  }, {
    key: "computeOptimal",
    value: function computeOptimal(node) {
      var _this2 = this;

      var payoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var probabilityToEnter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      this.cValue(node, 'optimal', true);

      if (node instanceof _sdModel.domain.TerminalNode) {
        this.cValue(node, 'probabilityToEnter', probabilityToEnter);
      }

      var optimalEdge = null;

      if (node instanceof _sdModel.domain.ChanceNode) {
        optimalEdge = _sdUtils.Utils.minBy(node.childEdges, function (e) {
          return _this2.computedPayoff(e.childNode);
        });
      }

      node.childEdges.forEach(function (e) {
        var isOptimal = false;

        if (optimalEdge) {
          isOptimal = _this2.computedPayoff(optimalEdge.childNode).equals(_this2.computedPayoff(e.childNode));
        } else isOptimal = !!(_this2.subtract(_this2.computedPayoff(node), payoff).equals(_this2.computedPayoff(e.childNode)) || !(node instanceof _sdModel.domain.DecisionNode));

        if (isOptimal) {
          _this2.cValue(e, 'optimal', true);

          _this2.computeOptimal(e.childNode, _this2.basePayoff(e), _this2.multiply(probabilityToEnter, _this2.cValue(e, 'probability')));
        } else {
          _this2.cValue(e, 'optimal', false);
        }
      });
    }
  }]);

  return MaxiMinRule;
}(_objectiveRule.ObjectiveRule);

exports.MaxiMinRule = MaxiMinRule;
MaxiMinRule.NAME = 'maxi-min';

},{"./objective-rule":79,"sd-model":"sd-model","sd-utils":"sd-utils"}],74:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MinMaxRule = void 0;

var _multiCriteriaRule = require("./multi-criteria-rule");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var MinMaxRule = /*#__PURE__*/function (_MultiCriteriaRule) {
  _inherits(MinMaxRule, _MultiCriteriaRule);

  var _super = _createSuper(MinMaxRule);

  function MinMaxRule(expressionEngine) {
    _classCallCheck(this, MinMaxRule);

    return _super.call(this, MinMaxRule.NAME, [-1, 1], expressionEngine);
  }

  return MinMaxRule;
}(_multiCriteriaRule.MultiCriteriaRule);

exports.MinMaxRule = MinMaxRule;
MinMaxRule.NAME = 'min-max';

},{"./multi-criteria-rule":78}],75:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MinMinRule = void 0;

var _multiCriteriaRule = require("./multi-criteria-rule");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var MinMinRule = /*#__PURE__*/function (_MultiCriteriaRule) {
  _inherits(MinMinRule, _MultiCriteriaRule);

  var _super = _createSuper(MinMinRule);

  function MinMinRule(expressionEngine) {
    _classCallCheck(this, MinMinRule);

    return _super.call(this, MinMinRule.NAME, [-1, -1], expressionEngine);
  }

  return MinMinRule;
}(_multiCriteriaRule.MultiCriteriaRule);

exports.MinMinRule = MinMinRule;
MinMinRule.NAME = 'min-min';

},{"./multi-criteria-rule":78}],76:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MiniMaxRule = void 0;

var _sdModel = require("sd-model");

var _objectiveRule = require("./objective-rule");

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/*mini-max rule*/


var MiniMaxRule = /*#__PURE__*/function (_ObjectiveRule) {
  _inherits(MiniMaxRule, _ObjectiveRule);

  var _super = _createSuper(MiniMaxRule);

  function MiniMaxRule(expressionEngine) {
    _classCallCheck(this, MiniMaxRule);

    return _super.call(this, MiniMaxRule.NAME, false, expressionEngine);
  }

  _createClass(MiniMaxRule, [{
    key: "modifyChanceProbability",
    value: function modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount) {
      var _this = this;

      edges.forEach(function (e) {
        _this.clearComputedValues(e);

        _this.cValue(e, 'probability', _this.computedPayoff(e.childNode) < bestChildPayoff ? 0.0 : 1.0 / bestCount);
      });
    } //  payoff - parent edge payoff

  }, {
    key: "computeOptimal",
    value: function computeOptimal(node) {
      var _this2 = this;

      var payoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var probabilityToEnter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      this.cValue(node, 'optimal', true);

      if (node instanceof _sdModel.domain.TerminalNode) {
        this.cValue(node, 'probabilityToEnter', probabilityToEnter);
      }

      var optimalEdge = null;

      if (node instanceof _sdModel.domain.ChanceNode) {
        optimalEdge = _sdUtils.Utils.maxBy(node.childEdges, function (e) {
          return _this2.computedPayoff(e.childNode);
        });
      }

      node.childEdges.forEach(function (e) {
        var isOptimal = false;

        if (optimalEdge) {
          isOptimal = _this2.computedPayoff(optimalEdge.childNode).equals(_this2.computedPayoff(e.childNode));
        } else isOptimal = !!(_this2.subtract(_this2.computedPayoff(node), payoff).equals(_this2.computedPayoff(e.childNode)) || !(node instanceof _sdModel.domain.DecisionNode));

        if (isOptimal) {
          _this2.cValue(e, 'optimal', true);

          _this2.computeOptimal(e.childNode, _this2.basePayoff(e), _this2.multiply(probabilityToEnter, _this2.cValue(e, 'probability')));
        } else {
          _this2.cValue(e, 'optimal', false);
        }
      });
    }
  }]);

  return MiniMaxRule;
}(_objectiveRule.ObjectiveRule);

exports.MiniMaxRule = MiniMaxRule;
MiniMaxRule.NAME = 'mini-max';

},{"./objective-rule":79,"sd-model":"sd-model","sd-utils":"sd-utils"}],77:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MiniMinRule = void 0;

var _sdModel = require("sd-model");

var _objectiveRule = require("./objective-rule");

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/*mini-min rule*/


var MiniMinRule = /*#__PURE__*/function (_ObjectiveRule) {
  _inherits(MiniMinRule, _ObjectiveRule);

  var _super = _createSuper(MiniMinRule);

  function MiniMinRule(expressionEngine) {
    _classCallCheck(this, MiniMinRule);

    return _super.call(this, MiniMinRule.NAME, false, expressionEngine);
  }

  _createClass(MiniMinRule, [{
    key: "modifyChanceProbability",
    value: function modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount) {
      var _this = this;

      edges.forEach(function (e) {
        _this.clearComputedValues(e);

        _this.cValue(e, 'probability', _this.computedPayoff(e.childNode) > worstChildPayoff ? 0.0 : 1.0 / worstCount);
      });
    } //  payoff - parent edge payoff

  }, {
    key: "computeOptimal",
    value: function computeOptimal(node) {
      var _this2 = this;

      var payoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var probabilityToEnter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      this.cValue(node, 'optimal', true);

      if (node instanceof _sdModel.domain.TerminalNode) {
        this.cValue(node, 'probabilityToEnter', probabilityToEnter);
      }

      var optimalEdge = null;

      if (node instanceof _sdModel.domain.ChanceNode) {
        optimalEdge = _sdUtils.Utils.minBy(node.childEdges, function (e) {
          return _this2.computedPayoff(e.childNode);
        });
      }

      node.childEdges.forEach(function (e) {
        var isOptimal = false;

        if (optimalEdge) {
          isOptimal = _this2.computedPayoff(optimalEdge.childNode).equals(_this2.computedPayoff(e.childNode));
        } else isOptimal = !!(_this2.subtract(_this2.computedPayoff(node), payoff).equals(_this2.computedPayoff(e.childNode)) || !(node instanceof _sdModel.domain.DecisionNode));

        if (isOptimal) {
          _this2.cValue(e, 'optimal', true);

          _this2.computeOptimal(e.childNode, _this2.basePayoff(e), _this2.multiply(probabilityToEnter, _this2.cValue(e, 'probability')));
        } else {
          _this2.cValue(e, 'optimal', false);
        }
      });
    }
  }]);

  return MiniMinRule;
}(_objectiveRule.ObjectiveRule);

exports.MiniMinRule = MiniMinRule;
MiniMinRule.NAME = 'mini-min';

},{"./objective-rule":79,"sd-model":"sd-model","sd-utils":"sd-utils"}],78:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiCriteriaRule = void 0;

var _sdModel = require("sd-model");

var _objectiveRule = require("./objective-rule");

var _policy = require("../../policies/policy");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var MultiCriteriaRule = /*#__PURE__*/function (_ObjectiveRule) {
  _inherits(MultiCriteriaRule, _ObjectiveRule);

  var _super = _createSuper(MultiCriteriaRule);

  function MultiCriteriaRule(name, payoffCoeffs, expressionEngine) {
    var _this;

    _classCallCheck(this, MultiCriteriaRule);

    _this = _super.call(this, name, true, expressionEngine, true);
    _this.criterion1Weight = 1;
    _this.payoffCoeffs = [1, -1];
    _this.payoffCoeffs = payoffCoeffs;
    return _this;
  }

  _createClass(MultiCriteriaRule, [{
    key: "setDefaultCriterion1Weight",
    value: function setDefaultCriterion1Weight(criterion1Weight) {
      this.criterion1Weight = criterion1Weight;
    } // payoff - parent edge payoff, aggregatedPayoff - aggregated payoff along path

  }, {
    key: "computePayoff",
    value: function computePayoff(node) {
      var _this2 = this;

      var payoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0];
      var aggregatedPayoff = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0];
      var childrenPayoff = [0, 0];

      if (node.childEdges.length) {
        if (node instanceof _sdModel.domain.DecisionNode) {
          var selectedIndexes = [];
          var bestChild = -Infinity;
          node.childEdges.forEach(function (e, i) {
            var basePayoffs = [_this2.basePayoff(e, 0), _this2.basePayoff(e, 1)];

            var childPayoff = _this2.computePayoff(e.childNode, basePayoffs, [_this2.add(basePayoffs[0], aggregatedPayoff[0]), _this2.add(basePayoffs[1], aggregatedPayoff[1])]);

            var childCombinedPayoff = _this2.cValue(e.childNode, 'combinedPayoff');

            if (childCombinedPayoff > bestChild) {
              bestChild = childCombinedPayoff;
              selectedIndexes = [i];
            } else if (bestChild.equals(childCombinedPayoff)) {
              selectedIndexes.push(i);
            }
          });

          if (this.decisionPolicy) {
            selectedIndexes = [];

            var decision = _policy.Policy.getDecision(this.decisionPolicy, node);

            if (decision) {
              selectedIndexes = [decision.decisionValue];
            }
          }

          node.childEdges.forEach(function (e, i) {
            _this2.clearComputedValues(e);

            _this2.cValue(e, 'probability', selectedIndexes.indexOf(i) < 0 ? 0.0 : 1.0);
          });
        } else {
          node.childEdges.forEach(function (e) {
            var basePayoffs = [_this2.basePayoff(e, 0), _this2.basePayoff(e, 1)];

            _this2.computePayoff(e.childNode, basePayoffs, [_this2.add(basePayoffs[0], aggregatedPayoff[0]), _this2.add(basePayoffs[1], aggregatedPayoff[1])]);

            _this2.clearComputedValues(e);

            _this2.cValue(e, 'probability', _this2.baseProbability(e));
          });
        }

        var sumweight = 0;
        node.childEdges.forEach(function (e) {
          sumweight = _this2.add(sumweight, _this2.cValue(e, 'probability'));
        });

        if (sumweight > 0) {
          node.childEdges.forEach(function (e) {
            childrenPayoff.forEach(function (p, i) {
              var ep = _this2.cValue(e.childNode, 'payoff[' + i + ']');

              childrenPayoff[i] = _this2.add(p, _this2.multiply(_this2.cValue(e, 'probability'), ep).div(sumweight));
            });
          });
        }
      }

      payoff.forEach(function (p, i) {
        payoff[i] = _this2.add(p, childrenPayoff[i]);
      });
      this.clearComputedValues(node);

      if (node instanceof _sdModel.domain.TerminalNode) {
        this.cValue(node, 'aggregatedPayoff', aggregatedPayoff);
        this.cValue(node, 'probabilityToEnter', 0); //initial value
      } else {
        this.cValue(node, 'childrenPayoff', childrenPayoff);
      }

      this.cValue(node, 'combinedPayoff', this.computeCombinedPayoff(payoff));
      return this.cValue(node, 'payoff', payoff);
    }
  }, {
    key: "computeCombinedPayoff",
    value: function computeCombinedPayoff(payoff) {
      // [criterion 1 coeff]*[criterion 1]*[weight]+[criterion 2 coeff]*[criterion 2]
      if (this.criterion1Weight === Infinity) {
        return this.multiply(this.payoffCoeffs[0], payoff[0]);
      }

      return this.add(this.multiply(this.payoffCoeffs[0], this.multiply(this.criterion1Weight, payoff[0])), this.multiply(this.payoffCoeffs[1], payoff[1]));
    } //  combinedPayoff - parent edge combinedPayoff

  }, {
    key: "computeOptimal",
    value: function computeOptimal(node) {
      var _this3 = this;

      var combinedPayoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var probabilityToEnter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      this.cValue(node, 'optimal', true);

      if (node instanceof _sdModel.domain.TerminalNode) {
        this.cValue(node, 'probabilityToEnter', probabilityToEnter);
      }

      node.childEdges.forEach(function (e) {
        if (_this3.subtract(_this3.cValue(node, 'combinedPayoff'), combinedPayoff).equals(_this3.cValue(e.childNode, 'combinedPayoff')) || !(node instanceof _sdModel.domain.DecisionNode)) {
          _this3.cValue(e, 'optimal', true);

          _this3.computeOptimal(e.childNode, _this3.computeCombinedPayoff([_this3.basePayoff(e, 0), _this3.basePayoff(e, 1)]), _this3.multiply(probabilityToEnter, _this3.cValue(e, 'probability')));
        } else {
          _this3.cValue(e, 'optimal', false);
        }
      });
    }
  }]);

  return MultiCriteriaRule;
}(_objectiveRule.ObjectiveRule);

exports.MultiCriteriaRule = MultiCriteriaRule;

},{"../../policies/policy":87,"./objective-rule":79,"sd-model":"sd-model"}],79:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectiveRule = void 0;

var _sdExpressionEngine = require("sd-expression-engine");

var _sdModel = require("sd-model");

var _policy = require("../../policies/policy");

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/*Base class for objective rules*/


var ObjectiveRule = /*#__PURE__*/function () {
  function ObjectiveRule(name, maximization, expressionEngine) {
    var multiCriteria = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    _classCallCheck(this, ObjectiveRule);

    this.payoffIndex = 0;
    this.multiCriteria = false;
    this.name = name;
    this.maximization = maximization;
    this.expressionEngine = expressionEngine;
    this.multiCriteria = multiCriteria;
  }

  _createClass(ObjectiveRule, [{
    key: "setDecisionPolicy",
    value: function setDecisionPolicy(decisionPolicy) {
      this.decisionPolicy = decisionPolicy;
    }
  }, {
    key: "setPayoffIndex",
    value: function setPayoffIndex(payoffIndex) {
      this.payoffIndex = payoffIndex;
    }
  }, {
    key: "clearDecisionPolicy",
    value: function clearDecisionPolicy() {
      this.decisionPolicy = null;
    } // should return array of selected children indexes

  }, {
    key: "makeDecision",
    value: function makeDecision(decisionNode, childrenPayoffs) {
      var best;

      if (this.maximization) {
        best = this.max.apply(this, _toConsumableArray(childrenPayoffs));
      } else {
        best = this.min.apply(this, _toConsumableArray(childrenPayoffs));
      }

      var selectedIndexes = [];
      childrenPayoffs.forEach(function (p, i) {
        if (_sdExpressionEngine.ExpressionEngine.compare(best, p) == 0) {
          selectedIndexes.push(i);
        }
      });
      return selectedIndexes;
    }
  }, {
    key: "_makeDecision",
    value: function _makeDecision(decisionNode, childrenPayoffs) {
      if (this.decisionPolicy) {
        var decision = _policy.Policy.getDecision(this.decisionPolicy, decisionNode);

        if (decision) {
          return [decision.decisionValue];
        }

        return [];
      }

      return this.makeDecision(decisionNode, childrenPayoffs);
    } // extension point for changing computed probability of edges in a chance node

  }, {
    key: "modifyChanceProbability",
    value: function modifyChanceProbability(edges, bestChildPayoff, bestCount, worstChildPayoff, worstCount) {} // payoff - parent edge payoff, aggregatedPayoff - aggregated payoff along path

  }, {
    key: "computePayoff",
    value: function computePayoff(node) {
      var _this = this;

      var payoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var aggregatedPayoff = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var childrenPayoff = 0;

      if (node.childEdges.length) {
        if (node instanceof _sdModel.domain.DecisionNode) {
          var selectedIndexes = this._makeDecision(node, node.childEdges.map(function (e) {
            return _this.computePayoff(e.childNode, _this.basePayoff(e), _this.add(_this.basePayoff(e), aggregatedPayoff));
          }));

          node.childEdges.forEach(function (e, i) {
            _this.clearComputedValues(e);

            _this.cValue(e, 'probability', selectedIndexes.indexOf(i) < 0 ? 0.0 : 1.0);
          });
        } else {
          var bestChild = -Infinity;
          var bestCount = 1;
          var worstChild = Infinity;
          var worstCount = 1;
          node.childEdges.forEach(function (e) {
            var childPayoff = _this.computePayoff(e.childNode, _this.basePayoff(e), _this.add(_this.basePayoff(e), aggregatedPayoff));

            if (childPayoff < worstChild) {
              worstChild = childPayoff;
              worstCount = 1;
            } else if (childPayoff.equals(worstChild)) {
              worstCount++;
            }

            if (childPayoff > bestChild) {
              bestChild = childPayoff;
              bestCount = 1;
            } else if (childPayoff.equals(bestChild)) {
              bestCount++;
            }

            _this.clearComputedValues(e);

            _this.cValue(e, 'probability', _this.baseProbability(e));
          });
          this.modifyChanceProbability(node.childEdges, bestChild, bestCount, worstChild, worstCount);
        }

        var sumweight = 0;
        node.childEdges.forEach(function (e) {
          sumweight = _this.add(sumweight, _this.cValue(e, 'probability'));
        }); // console.log(payoff,node.childEdges,'sumweight',sumweight);

        if (sumweight > 0) {
          node.childEdges.forEach(function (e) {
            childrenPayoff = _this.add(childrenPayoff, _this.multiply(_this.cValue(e, 'probability'), _this.computedPayoff(e.childNode)).div(sumweight));
          });
        }
      }

      payoff = this.add(payoff, childrenPayoff);
      this.clearComputedValues(node);

      if (node instanceof _sdModel.domain.TerminalNode) {
        this.cValue(node, 'aggregatedPayoff' + '[' + this.payoffIndex + ']', aggregatedPayoff);
        this.cValue(node, 'probabilityToEnter', 0); //initial value
      } else {
        this.cValue(node, 'childrenPayoff' + '[' + this.payoffIndex + ']', childrenPayoff);
      }

      return this.computedPayoff(node, payoff);
    } // koloruje optymalne ścieżki

  }, {
    key: "computeOptimal",
    value: function computeOptimal(node) {
      throw 'computeOptimal function not implemented for rule: ' + this.name;
    }
    /* get or set computed payoff*/

  }, {
    key: "computedPayoff",
    value: function computedPayoff(node, value) {
      return this.cValue(node, 'payoff[' + this.payoffIndex + ']', value);
    }
    /*Get or set object's computed value for current rule*/

  }, {
    key: "cValue",
    value: function cValue(object, fieldPath, value) {
      // if(fieldPath.trim() === 'payoff'){
      //     fieldPath += '[' + this.payoffIndex + ']';
      // }
      return object.computedValue(this.name, fieldPath, value);
    }
  }, {
    key: "baseProbability",
    value: function baseProbability(edge) {
      return edge.computedBaseProbability();
    }
  }, {
    key: "basePayoff",
    value: function basePayoff(edge, payoffIndex) {
      return edge.computedBasePayoff(undefined, payoffIndex || this.payoffIndex);
    }
  }, {
    key: "clearComputedValues",
    value: function clearComputedValues(object) {
      object.clearComputedValues(this.name);
    }
  }, {
    key: "add",
    value: function add(a, b) {
      return _sdExpressionEngine.ExpressionEngine.add(a, b);
    }
  }, {
    key: "subtract",
    value: function subtract(a, b) {
      return _sdExpressionEngine.ExpressionEngine.subtract(a, b);
    }
  }, {
    key: "divide",
    value: function divide(a, b) {
      return _sdExpressionEngine.ExpressionEngine.divide(a, b);
    }
  }, {
    key: "multiply",
    value: function multiply(a, b) {
      return _sdExpressionEngine.ExpressionEngine.multiply(a, b);
    }
  }, {
    key: "max",
    value: function max() {
      return _sdExpressionEngine.ExpressionEngine.max.apply(_sdExpressionEngine.ExpressionEngine, arguments);
    }
  }, {
    key: "min",
    value: function min() {
      return _sdExpressionEngine.ExpressionEngine.min.apply(_sdExpressionEngine.ExpressionEngine, arguments);
    }
  }]);

  return ObjectiveRule;
}();

exports.ObjectiveRule = ObjectiveRule;

},{"../../policies/policy":87,"sd-expression-engine":"sd-expression-engine","sd-model":"sd-model"}],80:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FlipSubtree = void 0;

var _sdModel = require("sd-model");

var _sdExpressionEngine = require("sd-expression-engine");

var _sdUtils = require("sd-utils");

var _operation = require("./operation");

var _treeValidator = require("../validation/tree-validator");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
/*Subtree flipping operation*/


var FlipSubtree = /*#__PURE__*/function (_Operation) {
  _inherits(FlipSubtree, _Operation);

  var _super = _createSuper(FlipSubtree);

  function FlipSubtree(data, expressionEngine) {
    var _this;

    _classCallCheck(this, FlipSubtree);

    _this = _super.call(this, FlipSubtree.$NAME);
    _this.data = data;
    _this.expressionEngine = expressionEngine;
    _this.treeValidator = new _treeValidator.TreeValidator(expressionEngine);
    return _this;
  }

  _createClass(FlipSubtree, [{
    key: "isApplicable",
    value: function isApplicable(object) {
      return object instanceof _sdModel.domain.ChanceNode;
    }
  }, {
    key: "canPerform",
    value: function canPerform(node) {
      if (!this.isApplicable(node)) {
        return false;
      }

      if (!this.treeValidator.validate(this.data.getAllNodesInSubtree(node)).isValid()) {
        //check if the whole subtree is proper
        return false;
      }

      if (node.childEdges.length < 1) {
        return false;
      }

      var grandchildrenNumber = null;
      var grandchildrenEdgeLabels = [];
      var childrenEdgeLabelsSet = new Set();
      var grandchildrenEdgeLabelsSet;

      if (!node.childEdges.every(function (e) {
        var child = e.childNode;

        if (!(child instanceof _sdModel.domain.ChanceNode)) {
          return false;
        }

        if (childrenEdgeLabelsSet.has(e.name.trim())) {
          // edge labels should be unique
          return false;
        }

        childrenEdgeLabelsSet.add(e.name.trim());

        if (grandchildrenNumber === null) {
          grandchildrenNumber = child.childEdges.length;

          if (grandchildrenNumber < 1) {
            return false;
          }

          child.childEdges.forEach(function (ge) {
            grandchildrenEdgeLabels.push(ge.name.trim());
          });
          grandchildrenEdgeLabelsSet = new Set(grandchildrenEdgeLabels);

          if (grandchildrenEdgeLabelsSet.size !== grandchildrenEdgeLabels.length) {
            //grandchildren edge labels should be unique
            return false;
          }

          return true;
        }

        if (child.childEdges.length != grandchildrenNumber) {
          return false;
        }

        if (!child.childEdges.every(function (ge, i) {
          return grandchildrenEdgeLabels[i] === ge.name.trim();
        })) {
          return false;
        }

        return true;
      })) {
        return false;
      }

      return true;
    }
  }, {
    key: "perform",
    value: function perform(root) {
      var _this2 = this;

      var rootClone = this.data.cloneSubtree(root, true);
      var oldChildrenNumber = root.childEdges.length;
      var oldGrandChildrenNumber = root.childEdges[0].childNode.childEdges.length;
      var childrenNumber = oldGrandChildrenNumber;
      var grandChildrenNumber = oldChildrenNumber;
      var callbacksDisabled = this.data.callbacksDisabled;
      this.data.callbacksDisabled = true;
      var childX = root.childEdges[0].childNode.location.x;
      var topY = root.childEdges[0].childNode.childEdges[0].childNode.location.y;
      var bottomY = root.childEdges[oldChildrenNumber - 1].childNode.childEdges[oldGrandChildrenNumber - 1].childNode.location.y;
      var extentY = bottomY - topY;
      var stepY = extentY / (childrenNumber + 1);
      root.childEdges.slice().forEach(function (e) {
        return _this2.data.removeNode(e.childNode);
      });

      for (var i = 0; i < childrenNumber; i++) {
        var child = new _sdModel.domain.ChanceNode(new _sdModel.domain.Point(childX, topY + (i + 1) * stepY));
        var edge = this.data.addNode(child, root);
        edge.name = rootClone.childEdges[0].childNode.childEdges[i].name;
        edge.probability = 0;

        for (var j = 0; j < grandChildrenNumber; j++) {
          var grandChild = rootClone.childEdges[j].childNode.childEdges[i].childNode;
          var grandChildEdge = this.data.attachSubtree(grandChild, child);
          grandChildEdge.name = rootClone.childEdges[j].name;
          grandChildEdge.payoff = [_sdExpressionEngine.ExpressionEngine.add(rootClone.childEdges[j].computedBasePayoff(undefined, 0), rootClone.childEdges[j].childNode.childEdges[i].computedBasePayoff(undefined, 0)), _sdExpressionEngine.ExpressionEngine.add(rootClone.childEdges[j].computedBasePayoff(undefined, 1), rootClone.childEdges[j].childNode.childEdges[i].computedBasePayoff(undefined, 1))];
          grandChildEdge.probability = _sdExpressionEngine.ExpressionEngine.multiply(rootClone.childEdges[j].computedBaseProbability(), rootClone.childEdges[j].childNode.childEdges[i].computedBaseProbability());
          edge.probability = _sdExpressionEngine.ExpressionEngine.add(edge.probability, grandChildEdge.probability);
        }

        var divideGrandChildEdgeProbability = function divideGrandChildEdgeProbability(p) {
          return _sdExpressionEngine.ExpressionEngine.divide(p, edge.probability);
        };

        if (edge.probability.equals(0)) {
          var prob = _sdExpressionEngine.ExpressionEngine.divide(1, grandChildrenNumber);

          divideGrandChildEdgeProbability = function divideGrandChildEdgeProbability(p) {
            return prob;
          };
        }

        var probabilitySum = 0.0;
        child.childEdges.forEach(function (grandChildEdge) {
          grandChildEdge.probability = divideGrandChildEdgeProbability(grandChildEdge.probability);
          probabilitySum = _sdExpressionEngine.ExpressionEngine.add(probabilitySum, grandChildEdge.probability);
          grandChildEdge.probability = _this2.expressionEngine.serialize(grandChildEdge.probability);
        });

        this._normalizeProbabilitiesAfterFlip(child.childEdges, probabilitySum);

        edge.probability = this.expressionEngine.serialize(edge.probability);
      }

      this._normalizeProbabilitiesAfterFlip(root.childEdges);

      this.data.callbacksDisabled = callbacksDisabled;

      this.data._fireNodeAddedCallback();
    }
  }, {
    key: "_normalizeProbabilitiesAfterFlip",
    value: function _normalizeProbabilitiesAfterFlip(childEdges, probabilitySum) {
      var _this3 = this;

      if (!probabilitySum) {
        probabilitySum = 0.0;
        childEdges.forEach(function (e) {
          probabilitySum = _sdExpressionEngine.ExpressionEngine.add(probabilitySum, e.probability);
        });
      }

      if (!probabilitySum.equals(1)) {
        _sdUtils.log.info('Sum of the probabilities in child nodes is not equal to 1 : ', probabilitySum);

        var newProbabilitySum = 0.0;
        var cf = 1000000000000; //10^12

        var prec = 12;
        childEdges.forEach(function (e) {
          e.probability = parseInt(_sdExpressionEngine.ExpressionEngine.round(e.probability, prec) * cf);
          newProbabilitySum = newProbabilitySum + e.probability;
        });
        var rest = cf - newProbabilitySum;

        _sdUtils.log.info('Normalizing with rounding to precision: ' + prec, rest);

        childEdges[0].probability = _sdExpressionEngine.ExpressionEngine.add(rest, childEdges[0].probability);
        newProbabilitySum = 0.0;
        childEdges.forEach(function (e) {
          e.probability = _this3.expressionEngine.serialize(_sdExpressionEngine.ExpressionEngine.divide(parseInt(e.probability), cf));
        });
      }
    }
  }]);

  return FlipSubtree;
}(_operation.Operation);

exports.FlipSubtree = FlipSubtree;
FlipSubtree.$NAME = 'flipSubtree';

},{"../validation/tree-validator":91,"./operation":82,"sd-expression-engine":"sd-expression-engine","sd-model":"sd-model","sd-utils":"sd-utils"}],81:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobExecutingOperation = void 0;

var _operation = require("./operation");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var JobExecutingOperation = /*#__PURE__*/function (_Operation) {
  _inherits(JobExecutingOperation, _Operation);

  var _super = _createSuper(JobExecutingOperation); //Job name if this operation executes a job


  function JobExecutingOperation(name) {
    var _this;

    var jobName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, JobExecutingOperation);

    _this = _super.call(this, name);
    _this.name = name;
    _this.jobName = jobName;
    return _this;
  } //check if can perform operation for applicable object


  _createClass(JobExecutingOperation, [{
    key: "canPerform",
    value: function canPerform(object, params) {
      throw 'canPerform function not implemented for operation: ' + this.name;
    } //Performed in job by operations manager

  }, {
    key: "perform",
    value: function perform(object, params) {}
  }, {
    key: "postProcess",
    value: function postProcess(object, params) {}
  }]);

  return JobExecutingOperation;
}(_operation.Operation);

exports.JobExecutingOperation = JobExecutingOperation;

},{"./operation":82}],82:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Operation = void 0;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/*Base class for complex operations on tree structure*/


var Operation = /*#__PURE__*/function () {
  function Operation(name) {
    _classCallCheck(this, Operation);

    this.name = name;
  } //check if operation is potentially applicable for object


  _createClass(Operation, [{
    key: "isApplicable",
    value: function isApplicable(object) {
      throw 'isApplicable function not implemented for operation: ' + this.name;
    } //check if can perform operation for applicable object

  }, {
    key: "canPerform",
    value: function canPerform(object) {
      throw 'canPerform function not implemented for operation: ' + this.name;
    }
  }, {
    key: "perform",
    value: function perform(object, params) {
      throw 'perform function not implemented for operation: ' + this.name;
    }
  }]);

  return Operation;
}();

exports.Operation = Operation;

},{}],83:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OperationsManager = void 0;

var _flipSubtree = require("./flip-subtree");

var _payoffsTransformation = require("./payoffs-transformation.js");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var OperationsManager = /*#__PURE__*/function () {
  function OperationsManager(data, expressionEngine, jobsManger) {
    _classCallCheck(this, OperationsManager);

    this.operations = [];
    this.operationByName = {};
    this.data = data;
    this.expressionEngine = expressionEngine;
    this.jobsManger = jobsManger;
    this.registerOperation(new _flipSubtree.FlipSubtree(data, expressionEngine));
    this.registerOperation(new _payoffsTransformation.PayoffsTransformation(data, expressionEngine));
  }

  _createClass(OperationsManager, [{
    key: "registerOperation",
    value: function registerOperation(operation) {
      this.operations.push(operation);
      this.operationByName[operation.name] = operation;
    }
  }, {
    key: "getOperationByName",
    value: function getOperationByName(name) {
      return this.operationByName[name];
    }
  }, {
    key: "operationsForObject",
    value: function operationsForObject(object) {
      return this.operations.filter(function (op) {
        return op.isApplicable(object);
      });
    }
  }, {
    key: "setData",
    value: function setData(data) {
      this.data = data;
      this.operations.forEach(function (o) {
        return o.data = data;
      });
    }
  }, {
    key: "performOperation",
    value: function performOperation(object, operationName, jobParamsValues) {
      var _this = this;

      var operation = this.getOperationByName(operationName);

      if (!operation.jobName) {
        return Promise.resolve(operation.perform(object, jobParamsValues));
      }

      jobParamsValues['objectId'] = object.id;
      return this.jobsManger.run(operation.jobName, jobParamsValues, this.data, false).then(function (jobExecution) {
        var d = jobExecution.getData();
        _this.data.nodes = d.nodes;
        _this.data.edges = d.edges;
        _this.data.code = d.code;
        operation.postProcess(object, jobParamsValues);
        return true;
      });
    }
  }]);

  return OperationsManager;
}();

exports.OperationsManager = OperationsManager;

},{"./flip-subtree":80,"./payoffs-transformation.js":84}],84:[function(require,module,exports){
"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PayoffsTransformation = void 0;

var _sdModel = require("sd-model");

var _treeValidator = require("../validation/tree-validator");

var _jobExecutingOperation = require("./job-executing-operation");

var _payoffsTransformationJob = require("../jobs/configurations/payoffs-transformation/payoffs-transformation-job");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var PayoffsTransformation = /*#__PURE__*/function (_JobExecutingOperatio) {
  _inherits(PayoffsTransformation, _JobExecutingOperatio);

  var _super = _createSuper(PayoffsTransformation);

  function PayoffsTransformation(data, expressionEngine) {
    var _this;

    _classCallCheck(this, PayoffsTransformation);

    _this = _super.call(this, PayoffsTransformation.$NAME, _payoffsTransformationJob.PayoffsTransformationJob.$NAME);
    _this.data = data;
    _this.expressionEngine = expressionEngine;
    _this.treeValidator = new _treeValidator.TreeValidator(expressionEngine);
    return _this;
  }

  _createClass(PayoffsTransformation, [{
    key: "isApplicable",
    value: function isApplicable(object) {
      return object instanceof _sdModel.domain.ChanceNode || object instanceof _sdModel.domain.DecisionNode;
    }
  }, {
    key: "canPerform",
    value: function canPerform(node) {
      if (!this.isApplicable(node)) {
        return false;
      }

      if (!this.treeValidator.validate(this.data.getAllNodesInSubtree(node)).isValid()) {
        //check if the whole subtree is proper
        return false;
      }

      return !node.$parent && node.childEdges.length > 0;
    }
  }]);

  return PayoffsTransformation;
}(_jobExecutingOperation.JobExecutingOperation);

exports.PayoffsTransformation = PayoffsTransformation;
PayoffsTransformation.$NAME = 'payoffsTransformation';

},{"../jobs/configurations/payoffs-transformation/payoffs-transformation-job":12,"../validation/tree-validator":91,"./job-executing-operation":81,"sd-model":"sd-model"}],85:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Decision = void 0;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var Decision = /*#__PURE__*/function () {
  //index of  selected edge
  function Decision(node, decisionValue) {
    _classCallCheck(this, Decision);

    this.children = [];
    this.node = node;
    this.decisionValue = decisionValue;
    this.key = Decision.generateKey(this);
  }

  _createClass(Decision, [{
    key: "addDecision",
    value: function addDecision(node, decisionValue) {
      var decision = new Decision(node, decisionValue);
      this.children.push(decision);
      this.key = Decision.generateKey(this);
      return decision;
    }
  }, {
    key: "getDecision",
    value: function getDecision(decisionNode) {
      return Decision.getDecision(this, decisionNode);
    }
  }, {
    key: "toDecisionString",
    value: function toDecisionString() {
      var indent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return Decision.toDecisionString(this, indent);
    }
  }], [{
    key: "generateKey",
    value: function generateKey(decision) {
      var keyProperty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';
      var e = decision.node.childEdges[decision.decisionValue];
      var key = decision.node[keyProperty] + ":" + (e[keyProperty] ? e[keyProperty] : decision.decisionValue + 1);
      return key.replace(/\n/g, ' ');
    }
  }, {
    key: "getDecision",
    value: function getDecision(decision, decisionNode) {
      if (decision.node === decisionNode || decision.node.id === decisionNode.id) {
        return decision;
      }

      for (var i = 0; i < decision.children.length; i++) {
        var d = Decision.getDecision(decision.children[i], decisionNode);

        if (d) {
          return d;
        }
      }
    }
  }, {
    key: "toDecisionString",
    value: function toDecisionString(decision) {
      var extended = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var keyProperty = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'name';
      var indent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
      var res = Decision.generateKey(decision, keyProperty);
      var childrenRes = "";
      decision.children.forEach(function (d) {
        if (childrenRes) {
          if (extended) {
            childrenRes += '\n' + indent;
          } else {
            childrenRes += ", ";
          }
        }

        childrenRes += Decision.toDecisionString(d, extended, keyProperty, indent + '\t');
      });

      if (decision.children.length) {
        if (extended) {
          childrenRes = '\n' + indent + childrenRes;
        } else {
          childrenRes = " - (" + childrenRes + ")";
        }
      }

      return res + childrenRes;
    }
  }]);

  return Decision;
}();

exports.Decision = Decision;

},{}],86:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PoliciesCollector = void 0;

var _policy = require("./policy");

var _sdModel = require("sd-model");

var _sdUtils = require("sd-utils");

var _decision = require("./decision");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var PoliciesCollector = /*#__PURE__*/function () {
  function PoliciesCollector(root, optimalForRuleName) {
    var _this = this;

    _classCallCheck(this, PoliciesCollector);

    this.policies = [];
    this.ruleName = false;
    this.ruleName = optimalForRuleName;
    this.collect(root).forEach(function (decisions, i) {
      _this.policies.push(new _policy.Policy("#" + (i + 1), decisions));
    });

    if (this.policies.length === 1) {
      this.policies[0].id = "default";
    }
  }

  _createClass(PoliciesCollector, [{
    key: "collect",
    value: function collect(root) {
      var _this2 = this;

      var nodeQueue = [root];
      var node;
      var decisionNodes = [];

      while (nodeQueue.length) {
        node = nodeQueue.shift();

        if (this.ruleName && !node.computedValue(this.ruleName, 'optimal')) {
          continue;
        }

        if (node instanceof _sdModel.domain.DecisionNode) {
          decisionNodes.push(node);
          continue;
        }

        node.childEdges.forEach(function (edge, i) {
          nodeQueue.push(edge.childNode);
        });
      }

      return _sdUtils.Utils.cartesianProductOf(decisionNodes.map(function (decisionNode) {
        var decisions = [];
        decisionNode.childEdges.forEach(function (edge, i) {
          if (_this2.ruleName && !edge.computedValue(_this2.ruleName, 'optimal')) {
            return;
          }

          var childDecisions = _this2.collect(edge.childNode); //all possible child decisions (cartesian)


          childDecisions.forEach(function (cd) {
            var decision = new _decision.Decision(decisionNode, i);
            decisions.push(decision);
            decision.children = cd;
          });
        });
        return decisions;
      }));
    }
  }]);

  return PoliciesCollector;
}();

exports.PoliciesCollector = PoliciesCollector;

},{"./decision":85,"./policy":87,"sd-model":"sd-model","sd-utils":"sd-utils"}],87:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Policy = void 0;

var _decision = require("./decision");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var Policy = /*#__PURE__*/function () {
  function Policy(id, decisions) {
    _classCallCheck(this, Policy);

    this.decisions = [];
    this.id = id;
    this.decisions = decisions || [];
    this.key = Policy.generateKey(this);
  }

  _createClass(Policy, [{
    key: "addDecision",
    value: function addDecision(node, decisionValue) {
      var decision = new _decision.Decision(node, decisionValue);
      this.decisions.push(decision);
      this.key = Policy.generateKey(this);
      return decision;
    }
  }, {
    key: "equals",
    value: function equals(policy) {
      var ignoreId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (this.key != policy.key) {
        return false;
      }

      return ignoreId || this.id === policy.id;
    }
  }, {
    key: "getDecision",
    value: function getDecision(decisionNode) {
      return Policy.getDecision(this, decisionNode);
    }
  }, {
    key: "toPolicyString",
    value: function toPolicyString() {
      var indent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return Policy.toPolicyString(this, indent);
    }
  }], [{
    key: "generateKey",
    value: function generateKey(policy) {
      var key = "";
      policy.decisions.forEach(function (d) {
        return key += (key ? "&" : "") + d.key;
      });
      return key;
    }
  }, {
    key: "getDecision",
    value: function getDecision(policy, decisionNode) {
      for (var i = 0; i < policy.decisions.length; i++) {
        var decision = _decision.Decision.getDecision(policy.decisions[i], decisionNode);

        if (decision) {
          return decision;
        }
      }

      return null;
    }
  }, {
    key: "toPolicyString",
    value: function toPolicyString(policy) {
      var extended = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var prependId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var res = "";
      policy.decisions.forEach(function (d) {
        if (res) {
          if (extended) {
            res += "\n";
          } else {
            res += ", ";
          }
        }

        res += _decision.Decision.toDecisionString(d, extended, 'name', '\t');
      });

      if (prependId && policy.id !== undefined) {
        return policy.id + " " + res;
      }

      return res;
    }
  }]);

  return Policy;
}();

exports.Policy = Policy;

},{"./decision":85}],88:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.McdmWeightValueValidator = void 0;

var _sdExpressionEngine = require("sd-expression-engine");

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var McdmWeightValueValidator = /*#__PURE__*/function () {
  function McdmWeightValueValidator(additionalValidator) {
    _classCallCheck(this, McdmWeightValueValidator);

    this.additionalValidator = null;
    this.additionalValidator = additionalValidator;
  }

  _createClass(McdmWeightValueValidator, [{
    key: "validate",
    value: function validate(value) {
      if (value === null || value === undefined) {
        return false;
      }

      var parsed = parseFloat(value);

      if (parsed !== Infinity && !_sdExpressionEngine.ExpressionEngine.validate(value, {}, false)) {
        return false;
      }

      value = _sdExpressionEngine.ExpressionEngine.toNumber(value);
      var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991; // Number.MAX_SAFE_INTEGER is undefined in IE

      if (_sdExpressionEngine.ExpressionEngine.compare(value, 0) < 0 || value !== Infinity && _sdExpressionEngine.ExpressionEngine.compare(value, maxSafeInteger) > 0) {
        return false;
      }

      if (this.additionalValidator) {
        return this.additionalValidator(_sdExpressionEngine.ExpressionEngine.toNumber(value));
      }

      return true;
    }
  }]);

  return McdmWeightValueValidator;
}();

exports.McdmWeightValueValidator = McdmWeightValueValidator;

},{"sd-expression-engine":"sd-expression-engine","sd-utils":"sd-utils"}],89:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PayoffValueValidator = void 0;

var _sdExpressionEngine = require("sd-expression-engine");

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/*Computed base value validator*/


var PayoffValueValidator = /*#__PURE__*/function () {
  function PayoffValueValidator(expressionEngine) {
    _classCallCheck(this, PayoffValueValidator);

    this.expressionEngine = expressionEngine;
  }

  _createClass(PayoffValueValidator, [{
    key: "validate",
    value: function validate(value) {
      if (value === null || value === undefined) {
        return false;
      }

      value = _sdExpressionEngine.ExpressionEngine.toNumber(value);
      var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991; // Number.MAX_SAFE_INTEGER in undefined in IE

      return _sdExpressionEngine.ExpressionEngine.compare(value, -maxSafeInteger) >= 0 && _sdExpressionEngine.ExpressionEngine.compare(value, maxSafeInteger) <= 0;
    }
  }]);

  return PayoffValueValidator;
}();

exports.PayoffValueValidator = PayoffValueValidator;

},{"sd-expression-engine":"sd-expression-engine","sd-utils":"sd-utils"}],90:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProbabilityValueValidator = void 0;

var _sdExpressionEngine = require("sd-expression-engine");

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/*Computed base value validator*/


var ProbabilityValueValidator = /*#__PURE__*/function () {
  function ProbabilityValueValidator(expressionEngine) {
    _classCallCheck(this, ProbabilityValueValidator);

    this.expressionEngine = expressionEngine;
  }

  _createClass(ProbabilityValueValidator, [{
    key: "validate",
    value: function validate(value, edge) {
      if (value === null || value === undefined) {
        return false;
      }

      var value = _sdExpressionEngine.ExpressionEngine.toNumber(value);

      return value.compare(0) >= 0 && value.compare(1) <= 0;
    }
  }]);

  return ProbabilityValueValidator;
}();

exports.ProbabilityValueValidator = ProbabilityValueValidator;

},{"sd-expression-engine":"sd-expression-engine","sd-utils":"sd-utils"}],91:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeValidator = void 0;

var _sdModel = require("sd-model");

var _sdExpressionEngine = require("sd-expression-engine");

var _probabilityValueValidator = require("./probability-value-validator");

var _payoffValueValidator = require("./payoff-value-validator");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var TreeValidator = /*#__PURE__*/function () {
  function TreeValidator(expressionEngine) {
    _classCallCheck(this, TreeValidator);

    this.expressionEngine = expressionEngine;
    this.probabilityValueValidator = new _probabilityValueValidator.ProbabilityValueValidator(expressionEngine);
    this.payoffValueValidator = new _payoffValueValidator.PayoffValueValidator(expressionEngine);
  }

  _createClass(TreeValidator, [{
    key: "validate",
    value: function validate(nodes) {
      var _this = this;

      var validationResult = new _sdModel.ValidationResult();
      nodes.forEach(function (n) {
        _this.validateNode(n, validationResult);
      });
      return validationResult;
    }
  }, {
    key: "validateNode",
    value: function validateNode(node) {
      var _this2 = this;

      var validationResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _sdModel.ValidationResult();

      if (node instanceof _sdModel.domain.TerminalNode) {
        return;
      }

      if (!node.childEdges.length) {
        validationResult.addError('incompletePath', node);
      }

      var probabilitySum = _sdExpressionEngine.ExpressionEngine.toNumber(0);

      var withHash = false;
      node.childEdges.forEach(function (e, i) {
        e.setValueValidity('probability', true);

        if (node instanceof _sdModel.domain.ChanceNode) {
          var probability = e.computedBaseProbability();

          if (!_this2.probabilityValueValidator.validate(probability)) {
            if (!_sdExpressionEngine.ExpressionEngine.isHash(e.probability)) {
              validationResult.addError({
                name: 'invalidProbability',
                data: {
                  'number': i + 1
                }
              }, node);
              e.setValueValidity('probability', false);
            }
          } else {
            probabilitySum = _sdExpressionEngine.ExpressionEngine.add(probabilitySum, probability);
          }
        }

        e.payoff.forEach(function (rawPayoff, payoffIndex) {
          var path = 'payoff[' + payoffIndex + ']';
          e.setValueValidity(path, true);
          var payoff = e.computedBasePayoff(undefined, payoffIndex);

          if (!_this2.payoffValueValidator.validate(payoff)) {
            validationResult.addError({
              name: 'invalidPayoff',
              data: {
                'number': i + 1
              }
            }, node);
            e.setValueValidity(path, false);
          }
        });
      });

      if (node instanceof _sdModel.domain.ChanceNode) {
        if (isNaN(probabilitySum) || !probabilitySum.equals(1)) {
          validationResult.addError('probabilityDoNotSumUpTo1', node);
        }
      }

      return validationResult;
    }
  }]);

  return TreeValidator;
}();

exports.TreeValidator = TreeValidator;

},{"./payoff-value-validator":89,"./probability-value-validator":90,"sd-expression-engine":"sd-expression-engine","sd-model":"sd-model"}],"sd-computations":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _index = require("./src/index");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _index[key];
    }
  });
});

},{"./src/index":7}]},{},[])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
